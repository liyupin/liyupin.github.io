<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>python100day-31-35</title>
    <link href="/2022/08/18/python100day-31-35/"/>
    <url>/2022/08/18/python100day-31-35/</url>
    
    <content type="html"><![CDATA[<h2 id="玩转Linux操作系统"><a href="#玩转Linux操作系统" class="headerlink" title="玩转Linux操作系统"></a>玩转Linux操作系统</h2><blockquote><p><strong>说明</strong>：本文中对Linux命令的讲解都是基于名为CentOS的Linux发行版本，我自己使用的是阿里云服务器，系统版本为CentOS Linux release 7.6.1810。不同的Linux发行版本在Shell命令和工具程序上会有一些差别，但是这些差别是很小的。</p></blockquote><h3 id="操作系统发展史"><a href="#操作系统发展史" class="headerlink" title="操作系统发展史"></a>操作系统发展史</h3><p>只有硬件没有软件的计算机系统被称之为“裸机”，我们很难用“裸机”来完成计算机日常的工作（如存储和运算），所以必须用特定的软件来控制硬件的工作。最靠近计算机硬件的软件是系统软件，其中最为重要的就是“操作系统”。“操作系统”是控制和管理整个计算机硬件和软件资源、实现资源分配和任务调配、为系统用户以及其他软件提供接口和环境的程序的集合。</p><h4 id="没有操作系统（手工操作）"><a href="#没有操作系统（手工操作）" class="headerlink" title="没有操作系统（手工操作）"></a>没有操作系统（手工操作）</h4><p>在计算机诞生之初没有操作系统的年代，人们先把程序纸带（或卡片）装上计算机，然后启动输入机把程序送入计算机，接着通过控制台开关启动程序运行。当程序执行完毕，打印机输出计算的结果，用户卸下并取走纸带（或卡片）。第二个用户上机，重复同样的步骤。在整个过程中用户独占机器，CPU等待手工操作，资源利用率极低。</p><h4 id="批处理系统"><a href="#批处理系统" class="headerlink" title="批处理系统"></a>批处理系统</h4><p>首先启动计算机上的一个监督程序，在监督程序的控制下，计算机能够自动的、成批的处理一个或多个用户的作业。完成一批作业后，监督程度又从输入机读取作业存入磁带机。按照上面的步骤重复处理任务。监督程序不停的处理各个作业，实现了作业的自动转接，减少了作业的建立时间和手工操作时间，提高了计算机资源的利用率。 批处理系统又可以分为单道批处理系统、多道批处理系统、联机批处理系统、脱机批处理系统。</p><h4 id="分时系统和实时系统"><a href="#分时系统和实时系统" class="headerlink" title="分时系统和实时系统"></a>分时系统和实时系统</h4><p>分时系统是把处理器的运行时间分成很短的时间片，按时间片轮流把处理机分配给各联机作业使用。 若某个作业在分配给它的时间片内不能完成其计算，则该作业暂时中断，把处理机让给另一作业使用，等待下一轮调度时再继续其运行。由于计算机速度很快，作业运行轮转得很快，给每个用户的感觉是他独占了一台计算机。而每个用户可以通过自己的终端向系统发出各种操作控制命令，在充分的人机交互情况下，完成作业的运行。为了解决分时系统不能及时响应用户指令的情况，又出现了能够在在严格的时间范围内完成事件处理，及时响应随机外部事件的实时系统。</p><h4 id="通用操作系统"><a href="#通用操作系统" class="headerlink" title="通用操作系统"></a>通用操作系统</h4><ol><li><p>1960s：IBM的System&#x2F;360系列的机器有了统一的操作系统OS&#x2F;360。</p></li><li><p>1965年：AT&amp;T的贝尔实验室加入GE和MIT的合作计划开始开发MULTICS。</p></li><li><p>1969年：MULTICS项目失败，Ken Tompson赋闲在家，为了玩“Space Travel”游戏用汇编语言在当时已经被淘汰的PDP-7上开发了Unics。</p><blockquote><p>注：很难想象，Unix这么伟大的系统，居然是一个赋闲在家的程序员（关键是老婆回娘家还带上了孩子）在一台被淘汰的设备上为了玩游戏开发出来的。</p></blockquote></li><li><p>1970年~1971年：Ken Tompson和Dennis Ritchie用B语言在PDP-11上重写了Unics，并在Brian Kernighan的建议下将其更名为Unix。</p><p><img src="/./res/ken-and-dennis-pdp-11.png"></p></li><li><p>1972年~1973年：Dennis Ritchie发明了C语言来取代可移植性较差的B语言，并开启了用C语言重写Unix的工作。</p></li><li><p>1974年：Unix推出了里程碑意义的第5版，几乎完全用C语言来实现。</p></li><li><p>1979年：从Unix第7版开始，AT&amp;T发布新的使用条款，将Unix私有化。</p></li><li><p>1987年：Andrew S. Tanenbaum教授为了能在课堂上为学生讲解操作系统运作的细节，决定在不使用任何AT&amp;T的源代码前提下，自行开发与Unix兼容的操作系统以避免版权上的争议，该系统被命名为Minix。</p><p><img src="/./res/andrew.jpg"></p></li><li><p>1991年：Linus Torvalds就读于芬兰赫尔辛基大学期间，尝试在Minix上做一些开发工作，但因为Minix只是作为教学用途的操作系统，功能并不强大，为了方便在学校的新闻组和邮件系统中读写和下载文件，Linus编写了磁盘驱动程序和文件系统，这些东西形成了Linux系统内核的雏形。</p><p><img src="/./res/linus.png"></p></li></ol><p>下图是Unix操作系统家族的图谱。</p><p><img src="/./res/history-of-unix.png"></p><h3 id="Linux概述"><a href="#Linux概述" class="headerlink" title="Linux概述"></a>Linux概述</h3><p>Linux是一个通用操作系统。一个操作系统要负责任务调度、内存分配、处理外围设备I&#x2F;O等操作。操作系统通常由内核（运行其他程序，管理像磁盘、打印机等硬件设备的核心程序）和系统程序（设备驱动、底层库、shell、服务程序等）两部分组成。</p><p>Linux内核是芬兰人Linus Torvalds开发的，于1991年9月发布。而Linux操作系统作为Internet时代的产物，它是由全世界许多开发者共同合作开发的，是一个自由的操作系统（注意自由和免费并不是同一个概念，想了解二者的差别可以<a href="https://www.debian.org/intro/free">点击这里</a>）。</p><h3 id="Linux系统优点"><a href="#Linux系统优点" class="headerlink" title="Linux系统优点"></a>Linux系统优点</h3><ol><li>通用操作系统，不跟特定的硬件绑定。</li><li>用C语言编写，可移植性强，有内核编程接口。</li><li>支持多用户和多任务，支持安全的分层文件系统。</li><li>大量的实用程序，完善的网络功能以及强大的支持文档。</li><li>可靠的安全性和良好的稳定性，对开发者更友好。</li></ol><h3 id="Linux系统发行版本"><a href="#Linux系统发行版本" class="headerlink" title="Linux系统发行版本"></a>Linux系统发行版本</h3><ol><li><a href="https://www.redhat.com/en">Redhat</a></li><li><a href="https://www.ubuntu.com/">Ubuntu</a></li><li><a href="https://www.centos.org/">CentOS</a></li><li><a href="https://getfedora.org/">Fedora</a></li><li><a href="https://www.debian.org/">Debian</a></li><li><a href="https://www.opensuse.org/">openSUSE</a></li></ol><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><p>Linux系统的命令通常都是如下所示的格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">命令名称 [命名参数] [命令对象]<br></code></pre></td></tr></table></figure><ol><li><p>获取登录信息 - <strong>w</strong> &#x2F; <strong>who</strong> &#x2F; <strong>last</strong>&#x2F; <strong>lastb</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# w<br> 23:31:16 up 12:16,  2 users,  load average: 0.00, 0.01, 0.05<br>USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT<br>root     pts/0    182.139.66.250   23:03    4.00s  0.02s  0.00s w<br>jackfrue pts/1    182.139.66.250   23:26    3:56   0.00s  0.00s -bash<br>[root ~]# who<br>root     pts/0        2018-04-12 23:03 (182.139.66.250)<br>jackfrued pts/1        2018-04-12 23:26 (182.139.66.250)<br>[root ~]# who am i<br>root     pts/0        2018-04-12 23:03 (182.139.66.250)<br>[root ~]# who mom likes<br>root     pts/0        2018-04-12 23:03 (182.139.66.250)<br>[root ~]# last<br>root     pts/0        117.136.63.184   Sun May 26 18:57   still logged in   <br>reboot   system boot  3.10.0-957.10.1. Mon May 27 02:52 - 19:10  (-7:-42)   <br>root     pts/4        117.136.63.184   Sun May 26 18:51 - crash  (08:01)    <br>root     pts/4        117.136.63.184   Sun May 26 18:49 - 18:49  (00:00)    <br>root     pts/3        117.136.63.183   Sun May 26 18:35 - crash  (08:17)    <br>root     pts/2        117.136.63.183   Sun May 26 18:34 - crash  (08:17)    <br>root     pts/0        117.136.63.183   Sun May 26 18:10 - crash  (08:42)    <br></code></pre></td></tr></table></figure></li><li><p>查看自己使用的Shell - <strong>ps</strong>。</p><p>Shell也被称为“壳”或“壳程序”，它是用户与操作系统内核交流的翻译官，简单的说就是人与计算机交互的界面和接口。目前很多Linux系统默认的Shell都是bash（<u>B</u>ourne <u>A</u>gain <u>SH</u>ell），因为它可以使用tab键进行命令和路径补全、可以保存历史命令、可以方便的配置环境变量以及执行批处理操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# ps<br>  PID TTY          TIME CMD<br> 3531 pts/0    00:00:00 bash<br> 3553 pts/0    00:00:00 ps<br></code></pre></td></tr></table></figure></li><li><p>查看命令的说明和位置 - <strong>whatis</strong> &#x2F; <strong>which</strong> &#x2F; <strong>whereis</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# whatis ps<br>ps (1)        - report a snapshot of the current processes.<br>[root ~]# whatis python<br>python (1)    - an interpreted, interactive, object-oriented programming language<br>[root ~]# whereis ps<br>ps: /usr/bin/ps /usr/share/man/man1/ps.1.gz<br>[root ~]# whereis python<br>python: /usr/bin/python /usr/bin/python2.7 /usr/lib/python2.7 /usr/lib64/python2.7 /etc/python /usr/include/python2.7 /usr/share/man/man1/python.1.gz<br>[root ~]# which ps<br>/usr/bin/ps<br>[root ~]# which python<br>/usr/bin/python<br></code></pre></td></tr></table></figure></li><li><p>清除屏幕上显示的内容 - <strong>clear</strong>。</p></li><li><p>查看帮助文档 - <strong>man</strong> &#x2F; <strong>info</strong> &#x2F; <strong>–help</strong> &#x2F; <strong>apropos</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# ps --help<br>Usage:<br> ps [options]<br> Try &#x27;ps --help &lt;simple|list|output|threads|misc|all&gt;&#x27;<br>  or &#x27;ps --help &lt;s|l|o|t|m|a&gt;&#x27;<br> for additional help text.<br>For more details see ps(1).<br>[root@izwz97tbgo9lkabnat2lo8z ~]# man ps<br>PS(1)                                User Commands                                PS(1)<br>NAME<br>       ps - report a snapshot of the current processes.<br>SYNOPSIS<br>       ps [options]<br>DESCRIPTION<br>...<br></code></pre></td></tr></table></figure></li><li><p>查看系统和主机名 - <strong>uname</strong> &#x2F; <strong>hostname</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# uname<br>Linux<br>[root@izwz97tbgo9lkabnat2lo8z ~]# hostname<br>izwz97tbgo9lkabnat2lo8z<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat /etc/centos-release<br>CentOS Linux release 7.6.1810 (Core)<br></code></pre></td></tr></table></figure><blockquote><p>说明：<code>cat</code>是连接文件内容并打印到标准输出的命令，后面会讲到该命令；<code>/etc</code>是Linux系统上的一个非常重要的目录，它保存了很多的配置文件；<code>centos-release</code>是该目录下的一个文件，因为我自己使用的Linux发行版本是CentOS 7.6，因此这里会有一个这样的文件。</p></blockquote></li><li><p>时间和日期 - <strong>date</strong> &#x2F; <strong>cal</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# date<br>Wed Jun 20 12:53:19 CST 2018<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# cal<br>      June 2018<br>Su Mo Tu We Th Fr Sa<br>                1  2<br> 3  4  5  6  7  8  9<br>10 11 12 13 14 15 16<br>17 18 19 20 21 22 23<br>24 25 26 27 28 29 30<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# cal 5 2017<br>      May 2017<br>Su Mo Tu We Th Fr Sa<br>    1  2  3  4  5  6<br> 7  8  9 10 11 12 13<br>14 15 16 17 18 19 20<br>21 22 23 24 25 26 27<br>28 29 30 31<br></code></pre></td></tr></table></figure></li><li><p>重启和关机 - <strong>reboot</strong> &#x2F; <strong>shutdown</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# shutdown -h +5<br>Shutdown scheduled for Sun 2019-05-26 19:34:27 CST, use &#x27;shutdown -c&#x27; to cancel.<br>[root ~]# <br>Broadcast message from root (Sun 2019-05-26 19:29:27 CST):<br><br>The system is going down for power-off at Sun 2019-05-26 19:34:27 CST!<br>[root ~]# shutdown -c<br><br>Broadcast message from root (Sun 2019-05-26 19:30:22 CST):<br><br>The system shutdown has been cancelled at Sun 2019-05-26 19:31:22 CST!<br>[root ~]# shutdown -r 23:58<br>Shutdown scheduled for Sun 2019-05-26 23:58:00 CST, use &#x27;shutdown -c&#x27; to cancel.<br>[root ~]# shutdown -c<br><br>Broadcast message from root (Sun 2019-05-26 19:31:06 CST):<br><br>The system shutdown has been cancelled at Sun 2019-05-26 19:32:06 CST!<br></code></pre></td></tr></table></figure><blockquote><p>说明：在执行<code>shutdown</code>命令时会向登录系统的用户发出警告，可以在命令后面跟上警告消息来替换默认的警告消息，也可以在<code>-h</code>参数后通过<code>now</code>来表示立刻关机。</p></blockquote></li><li><p>退出登录 -  <strong>exit</strong> &#x2F; <strong>logout</strong>。</p></li><li><p>查看历史命令 - <strong>history</strong>。</p></li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# history<br>...<br>452  ls<br>453  cd Python-3.6.5/<br>454  clear<br>455  history<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# !454<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：查看到历史命令之后，可以用<code>!历史命令编号</code>来重新执行该命令；通过<code>history -c</code>可以清除历史命令。</p></blockquote><h3 id="实用程序"><a href="#实用程序" class="headerlink" title="实用程序"></a>实用程序</h3><h4 id="文件和文件夹操作"><a href="#文件和文件夹操作" class="headerlink" title="文件和文件夹操作"></a>文件和文件夹操作</h4><ol><li><p>创建&#x2F;删除空目录 - <strong>mkdir</strong> &#x2F; <strong>rmdir</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# mkdir abc<br>[root ~]# mkdir -p xyz/abc<br>[root ~]# rmdir abc<br></code></pre></td></tr></table></figure></li><li><p>创建&#x2F;删除文件 - <strong>touch</strong> &#x2F; <strong>rm</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# touch readme.txt<br>[root ~]# touch error.txt<br>[root ~]# rm error.txt<br>rm: remove regular empty file ‘error.txt’? y<br>[root ~]# rm -rf xyz<br></code></pre></td></tr></table></figure><ul><li><code>touch</code>命令用于创建空白文件或修改文件时间。在Linux系统中一个文件有三种时间：<ul><li>更改内容的时间 - mtime。</li><li>更改权限的时间 - ctime。</li><li>最后访问时间 - atime。</li></ul></li><li><code>rm</code>的几个重要参数：<ul><li><code>-i</code>：交互式删除，每个删除项都会进行询问。</li><li><code>-r</code>：删除目录并递归的删除目录中的文件和目录。</li><li><code>-f</code>：强制删除，忽略不存在的文件，没有任何提示。</li></ul></li></ul></li><li><p>切换和查看当前工作目录 - <strong>cd</strong> &#x2F; <strong>pwd</strong>。</p><blockquote><p>说明：<code>cd</code>命令后面可以跟相对路径（以当前路径作为参照）或绝对路径（以<code>/</code>开头）来切换到指定的目录，也可以用<code>cd ..</code>来返回上一级目录。请大家想一想，如果要返回到上上一级目录应该给<code>cd</code>命令加上什么样的参数呢？</p></blockquote></li><li><p>查看目录内容 - <strong>ls</strong>。</p><ul><li><code>-l</code>：以长格式查看文件和目录。</li><li><code>-a</code>：显示以点开头的文件和目录（隐藏文件）。</li><li><code>-R</code>：遇到目录要进行递归展开（继续列出目录下面的文件和目录）。</li><li><code>-d</code>：只列出目录，不列出其他内容。</li><li><code>-S</code> &#x2F; <code>-t</code>：按大小&#x2F;时间排序。</li></ul></li><li><p>查看文件内容 - <strong>cat</strong> &#x2F; <strong>tac</strong> &#x2F; <strong>head</strong> &#x2F; <strong>tail</strong> &#x2F; <strong>more</strong> &#x2F; <strong>less</strong> &#x2F; <strong>rev</strong> &#x2F; <strong>od</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# wget http://www.sohu.com/ -O sohu.html<br>--2018-06-20 18:42:34--  http://www.sohu.com/<br>Resolving www.sohu.com (www.sohu.com)... 14.18.240.6<br>Connecting to www.sohu.com (www.sohu.com)|14.18.240.6|:80... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 212527 (208K) [text/html]<br>Saving to: ‘sohu.html’<br><span class="hljs-meta prompt_">100%</span><span class="language-bash">[==================================================&gt;] 212,527     --.-K/s   <span class="hljs-keyword">in</span> 0.03s</span><br>2018-06-20 18:42:34 (7.48 MB/s) - ‘sohu.html’ saved [212527/212527]<br>[root ~]# cat sohu.html<br>...<br>[root ~]# head -10 sohu.html<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;搜狐&lt;/title&gt;<br>&lt;meta name=&quot;Keywords&quot; content=&quot;搜狐,门户网站,新媒体,网络媒体,新闻,财经,体育,娱乐,时尚,汽车,房产,科技,图片,论坛,微博,博客,视频,电影,电视剧&quot;/&gt;<br>&lt;meta name=&quot;Description&quot; content=&quot;搜狐网为用户提供24小时不间断的最新资讯，及搜索、邮件等网络服务。内容包括全球热点事件、突发新闻、时事评论、热播影视剧、体育赛事、行业动态、生活服务信息，以及论坛、博客、微博、我的搜狐等互动空间。&quot; /&gt;<br>&lt;meta name=&quot;shenma-site-verification&quot; content=&quot;1237e4d02a3d8d73e96cbd97b699e9c3_1504254750&quot;&gt;<br>&lt;meta charset=&quot;utf-8&quot;/&gt;<br>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge,chrome=1&quot;/&gt;<br>[root ~]# tail -2 sohu.html<br>&lt;/body&gt;<br>&lt;/html&gt;<br>[root ~]# less sohu.html<br>...<br>[root ~]# cat -n sohu.html | more<br>...<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面用到了一个名为<code>wget</code>的命令，它是一个网络下载器程序，可以从指定的URL下载资源。</p></blockquote></li><li><p>拷贝&#x2F;移动文件 - <strong>cp</strong> &#x2F; <strong>mv</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# mkdir backup<br>[root ~]# cp sohu.html backup/<br>[root ~]# cd backup<br>[root backup]# ls<br>sohu.html<br>[root backup]# mv sohu.html sohu_index.html<br>[root backup]# ls<br>sohu_index.html<br></code></pre></td></tr></table></figure></li><li><p>文件重命名 - <strong>rename</strong>。</p></li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# rename .htm .html *.htm<br></code></pre></td></tr></table></figure><ol start="8"><li><p>查找文件和查找内容 - <strong>find</strong> &#x2F; <strong>grep</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# find / -name &quot;*.html&quot;<br>/root/sohu.html<br>/root/backup/sohu_index.html<br>[root@izwz97tbgo9lkabnat2lo8z ~]# find . -atime 7 -type f -print<br>[root@izwz97tbgo9lkabnat2lo8z ~]# find . -type f -size +2k<br>[root@izwz97tbgo9lkabnat2lo8z ~]# find . -type f -name &quot;*.swp&quot; -delete<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# grep &quot;&lt;script&gt;&quot; sohu.html -n<br>20:&lt;script&gt;<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# grep -E \&lt;\/?script.*\&gt; sohu.html -n<br>20:&lt;script&gt;<br>22:&lt;/script&gt;<br>24:&lt;script src=&quot;//statics.itc.cn/web/v3/static/js/es5-shim-08e41cfc3e.min.js&quot;&gt;&lt;/script&gt;<br>25:&lt;script src=&quot;//statics.itc.cn/web/v3/static/js/es5-sham-1d5fa1124b.min.js&quot;&gt;&lt;/script&gt;<br>26:&lt;script src=&quot;//statics.itc.cn/web/v3/static/js/html5shiv-21fc8c2ba6.js&quot;&gt;&lt;/script&gt;<br>29:&lt;script type=&quot;text/javascript&quot;&gt;<br>52:&lt;/script&gt;<br>...<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：<code>grep</code>在搜索字符串时可以使用正则表达式，如果需要使用正则表达式可以用<code>grep -E</code>或者直接使用<code>egrep</code>。</p></blockquote></li><li><p>创建链接和查看链接 - <strong>ln</strong> &#x2F; <strong>readlink</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html<br>-rw-r--r-- 1 root root 212131 Jun 20 19:15 sohu.html<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln /root/sohu.html /root/backup/sohu_backup<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html<br>-rw-r--r-- 2 root root 212131 Jun 20 19:15 sohu.html<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln /root/sohu.html /root/backup/sohu_backup2<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html<br>-rw-r--r-- 3 root root 212131 Jun 20 19:15 sohu.html<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln -s /etc/centos-release sysinfo<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sysinfo<br>lrwxrwxrwx 1 root root 19 Jun 20 19:21 sysinfo -&gt; /etc/centos-release<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat sysinfo<br>CentOS Linux release 7.4.1708 (Core)<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat /etc/centos-release<br>CentOS Linux release 7.4.1708 (Core)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：链接可以分为硬链接和软链接（符号链接）。硬链接可以认为是一个指向文件数据的指针，就像Python中对象的引用计数，每添加一个硬链接，文件的对应链接数就增加1，只有当文件的链接数为0时，文件所对应的存储空间才有可能被其他文件覆盖。我们平常删除文件时其实并没有删除硬盘上的数据，我们删除的只是一个指针，或者说是数据的一条使用记录，所以类似于“文件粉碎机”之类的软件在“粉碎”文件时除了删除文件指针，还会在文件对应的存储区域填入数据来保证文件无法再恢复。软链接类似于Windows系统下的快捷方式，当软链接链接的文件被删除时，软链接也就失效了。</p></blockquote></li><li><p>压缩&#x2F;解压缩和归档&#x2F;解归档 - <strong>gzip</strong> &#x2F; <strong>gunzip</strong> &#x2F; <strong>xz</strong>。</p></li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget http://download.redis.io/releases/redis-4.0.10.tar.gz<br>--2018-06-20 19:29:59--  http://download.redis.io/releases/redis-4.0.10.tar.gz<br>Resolving download.redis.io (download.redis.io)... 109.74.203.151<br>Connecting to download.redis.io (download.redis.io)|109.74.203.151|:80... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 1738465 (1.7M) [application/x-gzip]<br>Saving to: ‘redis-4.0.10.tar.gz’<br><span class="hljs-meta prompt_">100%</span><span class="language-bash">[==================================================&gt;] 1,738,465   70.1KB/s   <span class="hljs-keyword">in</span> 74s</span><br>2018-06-20 19:31:14 (22.9 KB/s) - ‘redis-4.0.10.tar.gz’ saved [1738465/1738465]<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls redis*<br>redis-4.0.10.tar.gz<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# gunzip redis-4.0.10.tar.gz<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls redis*<br>redis-4.0.10.tar<br></code></pre></td></tr></table></figure><ol start="11"><li>归档和解归档 - <strong>tar</strong>。</li></ol>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# tar -xvf redis-4.0.10.tar<br>redis-4.0.10/<br>redis-4.0.10/.gitignore<br>redis-4.0.10/00-RELEASENOTES<br>redis-4.0.10/BUGS<br>redis-4.0.10/CONTRIBUTING<br>redis-4.0.10/COPYING<br>redis-4.0.10/INSTALL<br>redis-4.0.10/MANIFESTO<br>redis-4.0.10/Makefile<br>redis-4.0.10/README.md<br>redis-4.0.10/deps/<br>redis-4.0.10/deps/Makefile<br>redis-4.0.10/deps/README.md<br>...<br></code></pre></td></tr></table></figure><blockquote><p>说明：归档（也称为创建归档）和解归档都使用<code>tar</code>命令，通常创建归档需要<code>-cvf</code>三个参数，其中<code>c</code>表示创建（create），<code>v</code>表示显示创建归档详情（verbose），<code>f</code>表示指定归档的文件（file）；解归档需要加上<code>-xvf</code>参数，其中<code>x</code>表示抽取（extract），其他两个参数跟创建归档相同。</p></blockquote><ol start="12"><li>将标准输入转成命令行参数 - <strong>xargs</strong>。</li></ol><p>   下面的命令会将查找当前路径下的html文件，然后通过<code>xargs</code>将这些文件作为参数传给<code>rm</code>命令，实现查找并删除文件的操作。</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# find . -type f -name &quot;*.html&quot; | xargs rm -f<br></code></pre></td></tr></table></figure><p>   下面的命令将a.txt文件中的多行内容变成一行输出到b.txt文件中，其中<code>&lt;</code>表示从a.txt中读取输入，<code>&gt;</code>表示将命令的执行结果输出到b.txt中。</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# xargs &lt; a.txt &gt; b.txt<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：这个命令就像上面演示的那样常在管道（实现进程间通信的一种方式）和重定向（重新指定输入输出的位置）操作中用到，后面的内容中会讲到管道操作和输入输出重定向操作。</p></blockquote><ol start="13"><li><p>显示文件或目录 - <strong>basename</strong> &#x2F; <strong>dirname</strong>。</p></li><li><p>其他相关工具。</p></li></ol><ul><li><strong>sort</strong> - 对内容排序</li><li><strong>uniq</strong> - 去掉相邻重复内容</li><li><strong>tr</strong> - 替换指定内容为新内容</li><li><strong>cut</strong> &#x2F; <strong>paste</strong> - 剪切&#x2F;黏贴内容</li><li><strong>split</strong> - 拆分文件</li><li><strong>file</strong> - 判断文件类型</li><li><strong>wc</strong> - 统计文件行数、单词数、字节数</li><li><strong>iconv</strong> - 编码转换</li></ul>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# cat foo.txt<br>grape<br>apple<br>pitaya<br>[root ~]# cat bar.txt<br>100<br>200<br>300<br>400<br>[root ~]# paste foo.txt bar.txt<br>grape   100<br>apple   200<br>pitaya  300<br>        400<br>[root ~]# paste foo.txt bar.txt &gt; hello.txt<br>[root ~]# cut -b 4-8 hello.txt<br>pe      10<br>le      20<br>aya     3<br>0<br>[root ~]# cat hello.txt | tr &#x27;\t&#x27; &#x27;,&#x27;<br>grape,100<br>apple,200<br>pitaya,300<br>,400<br>[root ~]# split -l 100 sohu.html hello<br>[root ~]# wget https://www.baidu.com/img/bd_logo1.png<br>[root ~]# file bd_logo1.png<br>bd_logo1.png: PNG image data, 540 x 258, 8-bit colormap, non-interlaced<br>[root ~]# wc sohu.html<br>  2979   6355 212527 sohu.html<br>[root ~]# wc -l sohu.html<br>2979 sohu.html<br>[root ~]# wget http://www.qq.com -O qq.html<br>[root ~]# iconv -f gb2312 -t utf-8 qq.html<br></code></pre></td></tr></table></figure><h4 id="管道和重定向"><a href="#管道和重定向" class="headerlink" title="管道和重定向"></a>管道和重定向</h4><ol><li><p>管道的使用 - **|**。</p><p>例子：查找当前目录下文件个数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# find ./ | wc -l<br>6152<br></code></pre></td></tr></table></figure><p>例子：列出当前路径下的文件和文件夹，给每一项加一个编号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# ls | cat -n<br>     1  dump.rdb<br>     2  mongodb-3.6.5<br>     3  Python-3.6.5<br>     4  redis-3.2.11<br>     5  redis.conf<br></code></pre></td></tr></table></figure><p>例子：查找record.log中包含AAA，但不包含BBB的记录的总数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# cat record.log | grep AAA | grep -v BBB | wc -l<br></code></pre></td></tr></table></figure></li><li><p>输出重定向和错误重定向 - <strong>&gt;</strong> &#x2F; <strong>&gt;&gt;</strong> &#x2F; **2&gt;**。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# cat readme.txt<br>banana<br>apple<br>grape<br>apple<br>grape<br>watermelon<br>pear<br>pitaya<br>[root ~]# cat readme.txt | sort | uniq &gt; result.txt<br>[root ~]# cat result.txt<br>apple<br>banana<br>grape<br>pear<br>pitaya<br>watermelon<br></code></pre></td></tr></table></figure></li><li><p>输入重定向 - **&lt;**。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# echo &#x27;hello, world!&#x27; &gt; hello.txt<br>[root ~]# wall &lt; hello.txt<br>[root ~]#<br>Broadcast message from root (Wed Jun 20 19:43:05 2018):<br>hello, world!<br>[root ~]# echo &#x27;I will show you some code.&#x27; &gt;&gt; hello.txt<br>[root ~]# wall &lt; hello.txt<br>[root ~]#<br>Broadcast message from root (Wed Jun 20 19:43:55 2018):<br>hello, world!<br>I will show you some code.<br></code></pre></td></tr></table></figure></li><li><p>多重定向 - <strong>tee</strong>。</p><p>下面的命令除了在终端显示命令<code>ls</code>的结果之外，还会追加输出到<code>ls.txt</code>文件中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# ls | tee -a ls.txt<br></code></pre></td></tr></table></figure></li></ol><h4 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h4><ol><li><p><strong>alias</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# alias ll=&#x27;ls -l&#x27;<br>[root ~]# alias frm=&#x27;rm -rf&#x27;<br>[root ~]# ll<br>...<br>drwxr-xr-x  2 root       root   4096 Jun 20 12:52 abc<br>...<br>[root ~]# frm abc<br></code></pre></td></tr></table></figure></li><li><p><strong>unalias</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# unalias frm<br>[root ~]# frm sohu.html<br>-bash: frm: command not found<br></code></pre></td></tr></table></figure></li></ol><h4 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h4><ol><li><p>字符流编辑器 - <strong>sed</strong>。</p><p>sed是操作、过滤和转换文本内容的工具。假设有一个名为fruit.txt的文件，内容如下所示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# cat -n fruit.txt <br>     1  banana<br>     2  grape<br>     3  apple<br>     4  watermelon<br>     5  orange<br></code></pre></td></tr></table></figure><p>接下来，我们在第2行后面添加一个pitaya。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# sed &#x27;2a pitaya&#x27; fruit.txt <br>banana<br>grape<br>pitaya<br>apple<br>watermelon<br>orange<br></code></pre></td></tr></table></figure><blockquote><p>注意：刚才的命令和之前我们讲过的很多命令一样并没有改变fruit.txt文件，而是将添加了新行的内容输出到终端中，如果想保存到fruit.txt中，可以使用输出重定向操作。</p></blockquote><p>在第2行前面插入一个waxberry。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# sed &#x27;2i waxberry&#x27; fruit.txt<br>banana<br>waxberry<br>grape<br>apple<br>watermelon<br>orange<br></code></pre></td></tr></table></figure><p>删除第3行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# sed &#x27;3d&#x27; fruit.txt<br>banana<br>grape<br>watermelon<br>orange<br></code></pre></td></tr></table></figure><p>删除第2行到第4行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# sed &#x27;2,4d&#x27; fruit.txt<br>banana<br>orange<br></code></pre></td></tr></table></figure><p>将文本中的字符a替换为@。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# sed &#x27;s#a#@#&#x27; fruit.txt <br>b@nana<br>gr@pe<br>@pple<br>w@termelon<br>or@nge<br></code></pre></td></tr></table></figure><p>将文本中的字符a替换为@，使用全局模式。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# sed &#x27;s#a#@#g&#x27; fruit.txt <br>b@n@n@<br>gr@pe<br>@pple<br>w@termelon<br>or@nge<br></code></pre></td></tr></table></figure></li><li><p>模式匹配和处理语言 - <strong>awk</strong>。</p><p>awk是一种编程语言，也是Linux系统中处理文本最为强大的工具，它的作者之一和现在的维护者就是之前提到过的Brian Kernighan（ken和dmr最亲密的伙伴）。通过该命令可以从文本中提取出指定的列、用正则表达式从文本中取出我们想要的内容、显示指定的行以及进行统计和运算，总之它非常强大。</p><p>假设有一个名为fruit2.txt的文件，内容如下所示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# cat fruit2.txt <br>1       banana      120<br>2       grape       500<br>3       apple       1230<br>4       watermelon  80<br>5       orange      400<br></code></pre></td></tr></table></figure><p>显示文件的第3行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# awk &#x27;NR==3&#x27; fruit2.txt <br>3       apple       1230<br></code></pre></td></tr></table></figure><p>显示文件的第2列。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# awk &#x27;&#123;print $2&#125;&#x27; fruit2.txt <br>banana<br>grape<br>apple<br>watermelon<br>orange<br></code></pre></td></tr></table></figure><p>显示文件的最后一列。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# awk &#x27;&#123;print $NF&#125;&#x27; fruit2.txt <br>120<br>500<br>1230<br>80<br>400<br></code></pre></td></tr></table></figure><p>输出末尾数字大于等于300的行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# awk &#x27;&#123;if($3 &gt;= 300) &#123;print $0&#125;&#125;&#x27; fruit2.txt <br>2       grape       500<br>3       apple       1230<br>5       orange      400<br></code></pre></td></tr></table></figure><p>上面展示的只是awk命令的冰山一角，更多的内容留给读者自己在实践中去探索。</p></li></ol><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><ol><li><p>创建和删除用户 - <strong>useradd</strong> &#x2F; <strong>userdel</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root home]# useradd hellokitty<br>[root home]# userdel hellokitty<br></code></pre></td></tr></table></figure><ul><li><code>-d</code> - 创建用户时为用户指定用户主目录</li><li><code>-g</code> - 创建用户时指定用户所属的用户组</li></ul></li><li><p>创建和删除用户组 - <strong>groupadd</strong> &#x2F; <strong>groupdel</strong>。</p><blockquote><p>说明：用户组主要是为了方便对一个组里面所有用户的管理。</p></blockquote></li><li><p>修改密码 - <strong>passwd</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# passwd hellokitty<br>New password: <br>Retype new password: <br>passwd: all authentication tokens updated successfully.<br></code></pre></td></tr></table></figure><blockquote><p>说明：输入密码和确认密码没有回显且必须一气呵成的输入完成（不能使用退格键），密码和确认密码需要一致。如果使用<code>passwd</code>命令时没有指定命令作用的对象，则表示要修改当前用户的密码。如果想批量修改用户密码，可以使用<code>chpasswd</code>命令。</p></blockquote><ul><li><code>-l</code> &#x2F; <code>-u</code> - 锁定&#x2F;解锁用户。</li><li><code>-d</code> - 清除用户密码。</li><li><code>-e</code> - 设置密码立即过期，用户登录时会强制要求修改密码。</li><li><code>-i</code> - 设置密码过期多少天以后禁用该用户。</li></ul></li><li><p>查看和修改密码有效期 - <strong>chage</strong>。</p><p>设置hellokitty用户100天后必须修改密码，过期前15天通知该用户，过期后7天禁用该用户。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">chage -M 100 -W 15 -I 7 hellokitty<br></code></pre></td></tr></table></figure></li><li><p>切换用户 - <strong>su</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# su hellokitty<br>[hellokitty root]$<br></code></pre></td></tr></table></figure></li><li><p>以管理员身份执行命令 - <strong>sudo</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[hellokitty ~]$ ls /root<br>ls: cannot open directory /root: Permission denied<br>[hellokitty ~]$ sudo ls /root<br>[sudo] password for hellokitty:<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：如果希望用户能够以管理员身份执行命令，用户必须要出现在sudoers名单中，sudoers文件在 <code>/etc</code>目录下，如果希望直接编辑该文件也可以使用下面的命令。</p></blockquote></li><li><p>编辑sudoers文件 - <strong>visudo</strong>。</p><p>这里使用的编辑器是vi，关于vi的知识在后面有讲解。该文件的部分内容如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Allow root to run any commands anywhere</span></span> <br>root    ALL=(ALL)   ALL<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Allows members of the &#x27;sys&#x27; group to run networking, software,</span></span> <br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># service management apps and more.</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">%sys ALL = NETWORKING, SOFTWARE, SERVICES, STORAGE, DELEGATING, PROCESSES, LOCATE, DRIVERS</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Allows people in group wheel to run all commands</span></span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">wheel  ALL=(ALL)   ALL</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Same thing without a password</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">%wheel    ALL=(ALL)   NOPASSWD: ALL</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Allows members of the users group to mount and unmount the</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># cdrom as root</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">%<span class="hljs-built_in">users</span>  ALL=/sbin/mount /mnt/cdrom, /sbin/umount /mnt/cdrom</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Allows members of the users group to shutdown this system</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">%<span class="hljs-built_in">users</span>  localhost=/sbin/shutdown -h now</span><br></code></pre></td></tr></table></figure></li><li><p>显示用户与用户组的信息 - <strong>id</strong>。</p></li><li><p>给其他用户发消息 -<strong>write</strong> &#x2F; <strong>wall</strong>。</p><p>发送方：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# write hellokitty<br>Dinner is on me.<br>Call me at 6pm.<br></code></pre></td></tr></table></figure><p>接收方：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[hellokitty ~]$ <br>Message from root on pts/0 at 17:41 ...<br>Dinner is on me.<br>Call me at 6pm.<br>EOF<br></code></pre></td></tr></table></figure></li><li><p>查看&#x2F;设置是否接收其他用户发送的消息 - <strong>mesg</strong>。</p></li></ol>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[hellokitty ~]$ mesg<br>is y<br>[hellokitty ~]$ mesg n<br>[hellokitty ~]$ mesg<br>is n<br></code></pre></td></tr></table></figure><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><h4 id="文件和路径"><a href="#文件和路径" class="headerlink" title="文件和路径"></a>文件和路径</h4><ol><li>命名规则：文件名的最大长度与文件系统类型有关，一般情况下，文件名不应该超过255个字符，虽然绝大多数的字符都可以用于文件名，但是最好使用英文大小写字母、数字、下划线、点这样的符号。文件名中虽然可以使用空格，但应该尽可能避免使用空格，否则在输入文件名时需要用将文件名放在双引号中或者通过<code>\</code>对空格进行转义。</li><li>扩展名：在Linux系统下文件的扩展名是可选的，但是使用扩展名有助于对文件内容的理解。有些应用程序要通过扩展名来识别文件，但是更多的应用程序并不依赖文件的扩展名，就像<code>file</code>命令在识别文件时并不是依据扩展名来判定文件的类型。</li><li>隐藏文件：以点开头的文件在Linux系统中是隐藏文件（不可见文件）。</li></ol><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><ol><li>&#x2F;bin - 基本命令的二进制文件。</li><li>&#x2F;boot - 引导加载程序的静态文件。</li><li>&#x2F;dev - 设备文件。</li><li><strong>&#x2F;etc</strong> - 配置文件。</li><li>&#x2F;home - 普通用户主目录的父目录。</li><li>&#x2F;lib - 共享库文件。</li><li>&#x2F;lib64 - 共享64位库文件。</li><li>&#x2F;lost+found - 存放未链接文件。</li><li>&#x2F;media - 自动识别设备的挂载目录。</li><li>&#x2F;mnt - 临时挂载文件系统的挂载点。</li><li>&#x2F;opt - 可选插件软件包安装位置。</li><li>&#x2F;proc -  内核和进程信息。</li><li><strong>&#x2F;root</strong> - 超级管理员用户主目录。</li><li>&#x2F;run - 存放系统运行时需要的东西。</li><li>&#x2F;sbin - 超级用户的二进制文件。</li><li>&#x2F;sys - 设备的伪文件系统。</li><li>&#x2F;tmp - 临时文件夹。</li><li><strong>&#x2F;usr</strong> - 用户应用目录。</li><li>&#x2F;var - 变量数据目录。</li></ol><h4 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h4><ol><li><p><strong>chmod</strong> - 改变文件模式比特。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# ls -l<br>...<br>-rw-r--r--  1 root       root 211878 Jun 19 16:06 sohu.html<br>...<br>[root ~]# chmod g+w,o+w sohu.html<br>[root ~]# ls -l<br>...<br>-rw-rw-rw-  1 root       root 211878 Jun 19 16:06 sohu.html<br>...<br>[root ~]# chmod 644 sohu.html<br>[root ~]# ls -l<br>...<br>-rw-r--r--  1 root       root 211878 Jun 19 16:06 sohu.html<br>...<br></code></pre></td></tr></table></figure><blockquote><p>说明：通过上面的例子可以看出，用<code>chmod</code>改变文件模式比特有两种方式：一种是字符设定法，另一种是数字设定法。除了<code>chmod</code>之外，可以通过<code>umask</code>来设定哪些权限将在新文件的默认权限中被删除。</p></blockquote><p>长格式查看目录或文件时显示结果及其对应权限的数值如下表所示。</p><p><img src="/./res/file-mode.png"></p></li><li><p><strong>chown</strong> - 改变文件所有者。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# ls -l<br>...<br>-rw-r--r--  1 root root     54 Jun 20 10:06 readme.txt<br>...<br>[root ~]# chown hellokitty readme.txt<br>[root ~]# ls -l<br>...<br>-rw-r--r--  1 hellokitty root     54 Jun 20 10:06 readme.txt<br>...<br></code></pre></td></tr></table></figure></li><li><p><strong>chgrp</strong> - 改变用户组。</p></li></ol><h4 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h4><ol><li><p>列出文件系统的磁盘使用状况 - <strong>df</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# df -h<br>Filesystem      Size  Used Avail Use% Mounted on<br>/dev/vda1        40G  5.0G   33G  14% /<br>devtmpfs        486M     0  486M   0% /dev<br>tmpfs           497M     0  497M   0% /dev/shm<br>tmpfs           497M  356K  496M   1% /run<br>tmpfs           497M     0  497M   0% /sys/fs/cgroup<br>tmpfs           100M     0  100M   0% /run/user/0<br></code></pre></td></tr></table></figure></li><li><p>磁盘分区表操作 - <strong>fdisk</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# fdisk -l<br>Disk /dev/vda: 42.9 GB, 42949672960 bytes, 83886080 sectors<br>Units = sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br>Disk label type: dos<br>Disk identifier: 0x000a42f4<br>   Device Boot      Start         End      Blocks   Id  System<br>/dev/vda1   *        2048    83884031    41940992   83  Linux<br>Disk /dev/vdb: 21.5 GB, 21474836480 bytes, 41943040 sectors<br>Units = sectors of 1 * 512 = 512 bytes<br>Sector size (logical/physical): 512 bytes / 512 bytes<br>I/O size (minimum/optimal): 512 bytes / 512 bytes<br></code></pre></td></tr></table></figure></li><li><p>磁盘分区工具 - <strong>parted</strong>。</p></li><li><p>格式化文件系统 - <strong>mkfs</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# mkfs -t ext4 -v /dev/sdb<br></code></pre></td></tr></table></figure><ul><li><code>-t</code> - 指定文件系统的类型。</li><li><code>-c</code> - 创建文件系统时检查磁盘损坏情况。</li><li><code>-v</code> - 显示详细信息。</li></ul></li><li><p>文件系统检查 - <strong>fsck</strong>。</p></li><li><p>转换或拷贝文件 - <strong>dd</strong>。</p></li><li><p>挂载&#x2F;卸载 - <strong>mount</strong> &#x2F; <strong>umount</strong>。</p></li><li><p>创建&#x2F;激活&#x2F;关闭交换分区 - <strong>mkswap</strong> &#x2F; <strong>swapon</strong> &#x2F; <strong>swapoff</strong>。</p></li></ol><blockquote><p><strong>说明</strong>：执行上面这些命令会带有一定的风险，如果不清楚这些命令的用法，最好不用随意使用，在使用的过程中，最好对照参考资料进行操作，并在操作前确认是否要这么做。</p></blockquote><h3 id="编辑器-vim"><a href="#编辑器-vim" class="headerlink" title="编辑器 - vim"></a>编辑器 - vim</h3><ol><li><p>启动vim。可以通过<code>vi</code>或<code>vim</code>命令来启动vim，启动时可以指定文件名来打开一个文件，如果没有指定文件名，也可以在保存的时候指定文件名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# vim guess.py<br></code></pre></td></tr></table></figure></li><li><p>命令模式、编辑模式和末行模式：启动vim进入的是命令模式（也称为Normal模式），在命令模式下输入英文字母<code>i</code>会进入编辑模式（Insert模式），屏幕下方出现<code>-- INSERT --</code>提示；在编辑模式下按下<code>Esc</code>会回到命令模式，此时如果输入英文<code>:</code>会进入末行模式，在末行模式下输入<code>q!</code>可以在不保存当前工作的情况下强行退出vim；在命令模式下输入<code>v</code>会进入可视模式（Visual模式），可以用光标选择一个区域再完成对应的操作。</p></li><li><p>保存和退出vim：在命令模式下输入<code>:</code> 进入末行模式，输入<code>wq</code>可以实现保存退出；如果想放弃编辑的内容输入<code>q!</code>强行退出，这一点刚才已经提到过了；在命令模式下也可以直接输入<code>ZZ</code>实现保存退出。如果只想保存文件不退出，那么可以在末行模式下输入<code>w</code>；可以在<code>w</code>后面输入空格再指定要保存的文件名。</p></li><li><p>光标操作。</p><ul><li>在命令模式下可以通过<code>h</code>、<code>j</code>、<code>k</code>、<code>l</code>来控制光标向左、下、上、右的方向移动，可以在字母前输入数字来表示移动的距离，例如：<code>10h</code>表示向左移动10个字符。</li><li>在命令模式下可以通过<code>Ctrl+y</code>和<code>Ctrl+e</code>来实现向上、向下滚动一行文本的操作，可以通过<code>Ctrl+f</code>和<code>Ctrl+b</code>来实现向前和向后翻页的操作。</li><li>在命令模式下可以通过输入英文字母<code>G</code>将光标移到文件的末尾，可以通过<code>gg</code>将光标移到文件的开始，也可以通过在<code>G</code>前输入数字来将光标移动到指定的行。</li></ul></li><li><p>文本操作。</p><ul><li>删除：在命令模式下可以用<code>dd</code>来删除整行；可以在<code>dd</code>前加数字来指定删除的行数；可以用<code>d$</code>来实现删除从光标处删到行尾的操作，也可以通过<code>d0</code>来实现从光标处删到行首的操作；如果想删除一个单词，可以使用<code>dw</code>；如果要删除全文，可以在输入<code>:%d</code>（其中<code>:</code>用来从命令模式进入末行模式）。</li><li>复制和粘贴：在命令模式下可以用<code>yy</code>来复制整行；可以在<code>yy</code>前加数字来指定复制的行数；可以通过<code>p</code>将复制的内容粘贴到光标所在的地方。</li><li>撤销和恢复：在命令模式下输入<code>u</code>可以撤销之前的操作；通过<code>Ctrl+r</code>可以恢复被撤销的操作。</li><li>对内容进行排序：在命令模式下输入<code>%!sort</code>。</li></ul></li><li><p>查找和替换。</p><ul><li>查找操作需要输入<code>/</code>进入末行模式并提供正则表达式来匹配与之对应的内容，例如：<code>/doc.*\.</code>，输入<code>n</code>来向前搜索，也可以输入<code>N</code>来向后搜索。</li><li>替换操作需要输入<code>:</code>进入末行模式并指定搜索的范围、正则表达式以及替换后的内容和匹配选项，例如：<code>:1,$s/doc.*/hello/gice</code>，其中：<ul><li><code>g</code> - global：全局匹配。</li><li><code>i</code> - ignore case：忽略大小写匹配。</li><li><code>c</code> - confirm：替换时需要确认。</li><li><code>e</code> - error：忽略错误。</li></ul></li></ul></li><li><p>参数设定：在输入<code>:</code>进入末行模式后可以对vim进行设定。</p><ul><li><p>设置Tab键的空格数：<code>set ts=4</code></p></li><li><p>设置显示&#x2F;不显示行号：<code>set nu</code> &#x2F; <code>set nonu</code></p></li><li><p>设置启用&#x2F;关闭高亮语法：<code>syntax on</code> &#x2F; <code>syntax off</code></p></li><li><p>设置显示标尺（光标所在的行和列）： <code>set ruler</code></p></li><li><p>设置启用&#x2F;关闭搜索结果高亮：<code>set hls</code> &#x2F; <code>set nohls</code></p><blockquote><p>说明：如果希望上面的这些设定在每次启动vim时都能自动生效，需要将这些设定写到用户主目录下的.vimrc文件中。</p></blockquote></li></ul></li><li><p>高级技巧</p><ul><li><p>比较多个文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# vim -d foo.txt bar.txt<br></code></pre></td></tr></table></figure><p><img src="/./res/vim-diff.png"></p></li><li><p>打开多个文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# vim foo.txt bar.txt hello.txt<br></code></pre></td></tr></table></figure><p>启动vim后只有一个窗口显示的是foo.txt，可以在末行模式中输入<code>ls</code>查看到打开的三个文件，也可以在末行模式中输入<code>b &lt;num&gt;</code>来显示另一个文件，例如可以用<code>:b 2</code>将bar.txt显示出来，可以用<code>:b 3</code>将hello.txt显示出来。</p></li><li><p>拆分和切换窗口。</p><p>可以在末行模式中输入<code>sp</code>或<code>vs</code>来实现对窗口的水平或垂直拆分，这样我们就可以同时打开多个编辑窗口，通过按两次<code>Ctrl+w</code>就可以实现编辑窗口的切换，在一个窗口中执行退出操作只会关闭对应的窗口，其他的窗口继续保留。</p><p><img src="/./res/vim-multi-window.png"></p></li><li><p>映射快捷键：在vim下可以将一些常用操作映射为快捷键来提升工作效率。</p><ul><li><p>例子1：在命令模式下输入<code>F4</code>执行从第一行开始删除10000行代码的操作。</p><p><code>:map &lt;F4&gt; gg10000dd</code>。</p><p>例子2：在编辑模式下输入<code>__main</code>直接补全为<code>if __name__ == &#39;__main__&#39;:</code>。</p><p><code>:inoremap __main if __name__ == &#39;__main__&#39;:</code></p></li></ul><blockquote><p>说明：上面例子2的<code>inoremap</code>中的<code>i</code>表示映射的键在编辑模式使用， <code>nore</code>表示不要递归，这一点非常重要，否则如果键对应的内容中又出现键本身，就会引发递归（相当于进入了死循环）。如果希望映射的快捷键每次启动vim时都能生效，需要将映射写到用户主目录下的.vimrc文件中。</p></blockquote></li><li><p>录制宏。</p><ul><li><p>在命令模式下输入<code>qa</code>开始录制宏（其中<code>a</code>是寄存器的名字，也可以是其他英文字母或0-9的数字）。</p></li><li><p>执行你的操作（光标操作、编辑操作等），这些操作都会被录制下来。</p></li><li><p>如果录制的操作已经完成了，按<code>q</code>结束录制。</p></li><li><p>通过<code>@a</code>（<code>a</code>是刚才使用的寄存器的名字）播放宏，如果要多次执行宏可以在前面加数字，例如<code>100@a</code>表示将宏播放100次。</p></li><li><p>可以试一试下面的例子来体验录制宏的操作，该例子来源于<a href="https://harttle.land/tags.html#Vim">Harttle Land网站</a>，该网站上提供了很多关于vim的使用技巧，有兴趣的可以了解一下。</p><p><img src="/./res/vim-macro.png"></p></li></ul></li></ul></li></ol><h3 id="软件安装和配置"><a href="#软件安装和配置" class="headerlink" title="软件安装和配置"></a>软件安装和配置</h3><h4 id="使用包管理工具"><a href="#使用包管理工具" class="headerlink" title="使用包管理工具"></a>使用包管理工具</h4><ol><li><strong>yum</strong> - Yellowdog Updater Modified。<ul><li><code>yum search</code>：搜索软件包，例如<code>yum search nginx</code>。</li><li><code>yum list installed</code>：列出已经安装的软件包，例如<code>yum list installed | grep zlib</code>。</li><li><code>yum install</code>：安装软件包，例如<code>yum install nginx</code>。</li><li><code>yum remove</code>：删除软件包，例如<code>yum remove nginx</code>。</li><li><code>yum update</code>：更新软件包，例如<code>yum update</code>可以更新所有软件包，而<code>yum update tar</code>只会更新tar。</li><li><code>yum check-update</code>：检查有哪些可以更新的软件包。</li><li><code>yum info</code>：显示软件包的相关信息，例如<code>yum info nginx</code>。</li></ul></li><li><strong>rpm</strong> - Redhat Package Manager。<ul><li>安装软件包：<code>rpm -ivh &lt;packagename&gt;.rpm</code>。</li><li>移除软件包：<code>rpm -e &lt;packagename&gt;</code>。</li><li>查询软件包：<code>rpm -qa</code>，例如可以用<code>rpm -qa | grep mysql</code>来检查是否安装了MySQL相关的软件包。</li></ul></li></ol><p>下面以Nginx为例，演示如何使用yum安装软件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# yum -y install nginx<br>...<br>Installed:<br>  nginx.x86_64 1:1.12.2-2.el7<br>Dependency Installed:<br>  nginx-all-modules.noarch 1:1.12.2-2.el7<br>  nginx-mod-http-geoip.x86_64 1:1.12.2-2.el7<br>  nginx-mod-http-image-filter.x86_64 1:1.12.2-2.el7<br>  nginx-mod-http-perl.x86_64 1:1.12.2-2.el7<br>  nginx-mod-http-xslt-filter.x86_64 1:1.12.2-2.el7<br>  nginx-mod-mail.x86_64 1:1.12.2-2.el7<br>  nginx-mod-stream.x86_64 1:1.12.2-2.el7<br>Complete!<br>[root ~]# yum info nginx<br>Loaded plugins: fastestmirror<br>Loading mirror speeds from cached hostfile<br>Installed Packages<br>Name        : nginx<br>Arch        : x86_64<br>Epoch       : 1<br>Version     : 1.12.2<br>Release     : 2.el7<br>Size        : 1.5 M<br>Repo        : installed<br>From repo   : epel<br>Summary     : A high performance web server and reverse proxy server<br>URL         : http://nginx.org/<br>License     : BSD<br>Description : Nginx is a web server and a reverse proxy server for HTTP, SMTP, POP3 and<br>            : IMAP protocols, with a strong focus on high concurrency, performance and low<br>            : memory usage.<br>[root ~]# nginx -v<br>nginx version: nginx/1.12.2<br></code></pre></td></tr></table></figure><p>移除Nginx。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# yum -y remove nginx<br></code></pre></td></tr></table></figure><p>下面以MySQL为例，演示如何使用rpm安装软件。要安装MySQL需要先到<a href="https://www.mysql.com/">MySQL官方网站</a>下载对应的<a href="https://dev.mysql.com/downloads/mysql/">RPM文件</a>，当然要选择和你使用的Linux系统对应的版本。MySQL现在是Oracle公司旗下的产品，在MySQL被收购后，MySQL的作者重新制作了一个MySQL的分支MariaDB，可以通过yum进行安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root mysql]# ls<br>mysql-community-client-5.7.22-1.el7.x86_64.rpm<br>mysql-community-common-5.7.22-1.el7.x86_64.rpm<br>mysql-community-libs-5.7.22-1.el7.x86_64.rpm<br>mysql-community-server-5.7.22-1.el7.x86_64.rpm<br>[root mysql]# yum -y remove mariadb-libs<br>[root mysql]# yum -y install libaio<br>[root mysql]#rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm<br>...<br>[root mysql]#rpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpm<br>...<br>[root mysql]#rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm<br>...<br>[root mysql]#rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm<br>...<br></code></pre></td></tr></table></figure><blockquote><p>说明：由于MySQL和<a href="https://mariadb.org/">MariaDB</a>的底层依赖库是有冲突的，所以上面我们首先用<code>yum</code>移除了名为mariadb-libs的依赖库并安装了名为libaio支持异步I&#x2F;O操作的依赖库。关于MySQL和MariaDB之间的关系，可以阅读<a href="https://zh.wikipedia.org/wiki/MariaDB">维基百科</a>上关于MariaDB的介绍。</p></blockquote><p>移除安装的MySQL。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# rpm -qa | grep mysql | xargs rpm -e<br></code></pre></td></tr></table></figure><h4 id="下载解压配置环境变量"><a href="#下载解压配置环境变量" class="headerlink" title="下载解压配置环境变量"></a>下载解压配置环境变量</h4><p>下面以安装MongoDB为例，演示这类软件应该如何安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.6.5.tgz<br>--2018-06-21 18:32:53--  https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.6.5.tgz<br>Resolving fastdl.mongodb.org (fastdl.mongodb.org)... 52.85.83.16, 52.85.83.228, 52.85.83.186, ...<br>Connecting to fastdl.mongodb.org (fastdl.mongodb.org)|52.85.83.16|:443... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 100564462 (96M) [application/x-gzip]<br>Saving to: ‘mongodb-linux-x86_64-rhel70-3.6.5.tgz’<br><span class="hljs-meta prompt_">100%</span><span class="language-bash">[==================================================&gt;] 100,564,462  630KB/s   <span class="hljs-keyword">in</span> 2m 9s</span><br>2018-06-21 18:35:04 (760 KB/s) - ‘mongodb-linux-x86_64-rhel70-3.6.5.tgz’ saved [100564462/100564462]<br>[root ~]# gunzip mongodb-linux-x86_64-rhel70-3.6.5.tgz<br>[root ~]# tar -xvf mongodb-linux-x86_64-rhel70-3.6.5.tar<br>mongodb-linux-x86_64-rhel70-3.6.5/README<br>mongodb-linux-x86_64-rhel70-3.6.5/THIRD-PARTY-NOTICES<br>mongodb-linux-x86_64-rhel70-3.6.5/MPL-2<br>mongodb-linux-x86_64-rhel70-3.6.5/GNU-AGPL-3.0<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/mongodump<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/mongorestore<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/mongoexport<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/mongoimport<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/mongostat<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/mongotop<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/bsondump<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/mongofiles<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/mongoreplay<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/mongoperf<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/mongod<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/mongos<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/mongo<br>mongodb-linux-x86_64-rhel70-3.6.5/bin/install_compass<br>[root ~]# vim .bash_profile<br>...<br>PATH=$PATH:$HOME/bin:$HOME/mongodb-linux-x86_64-rhel70-3.6.5/bin<br>export PATH<br>...<br>[root ~]# source .bash_profile<br>[root ~]# mongod --version<br>db version v3.6.5<br>git version: a20ecd3e3a174162052ff99913bc2ca9a839d618<br>OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013<br>allocator: tcmalloc<br>modules: none<br>build environment:<br>    distmod: rhel70<br>    distarch: x86_64<br>    target_arch: x86_64<br>[root ~]# mongo --version<br>MongoDB shell version v3.6.5<br>git version: a20ecd3e3a174162052ff99913bc2ca9a839d618<br>OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013<br>allocator: tcmalloc<br>modules: none<br>build environment:<br>    distmod: rhel70<br>    distarch: x86_64<br>    target_arch: x86_64<br></code></pre></td></tr></table></figure><blockquote><p>说明：当然也可以通过yum来安装MongoDB，具体可以参照<a href="https://docs.mongodb.com/master/administration/install-on-linux/">官方网站</a>上给出的说明。</p></blockquote><h4 id="源代码构建安装"><a href="#源代码构建安装" class="headerlink" title="源代码构建安装"></a>源代码构建安装</h4><ol><li><p>安装Python 3.6。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# yum install gcc<br>[root ~]# wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz<br>[root ~]# gunzip Python-3.6.5.tgz<br>[root ~]# tar -xvf Python-3.6.5.tar<br>[root ~]# cd Python-3.6.5<br>[root ~]# ./configure --prefix=/usr/local/python36 --enable-optimizations<br>[root ~]# yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel<br>[root ~]# make &amp;&amp; make install<br>...<br>[root ~]# ln -s /usr/local/python36/bin/python3.6 /usr/bin/python3<br>[root ~]# python3 --version<br>Python 3.6.5<br>[root ~]# python3 -m pip install -U pip<br>[root ~]# pip3 --version<br></code></pre></td></tr></table></figure><blockquote><p>说明：上面在安装好Python之后还需要注册PATH环境变量，将Python安装路径下bin文件夹的绝对路径注册到PATH环境变量中。注册环境变量可以修改用户主目录下的.bash_profile或者&#x2F;etc目录下的profile文件，二者的区别在于前者相当于是用户环境变量，而后者相当于是系统环境变量。</p></blockquote></li><li><p>安装Redis-3.2.12。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# wget http://download.redis.io/releases/redis-3.2.12.tar.gz<br>[root ~]# gunzip redis-3.2.12.tar.gz<br>[root ~]# tar -xvf redis-3.2.12.tar<br>[root ~]# cd redis-3.2.12<br>[root ~]# make &amp;&amp; make install<br>[root ~]# redis-server --version<br>Redis server v=3.2.12 sha=00000000:0 malloc=jemalloc-4.0.3 bits=64 build=5bc5cd3c03d6ceb6<br>[root ~]# redis-cli --version<br>redis-cli 3.2.12<br></code></pre></td></tr></table></figure></li></ol><h3 id="配置服务"><a href="#配置服务" class="headerlink" title="配置服务"></a>配置服务</h3><p>我们可以Linux系统下安装和配置各种服务，也就是说我们可以把Linux系统打造成数据库服务器、Web服务器、缓存服务器、文件服务器、消息队列服务器等等。Linux下的大多数服务都被设置为守护进程（驻留在系统后台运行，但不会因为服务还在运行而导致Linux无法停止运行），所以我们安装的服务通常名字后面都有一个字母<code>d</code>，它是英文单词<code>daemon</code>的缩写，例如：防火墙服务叫firewalld，我们之前安装的MySQL服务叫mysqld，Apache服务器叫httpd等。在安装好服务之后，可以使用<code>systemctl</code>命令或<code>service</code>命令来完成对服务的启动、停止等操作，具体操作如下所示。</p><ol><li><p>启动防火墙服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# systemctl start firewalld<br></code></pre></td></tr></table></figure></li><li><p>终止防火墙服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# systemctl stop firewalld<br></code></pre></td></tr></table></figure></li><li><p>重启防火墙服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# systemctl restart firewalld<br></code></pre></td></tr></table></figure></li><li><p>查看防火墙服务状态。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# systemctl status firewalld<br></code></pre></td></tr></table></figure></li><li><p>设置&#x2F;禁用防火墙服务开机自启。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# systemctl enable firewalld<br>Created symlink from /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service to /usr/lib/systemd/system/firewalld.service.<br>Created symlink from /etc/systemd/system/multi-user.target.wants/firewalld.service to /usr/lib/systemd/system/firewalld.service.<br>[root ~]# systemctl disable firewalld<br>Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.<br>Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.<br></code></pre></td></tr></table></figure></li></ol><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><ol><li><p>在指定的时间执行命令。</p><ul><li><strong>at</strong> - 将任务排队，在指定的时间执行。</li><li><strong>atq</strong> - 查看待执行的任务队列。</li><li><strong>atrm</strong> - 从队列中删除待执行的任务。</li></ul><p>指定3天以后下午5点要执行的任务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# at 5pm+3days<br><span class="hljs-meta prompt_">at&gt; </span><span class="language-bash"><span class="hljs-built_in">rm</span> -f /root/*.html</span><br><span class="hljs-meta prompt_">at&gt; </span><span class="language-bash">&lt;EOT&gt;</span><br>job 9 at Wed Jun  5 17:00:00 2019<br></code></pre></td></tr></table></figure><p>查看待执行的任务队列。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# atq<br>9       Wed Jun  5 17:00:00 2019 a root<br></code></pre></td></tr></table></figure><p>从队列中删除指定的任务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]$ atrm 9<br></code></pre></td></tr></table></figure></li><li><p>计划任务表 - <strong>crontab</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# crontab -e<br>* * * * * echo &quot;hello, world!&quot; &gt;&gt; /root/hello.txt<br>59 23 * * * rm -f /root/*.log<br></code></pre></td></tr></table></figure><blockquote><p>说明：输入<code>crontab -e</code>命令会打开vim来编辑Cron表达式并指定触发的任务，上面我们定制了两个计划任务，一个是每分钟向&#x2F;root目录下的hello.txt中追加输出<code>hello, world!</code>；另一个是每天23时59分执行删除&#x2F;root目录下以log为后缀名的文件。如果不知道Cron表达式如何书写，可以参照&#x2F;etc&#x2F;crontab文件中的提示（下面会讲到）或者用搜索引擎找一下“Cron表达式在线生成器”来生成Cron表达式。</p></blockquote><p>和crontab相关的文件在<code>/etc</code>目录下，通过修改<code>/etc</code>目录下的crontab文件也能够定制计划任务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# cd /etc<br>[root etc]# ls -l | grep cron<br>-rw-------.  1 root root      541 Aug  3  2017 anacrontab<br>drwxr-xr-x.  2 root root     4096 Mar 27 11:56 cron.d<br>drwxr-xr-x.  2 root root     4096 Mar 27 11:51 cron.daily<br>-rw-------.  1 root root        0 Aug  3  2017 cron.deny<br>drwxr-xr-x.  2 root root     4096 Mar 27 11:50 cron.hourly<br>drwxr-xr-x.  2 root root     4096 Jun 10  2014 cron.monthly<br>-rw-r--r--   1 root root      493 Jun 23 15:09 crontab<br>drwxr-xr-x.  2 root root     4096 Jun 10  2014 cron.weekly<br>[root etc]# vim crontab<br>  1 SHELL=/bin/bash<br>  2 PATH=/sbin:/bin:/usr/sbin:/usr/bin<br>  3 MAILTO=root<br>  4<br>  5 # For details see man 4 crontabs<br>  6<br>  7 # Example of job definition:<br>  8 # .---------------- minute (0 - 59)<br>  9 # |  .------------- hour (0 - 23)<br> 10 # |  |  .---------- day of month (1 - 31)<br> 11 # |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...<br> 12 # |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat<br> 13 # |  |  |  |  |<br> 14 # *  *  *  *  * user-name  command to be executed<br></code></pre></td></tr></table></figure></li></ol><h3 id="网络访问和管理"><a href="#网络访问和管理" class="headerlink" title="网络访问和管理"></a>网络访问和管理</h3><ol><li><p>安全远程连接 - <strong>ssh</strong>。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]$ ssh root@120.77.222.217<br>The authenticity of host &#x27;120.77.222.217 (120.77.222.217)&#x27; can&#x27;t be established.<br>ECDSA key fingerprint is SHA256:BhUhykv+FvnIL03I9cLRpWpaCxI91m9n7zBWrcXRa8w.<br>ECDSA key fingerprint is MD5:cc:85:e9:f0:d7:07:1a:26:41:92:77:6b:7f:a0:92:65.<br>Are you sure you want to continue connecting (yes/no)? yes<br>Warning: Permanently added &#x27;120.77.222.217&#x27; (ECDSA) to the list of known hosts.<br>root@120.77.222.217&#x27;s password: <br></code></pre></td></tr></table></figure></li><li><p>通过网络获取资源 - <strong>wget</strong>。</p><ul><li>-b 后台下载模式</li><li>-O 下载到指定的目录</li><li>-r 递归下载</li></ul></li><li><p>发送和接收邮件 - <strong>mail</strong>。</p></li><li><p>网络配置工具（旧） - <strong>ifconfig</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# ifconfig eth0<br>eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 172.18.61.250  netmask 255.255.240.0  broadcast 172.18.63.255<br>        ether 00:16:3e:02:b6:46  txqueuelen 1000  (Ethernet)<br>        RX packets 1067841  bytes 1296732947 (1.2 GiB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 409912  bytes 43569163 (41.5 MiB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions <br></code></pre></td></tr></table></figure></li><li><p>网络配置工具（新） - <strong>ip</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# ip address<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1<br>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>    inet 127.0.0.1/8 scope host lo<br>       valid_lft forever preferred_lft forever<br>2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000<br>    link/ether 00:16:3e:02:b6:46 brd ff:ff:ff:ff:ff:ff<br>    inet 172.18.61.250/20 brd 172.18.63.255 scope global eth0<br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure></li><li><p>网络可达性检查 - <strong>ping</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# ping www.baidu.com -c 3<br>PING www.a.shifen.com (220.181.111.188) 56(84) bytes of data.<br>64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=1 ttl=51 time=36.3 ms<br>64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=2 ttl=51 time=36.4 ms<br>64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=3 ttl=51 time=36.4 ms<br>--- www.a.shifen.com ping statistics ---<br>3 packets transmitted, 3 received, 0% packet loss, time 2002ms<br>rtt min/avg/max/mdev = 36.392/36.406/36.427/0.156 ms<br></code></pre></td></tr></table></figure></li><li><p>显示或管理路由表 - <strong>route</strong>。</p></li><li><p>查看网络服务和端口 - <strong>netstat</strong> &#x2F; <strong>ss</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# netstat -nap | grep nginx<br></code></pre></td></tr></table></figure></li><li><p>网络监听抓包 - <strong>tcpdump</strong>。</p></li><li><p>安全文件拷贝 - <strong>scp</strong>。</p></li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# scp root@1.2.3.4:/root/guido.jpg hellokitty@4.3.2.1:/home/hellokitty/pic.jpg<br></code></pre></td></tr></table></figure><ol start="11"><li><p>文件同步工具 - <strong>rsync</strong>。</p><blockquote><p>说明：使用<code>rsync</code>可以实现文件的自动同步，这个对于文件服务器来说相当重要。关于这个命令的用法，我们在后面讲项目部署的时候为大家详细说明。</p></blockquote></li><li><p>安全文件传输 - <strong>sftp</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# sftp root@1.2.3.4<br>root@1.2.3.4&#x27;s password:<br>Connected to 1.2.3.4.<br><span class="hljs-meta prompt_">sftp&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p><code>help</code>：显示帮助信息。</p></li><li><p><code>ls</code>&#x2F;<code>lls</code>：显示远端&#x2F;本地目录列表。</p></li><li><p><code>cd</code>&#x2F;<code>lcd</code>：切换远端&#x2F;本地路径。</p></li><li><p><code>mkdir</code>&#x2F;<code>lmkdir</code>：创建远端&#x2F;本地目录。</p></li><li><p><code>pwd</code>&#x2F;<code>lpwd</code>：显示远端&#x2F;本地当前工作目录。</p></li><li><p><code>get</code>：下载文件。</p></li><li><p><code>put</code>：上传文件。</p></li><li><p><code>rm</code>：删除远端文件。</p></li><li><p><code>bye</code>&#x2F;<code>exit</code>&#x2F;<code>quit</code>：退出sftp。</p></li></ul></li></ol><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><ol><li><p>查看进程 - <strong>ps</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# ps -ef<br>UID        PID  PPID  C STIME TTY          TIME CMD<br>root         1     0  0 Jun23 ?        00:00:05 /usr/lib/systemd/systemd --switched-root --system --deserialize 21<br>root         2     0  0 Jun23 ?        00:00:00 [kthreadd]<br>...<br>[root ~]# ps -ef | grep mysqld<br>root      4943  4581  0 22:45 pts/0    00:00:00 grep --color=auto mysqld<br>mysql    25257     1  0 Jun25 ?        00:00:39 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid<br></code></pre></td></tr></table></figure></li><li><p>显示进程状态树 - <strong>pstree</strong>。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# pstree<br>systemd─┬─AliYunDun───18*[&#123;AliYunDun&#125;]<br>        ├─AliYunDunUpdate───3*[&#123;AliYunDunUpdate&#125;]<br>        ├─2*[agetty]<br>        ├─aliyun-service───2*[&#123;aliyun-service&#125;]<br>        ├─atd<br>        ├─auditd───&#123;auditd&#125;<br>        ├─dbus-daemon<br>        ├─dhclient<br>        ├─irqbalance<br>        ├─lvmetad<br>        ├─mysqld───28*[&#123;mysqld&#125;]<br>        ├─nginx───2*[nginx]<br>        ├─ntpd<br>        ├─polkitd───6*[&#123;polkitd&#125;]<br>        ├─rsyslogd───2*[&#123;rsyslogd&#125;]<br>        ├─sshd───sshd───bash───pstree<br>        ├─systemd-journal<br>        ├─systemd-logind<br>        ├─systemd-udevd<br>        └─tuned───4*[&#123;tuned&#125;]<br></code></pre></td></tr></table></figure></li><li><p>查找与指定条件匹配的进程 - <strong>pgrep</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]$ pgrep mysqld<br>3584<br></code></pre></td></tr></table></figure></li><li><p>通过进程号终止进程 - <strong>kill</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]$ kill -l<br> 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP<br> 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1<br>11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM<br>16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP<br>21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ<br>26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR<br>31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3<br>38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8<br>43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13<br>48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12<br>53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7<br>58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2<br>63) SIGRTMAX-1  64) SIGRTMAX<br>[root ~]# kill 1234<br>[root ~]# kill -9 1234<br></code></pre></td></tr></table></figure><p>例子：用一条命令强制终止正在运行的Redis进程。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">ps -ef | grep redis | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27; | xargs kill<br></code></pre></td></tr></table></figure></li><li><p>通过进程名终止进程 - <strong>killall</strong> &#x2F; <strong>pkill</strong>。</p><p> 结束名为mysqld的进程。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# pkill mysqld<br></code></pre></td></tr></table></figure><p> 结束hellokitty用户的所有进程。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# pkill -u hellokitty<br></code></pre></td></tr></table></figure><blockquote><p>说明：这样的操作会让hellokitty用户和服务器断开连接。</p></blockquote></li><li><p>将进程置于后台运行。</p><ul><li><code>Ctrl+Z</code> - 快捷键，用于停止进程并置于后台。</li><li><code>&amp;</code> - 将进程置于后台运行。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# mongod &amp;<br>[root ~]# redis-server<br>...<br>^Z<br>[4]+  Stopped                 redis-server<br></code></pre></td></tr></table></figure></li><li><p>查询后台进程 - <strong>jobs</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# jobs<br>[2]   Running                 mongod &amp;<br>[3]-  Stopped                 cat<br>[4]+  Stopped                 redis-server<br></code></pre></td></tr></table></figure></li><li><p>让进程在后台继续运行 - <strong>bg</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# bg %4<br>[4]+ redis-server &amp;<br>[root ~]# jobs<br>[2]   Running                 mongod &amp;<br>[3]+  Stopped                 cat<br>[4]-  Running                 redis-server &amp;<br></code></pre></td></tr></table></figure></li><li><p>将后台进程置于前台 - <strong>fg</strong>。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# fg %4<br>redis-server<br></code></pre></td></tr></table></figure><blockquote><p>说明：置于前台的进程可以使用<code>Ctrl+C</code>来终止它。</p></blockquote></li><li><p>调整程序&#x2F;进程运行时优先级 - <strong>nice</strong> &#x2F; <strong>renice</strong>。</p></li><li><p>用户登出后进程继续工作 - <strong>nohup</strong>。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# nohup ping www.baidu.com &gt; result.txt &amp;<br></code></pre></td></tr></table></figure></li><li><p>跟踪进程系统调用情况 - <strong>strace</strong>。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# pgrep mysqld<br>8803<br>[root ~]# strace -c -p 8803<br>strace: Process 8803 attached<br>^Cstrace: Process 8803 detached<br><span class="hljs-meta prompt_">% </span><span class="language-bash">time     seconds  usecs/call     calls    errors syscall</span><br>------ ----------- ----------- --------- --------- ----------------<br> 99.18    0.005719        5719         1           restart_syscall<br>  0.49    0.000028          28         1           mprotect<br>  0.24    0.000014          14         1           clone<br>  0.05    0.000003           3         1           mmap<br>  0.03    0.000002           2         1           accept<br>------ ----------- ----------- --------- --------- ----------------<br>100.00    0.005766                     5           total<br></code></pre></td></tr></table></figure><blockquote><p>说明：这个命令的用法和参数都比较复杂，建议大家在真正用到这个命令的时候再根据实际需要进行了解。</p></blockquote></li><li><p>查看当前运行级别 - <strong>runlevel</strong>。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# runlevel<br>N 3<br></code></pre></td></tr></table></figure></li><li><p>实时监控进程占用资源状况 - <strong>top</strong>。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# top<br>top - 23:04:23 up 3 days, 14:10,  1 user,  load average: 0.00, 0.01, 0.05<br>Tasks:  65 total,   1 running,  64 sleeping,   0 stopped,   0 zombie<br><span class="hljs-meta prompt_">%</span><span class="language-bash">Cpu(s):  0.3 us,  0.3 sy,  0.0 ni, 99.3 <span class="hljs-built_in">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br>KiB Mem :  1016168 total,   191060 free,   324700 used,   500408 buff/cache<br>KiB Swap:        0 total,        0 free,        0 used.   530944 avail Mem<br>...<br></code></pre></td></tr></table></figure><ul><li><code>-c</code> - 显示进程的整个路径。</li><li><code>-d</code> - 指定两次刷屏之间的间隔时间（秒为单位）。</li><li><code>-i</code> - 不显示闲置进程或僵尸进程。</li><li><code>-p</code> - 显示指定进程的信息。</li></ul></li></ol><h3 id="系统诊断"><a href="#系统诊断" class="headerlink" title="系统诊断"></a>系统诊断</h3><ol><li><p>系统启动异常诊断 - <strong>dmesg</strong>。</p></li><li><p>查看系统活动信息 - <strong>sar</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# sar -u -r 5 10<br>Linux 3.10.0-957.10.1.el7.x86_64 (izwz97tbgo9lkabnat2lo8z)      06/02/2019      _x86_64_        (2 CPU)<br><br>06:48:30 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle<br>06:48:35 PM     all      0.10      0.00      0.10      0.00      0.00     99.80<br><br>06:48:30 PM kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty<br>06:48:35 PM   1772012   2108392     54.33    102816   1634528    784940     20.23    793328   1164704         0<br></code></pre></td></tr></table></figure><ul><li><code>-A</code> - 显示所有设备（CPU、内存、磁盘）的运行状况。</li><li><code>-u</code> - 显示所有CPU的负载情况。</li><li><code>-d</code> - 显示所有磁盘的使用情况。</li><li><code>-r</code> - 显示内存的使用情况。</li><li><code>-n</code> - 显示网络运行状态。</li></ul></li><li><p>查看内存使用情况 - <strong>free</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# free<br>              total        used        free      shared  buff/cache   available<br>Mem:        1016168      323924      190452         356      501792      531800<br>Swap:             0           0           0<br></code></pre></td></tr></table></figure></li><li><p>虚拟内存统计 - <strong>vmstat</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# vmstat<br>procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----<br> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st<br> 2  0      0 204020  79036 667532    0    0     5    18  101   58  1  0 99  0  0<br></code></pre></td></tr></table></figure></li><li><p>CPU信息统计 - <strong>mpstat</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# mpstat<br>Linux 3.10.0-957.5.1.el7.x86_64 (iZ8vba0s66jjlfmo601w4xZ)       05/30/2019      _x86_64_        (1 CPU)<br><br>01:51:54 AM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle<br>01:51:54 AM  all    0.71    0.00    0.17    0.04    0.00    0.00    0.00    0.00    0.00   99.07<br></code></pre></td></tr></table></figure></li><li><p>查看进程使用内存状况 - <strong>pmap</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# ps<br>  PID TTY          TIME CMD<br> 4581 pts/0    00:00:00 bash<br> 5664 pts/0    00:00:00 ps<br>[root ~]# pmap 4581<br>4581:   -bash<br>0000000000400000    884K r-x-- bash<br>00000000006dc000      4K r---- bash<br>00000000006dd000     36K rw--- bash<br>00000000006e6000     24K rw---   [ anon ]<br>0000000001de0000    400K rw---   [ anon ]<br>00007f82fe805000     48K r-x-- libnss_files-2.17.so<br>00007f82fe811000   2044K ----- libnss_files-2.17.so<br>...<br></code></pre></td></tr></table></figure></li><li><p>报告设备CPU和I&#x2F;O统计信息 - <strong>iostat</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# iostat<br>Linux 3.10.0-693.11.1.el7.x86_64 (iZwz97tbgo9lkabnat2lo8Z)      06/26/2018      _x86_64_       (1 CPU)<br>avg-cpu:  %user   %nice %system %iowait  %steal   %idle<br>           0.79    0.00    0.20    0.04    0.00   98.97<br>Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn<br>vda               0.85         6.78        21.32    2106565    6623024<br>vdb               0.00         0.01         0.00       2088          0<br></code></pre></td></tr></table></figure></li><li><p>显示所有PCI设备 - <strong>lspci</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# lspci<br>00:00.0 Host bridge: Intel Corporation 440FX - 82441FX PMC [Natoma] (rev 02)<br>00:01.0 ISA bridge: Intel Corporation 82371SB PIIX3 ISA [Natoma/Triton II]<br>00:01.1 IDE interface: Intel Corporation 82371SB PIIX3 IDE [Natoma/Triton II]<br>00:01.2 USB controller: Intel Corporation 82371SB PIIX3 USB [Natoma/Triton II] (rev 01)<br>00:01.3 Bridge: Intel Corporation 82371AB/EB/MB PIIX4 ACPI (rev 03)<br>00:02.0 VGA compatible controller: Cirrus Logic GD 5446<br>00:03.0 Ethernet controller: Red Hat, Inc. Virtio network device<br>00:04.0 Communication controller: Red Hat, Inc. Virtio console<br>00:05.0 SCSI storage controller: Red Hat, Inc. Virtio block device<br>00:06.0 SCSI storage controller: Red Hat, Inc. Virtio block device<br>00:07.0 Unclassified device [00ff]: Red Hat, Inc. Virtio memory balloon<br></code></pre></td></tr></table></figure></li><li><p>显示进程间通信设施的状态 - <strong>ipcs</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Shell">[root ~]# ipcs<br><br>------ Message Queues --------<br>key        msqid      owner      perms      used-bytes   messages    <br><br>------ Shared Memory Segments --------<br>key        shmid      owner      perms      bytes      nattch     status      <br><br>------ Semaphore Arrays --------<br>key        semid      owner      perms      nsems<br></code></pre></td></tr></table></figure></li></ol><h3 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h3><p>之前我们提到过，Shell是一个连接用户和操作系统的应用程序，它提供了人机交互的界面（接口），用户通过这个界面访问操作系统内核的服务。Shell脚本是一种为Shell编写的脚本程序，我们可以通过Shell脚本来进行系统管理，同时也可以通过它进行文件操作。总之，编写Shell脚本对于使用Linux系统的人来说，应该是一项标配技能。</p><p>互联网上有大量关于Shell脚本的相关知识，我不打算再此对Shell脚本做一个全面系统的讲解，我们通过下面的代码来感性的认识下Shell脚本就行了。</p><p>例子1：输入两个整数m和n，计算从m到n的整数求和的结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/usr/bin/bash</span><br>printf &#x27;m = &#x27;<br>read m<br>printf &#x27;n = &#x27;<br>read n<br>a=$m<br>sum=0<br>while [ $a -le $n ]<br>do<br>    sum=$[ sum + a ]<br>    a=$[ a + 1 ]<br>done<br>echo &#x27;结果: &#x27;$sum<br></code></pre></td></tr></table></figure><p>例子2：自动创建文件夹和指定数量的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/usr/bin/bash</span><br>printf &#x27;输入文件夹名: &#x27;<br>read dir<br>printf &#x27;输入文件名: &#x27;<br>read file<br>printf &#x27;输入文件数量(&lt;1000): &#x27;<br>read num<br>if [ $num -ge 1000 ]<br>then<br>    echo &#x27;文件数量不能超过1000&#x27;<br>else<br>    if [ -e $dir -a -d $dir ]<br>    then<br>        rm -rf $dir<br>    else<br>        if [ -e $dir -a -f $dir ]<br>        then<br>            rm -f $dir<br>        fi<br>    fi<br>    mkdir -p $dir<br>    index=1<br>    while [ $index -le $num ]<br>    do<br>        if [ $index -lt 10 ]<br>        then<br>            pre=&#x27;00&#x27;<br>        elif [ $index -lt 100 ]<br>        then<br>            pre=&#x27;0&#x27;<br>        else<br>            pre=&#x27;&#x27;<br>        fi<br>        touch $dir&#x27;/&#x27;$file&#x27;_&#x27;$pre$index<br>        index=$[ index + 1 ]<br>    done<br>fi<br></code></pre></td></tr></table></figure><p>例子3：自动安装指定版本的Redis。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/usr/bin/bash</span><br>install_redis() &#123;<br>    if ! which redis-server &gt; /dev/null<br>    then<br>        cd /root<br>        wget $1$2&#x27;.tar.gz&#x27; &gt;&gt; install.log<br>        gunzip /root/$2&#x27;.tar.gz&#x27;<br>        tar -xf /root/$2&#x27;.tar&#x27;<br>        cd /root/$2<br>        make &gt;&gt; install.log<br>        make install &gt;&gt; install.log<br>        echo &#x27;安装完成&#x27;<br>    else<br>        echo &#x27;已经安装过Redis&#x27;<br>    fi<br>&#125;<br><br>install_redis &#x27;http://download.redis.io/releases/&#x27; $1<br></code></pre></td></tr></table></figure><h3 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h3><ol><li><p>Linux命令行常用快捷键</p><table><thead><tr><th>快捷键</th><th>功能说明</th></tr></thead><tbody><tr><td>tab</td><td>自动补全命令或路径</td></tr><tr><td>Ctrl+a</td><td>将光标移动到命令行行首</td></tr><tr><td>Ctrl+e</td><td>将光标移动到命令行行尾</td></tr><tr><td>Ctrl+f</td><td>将光标向右移动一个字符</td></tr><tr><td>Ctrl+b</td><td>将光标向左移动一个字符</td></tr><tr><td>Ctrl+k</td><td>剪切从光标到行尾的字符</td></tr><tr><td>Ctrl+u</td><td>剪切从光标到行首的字符</td></tr><tr><td>Ctrl+w</td><td>剪切光标前面的一个单词</td></tr><tr><td>Ctrl+y</td><td>复制剪切命名剪切的内容</td></tr><tr><td>Ctrl+c</td><td>中断正在执行的任务</td></tr><tr><td>Ctrl+h</td><td>删除光标前面的一个字符</td></tr><tr><td>Ctrl+d</td><td>退出当前命令行</td></tr><tr><td>Ctrl+r</td><td>搜索历史命令</td></tr><tr><td>Ctrl+g</td><td>退出历史命令搜索</td></tr><tr><td>Ctrl+l</td><td>清除屏幕上所有内容在屏幕的最上方开启一个新行</td></tr><tr><td>Ctrl+s</td><td>锁定终端使之暂时无法输入内容</td></tr><tr><td>Ctrl+q</td><td>退出终端锁定</td></tr><tr><td>Ctrl+z</td><td>将正在终端执行的任务停下来放到后台</td></tr><tr><td>!!</td><td>执行上一条命令</td></tr><tr><td>!数字</td><td>执行数字对应的历史命令</td></tr><tr><td>!字母</td><td>执行最近的以字母打头的命令</td></tr><tr><td>!$ &#x2F; Esc+.</td><td>获得上一条命令最后一个参数</td></tr><tr><td>Esc+b</td><td>移动到当前单词的开头</td></tr><tr><td>Esc+f</td><td>移动到当前单词的结尾</td></tr></tbody></table></li><li><p>man查阅命令手册的内容说明</p><table><thead><tr><th>手册中的标题</th><th>功能说明</th></tr></thead><tbody><tr><td>NAME</td><td>命令的说明和介绍</td></tr><tr><td>SYNOPSIS</td><td>使用该命令的基本语法</td></tr><tr><td>DESCRIPTION</td><td>使用该命令的详细描述，各个参数的作用，有时候这些信息会出现在OPTIONS中</td></tr><tr><td>OPTIONS</td><td>命令相关参数选项的说明</td></tr><tr><td>EXAMPLES</td><td>使用该命令的参考例子</td></tr><tr><td>EXIT STATUS</td><td>命令结束的退出状态码，通常0表示成功执行</td></tr><tr><td>SEE ALSO</td><td>和命令相关的其他命令或信息</td></tr><tr><td>BUGS</td><td>和命令相关的缺陷的描述</td></tr><tr><td>AUTHOR</td><td>该命令的作者介绍</td></tr></tbody></table></li></ol>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python100day</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>filebeat 日志采集</title>
    <link href="/2022/08/18/filebeat-%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86/"/>
    <url>/2022/08/18/filebeat-%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="日志采集利器-Filebeat！"><a href="#日志采集利器-Filebeat！" class="headerlink" title="日志采集利器 Filebeat！"></a>日志采集利器 Filebeat！</h1><h2 id="Filebeat概述"><a href="#Filebeat概述" class="headerlink" title="Filebeat概述"></a>Filebeat概述</h2><h3 id="什么是Filebeat"><a href="#什么是Filebeat" class="headerlink" title="| 什么是Filebeat"></a>| 什么是Filebeat</h3><p>filebeat是用于”转发”和”集中日志数据”的轻量级数据采集器。</p><p>filebeat会监视指定的日志文件路径，收集日志事件并将数据转发到elasticsearch，logstash，redis，kafka存储服务器。</p><p>当您要面对成百上千，甚至成千上万的服务器，虚拟机的容器生成的日志时，请告别SSH吧。</p><p>Filebeat将为您提供一种轻量级方法，用于转发和汇总日志与文件，让简单的事情不再繁杂。</p><h3 id="Filebeat的组件"><a href="#Filebeat的组件" class="headerlink" title="| Filebeat的组件"></a>| Filebeat的组件</h3><p>Filebeat包含两个主要组件，input(输入)和Harvester(收割机)，两个组件协同工作将文件的尾部最新数据发送出去。</p><ul><li>Harveste组件: 负责逐行读取单个文件的内容,然后将内容发送到输出。</li><li>input组件: 输入负责管理收割机并找到所有要读取的源。该参数的源文件路径需要使用者手动配置。</li><li>Spooler(缓冲区): 将Harvester组件采集的数据进行统一的缓存,并发往目的端,可以是 Elasticsearch, Logstash , kafka 和 Redis 等。</li></ul><h3 id="Filebeat工作原理"><a href="#Filebeat工作原理" class="headerlink" title="| Filebeat工作原理"></a>| Filebeat工作原理</h3><p>filebeat工作流程如下</p><ol><li>filebeat启动后，filebeat通过Input读取指定的日志路径;</li><li>为该文件日志启动收割进程harvester,每个收割进程读取一个日志文件的新内容,并发送这些新的日志数据到处理程序spooler;</li><li>spooler会集合这些事件,最后filebeat会发送集合的数据到你指定的位置。</li></ol><p>Filebeat如何保持文件的状态？</p><ul><li>Filebeat保持每个文件的状态,并经常将状态刷新到注册表文件(data&#x2F;registry&#x2F;filebeat&#x2F;log.json)中的磁盘。</li><li>该状态用于记住收割机读取的最后一个偏移量,并确保发送所有日志行。</li></ul><p>Filebeat如何确保至少一次交付？</p><ol><li>Filebeat保证事件将至少传送到配置的输出一次并且不会丢失数据。</li><li>Filebeat能够实现这种行为，因为它将每个事件的传递状态存储在注册表文件中。</li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_png/frhpCyJtJy3lVjpsdz0owEpo1mCosPPBPy3s2CVM5svKvYgfFcBxrc2aOszFtrXicibLjeicg3x3tibMb3N0cyZpIg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id="部署Filebeat环境"><a href="#部署Filebeat环境" class="headerlink" title="部署Filebeat环境"></a>部署Filebeat环境</h2><h3 id="安装Filebeat软件"><a href="#安装Filebeat软件" class="headerlink" title="| 安装Filebeat软件"></a>| 安装Filebeat软件</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 编译安装Filebeatwget https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.12.1-linux-x86_64.tar.gztar xf filebeat-7.12.1-linux-x86_64.tar.gz -C /oldboyedu/softwares/cd /oldboyedu/softwares/ln -s filebeat-7.12.1-linux-x86_64 filebeatvim /etc/profile.d/filebeat.sh# 添加Filebeat的环境变量</span><br>cat <span class="hljs-regexp">/etc/</span>profile.d<span class="hljs-regexp">/filebeat.sh#!/</span>bin/bash<br>export FILE_BEAT=<span class="hljs-regexp">/oldboyedu/</span>softwares/filebeatexport PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$FILE_BEAT</span><span class="hljs-comment"># 使环境变量生效</span><br>source <span class="hljs-regexp">/etc/</span>profile.d/filebeat.sh <span class="hljs-comment"># 查看环境变量是否生效</span><br>which filebeat<br></code></pre></td></tr></table></figure><h3 id="filebeat参数介绍"><a href="#filebeat参数介绍" class="headerlink" title="| filebeat参数介绍"></a>| filebeat参数介绍</h3><p><img src="https://mmbiz.qpic.cn/mmbiz_png/frhpCyJtJy3lVjpsdz0owEpo1mCosPPBiciaqUFFN5LpOYTicJUibgcYtdSJAZT5iayYdvM5y6QibL0a7ibUEiabt6uFWw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h3 id="运行第一个实例"><a href="#运行第一个实例" class="headerlink" title="| 运行第一个实例"></a>| 运行第一个实例</h3><h3 id="将标准输入的数据进行标准输出"><a href="#将标准输入的数据进行标准输出" class="headerlink" title="**将标准输入的数据进行标准输出\"></a>**将标准输入的数据进行标准输出\</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">vim <span class="hljs-keyword">stdin</span>-<span class="hljs-built_in">to</span>-console.yamlfilebeat.inputs:- type: <span class="hljs-keyword">stdin</span>  enabled: <span class="hljs-literal">true</span><br>output.console:  pretty: <span class="hljs-literal">true</span>  enable: <span class="hljs-literal">true</span><span class="hljs-comment"># 查看filebeat的输出</span><br>filebeat -e -c <span class="hljs-keyword">stdin</span>-<span class="hljs-built_in">to</span>-console.yaml<br></code></pre></td></tr></table></figure><h2 id="企业实战"><a href="#企业实战" class="headerlink" title="企业实战"></a>企业实战</h2><h3 id="nginx日志收集"><a href="#nginx日志收集" class="headerlink" title="| nginx日志收集"></a>| nginx日志收集</h3><p>**安装nginx\</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> epel-releaseyum -y <span class="hljs-keyword">install</span> nginx<br></code></pre></td></tr></table></figure><p>**创建配置文件\</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/conf.d/</span>elk103.oldboyedu.com.confserver &#123;listen <span class="hljs-number">80</span>;server_name es.oldboyedu.com;<br>root <span class="hljs-regexp">/oldboyedu/</span>data<span class="hljs-regexp">/nginx/</span>;<br>location / &#123;index index.html;&#125;&#125;<br></code></pre></td></tr></table></figure><p>**创建测试数据\</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/oldboyedu/</span>data<span class="hljs-regexp">/nginx/</span><br>echo <span class="hljs-string">&quot;&lt;h1&gt;cper liyupi、&lt;/h1&gt;&quot;</span> &gt; <span class="hljs-regexp">/oldboyedu/</span>data<span class="hljs-regexp">/nginx/i</span>ndex.html<br></code></pre></td></tr></table></figure><p>**检查配置文件\</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">nginx -t</span><br></code></pre></td></tr></table></figure><p>**启动nginx服务\</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> nginx<br></code></pre></td></tr></table></figure><p>**测试nginx服务\</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># 编写脚本vim <span class="hljs-regexp">/server/</span>scripts<span class="hljs-regexp">/nginx.sh #!/</span>bin/bashwhile <span class="hljs-keyword">true</span>  <span class="hljs-keyword">do</span>  <span class="hljs-keyword">for</span> i in <span class="hljs-string">&quot;curl es.oldboyedu.com&quot;</span>    <span class="hljs-keyword">do</span>Time=$((RANDOM%<span class="hljs-number">5</span> +<span class="hljs-number">1</span> ))echo <span class="hljs-string">&quot;本次间隔时间为：$Time&quot;</span>curl elk103.oldboyedu.comsleep $Time  donedone<br></code></pre></td></tr></table></figure><p>**配置nginx收集JSON并重启nginx\</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs hsp"><span class="hljs-meta"># 修改nginx的配置文件vim /etc/nginx/nginx.conf...</span><br><span class="hljs-meta"># 自定义nginx的日志格式为json格式log_format oldboyedu_nginx_json &#x27;&#123;<span class="hljs-string">&quot;@timestamp&quot;</span>:<span class="hljs-string">&quot;$time_iso8601&quot;</span>,&#x27;                           &#x27;<span class="hljs-string">&quot;host&quot;</span>:<span class="hljs-string">&quot;$server_addr&quot;</span>,&#x27;                           &#x27;<span class="hljs-string">&quot;clientip&quot;</span>:<span class="hljs-string">&quot;$remote_addr&quot;</span>,&#x27;                           &#x27;<span class="hljs-string">&quot;size&quot;</span>:$body_bytes_sent,&#x27;                           &#x27;<span class="hljs-string">&quot;responsetime&quot;</span>:$request_time,&#x27;                           &#x27;<span class="hljs-string">&quot;upstreamtime&quot;</span>:<span class="hljs-string">&quot;$upstream_response_time&quot;</span>,&#x27;                           &#x27;<span class="hljs-string">&quot;upstreamhost&quot;</span>:<span class="hljs-string">&quot;$upstream_addr&quot;</span>,&#x27;                           &#x27;<span class="hljs-string">&quot;http_host&quot;</span>:<span class="hljs-string">&quot;$host&quot;</span>,&#x27;                           &#x27;<span class="hljs-string">&quot;uri&quot;</span>:<span class="hljs-string">&quot;$uri&quot;</span>,&#x27;                           &#x27;<span class="hljs-string">&quot;domain&quot;</span>:<span class="hljs-string">&quot;$host&quot;</span>,&#x27;                           &#x27;<span class="hljs-string">&quot;xff&quot;</span>:<span class="hljs-string">&quot;$http_x_forwarded_for&quot;</span>,&#x27;                           &#x27;<span class="hljs-string">&quot;referer&quot;</span>:<span class="hljs-string">&quot;$http_referer&quot;</span>,&#x27;                           &#x27;<span class="hljs-string">&quot;tcp_xff&quot;</span>:<span class="hljs-string">&quot;$proxy_protocol_addr&quot;</span>,&#x27;                           &#x27;<span class="hljs-string">&quot;http_user_agent&quot;</span>:<span class="hljs-string">&quot;$http_user_agent&quot;</span>,&#x27;                           &#x27;<span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-string">&quot;$status&quot;</span>&#125;&#x27;;</span><br><br>access_log  /var/log/nginx/access.log  oldboyedu_nginx_json<span class="hljs-comment">;</span><br><span class="hljs-meta"># 测试配置文件是否正常nginx -t</span><br><span class="hljs-meta"># 重新加载nginxsystemctl restart nginx</span><br></code></pre></td></tr></table></figure><p>**配置**filebeat的配置文件\</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">vim <span class="hljs-number">01</span>-nginx-<span class="hljs-keyword">to</span>-es.yamlfilebeat.inputs:- <span class="hljs-keyword">type</span>: <span class="hljs-keyword">log</span>  paths: - /var/<span class="hljs-keyword">log</span>/nginx/<span class="hljs-keyword">access</span>.<span class="hljs-keyword">log</span>  tags: &quot;nginx&quot;  # 默认值为<span class="hljs-keyword">false</span>，我们需要修改为<span class="hljs-keyword">true</span>，即不会将消息存储至message字段!  <span class="hljs-type">json</span>.keys_under_root: <span class="hljs-keyword">true</span><br>output.elasticsearch:  hosts: [&quot;192.168.56.130:9200&quot;,&quot;192.168.56.131:9200&quot;,&quot;192.168.56.132:9200&quot;]  #<span class="hljs-keyword">index</span>: &quot;oldboy-2022-%&#123;[agent.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;  indices:- <span class="hljs-keyword">index</span>: &quot;oldboyedu-nginx2022-%&#123;+yyyy.MM.dd&#125;&quot;  <span class="hljs-keyword">when</span>.contains:tags: &quot;nginx&quot;<br># 禁用索引的生命周期!setup.ilm.enabled: <span class="hljs-keyword">false</span># 指定索引模板的名称setup.<span class="hljs-keyword">template</span>.name: &quot;oldboyedu&quot;# 指定索引模板的匹配模式setup.<span class="hljs-keyword">template</span>.pattern: &quot;oldboyedu-nginx*&quot;# 指定索引模板的分片信息setup.<span class="hljs-keyword">template</span>.settings:  <span class="hljs-keyword">index</span>.number_of_shards: <span class="hljs-number">5</span>  <span class="hljs-keyword">index</span>.number_of_replicas: <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>**收集nginx的错误日志\</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">vim <span class="hljs-number">02</span>-nginx-<span class="hljs-keyword">to</span>-es.yaml filebeat.inputs:- <span class="hljs-keyword">type</span>: <span class="hljs-keyword">log</span>  paths:     - /var/<span class="hljs-keyword">log</span>/nginx/<span class="hljs-keyword">access</span>.<span class="hljs-keyword">log</span>  tags: &quot;nginx-access&quot;  # 默认值为<span class="hljs-keyword">false</span>，我们需要修改为<span class="hljs-keyword">true</span>，即不会将消息存储至message字段!  <span class="hljs-type">json</span>.keys_under_root: <span class="hljs-keyword">true</span><br><br>- <span class="hljs-keyword">type</span>: <span class="hljs-keyword">log</span>  paths:     - /var/<span class="hljs-keyword">log</span>/nginx/error.<span class="hljs-keyword">log</span>  tags: &quot;nginx-error&quot;<br><br>output.elasticsearch:  hosts: [&quot;192.168.56.130:9200&quot;,&quot;192.168.56.131:9200&quot;,&quot;192.168.56.132:9200&quot;]  #<span class="hljs-keyword">index</span>: &quot;oldboy-2022-%&#123;[agent.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;  indices:    - <span class="hljs-keyword">index</span>: &quot;oldboyedu-nginx-access-%&#123;+yyyy.MM.dd&#125;&quot;      <span class="hljs-keyword">when</span>.contains:        tags: &quot;nginx-access&quot;<br>    - <span class="hljs-keyword">index</span>: &quot;oldboyedu-nginx-error-%&#123;+yyyy.MM.dd&#125;&quot;      <span class="hljs-keyword">when</span>.contains:        tags: &quot;nginx-error&quot;<br># 禁用索引的生命周期!setup.ilm.enabled: <span class="hljs-keyword">false</span># 指定索引模板的名称setup.<span class="hljs-keyword">template</span>.name: &quot;oldboyedu&quot;# 指定索引模板的匹配模式setup.<span class="hljs-keyword">template</span>.pattern: &quot;oldboyedu-nginx*&quot;# 指定索引模板的分片信息setup.<span class="hljs-keyword">template</span>.settings:  <span class="hljs-keyword">index</span>.number_of_shards: <span class="hljs-number">5</span>  <span class="hljs-keyword">index</span>.number_of_replicas: <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="Nginx多虚拟主机"><a href="#Nginx多虚拟主机" class="headerlink" title="| Nginx多虚拟主机"></a>| Nginx多虚拟主机</h3><p>**配置nginx的多虚拟主机\</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">vim <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/conf.d/</span>bbs.oldboyedu.com.confserver &#123;listen <span class="hljs-number">80</span>;server_name bbs.oldboyedu.com;<br>root <span class="hljs-regexp">/oldboyedu/</span>data<span class="hljs-regexp">/nginx/</span>bbs;<br> # 指定access.log的存储路径及日志格式.        access_log <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>bbs.log oldboyedu_nginx_json;<br>location <span class="hljs-regexp">/ &#123;index index.html;&#125;&#125;vim /</span>etc<span class="hljs-regexp">/nginx/</span>conf.d/blog.oldboyedu.com.conf server &#123;listen <span class="hljs-number">80</span>;server_name blog.oldboyedu.com;<br>root <span class="hljs-regexp">/oldboyedu/</span>data<span class="hljs-regexp">/nginx/</span>blog;<br>        # 指定access.log的存储路径及日志格式.        access_log <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>blog.log oldboyedu_nginx_json;<br>location / &#123;index index.html;&#125;&#125;<br></code></pre></td></tr></table></figure><p>**创建测试数据\</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts">mkdir -p <span class="hljs-keyword">/oldboyedu/</span>data<span class="hljs-keyword">/nginx/</span><span class="hljs-punctuation">&#123;</span>blog,bbs<span class="hljs-punctuation">&#125;</span>echo <span class="hljs-string">&quot;&lt;h1&gt;blog&lt;/h1&gt;&quot;</span> &gt; <span class="hljs-keyword">/oldboyedu/</span>data<span class="hljs-keyword">/nginx/</span>blog/index.htmlecho <span class="hljs-string">&quot;&lt;h1&gt;bbs&lt;/h1&gt;&quot;</span> &gt; <span class="hljs-keyword">/oldboyedu/</span>data<span class="hljs-keyword">/nginx/</span>bbs/index.html<br><span class="hljs-meta"># 检查配置文件的语法nginx -t</span><br><br><br><span class="hljs-meta"># 修改主机名映射vim /etc/hosts</span><br>...<br><span class="hljs-number">192.168</span><span class="hljs-number">.56</span><span class="hljs-number">.132</span> blog.oldboyedu.com192<span class="hljs-number">.168</span><span class="hljs-number">.56</span><span class="hljs-number">.132</span> bbs.oldboyedu.com<br><span class="hljs-meta"># 重启nginx服务systemctl restart nginx</span><br><span class="hljs-meta"># 测试服务curl blog.oldboyedu.comcurl bbs.oldboyedu.com</span><br></code></pre></td></tr></table></figure><p>**编写fielbeat的yaml\</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">vim nginx_vm_host.yamlfilebeat.inputs:- <span class="hljs-keyword">type</span>: <span class="hljs-keyword">log</span>  enabled: <span class="hljs-keyword">true</span>  paths:    - /var/<span class="hljs-keyword">log</span>/nginx/<span class="hljs-keyword">access</span>.<span class="hljs-keyword">log</span>  # <span class="hljs-keyword">false</span>会将<span class="hljs-type">json</span>解析的格式存储至message，改为<span class="hljs-keyword">true</span>则不存储至message  <span class="hljs-type">json</span>.keys_under_root: <span class="hljs-keyword">true</span>  # 覆盖默认的message字段，使用自定义<span class="hljs-type">json</span>格式的key  <span class="hljs-type">json</span>.overwrite_keys: <span class="hljs-keyword">true</span>  # 为访问日志(&quot;access.log&quot;)打标签  tags: [&quot;nginx-access&quot;]<br>- <span class="hljs-keyword">type</span>: <span class="hljs-keyword">log</span>  enabled: <span class="hljs-keyword">true</span>  paths:    - /var/<span class="hljs-keyword">log</span>/nginx/blog.<span class="hljs-keyword">log</span>  # <span class="hljs-keyword">false</span>会将<span class="hljs-type">json</span>解析的格式存储至message，改为<span class="hljs-keyword">true</span>则不存储至message  <span class="hljs-type">json</span>.keys_under_root: <span class="hljs-keyword">true</span>  # 覆盖默认的message字段，使用自定义<span class="hljs-type">json</span>格式的key  <span class="hljs-type">json</span>.overwrite_keys: <span class="hljs-keyword">true</span>  # 为访问日志(&quot;access.log&quot;)打标签  tags: [&quot;nginx-blog&quot;]<br><br>- <span class="hljs-keyword">type</span>: <span class="hljs-keyword">log</span>  enabled: <span class="hljs-keyword">true</span>  paths:    - /var/<span class="hljs-keyword">log</span>/nginx/demo.<span class="hljs-keyword">log</span>  # <span class="hljs-keyword">false</span>会将<span class="hljs-type">json</span>解析的格式存储至message，改为<span class="hljs-keyword">true</span>则不存储至message  <span class="hljs-type">json</span>.keys_under_root: <span class="hljs-keyword">true</span>  # 覆盖默认的message字段，使用自定义<span class="hljs-type">json</span>格式的key  <span class="hljs-type">json</span>.overwrite_keys: <span class="hljs-keyword">true</span>  # 为访问日志(&quot;access.log&quot;)打标签  tags: [&quot;nginx-demo&quot;]<br>- <span class="hljs-keyword">type</span>: <span class="hljs-keyword">log</span>  <span class="hljs-keyword">enable</span>: <span class="hljs-keyword">true</span>  paths:    - /var/<span class="hljs-keyword">log</span>/nginx/error.<span class="hljs-keyword">log</span>  # 为错误日志(&quot;error.log&quot;)打标签  tags: [&quot;nginx-error&quot;]<br>output.elasticsearch:  hosts: [&quot;192.168.56.130:9200&quot;,&quot;192.168.56.131:9200&quot;,&quot;192.168.56.132:9200&quot;]  # <span class="hljs-keyword">index</span>: &quot;nginx-access-%&#123;[agent.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;  # 注意哈，下面的标签不再是&quot;index&quot;啦~  indices:    - <span class="hljs-keyword">index</span>: &quot;nginx-access-%&#123;[agent.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;      <span class="hljs-keyword">when</span>.contains:        tags: &quot;nginx-access&quot;<br>    - <span class="hljs-keyword">index</span>: &quot;nginx-error-%&#123;[agent.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;      <span class="hljs-keyword">when</span>.contains:        tags: &quot;nginx-error&quot;<br>    - <span class="hljs-keyword">index</span>: &quot;nginx-blog-%&#123;[agent.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;      <span class="hljs-keyword">when</span>.contains:        tags: &quot;nginx-blog&quot;<br>    - <span class="hljs-keyword">index</span>: &quot;nginx-demo-%&#123;[agent.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;      <span class="hljs-keyword">when</span>.contains:        tags: &quot;nginx-demo&quot;<br>setup.ilm.enabled: <span class="hljs-keyword">false</span># 定义模板名称.setup.<span class="hljs-keyword">template</span>.name: &quot;nginx&quot;# 定义模板的匹配索引名称.setup.<span class="hljs-keyword">template</span>.pattern: &quot;nginx-*&quot;[root@oldboy-es03 project]# filebeat -e -c nginx_vm_host.yaml<br></code></pre></td></tr></table></figure><h3 id="Tomcat日志收集"><a href="#Tomcat日志收集" class="headerlink" title="| Tomcat日志收集"></a>| Tomcat日志收集</h3><p>**部署tomcat\</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml">tar zxf apache-tomcat-10.0.6.tar.gz -C /oldboy/softwares/cd  /oldboyedu/softwares/ln -s apache-tomcat-10.0.6 tomcat# 配置JDK 的环境变量<br>vim  /etc/profile.d/tomcat.sh#!/bin/bash<br>export TOMCAT_HOME=/oldboyedu/softwares/tomcatexport PATH=$PATH:$TOMCAT_HOME/bin# 让环境变量生效<br>.  /etc/profile.d/tomcat.shcatalina.sh<br># 配置tomcat的JSON格式vim /oldboyedu/softwares/tomcat/conf/server.xml···(大概在133行哟~)<br>      <span class="hljs-tag">&lt;<span class="hljs-name">Host</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tomcat.oldboyedu.com&quot;</span>  <span class="hljs-attr">appBase</span>=<span class="hljs-string">&quot;webapps&quot;</span>            <span class="hljs-attr">unpackWARs</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">autoDeploy</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>...(需要手动注释一下原内容)<span class="hljs-comment">&lt;!--        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;               prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;--&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">Valve</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="hljs-attr">directory</span>=<span class="hljs-string">&quot;logs&quot;</span>            <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;tomcat.oldboyedu.com_access_log&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;.txt&quot;</span><span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;&#123;<span class="hljs-symbol">&amp;quot;</span>clientip<span class="hljs-symbol">&amp;quot;</span>:<span class="hljs-symbol">&amp;quot;</span>%h<span class="hljs-symbol">&amp;quot;</span>,<span class="hljs-symbol">&amp;quot;</span>ClientUser<span class="hljs-symbol">&amp;quot;</span>:<span class="hljs-symbol">&amp;quot;</span>%l<span class="hljs-symbol">&amp;quot;</span>,<span class="hljs-symbol">&amp;quot;</span>authenticated<span class="hljs-symbol">&amp;quot;</span>:<span class="hljs-symbol">&amp;quot;</span>%u<span class="hljs-symbol">&amp;quot;</span>,<span class="hljs-symbol">&amp;quot;</span>AccessTime<span class="hljs-symbol">&amp;quot;</span>:<span class="hljs-symbol">&amp;quot;</span>%t<span class="hljs-symbol">&amp;quot;</span>,<span class="hljs-symbol">&amp;quot;</span>request<span class="hljs-symbol">&amp;quot;</span>:<span class="hljs-symbol">&amp;quot;</span>%r<span class="hljs-symbol">&amp;quot;</span>,<span class="hljs-symbol">&amp;quot;</span>status<span class="hljs-symbol">&amp;quot;</span>:<span class="hljs-symbol">&amp;quot;</span>%s<span class="hljs-symbol">&amp;quot;</span>,<span class="hljs-symbol">&amp;quot;</span>SendBytes<span class="hljs-symbol">&amp;quot;</span>:<span class="hljs-symbol">&amp;quot;</span>%b<span class="hljs-symbol">&amp;quot;</span>,<span class="hljs-symbol">&amp;quot;</span>Query?string<span class="hljs-symbol">&amp;quot;</span>:<span class="hljs-symbol">&amp;quot;</span>%q<span class="hljs-symbol">&amp;quot;</span>,<span class="hljs-symbol">&amp;quot;</span>partner<span class="hljs-symbol">&amp;quot;</span>:<span class="hljs-symbol">&amp;quot;</span>%&#123;Referer&#125;i<span class="hljs-symbol">&amp;quot;</span>,<span class="hljs-symbol">&amp;quot;</span>AgentVersion<span class="hljs-symbol">&amp;quot;</span>:<span class="hljs-symbol">&amp;quot;</span>%&#123;User-Agent&#125;i<span class="hljs-symbol">&amp;quot;</span>&#125;&quot;</span>/&gt;</span><br>...<br># 配置主机解析vim /etc/hosts...<br>19.168.56.132 tomcat.oldboyedu.com<br># 启动tomcat服务catalina.sh start<br># 验证服务略。<br></code></pre></td></tr></table></figure><p>**使用filebeat收集日志\</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">vim ~/conf/project/tomcat01.tomcat-<span class="hljs-keyword">to</span>-es.yamlfilebeat.inputs:- <span class="hljs-keyword">type</span>: <span class="hljs-keyword">log</span>  paths:    - /oldboyedu/softwares/tomcat/logs/tomcat.oldboyedu.com_access_log.*.txt  # <span class="hljs-keyword">false</span>会将<span class="hljs-type">json</span>解析的格式存储至message，改为<span class="hljs-keyword">true</span>则不存储至message  <span class="hljs-type">json</span>.keys_under_root: <span class="hljs-keyword">true</span>  # 为访问日志(&quot;access.log&quot;)打标签  tags: &quot;tomcat-access&quot;<br>output.elasticsearch:  hosts: [&quot;192.168.56.130:9200&quot;,&quot;192.168.56.131:9200&quot;,&quot;192.168.56.132:9200&quot;]  # 注意哈，下面的标签不再是&quot;index&quot;啦~  indices:    - <span class="hljs-keyword">index</span>: &quot;tomcat-access-%&#123;[agent.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;      <span class="hljs-keyword">when</span>.contains:        tags: &quot;tomcat-access&quot;<br>setup.ilm.enabled: <span class="hljs-keyword">false</span># 定义模板名称.setup.<span class="hljs-keyword">template</span>.name: &quot;tomcat&quot;# 定义模板的匹配索引名称.setup.<span class="hljs-keyword">template</span>.pattern: &quot;tomcat-*&quot;# 指定索引模板的分片信息setup.<span class="hljs-keyword">template</span>.settings:  <span class="hljs-keyword">index</span>.number_of_shards: <span class="hljs-number">3</span>  <span class="hljs-keyword">index</span>.number_of_replicas: <span class="hljs-number">0</span>[root@oldboy-es03 ~]# <br></code></pre></td></tr></table></figure><p>收集错误日志</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">vim  ~/conf/project/tomcat/<span class="hljs-number">03.</span>tomcat-<span class="hljs-keyword">to</span>-es.yamlfilebeat.inputs:- <span class="hljs-keyword">type</span>: <span class="hljs-keyword">log</span>  paths:    - /oldboyedu/softwares/tomcat/logs/tomcat.oldboyedu.com_access_log.*.txt  <span class="hljs-type">json</span>.keys_under_root: <span class="hljs-keyword">true</span>  tags: &quot;tomcat-access&quot;<br>- <span class="hljs-keyword">type</span>: <span class="hljs-keyword">log</span>  paths:    - /oldboyedu/softwares/tomcat/logs/catalina*  tags: &quot;tomcat-error&quot;  multiline.<span class="hljs-keyword">type</span>: pattern  multiline.pattern: <span class="hljs-string">&#x27;^\d&#123;2&#125;&#x27;</span>  multiline.negate: <span class="hljs-keyword">true</span>  multiline.match: <span class="hljs-keyword">after</span>  multiline.max_lines: <span class="hljs-number">1000</span><br>output.elasticsearch:  hosts: [&quot;192.168.56.130:9200&quot;,&quot;192.168.56.131:9200&quot;,&quot;192.168.56.132:9200&quot;]  indices:    - <span class="hljs-keyword">index</span>: &quot;tomcat-access-%&#123;[agent.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;      <span class="hljs-keyword">when</span>.contains:        tags: &quot;tomcat-access&quot;<br>    - <span class="hljs-keyword">index</span>: &quot;tomcat-error-%&#123;[agent.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;      <span class="hljs-keyword">when</span>.contains:        tags: &quot;tomcat-error&quot;<br>setup.ilm.enabled: falsesetup.<span class="hljs-keyword">template</span>.name: &quot;tomcat&quot;setup.<span class="hljs-keyword">template</span>.pattern: &quot;tomcat-*&quot;setup.<span class="hljs-keyword">template</span>.settings:  <span class="hljs-keyword">index</span>.number_of_shards: <span class="hljs-number">3</span>  <span class="hljs-keyword">index</span>.number_of_replicas: <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>log</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s源码学习--调度器框架</title>
    <link href="/2022/08/17/k8s%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-%E8%B0%83%E5%BA%A6%E5%99%A8%E6%A1%86%E6%9E%B6/"/>
    <url>/2022/08/17/k8s%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-%E8%B0%83%E5%BA%A6%E5%99%A8%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="调度器框架"><a href="#调度器框架" class="headerlink" title="调度器框架"></a>调度器框架</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上一篇文档中，我们找到了sheduler调度功能主逻辑的入口:</p><p><a href="https://github.com/yinwenqin/kubeSourceCodeNote/blob/master/scheduler/Kubernetes%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-Scheduler-P1-%E8%B0%83%E5%BA%A6%E5%99%A8%E5%85%A5%E5%8F%A3%E7%AF%87.md"><strong>P1-调度器入口篇</strong></a></p><p>那么在本篇，我们基于找到的入口，来进入调度器框架内部，看一看整体的逻辑流程,本篇先跳过调度的算法(Predicates断言选择、Priority优先级排序)，只关注<code>pkg/scheduler</code>目录内的scheduler框架相关的逻辑流向，摸清scheduler框架本身的代码结构，调度算法留在后面的文章再谈</p><h2 id="框架流程"><a href="#框架流程" class="headerlink" title="框架流程"></a>框架流程</h2><p>回顾上一篇篇末，我们找到了调度框架的实际调度工作逻辑的入口位置，<code>pkg/scheduler/scheduler.go:435</code>, <code>scheduleOne()</code>函数内部，定位在<code>pkg/scheduler/scheduler.go:457</code>位置,是通过这个<code>sched.schedule(pod)</code>方法来获取与pod匹配的node的，我们直接跳转2次,来到了这里<code>pkg/scheduler/core/generic_scheduler.go:107</code></p><p><img src="http://mycloudn.wqyin.cn/schedule.jpg"></p><p><img src="http://mycloudn.wqyin.cn/AlgSchedule.jpg"></p><p><img src="http://mycloudn.wqyin.cn/scheduleStruct.jpg"></p><p>通过注释可以知道，ScheduleAlgorithm interface中的Schedule方法就是用来为pod筛选node的，但这是个接口方法，并不是实际调用的，我们稍微往下,在<code>pkg/scheduler/core/generic_scheduler.go:162</code>这个位置，就可以找到实际调用的Schedule方法:</p><p><img src="http://mycloudn.wqyin.cn/genericSchedule.jpg"></p><p>这个函数里面有4个重要的步骤:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 调度前预先检查pvc是否创建</span><br>pkg/scheduler/core/generic_scheduler.<span class="hljs-keyword">go</span>:<span class="hljs-number">166</span><br>err := podPassesBasicChecks(pod, g.pvcLister)<br><br><span class="hljs-comment">// 根据Predicate筛选node</span><br>pkg/scheduler/core/generic_scheduler.<span class="hljs-keyword">go</span>:<span class="hljs-number">184</span><br>filteredNodes, failedPredicateMap, err := g.findNodesThatFit(pod, nodes)<br><br><span class="hljs-comment">// 给筛选出的node排出优先级</span><br>pkg/scheduler/core/generic_scheduler.<span class="hljs-keyword">go</span>:<span class="hljs-number">215</span><br> PrioritizeNodes(pod, g.nodeInfoSnapshot.NodeInfoMap, metaPrioritiesInterface, g.prioritizers, filteredNodes, g.extenders)<br><br><span class="hljs-comment">// 选出优先级最高的node作为fit node</span><br>pkg/scheduler/core/generic_scheduler.<span class="hljs-keyword">go</span>:<span class="hljs-number">226</span><br>g.selectHost(priorityList)<br></code></pre></td></tr></table></figure><p>本篇我们不看Schedule方法内的具体调度算法细节，在这里标记一下，下一篇我们将从这里开始.</p><p>先来逆向回溯代码结构，找到哪里创建了scheduler，调度器的默认初始化配置，默认的调度算法来源等等框架相关的东西。<code>Schedule()</code>方法属于<code>genericScheduler</code>结构体，先查看<code>genericScheduler</code>结构体，再选中结构体名称，crtl + b组合键查看它在哪些地方被引用，找出创建结构体的位置:</p><p><img src="http://mycloudn.wqyin.cn/createGenSche.jpg"></p><p>通过缩略代码框，排除test相关的测试文件，很容易找出创建结构体的地方位于<code>pkg/scheduler/core/generic_scheduler.go:1189</code>，点击图中红框圈中位置，跳转过去，果然找到了<code>NewGenericScheduler()</code>方法，这个方法是用来创建一个<code>genericScheduler</code>对象的，那么我们再次crtl + b组合键查看<code>NewGenericScheduler</code>再什么地方被调用：</p><p><img src="http://mycloudn.wqyin.cn/newGenericScheduler.jpg"></p><p>找出了在<code>pkg/scheduler/factory/factory.go:441</code>这个位置上找到了调用入口，这里位于<code>CreateFromKeys()</code>方法中，继续crtl + b查看它的引用,跳转到<code>pkg/scheduler/factory/factory.go:336</code>这个位置：</p><p><img src="http://mycloudn.wqyin.cn/newGenericScheduler.jpg"></p><p><img src="http://mycloudn.wqyin.cn/createFromProvider.jpg"></p><p><img src="http://mycloudn.wqyin.cn/getAlgorithmProvider.jpg"></p><p>这里找到了<code>algorithmProviderMap</code>这个变量，顾名思义，这个变量里面包含的应该就是调度算法的来源,点击进去查看,跳转到了<code>pkg/scheduler/factory/plugins.go:86</code>这个位置,组合键查看引用，一眼就可以看出哪个引用为这个map添加了元素：</p><p><img src="http://mycloudn.wqyin.cn/addMapEle.jpg"></p><p>跳转过去，来到了<code>pkg/scheduler/factory/plugins.go:391</code>这个位置，这个函数的作用是为scheduler的配置指定调度算法，即<code>FitPredicate、Priority</code>这两个算法需要用到的metric或者方法,再次请出组合键，查找哪个地方调用了这个方法：</p><p><img src="http://mycloudn.wqyin.cn/registerAlgorithmProvider.jpg"></p><p>来到了<code>pkg/scheduler/algorithmprovider/defaults/defaults.go:99</code>，继续组合键向上查找引用,这次引用只有一个，没有弹窗直接跳转过去了<code>pkg/scheduler/algorithmprovider/defaults/defaults.go:36</code>:</p><p><img src="http://mycloudn.wqyin.cn/registerAlgorithmProvider1.jpg"></p><p><img src="http://mycloudn.wqyin.cn/init.jpg"></p><p>我们来看看<code>defaultPredicates(), defaultPriorities()</code>这两个函数具体的内容:</p><p><img src="http://mycloudn.wqyin.cn/default.jpg"></p><p>我们随便点击进去一个<code>predicates</code>选项查看其内容:</p><p><img src="http://mycloudn.wqyin.cn/memPressure.jpg"></p><p><code>CheckNodeMemoryPressure</code>这个词相应熟悉kubernetes 应用的朋友一定不会陌生，例如在node内存压力大无法调度的pod时，<code>kubectl describe pod xxx</code>就会在状态信息里面看到这个关键词。</p><p>让我们回到<code>pkg/scheduler/algorithmprovider/defaults/defaults.go:102</code>这个位置，查看<code>factory.RegisterAlgorithmProvider(factory.DefaultProvider, predSet, priSet)</code>方法的详情,可以看到<code>参数factory.DefaultProvider</code>值为字符串格式的<code>DefaultProvider</code>，<strong>先记住这个关键值</strong>，进入方法内部:</p><p><code>pkg/scheduler/factory/plugins.go:387</code>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">RegisterAlgorithmProvider</span><span class="hljs-params">(name <span class="hljs-type">string</span>, predicateKeys, priorityKeys sets.String)</span></span> <span class="hljs-type">string</span> &#123;<br>schedulerFactoryMutex.Lock()<br><span class="hljs-keyword">defer</span> schedulerFactoryMutex.Unlock()<br>validateAlgorithmNameOrDie(name)<br>algorithmProviderMap[name] = AlgorithmProviderConfig&#123;<br>FitPredicateKeys:     predicateKeys,<br>PriorityFunctionKeys: priorityKeys,<br>&#125;<br><span class="hljs-keyword">return</span> name<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，这个方法为DefaultProvider绑定了配置：筛选算法和优先级排序算法的key集合，这些key只是字符串，那么是怎么具体落实到计算的方法过程上去的呢？让我们看看<code>pkg/scheduler/algorithmprovider/defaults/</code>目录下的<code>register_predicates.go,register_priorities.go</code>这两个文件:</p><p><img src="http://mycloudn.wqyin.cn/preinit.jpg"></p><p>它们同样也在init()函数中初始化时使用<code>factory.RegisterFitPredicate()</code>方法做了一些注册操作,这个方法的两个参数，前一个是筛选&#x2F;计算优先级 的关键key名，后一个是具体计算的功能实现方法，点击<code>factory.RegisterFitPredicate()</code>方法，深入一级，查看内部代码，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// RegisterFitPredicateFactory registers a fit predicate factory with the</span><br><span class="hljs-comment">// algorithm registry. Returns the name with which the predicate was registered.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">RegisterFitPredicateFactory</span><span class="hljs-params">(name <span class="hljs-type">string</span>, predicateFactory FitPredicateFactory)</span></span> <span class="hljs-type">string</span> &#123;<br>schedulerFactoryMutex.Lock()<br><span class="hljs-keyword">defer</span> schedulerFactoryMutex.Unlock()<br>validateAlgorithmNameOrDie(name)<br>fitPredicateMap[name] = predicateFactory<br><span class="hljs-keyword">return</span> name<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出，两者使用map[string]func()的方式关联在了一起，那么在后面实际调用的时候，必定是在map中基于key找出方法并执行。优先级相关的<code>factory.RegisterPriorityFunction2()</code>方法亦是同理。</p><h3 id="生成默认配置"><a href="#生成默认配置" class="headerlink" title="生成默认配置"></a>生成默认配置</h3><p>还记得刚刚重点圈出的<code>DefaultProvider</code>关键值吗？通过上面我们知道了，所有默认Predicate&#x2F;priority算法的实现都是绑定在这个默认的<code>AlgorithmProvider</code>身上的，那么，启动scheduler的时候，究竟是如何将<code>DefaultProvider</code>作为默认<code>AlgorithmProvider</code>呢？让我们回到最初的调度器启动命令入口位置<code>cmd/kube-scheduler/app/server.go:62</code>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs go">opts, err := options.NewOptions()<br><span class="hljs-comment">// 点击NewOptions跳转进入内部,来到了这个位置:cmd/kube-scheduler/app/options/options.go:75</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewOptions</span><span class="hljs-params">()</span></span> (*Options, <span class="hljs-type">error</span>) &#123;<br>cfg, err := newDefaultComponentConfig()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>... <span class="hljs-comment">// 省略</span><br>&#125;<br><span class="hljs-comment">// 这个newDefaultComponentConfig方法特别有意思，从字面看它是用来为组件填充默认配置的</span><br><span class="hljs-comment">// 来看看它的内容，点击来到了cmd/kube-scheduler/app/options/options.go:132</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newDefaultComponentConfig</span><span class="hljs-params">()</span></span> (*kubeschedulerconfig.KubeSchedulerConfiguration, <span class="hljs-type">error</span>) &#123;<br>cfgv1alpha1 := kubeschedulerconfigv1alpha1.KubeSchedulerConfiguration&#123;&#125;<br>kubeschedulerscheme.Scheme.Default(&amp;cfgv1alpha1)<br>... <span class="hljs-comment">// 省略</span><br>&#125;<br><br><span class="hljs-comment">// 点击kubeschedulerscheme.Scheme.Default(&amp;cfgv1alpha1)中的Default跳转进入</span><br><span class="hljs-comment">// 来到了这里:vendor/k8s.io/apimachinery/pkg/runtime/scheme.go:389</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Scheme)</span></span> AddTypeDefaultingFunc(srcType Object, fn <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span>) &#123;<br>s.defaulterFuncs[reflect.TypeOf(srcType)] = fn<br>&#125;<br><br><span class="hljs-comment">// Default sets defaults on the provided Object.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Scheme)</span></span> Default(src Object) &#123;<br><span class="hljs-keyword">if</span> fn, ok := s.defaulterFuncs[reflect.TypeOf(src)]; ok &#123;<br>fn(src)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 看看defaulterFuncs的数据类型：</span><br><span class="hljs-comment">// defaulterFuncs is an array of interfaces to be called with an object to provide defaulting</span><br><span class="hljs-comment">// the provided object must be a pointer.</span><br>defaulterFuncs <span class="hljs-keyword">map</span>[reflect.Type]<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span><br><br><span class="hljs-comment">// 不难看出，这个Default()方法是通过反射器，获取对象的类型，以类型作为map的key，从而获取该类型</span><br><span class="hljs-comment">// 对应的defaulterFuncs，也即是该结构体填充默认配置的方法，最后执行该方法</span><br><span class="hljs-comment">// 那么这个defaulterFuncs map[reflect.Type]func(interface&#123;&#125;)，里面的元素时怎么填充的呢？</span><br><span class="hljs-comment">// 作者很贴心地将添加map元素的方法写在了Default()方法的正上方:</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Scheme)</span></span> AddTypeDefaultingFunc(srcType Object, fn <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span>) &#123;<br>s.defaulterFuncs[reflect.TypeOf(srcType)] = fn<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们选中然后ctrl+b，查找AddTypeDefaultingFunc()的引用，弹窗中你可以看到有非常非常多的对象都引用了该方法，这些不同类型的对象相信无一例外都是通过Default()方法来生成默认配置的，我们找到其中的包含scheduler的方法:</p><p><img src="http://mycloudn.wqyin.cn/addDefaultFunc.jpg"></p><p>跳转进去，来到了这个位置<code>pkg/scheduler/apis/config/v1alpha1/zz_generated.defaults.go:31</code>(原谅我的灵魂笔法):</p><p><img src="http://mycloudn.wqyin.cn/registerDefaults.jpg"></p><p>进入<code>SetDefaults_KubeSchedulerConfiguration()</code>，来到<code>pkg/scheduler/apis/config/v1alpha1/defaults.go:42</code>:</p><p><img src="http://mycloudn.wqyin.cn/SetDefaults_KubeSchedulerConfiguration.jpg"></p><p>看到了<code>DefaultProvider</code>吗？是不是觉得瞬间豁然开朗，原来是在这里调用指定了scheduler配置的<code>AlgorithmSource.Provider</code>。</p><h3 id="调度功能实现的回溯"><a href="#调度功能实现的回溯" class="headerlink" title="调度功能实现的回溯"></a>调度功能实现的回溯</h3><p>让我们捋一捋调度器框架运行调度功能相关的流程:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 1.获取AlgorithmSource.Provider(默认&quot;DefaultProvider&quot;)，作为key从map中获取到pkg/scheduler/algorithmprovider包内为其初始化的两种算法key集合</span><br>algorithmProviderMap[name] = AlgorithmProviderConfig&#123;<br>FitPredicateKeys:     predicateKeys,<br>PriorityFunctionKeys: priorityKeys,<br>&#125;<br><br><span class="hljs-comment">// 2.填充genericScheduler对象的predicates元素:</span><br><span class="hljs-comment">// pkg/scheduler/factory/plugins.go:411</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getFitPredicateFunctions</span><span class="hljs-params">(names sets.String, args PluginFactoryArgs)</span></span> (<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]predicates.FitPredicate, <span class="hljs-type">error</span>) &#123;<br>schedulerFactoryMutex.Lock()<br><span class="hljs-keyword">defer</span> schedulerFactoryMutex.Unlock()<br><br>fitPredicates := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]predicates.FitPredicate&#123;&#125;<br><span class="hljs-keyword">for</span> _, name := <span class="hljs-keyword">range</span> names.List() &#123;<br>factory, ok := fitPredicateMap[name]<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;invalid predicate name %q specified - no corresponding function found&quot;</span>, name)<br>&#125;<br>fitPredicates[name] = factory(args)<br>&#125;<br><br><span class="hljs-comment">// Always include mandatory fit predicates.</span><br><span class="hljs-keyword">for</span> name := <span class="hljs-keyword">range</span> mandatoryFitPredicates &#123;<br><span class="hljs-keyword">if</span> factory, found := fitPredicateMap[name]; found &#123;<br>fitPredicates[name] = factory(args)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> fitPredicates, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// 3.对predicates内的每一个key，找到对应的检查方法，执行每一项检查,返回检查结果</span><br><span class="hljs-comment">// pkg/scheduler/core/generic_scheduler.go:608</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">podFitsOnNode</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">pod *v1.Pod,</span></span><br><span class="hljs-params"><span class="hljs-function">meta predicates.PredicateMetadata,</span></span><br><span class="hljs-params"><span class="hljs-function">info *schedulernodeinfo.NodeInfo,</span></span><br><span class="hljs-params"><span class="hljs-function">predicateFuncs <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]predicates.FitPredicate,</span></span><br><span class="hljs-params"><span class="hljs-function">queue internalqueue.SchedulingQueue,</span></span><br><span class="hljs-params"><span class="hljs-function">alwaysCheckAllPredicates <span class="hljs-type">bool</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span> (<span class="hljs-type">bool</span>, []predicates.PredicateFailureReason, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">var</span> failedPredicates []predicates.PredicateFailureReason<br><br>podsAdded := <span class="hljs-literal">false</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++ &#123;<br>metaToUse := meta<br>nodeInfoToUse := info<br><span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> &#123;<br>podsAdded, metaToUse, nodeInfoToUse = addNominatedPods(pod, meta, info, queue)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> !podsAdded || <span class="hljs-built_in">len</span>(failedPredicates) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">for</span> _, predicateKey := <span class="hljs-keyword">range</span> predicates.Ordering() &#123;<br><span class="hljs-keyword">var</span> (<br>fit     <span class="hljs-type">bool</span><br>reasons []predicates.PredicateFailureReason<br>err     <span class="hljs-type">error</span><br>)<br><span class="hljs-keyword">if</span> predicate, exist := predicateFuncs[predicateKey]; exist &#123;<br>fit, reasons, err = predicate(pod, metaToUse, nodeInfoToUse)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, []predicates.PredicateFailureReason&#123;&#125;, err<br>&#125;<br>... <span class="hljs-comment">// 省略</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(failedPredicates) == <span class="hljs-number">0</span>, failedPredicates, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="目录结构总结"><a href="#目录结构总结" class="headerlink" title="目录结构总结"></a>目录结构总结</h3><p>最后，对<code>pkg/scheduler</code>路径下的各子目录的功能来一个图文总结吧:</p><p><img src="http://mycloudn.wqyin.cn/dir.jpg"></p><h3 id="Last"><a href="#Last" class="headerlink" title="Last"></a>Last</h3><p>如果有沉下心来阅读代码，结合上面的图文讲解、代码块中的中文注释，相信你对调度器框架包内的代码结构会有一个较为清晰的整体掌握，本篇框架篇到此结束，下一篇来谈谈详细的调度算法的细节</p>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s源码学习--调度器入口</title>
    <link href="/2022/08/17/k8s%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-%E8%B0%83%E5%BA%A6%E5%99%A8%E5%85%A5%E5%8F%A3/"/>
    <url>/2022/08/17/k8s%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-%E8%B0%83%E5%BA%A6%E5%99%A8%E5%85%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="调度器入口"><a href="#调度器入口" class="headerlink" title="调度器入口"></a>调度器入口</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇介绍scheduler的初始化相关逻辑</p><h2 id="入口之前"><a href="#入口之前" class="headerlink" title="入口之前"></a>入口之前</h2><p>入口函数是位于<code>cmd/kube-scheduler/scheduler.go</code>中的main()方法,调用的是app.NewSchedulerCommand()方法，跳转至此方法，可以看到函数上方的注释：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// NewSchedulerCommand creates a *cobra.Command object with default parameters</span><br>func <span class="hljs-built_in">NewSchedulerCommand</span>() *cobra<span class="hljs-selector-class">.Command</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>NewSchedulerCommand创建的是一个cobra.Command对象，后续的命令行处理相关功能都是借助cobra来实现的，那么继续往下之前，为了避免从入口开始就一脸懵，有必要了解一下cobra这个工具</p><h2 id="cobra"><a href="#cobra" class="headerlink" title="cobra"></a>cobra</h2><h4 id="什么是cobra"><a href="#什么是cobra" class="headerlink" title="什么是cobra?"></a>什么是cobra?</h4><p>github主页: <a href="https://github.com/spf13/cobra">https://github.com/spf13/cobra</a><br>主页的介绍是: Cobra是一个强大的用于创建现代化CLI命令行程序的库，用于生成应用程序和命令文件。众多高知名度的项目采用了它，例如我们熟悉的kubernetes和docker<br>cobra创建的程序CLI遵循的模式是: <code>APPNAME COMMAND ARG --FLAG</code>，与常见的其他命令行程序一样，例如git: <code>git clone URL --bare</code></p><h4 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#最简单的安装方式，但毫无意外，事情并没有那么简单，我们的网络的问题，导致无法正常安装依赖，</span><br>go get -u github.com<span class="hljs-regexp">/spf13/</span>cobra/cobra<br><br><span class="hljs-comment">#怎么办呢？先进入GOPATH中，手动安装报错缺失的两个依赖:</span><br>cd <span class="hljs-regexp">/Users/y</span>wq<span class="hljs-regexp">/go/</span><br>mkdir -p src<span class="hljs-regexp">/golang.org/</span>x<br>cd golang.org/x<br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/golang/</span>text.git<br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/golang/</span>sys.git<br><br><span class="hljs-comment">#然后执行:</span><br>go install github.com<span class="hljs-regexp">/spf13/</span>cobra/cobra<br>matebook-x-pro:x ywq$ ls <span class="hljs-regexp">/Users/y</span>wq<span class="hljs-regexp">/go/</span>bin/cobra<br><span class="hljs-regexp">/Users/y</span>wq<span class="hljs-regexp">/go/</span>bin/cobra<br><span class="hljs-comment">#安装完毕,记得把GOBIN加入PATH环境变量哦,否则无法直接运行cobra命令</span><br></code></pre></td></tr></table></figure><h4 id="简单试用cobra"><a href="#简单试用cobra" class="headerlink" title="简单试用cobra:"></a>简单试用cobra:</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stata">matebook-x-<span class="hljs-keyword">pro</span>:<span class="hljs-keyword">local</span> ywq$ <span class="hljs-keyword">cd</span> /Users/ywq/go/src/<span class="hljs-keyword">local</span>/<br>matebook-x-<span class="hljs-keyword">pro</span>:<span class="hljs-keyword">local</span> ywq$ cobra init testapp --pkg-name=<span class="hljs-keyword">local</span>/testapp<br>matebook-x-<span class="hljs-keyword">pro</span>:<span class="hljs-keyword">local</span> ywq$ <span class="hljs-keyword">ls</span><br>testapp<br>matebook-x-<span class="hljs-keyword">pro</span>:<span class="hljs-keyword">local</span> ywq$ <span class="hljs-keyword">ls</span> testapp/<br>LICENSE  cmd/     main.go<br>matebook-x-<span class="hljs-keyword">pro</span>:<span class="hljs-keyword">local</span> ywq$ <span class="hljs-keyword">ls</span> testapp/cmd/<br>root.go<br>matebook-x-<span class="hljs-keyword">pro</span>:<span class="hljs-keyword">local</span> ywq$ <span class="hljs-keyword">cd</span> testapp<br>matebook-x-<span class="hljs-keyword">pro</span>:<span class="hljs-keyword">local</span> ywq$ go <span class="hljs-keyword">run</span> main.go <br># 报错：subcommand is required，要求提供子命令<br># 因需要多次测试，这里所有的测试步骤就把build的步骤跳过，直接使用go <span class="hljs-keyword">run</span> main.go进行测试<br></code></pre></td></tr></table></figure><p><strong>我们打开IDE来查看一下testapp的代码结构:</strong><br><img src="http://mycloudn.wqyin.cn/cobra1.jpg" alt="image"><br><img src="http://mycloudn.wqyin.cn/cobra2.jpg" alt="image"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vim"># 现在还未创建子命令，那么来创建几个试试:<br>matebook-<span class="hljs-keyword">x</span>-<span class="hljs-keyword">pro</span>:testapp ywq$ cobra <span class="hljs-built_in">add</span> <span class="hljs-built_in">get</span><br><span class="hljs-built_in">get</span> created at /Users/ywq/<span class="hljs-keyword">go</span>/src/local/testapp<br>matebook-<span class="hljs-keyword">x</span>-<span class="hljs-keyword">pro</span>:testapp ywq$ cobra <span class="hljs-built_in">add</span> <span class="hljs-keyword">delete</span><br><span class="hljs-keyword">delete</span> created at /Users/ywq/<span class="hljs-keyword">go</span>/src/local/testapp<br>matebook-<span class="hljs-keyword">x</span>-<span class="hljs-keyword">pro</span>:testapp ywq$ cobra <span class="hljs-built_in">add</span> <span class="hljs-built_in">add</span><br><span class="hljs-built_in">add</span> created at /Users/ywq/<span class="hljs-keyword">go</span>/src/local/testapp<br>matebook-<span class="hljs-keyword">x</span>-<span class="hljs-keyword">pro</span>:testapp ywq$ cobra <span class="hljs-built_in">add</span> <span class="hljs-keyword">update</span><br>matebook-<span class="hljs-keyword">x</span>-<span class="hljs-keyword">pro</span>:testapp ywq$ <span class="hljs-keyword">ls</span> cmd/<br><span class="hljs-built_in">add</span>.<span class="hljs-keyword">go</span><span class="hljs-keyword">delete</span>.<span class="hljs-keyword">go</span><span class="hljs-built_in">get</span>.<span class="hljs-keyword">go</span>root.<span class="hljs-keyword">go</span><span class="hljs-keyword">update</span>.<span class="hljs-keyword">go</span><br><br># 查看<span class="hljs-keyword">help</span>，可以发现刚添加的子命令已经加入提示并可用了<br>matebook-<span class="hljs-keyword">x</span>-<span class="hljs-keyword">pro</span>:testapp ywq$ <span class="hljs-keyword">go</span> run main.<span class="hljs-keyword">go</span> -h<br>...<br><br>Available Commands:<br>  <span class="hljs-built_in">add</span>         A brief description of your <span class="hljs-keyword">command</span><br>  <span class="hljs-keyword">delete</span>      A brief description of your <span class="hljs-keyword">command</span><br>  <span class="hljs-built_in">get</span>         A brief description of your <span class="hljs-keyword">command</span><br>  <span class="hljs-keyword">help</span>        Help about any <span class="hljs-keyword">command</span><br>  <span class="hljs-keyword">update</span>      A brief description of your <span class="hljs-keyword">command</span><br><br># 调用子命令试试:<br>matebook-<span class="hljs-keyword">x</span>-<span class="hljs-keyword">pro</span>:testapp ywq$ <span class="hljs-keyword">go</span> run main.<span class="hljs-keyword">go</span> <span class="hljs-built_in">get</span><br><span class="hljs-built_in">get</span> called<br>matebook-<span class="hljs-keyword">x</span>-<span class="hljs-keyword">pro</span>:testapp ywq$ <span class="hljs-keyword">go</span> run main.<span class="hljs-keyword">go</span> <span class="hljs-built_in">add</span><br><span class="hljs-built_in">add</span> called<br></code></pre></td></tr></table></figure><p><strong>来看看新增的子命令是怎么运行的呢？</strong><br><img src="http://mycloudn.wqyin.cn/cobra3.jpg" alt="image"><br>截图圈中部分可以看出，子命令是在init()函数里为root级添加了一个子命令，先不去管底层实现，接着往下.</p><p><strong>测试cobra的强大简洁的flag处理</strong><br>我们在<code>cmd/delete.go</code>的init()函数中，定义一个flag处理配置:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">var obj <span class="hljs-built_in">string</span><br>deleteCmd.<span class="hljs-constructor">PersistentFlags()</span>.<span class="hljs-constructor">StringVar(&amp;<span class="hljs-params">obj</span>,<span class="hljs-string">&quot;object&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;A function to delete an test object&quot;</span>)</span><br></code></pre></td></tr></table></figure><p>在<code>Run:func()</code>匿名函数中添加一行输出:<br><code>fmt.Println(&quot;delete obj:&quot;,cmd.Flag(&quot;object&quot;).Value)</code><br><img src="http://mycloudn.wqyin.cn/cobra4.jpg" alt="image"></p><p>运行结果:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">matebook-<span class="hljs-keyword">x</span>-<span class="hljs-keyword">pro</span>:testapp ywq$ <span class="hljs-keyword">go</span> run main.<span class="hljs-keyword">go</span> <span class="hljs-keyword">delete</span> --object obj1<br><span class="hljs-keyword">delete</span> called<br><span class="hljs-keyword">delete</span> obj: obj1<br><br></code></pre></td></tr></table></figure><p>如果觉得<code>--</code>flag符号太麻烦，cobra同样支持短符号<code>-</code>flag缩写:<br><img src="http://mycloudn.wqyin.cn/cobra5.jpg" alt="image"></p><p>运行结果:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">matebook-<span class="hljs-keyword">x</span>-<span class="hljs-keyword">pro</span>:testapp ywq$ <span class="hljs-keyword">go</span> run main.<span class="hljs-keyword">go</span> <span class="hljs-keyword">delete</span> -<span class="hljs-keyword">o</span> obj1<br><span class="hljs-keyword">delete</span> called<br><span class="hljs-keyword">delete</span> obj: obj1<br><br></code></pre></td></tr></table></figure><p>这里只是两级命令加flag,但我们常见的，例如(kubectl delete pod xxx)，是有3级命令 + args的，怎么再多添加一级子命令呢？cobra帮你一条命令实现</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">matebook-<span class="hljs-keyword">x</span>-<span class="hljs-keyword">pro</span>:testapp ywq$ cobra <span class="hljs-built_in">add</span> pods -<span class="hljs-keyword">p</span> deleteCmd  # -<span class="hljs-keyword">p</span>为父级命令，默认其名称格式为(parentCommandName)Cmd<br>matebook-<span class="hljs-keyword">x</span>-<span class="hljs-keyword">pro</span>:testapp ywq$ <span class="hljs-keyword">ls</span> cmd<br><span class="hljs-built_in">add</span>.<span class="hljs-keyword">go</span>          <span class="hljs-keyword">delete</span>.<span class="hljs-keyword">go</span>       <span class="hljs-built_in">get</span>.<span class="hljs-keyword">go</span>          pods.<span class="hljs-keyword">go</span>         root.<span class="hljs-keyword">go</span>         <span class="hljs-keyword">update</span>.<span class="hljs-keyword">go</span><br><br></code></pre></td></tr></table></figure><p>可以发现,cmd&#x2F;目录下多了一个pods.go文件，我们来看看它是怎么关联上delete父级命令的,同时为它添加一行输出:<br><img src="http://mycloudn.wqyin.cn/cobra6.jpg" alt="image"><br>执行命令:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">matebook-<span class="hljs-keyword">x</span>-<span class="hljs-keyword">pro</span>:testapp ywq$ <span class="hljs-keyword">go</span> run main.<span class="hljs-keyword">go</span> <span class="hljs-keyword">delete</span> pods pod1<br>pods called<br><span class="hljs-keyword">delete</span> pods: pod1<br><br></code></pre></td></tr></table></figure><p>** 看到这里，相信对cobra的强大简洁已经有了初步的认知，建议自行进入项目主页了解详情并进行安装测试**</p><h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><p>通过对上方cobra的基本了解，我们不难知道，<code>cmd/kube-scheduler/scheduler.go</code>内的main()方法内部实际调用的是<code>cobra.Command.Run</code>内的匿名函数，我们可以进入<code>NewSchedulerCommand()</code>内部确认:<br><img src="http://mycloudn.wqyin.cn/main1.jpg" alt="image"></p><p>可以看到，调用了<code>Run</code>内部<code>runCommand</code>方法，再来看看Run方法内部需要重点关注的几个点：<br><img src="http://mycloudn.wqyin.cn/runCommand.jpg" alt="image"></p><p>其中，上方是对命令行的参数、选项校验的步骤，跳过，重点关注两个变量:<code>cc和stopCh</code>，这两个变量会作为最后调用<code>Run()</code>方法的参数，其中<code>stopCh</code>作用是作为主程序退出的信号通知其他各协程进行相关的退出操作的，另外一个cc变量非常重要，可以点击<code>c.Complete()</code>方法，查看该方法的详情：<br><img src="http://mycloudn.wqyin.cn/runCommand.jpg" alt="image"><br><code>Complete()</code>方法本质上返回的是一个Config结构体，该结构体内部的元素非常丰富，篇幅有限就不一一点开截图了，大家可以自行深入查看这些元素的作用，这里简单概括一下其中几个:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// scheduler 本身相关的配置都集中于此，例如名称、调度算法、pod亲和性权重、leader选举机制、metric绑定地址，健康检查绑定地址，绑定超时时间等等</span><br>ComponentConfig kubeschedulerconfig<span class="hljs-selector-class">.KubeSchedulerConfiguration</span><br><br><span class="hljs-comment">// 这几个元素都是与apiserver认证授权相关的</span><br>InsecureServing        *apiserver<span class="hljs-selector-class">.DeprecatedInsecureServingInfo</span> <span class="hljs-comment">// nil will disable serving on an insecure port</span><br>InsecureMetricsServing *apiserver<span class="hljs-selector-class">.DeprecatedInsecureServingInfo</span> <span class="hljs-comment">// non-nil if metrics should be served independently</span><br>Authentication         apiserver<span class="hljs-selector-class">.AuthenticationInfo</span><br>Authorization          apiserver<span class="hljs-selector-class">.AuthorizationInfo</span><br>SecureServing          *apiserver<span class="hljs-selector-class">.SecureServingInfo</span><br><br><span class="hljs-comment">// Clientset.Interface内部封装了向apiServer所支持的所有apiVersion(apps/v1beta2,extensions/v1beta1...)之下的resource(pod/deployment/service...)发起查询请求的功能</span><br>Client          clientset<span class="hljs-selector-class">.Interface</span><br><br><span class="hljs-comment">// 这几个元素都是与Event资源相关的，实现rest api处理以及记录、通知等功能</span><br>EventClient     v1core<span class="hljs-selector-class">.EventsGetter</span><br>Recorder        record<span class="hljs-selector-class">.EventRecorder</span><br>Broadcaster     record.EventBroadcaster<br></code></pre></td></tr></table></figure><p>这里层级非常深，不便展示，Config这一个结构体非常重要，可以认真读一读代码。回到<code>cmd/kube-scheduler/app/server.go</code>.<code>runCommand</code>这里来,接着往下，进入其最后return调用的<code>Run()</code>函数中，函数中的前部分都是启动scheduler相关的组件，如event broadcaster、informers、healthz server、metric server等，重点看图中红框圈出的<code>sched.Run()</code>,这才是scheduler主程序的调用运行函数:<br><img src="http://mycloudn.wqyin.cn/Run.jpg" alt="image"></p><p>进入<code>sched.Run()</code>:<br><img src="http://mycloudn.wqyin.cn/scheRun.jpg" alt="image"></p><p><code>wait.Until</code>这个调用的逻辑是，直到收到stop信号才终止，在此之前循环运行<code>sched.scheduleOne</code>。代码走到这里，终于找到启动入口最内部的主体啦:</p><p><img src="http://mycloudn.wqyin.cn/image-20190827163439895.png"></p><p><code>sched.scheduleOne</code>这个函数有代码点长，整体的功能可以概括为:</p><p>1.获取需调度的pod</p><p>2.使用调度算法寻找匹配node、发起绑定到node请求、绑定检查等一系列操作.</p><p>3.若匹配node失败，则尝试根据pod的指定优先级来抢占资源</p><p><strong>本篇入口篇到这里就先告一段落，下一篇开始阅读学习调度过程的逻辑！</strong></p>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s源码学习——总览</title>
    <link href="/2022/08/17/Untitled/"/>
    <url>/2022/08/17/Untitled/</url>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes源码笔记"><a href="#Kubernetes源码笔记" class="headerlink" title="Kubernetes源码笔记"></a>Kubernetes源码笔记</h1><p><img src="http://mycloudn.wqyin.cn/20190824164634.png" alt="img"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在熟悉kubernetes及常用组件、插件的管理使用后，总还觉得差了些什么，不够通透，是时候来读一读源码了，结合代码与实际使用场景来互相印证，有助于对kubernetes的理解更为透彻。这里将会分多篇介绍kubernetes各核心组件的工作模式、调度管理算法等。</p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>Kubernetes v1.14.3 ,最新部署的一套环境是此版本，代码版本保持一致，方便后续测试调试</p><h2 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h2><ul><li><a href="https://github.com/yinwenqin/kubeSourceCodeNote/tree/master/scheduler">Scheduler</a></li><li><a href="https://github.com/yinwenqin/kubeSourceCodeNote/tree/master/controller">Controller</a></li><li><a href="https://github.com/yinwenqin/kubeSourceCodeNote/tree/master/apiServer">APIServer</a></li><li><a href="https://github.com/yinwenqin/kubeSourceCodeNote/tree/master/pkg">pkg公共库</a></li></ul><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>golang(安装步骤略，网上很多),我的环境如下:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">GOPATH</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;/Users/ywq/go&quot;</span><br>go version go1.<span class="hljs-number">11.6</span> darwin/amd64<br>Copy<br></code></pre></td></tr></table></figure><p>注意:本系列文档中,GOPATH路径<code>/Users/ywq/go/</code>,在自己的环境下请替换成相应本地的GOPATH，这一点后面不再说明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#拉取kubernetes项目源码:</span><br><span class="hljs-built_in">cd</span> /Users/ywq/go/<br><span class="hljs-built_in">mkdir</span> -p src/k8s.io<br><span class="hljs-built_in">cd</span> src/k8s.io<br>git <span class="hljs-built_in">clone</span> https://github.com/kubernetes/kubernetes.git<br><span class="hljs-built_in">cd</span> kubernetes<br>git checkout v1.14.3  <span class="hljs-comment"># 切换到tag为v1.14.3的版本</span><br>Copy<br></code></pre></td></tr></table></figure><p>源码拉取完成后，用自己的IDE打开，准备工作完毕.</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>Kubernetes这一整个项目颇为庞大，一般情况下，如果熟悉kubernetes的应用，结合应用来理解源码的设计理念会容易许多，因此，对其应用不熟悉的朋友，不建议直接阅读源码。另外，目前处于边阅读代码边输出总结的阶段，如文中有误，请予以指正，非常感谢！</p><p>在此立一个flag，源码干货总结笔记，至少做到周不断更！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>官方开发者向导md文档: <a href="https://github.com/kubernetes/community/tree/master/contributors/devel">https://github.com/kubernetes/community/tree/master/contributors/devel</a></p>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python100day-21-30</title>
    <link href="/2022/08/16/python100day-21-30/"/>
    <url>/2022/08/16/python100day-21-30/</url>
    
    <content type="html"><![CDATA[<h2 id="Web前端概述"><a href="#Web前端概述" class="headerlink" title="Web前端概述"></a>Web前端概述</h2><blockquote><p><strong>说明</strong>：本文使用的部分插图来自<em>Jon Duckett</em>先生的*<a href="https://www.amazon.cn/dp/1118008189/ref=sr_1_5?__mk_zh_CN=%E4%BA%9A%E9%A9%AC%E9%80%8A%E7%BD%91%E7%AB%99&keywords=html+&+css&qid=1554609325&s=gateway&sr=8-5">HTML and CSS: Design and Build Websites</a>*一书，这是一本非常棒的前端入门书，有兴趣的读者可以在亚马逊或者其他网站上找到该书的购买链接。</p></blockquote><p>HTML 是用来描述网页的一种语言，全称是 Hyper-Text Markup Language，即超文本标记语言。我们浏览网页时看到的文字、按钮、图片、视频等元素，它们都是通过 HTML 书写并通过浏览器来呈现的。</p><h3 id="HTML简史"><a href="#HTML简史" class="headerlink" title="HTML简史"></a>HTML简史</h3><ol><li>1991年10月：一个非正式CERN（<a href="https://zh.wikipedia.org/wiki/%E6%AD%90%E6%B4%B2%E6%A0%B8%E5%AD%90%E7%A0%94%E7%A9%B6%E7%B5%84%E7%B9%94">欧洲核子研究中心</a>）文件首次公开18个HTML标签，这个文件的作者是物理学家<a href="https://zh.wikipedia.org/wiki/%E8%92%82%E5%A7%86%C2%B7%E4%BC%AF%E7%BA%B3%E6%96%AF-%E6%9D%8E">蒂姆·伯纳斯-李</a>，因此他是<a href="https://zh.wikipedia.org/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91">万维网</a>的发明者，也是<a href="https://zh.wikipedia.org/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91%E8%81%94%E7%9B%9F">万维网联盟</a>的主席。</li><li>1995年11月：HTML 2.0标准发布（RFC 1866）。</li><li>1997年1月：HTML 3.2作为<a href="https://zh.wikipedia.org/wiki/W3C">W3C</a>推荐标准发布。</li><li>1997年12月：HTML 4.0作为W3C推荐标准发布。</li><li>1999年12月：HTML4.01作为W3C推荐标准发布。</li><li>2008年1月：HTML5由W3C作为工作草案发布。</li><li>2011年5月：W3C将HTML5推进至“最终征求”（Last Call）阶段。</li><li>2012年12月：W3C指定HTML5作为“候选推荐”阶段。</li><li>2014年10月：HTML5作为稳定W3C推荐标准发布，这意味着HTML5的标准化已经完成。</li></ol><h4 id="HTML5新特性"><a href="#HTML5新特性" class="headerlink" title="HTML5新特性"></a>HTML5新特性</h4><ol><li>引入原生多媒体支持（audio和video标签）</li><li>引入可编程内容（canvas标签）</li><li>引入语义Web（article、aside、details、figure、footer、header、nav、section、summary等标签）</li><li>引入新的表单控件（日历、邮箱、搜索、滑条等）</li><li>引入对离线存储更好的支持（localStorage和sessionStorage）</li><li>引入对定位、拖放、WebSocket、后台任务等的支持</li></ol><h3 id="使用标签承载内容"><a href="#使用标签承载内容" class="headerlink" title="使用标签承载内容"></a>使用标签承载内容</h3><img src="https://gitee.com/jackfrued/mypic/raw/master/20211107163448.png" style="zoom:35%"><img src="https://gitee.com/jackfrued/mypic/raw/master/20211107163741.png" style="zoom:75%"><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><ul><li>html<ul><li>head<ul><li>title</li><li>meta</li></ul></li><li>body</li></ul></li></ul><h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><ul><li>标题（heading）和段落（paragraph）<ul><li>h1 ~ h6</li><li>p</li></ul></li><li>上标（superscript）和下标（subscript）<ul><li>sup</li><li>sub</li></ul></li><li>空白（白色空间折叠）</li><li>折行（break）和水平标尺（horizontal ruler）<ul><li>br</li><li>hr</li></ul></li><li>语义化标签<ul><li>加粗和强调 - strong</li><li>引用 - blockquote</li><li>缩写词和首字母缩写词 - abbr &#x2F; acronym</li><li>引文 - cite</li><li>所有者联系信息 - address</li><li>内容的修改 - ins &#x2F; del</li></ul></li></ul><h4 id="列表（list）"><a href="#列表（list）" class="headerlink" title="列表（list）"></a>列表（list）</h4><ul><li>有序列表（ordered list）- ol &#x2F; li</li><li>无序列表（unordered list）- ul &#x2F; li</li><li>定义列表（definition list）- dl &#x2F; dt &#x2F; dd</li></ul><h4 id="链接（anchor）"><a href="#链接（anchor）" class="headerlink" title="链接（anchor）"></a>链接（anchor）</h4><ul><li>页面链接</li><li>锚链接</li><li>功能链接</li></ul><h4 id="图像（image）"><a href="#图像（image）" class="headerlink" title="图像（image）"></a>图像（image）</h4><ul><li><p>图像存储位置</p><p><img src="/./res/%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84.png"></p></li><li><p>图像及其宽高</p></li><li><p>选择正确的图像格式</p><ul><li>JPEG</li><li>GIF</li><li>PNG</li></ul></li><li><p>矢量图</p></li><li><p>语义化标签 - figure &#x2F; figcaption</p></li></ul><h4 id="表格（table）"><a href="#表格（table）" class="headerlink" title="表格（table）"></a>表格（table）</h4><ul><li>基本的表格结构 - table &#x2F; tr &#x2F; td &#x2F; th</li><li>表格的标题 - caption</li><li>跨行和跨列 - rowspan属性 &#x2F; colspan属性</li><li>长表格 - thead &#x2F; tbody &#x2F; tfoot</li></ul><h4 id="表单（form）"><a href="#表单（form）" class="headerlink" title="表单（form）"></a>表单（form）</h4><ul><li>重要属性 - action &#x2F; method &#x2F; enctype</li><li>表单控件（input）- type属性<ul><li>文本框 - <code>text</code> &#x2F; 密码框 - <code>password</code> &#x2F; 数字框 - <code>number</code></li><li>邮箱 - <code>email</code> &#x2F; 电话 - <code>tel</code> &#x2F; 日期 - <code>date</code> &#x2F; 滑条 - <code>range</code> &#x2F; URL - <code>url</code> &#x2F; 搜索 - <code>search</code></li><li>单选按钮 - <code>radio</code> &#x2F; 复选按钮 - <code>checkbox</code></li><li>文件上传 - <code>file</code> &#x2F; 隐藏域 - <code>hidden</code></li><li>提交按钮 - <code>submit</code> &#x2F; 图像按钮 - <code>image</code>  &#x2F; 重置按钮 - <code>reset</code></li></ul></li><li>下拉列表 - select &#x2F; option</li><li>文本域（多行文本）- textarea</li><li>组合表单元素 - fieldset &#x2F; legend</li></ul><h4 id="音视频（audio-x2F-video）"><a href="#音视频（audio-x2F-video）" class="headerlink" title="音视频（audio &#x2F; video）"></a>音视频（audio &#x2F; video）</h4><ul><li>视频格式和播放器</li><li>视频托管服务</li><li>添加视频的准备工作</li><li>video标签和属性 - autoplay &#x2F; controls &#x2F; loop &#x2F; muted &#x2F; preload &#x2F; src</li><li>audio标签和属性 - autoplay &#x2F; controls &#x2F; loop &#x2F; muted &#x2F; preload &#x2F; src &#x2F; width &#x2F; height &#x2F; poster</li></ul><h4 id="窗口（frame）"><a href="#窗口（frame）" class="headerlink" title="窗口（frame）"></a>窗口（frame）</h4><ul><li><p>框架集（过时，不建议使用） - frameset &#x2F; frame</p></li><li><p>内嵌窗口 - iframe</p></li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li><p>文档类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>注释</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-comment">&lt;!-- 这是一段注释，注释不能够嵌套 --&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>属性</p><ul><li>id：唯一标识</li><li>class：元素所属的类，用于区分不同的元素</li><li>title：元素的额外信息（鼠标悬浮时会显示工具提示文本）</li><li>tabindex：Tab键切换顺序</li><li>contenteditable：元素是否可编辑</li><li>draggable：元素是否可拖拽</li></ul></li><li><p>块级元素 &#x2F; 行级元素</p></li><li><p>字符实体（实体替换符）</p><p><img src="/./res/%E5%AD%97%E7%AC%A6%E5%AE%9E%E4%BD%93.png"></p></li></ul><h3 id="使用CSS渲染页面"><a href="#使用CSS渲染页面" class="headerlink" title="使用CSS渲染页面"></a>使用CSS渲染页面</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li><p>CSS的作用</p></li><li><p>CSS的工作原理</p></li><li><p>规则、属性和值</p><p><img src="/./res/%E9%80%89%E6%8B%A9%E5%99%A8%E8%AF%AD%E6%B3%95.png"></p></li><li><p>常用选择器</p><p><img src="/./res/%E5%B8%B8%E7%94%A8%E9%80%89%E6%8B%A9%E5%99%A8.png"></p></li></ul><h4 id="颜色（color）"><a href="#颜色（color）" class="headerlink" title="颜色（color）"></a>颜色（color）</h4><ul><li>如何指定颜色</li><li>颜色术语和颜色对比</li><li>背景色</li></ul><h4 id="文本（text-x2F-font）"><a href="#文本（text-x2F-font）" class="headerlink" title="文本（text &#x2F; font）"></a>文本（text &#x2F; font）</h4><ul><li><p>文本的大小和字型(font-size &#x2F; font-family)</p><p><img src="/./res/%E5%B0%BA%E5%AF%B8%E5%8D%95%E4%BD%8D.png"></p><p><img src="/./res/%E8%A1%AC%E7%BA%BF%E5%AD%97%E4%BD%93+%E9%9D%9E%E8%A1%AC%E7%BA%BF%E5%AD%97%E4%BD%93+%E7%AD%89%E5%AE%BD%E5%AD%97%E4%BD%93.png"></p></li><li><p>粗细、样式、拉伸和装饰(font-weight &#x2F; font-style &#x2F; font-stretch &#x2F; text-decoration)</p><p><img src="/./res/%E5%AD%97%E4%BD%93%E6%A0%B7%E5%BC%8F.png"></p></li><li><p>行间距(line-height)、字母间距(letter-spacing)和单词间距(word-spacing)</p></li><li><p>对齐(text-align)方式和缩进(text-ident)</p></li><li><p>链接样式（:link &#x2F; :visited &#x2F; :active &#x2F; :hover）</p></li><li><p>CSS3新属性</p><ul><li>阴影效果 - text-shadow</li><li>首字母和首行文本(:first-letter &#x2F; :first-line)</li><li>响应用户</li></ul></li></ul><h4 id="盒子（box-model）"><a href="#盒子（box-model）" class="headerlink" title="盒子（box model）"></a>盒子（box model）</h4><ul><li><p>盒子大小的控制（width &#x2F; height）</p><p><img src="/./res/%E5%B0%BA%E5%AF%B8%E5%8D%95%E4%BD%8D.png"></p></li><li><p>盒子的边框、外边距和内边距（border &#x2F;  margin &#x2F; padding）</p><p><img src="/./res/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png"></p></li><li><p>盒子的显示和隐藏（display &#x2F; visibility）</p></li><li><p>CSS3新属性</p><ul><li>边框图像（border-image）</li><li>投影（border-shadow）</li><li>圆角（border-radius）</li></ul></li></ul><h4 id="列表、表格和表单"><a href="#列表、表格和表单" class="headerlink" title="列表、表格和表单"></a>列表、表格和表单</h4><ul><li>列表的项目符号（list-style）</li><li>表格的边框和背景（border-collapse）</li><li>表单控件的外观</li><li>表单控件的对齐</li><li>浏览器的开发者工具</li></ul><h4 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h4><ul><li>控制图像的大小（display: inline-block）</li><li>对齐图像</li><li>背景图像（background &#x2F; background-image &#x2F; background-repeat &#x2F; background-position）</li></ul><h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><ul><li><p>控制元素的位置（position &#x2F; z-index）</p><ul><li>普通流</li><li>相对定位</li><li>绝对定位</li><li>固定定位</li><li>浮动元素（float &#x2F; clear）</li></ul></li><li><p>网站布局</p><ul><li><p>HTML5布局</p><p><img src="/./res/%E7%BB%8F%E5%85%B8%E5%B8%83%E5%B1%80-2.png"></p></li></ul></li><li><p>适配屏幕尺寸</p><ul><li>固定宽度布局</li><li>流体布局</li><li>布局网格</li></ul></li></ul><h3 id="使用JavaScript控制行为"><a href="#使用JavaScript控制行为" class="headerlink" title="使用JavaScript控制行为"></a>使用JavaScript控制行为</h3><h4 id="JavaScript基本语法"><a href="#JavaScript基本语法" class="headerlink" title="JavaScript基本语法"></a>JavaScript基本语法</h4><ul><li>语句和注释</li><li>变量和数据类型<ul><li>声明和赋值</li><li>简单数据类型和复杂数据类型</li><li>变量的命名规则</li></ul></li><li>表达式和运算符<ul><li>赋值运算符</li><li>算术运算符</li><li>比较运算符</li><li>逻辑运算符：<code>&amp;&amp;</code>、<code>||</code>、<code>!</code></li></ul></li><li>分支结构<ul><li><code>if...else...</code></li><li><code>switch...cas...default...</code></li></ul></li><li>循环结构<ul><li><code>for</code>循环</li><li><code>while</code>循环</li><li><code>do...while</code>循环</li></ul></li><li>数组<ul><li>创建数组</li><li>操作数组中的元素</li></ul></li><li>函数<ul><li>声明函数</li><li>调用函数</li><li>参数和返回值</li><li>匿名函数</li><li>立即调用函数</li></ul></li></ul><h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><ul><li>对象的概念</li><li>创建对象的字面量语法</li><li>访问成员运算符</li><li>创建对象的构造函数语法<ul><li><code>this</code>关键字</li></ul></li><li>添加和删除属性<ul><li><code>delete</code>关键字</li></ul></li><li>标准对象<ul><li><code>Number</code> &#x2F; <code>String</code> &#x2F; <code>Boolean</code> &#x2F; <code>Symbol</code> &#x2F; <code>Array</code> &#x2F; <code>Function</code> </li><li><code>Date</code> &#x2F; <code>Error</code> &#x2F; <code>Math</code> &#x2F; <code>RegExp</code> &#x2F; <code>Object</code> &#x2F; <code>Map</code> &#x2F; <code>Set</code></li><li><code>JSON</code> &#x2F; <code>Promise</code> &#x2F; <code>Generator</code> &#x2F; <code>Reflect</code> &#x2F; <code>Proxy</code></li></ul></li></ul><h4 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h4><ul><li><code>window</code>对象的属性和方法</li><li><code>history</code>对象<ul><li><code>forward()</code> &#x2F; <code>back()</code> &#x2F; <code>go()</code></li></ul></li><li><code>location</code>对象</li><li><code>navigator</code>对象</li><li><code>screen</code>对象</li></ul><h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><ul><li>DOM树</li><li>访问元素<ul><li><code>getElementById()</code> &#x2F; <code>querySelector()</code></li><li><code>getElementsByClassName()</code> &#x2F; <code>getElementsByTagName()</code> &#x2F; <code>querySelectorAll()</code></li><li><code>parentNode</code> &#x2F; <code>previousSibling</code> &#x2F; <code>nextSibling</code> &#x2F; <code>children</code> &#x2F; <code>firstChild</code> &#x2F; <code>lastChild</code></li></ul></li><li>操作元素<ul><li><code>nodeValue</code></li><li><code>innerHTML</code> &#x2F; <code>textContent</code> &#x2F; <code>createElement()</code> &#x2F; <code>createTextNode()</code> &#x2F; <code>appendChild()</code> &#x2F; <code>insertBefore()</code> &#x2F; <code>removeChild()</code></li><li><code>className</code> &#x2F; <code>id</code> &#x2F; <code>hasAttribute()</code> &#x2F; <code>getAttribute()</code> &#x2F; <code>setAttribute()</code> &#x2F; <code>removeAttribute()</code></li></ul></li><li>事件处理<ul><li>事件类型<ul><li>UI事件：<code>load</code> &#x2F; <code>unload</code> &#x2F; <code>error</code> &#x2F; <code>resize</code> &#x2F; <code>scroll</code></li><li>键盘事件：<code>keydown</code> &#x2F; <code>keyup</code> &#x2F; <code>keypress</code></li><li>鼠标事件：<code>click</code> &#x2F; <code>dbclick</code> &#x2F; <code>mousedown</code> &#x2F; <code>mouseup</code> &#x2F; <code>mousemove</code> &#x2F; <code>mouseover</code> &#x2F; <code>mouseout</code></li><li>焦点事件：<code>focus</code> &#x2F; <code>blur</code></li><li>表单事件：<code>input</code> &#x2F; <code>change</code> &#x2F; <code>submit</code> &#x2F; <code>reset</code> &#x2F; <code>cut</code> &#x2F; <code>copy</code> &#x2F; <code>paste</code> &#x2F; <code>select</code></li></ul></li><li>事件绑定<ul><li>HTML事件处理程序（不推荐使用，因为要做到标签与代码分离）</li><li>传统的DOM事件处理程序（只能附加一个回调函数）</li><li>事件监听器（旧的浏览器中不被支持）</li></ul></li><li>事件流：事件捕获 &#x2F; 事件冒泡</li><li>事件对象（低版本IE中的window.event）<ul><li><code>target</code>（有些浏览器使用srcElement）</li><li><code>type</code></li><li><code>cancelable</code></li><li><code>preventDefault()</code></li><li><code>stopPropagation()</code>（低版本IE中的cancelBubble）</li></ul></li><li>鼠标事件 - 事件发生的位置<ul><li>屏幕位置：<code>screenX</code>和<code>screenY</code></li><li>页面位置：<code>pageX</code>和<code>pageY</code></li><li>客户端位置：<code>clientX</code>和<code>clientY</code></li></ul></li><li>键盘事件 - 哪个键被按下了<ul><li><code>keyCode</code>属性（有些浏览器使用<code>which</code>）</li><li><code>String.fromCharCode(event.keyCode)</code></li></ul></li><li>HTML5事件<ul><li><code>DOMContentLoaded</code></li><li><code>hashchange</code></li><li><code>beforeunload</code></li></ul></li></ul></li></ul><h4 id="JavaScript-API"><a href="#JavaScript-API" class="headerlink" title="JavaScript API"></a>JavaScript API</h4><ul><li><p>客户端存储 - <code>localStorage</code>和<code>sessionStorage</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">localStorage</span>.<span class="hljs-property">colorSetting</span> = <span class="hljs-string">&#x27;#a4509b&#x27;</span>;<br><span class="hljs-variable language_">localStorage</span>[<span class="hljs-string">&#x27;colorSetting&#x27;</span>] = <span class="hljs-string">&#x27;#a4509b&#x27;</span>;<br><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;colorSetting&#x27;</span>, <span class="hljs-string">&#x27;#a4509b&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>获取位置信息 - <code>geolocation</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">navigator.<span class="hljs-property">geolocation</span>.<span class="hljs-title function_">getCurrentPosition</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">pos</span>) &#123;   <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pos.<span class="hljs-property">coords</span>.<span class="hljs-property">latitude</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pos.<span class="hljs-property">coords</span>.<span class="hljs-property">longitude</span>)<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>从服务器获取数据 - Fetch API</p></li><li><p>绘制图形 - <code>&lt;canvas&gt;</code>的API</p></li><li><p>音视频 - <code>&lt;audio&gt;</code>和<code>&lt;video&gt;</code>的API</p></li></ul><h3 id="使用jQuery"><a href="#使用jQuery" class="headerlink" title="使用jQuery"></a>使用jQuery</h3><h4 id="jQuery概述"><a href="#jQuery概述" class="headerlink" title="jQuery概述"></a>jQuery概述</h4><ol><li>Write Less Do More（用更少的代码来完成更多的工作）</li><li>使用CSS选择器来查找元素（更简单更方便）</li><li>使用jQuery方法来操作元素（解决浏览器兼容性问题、应用于所有元素并施加多个方法）</li></ol><h4 id="引入jQuery"><a href="#引入jQuery" class="headerlink" title="引入jQuery"></a>引入jQuery</h4><ul><li>下载jQuery的开发版和压缩版</li><li>从CDN加载jQuery</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">    window.jQuery || </span></span><br><span class="language-xml"><span class="language-handlebars">        document.write(&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-3.3.1.min.js&quot;</span>&gt;</span></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h4><ul><li>选择器<ul><li>* &#x2F; element &#x2F; #id &#x2F; .class &#x2F; selector1, selector2</li><li>ancestor descendant &#x2F; parent&gt;child &#x2F; previous+next &#x2F; previous~siblings</li></ul></li><li>筛选器<ul><li>基本筛选器：:not(selector) &#x2F; :first &#x2F; :last &#x2F; :even &#x2F; :odd &#x2F; :eq(index) &#x2F; :gt(index) &#x2F; :lt(index) &#x2F; :animated &#x2F; :focus</li><li>内容筛选器：:contains(‘…’) &#x2F; :empty &#x2F; :parent &#x2F; :has(selector)</li><li>可见性筛选器：:hidden &#x2F; :visible</li><li>子节点筛选器：:nth-child(expr) &#x2F; :first-child &#x2F; :last-child &#x2F; :only-child</li><li>属性筛选器：[attribute] &#x2F; [attribute&#x3D;’value’] &#x2F; [attribute!&#x3D;’value’] &#x2F; [attribute^&#x3D;’value’] &#x2F; [attribute$&#x3D;’value’] &#x2F; [attribute|&#x3D;’value’] &#x2F; [attribute~&#x3D;’value’]</li></ul></li><li>表单：:input &#x2F; :text &#x2F; :password &#x2F; :radio &#x2F; :checkbox &#x2F; :submit &#x2F; :image &#x2F; :reset &#x2F; :button &#x2F; :file &#x2F; :selected &#x2F; :enabled &#x2F; :disabled &#x2F; :checked</li></ul><h4 id="执行操作"><a href="#执行操作" class="headerlink" title="执行操作"></a>执行操作</h4><ul><li>内容操作<ul><li>获取&#x2F;修改内容：<code>html()</code> &#x2F; <code>text()</code> &#x2F; <code>replaceWith()</code> &#x2F; <code>remove()</code></li><li>获取&#x2F;设置元素：<code>before()</code> &#x2F; <code>after()</code> &#x2F; <code>prepend()</code> &#x2F; <code>append()</code> &#x2F; <code>remove()</code> &#x2F; <code>clone()</code> &#x2F; <code>unwrap()</code> &#x2F; <code>detach()</code> &#x2F; <code>empty()</code> &#x2F; <code>add()</code></li><li>获取&#x2F;修改属性：<code>attr()</code> &#x2F; <code>removeAttr()</code> &#x2F; <code>addClass()</code> &#x2F; <code>removeClass()</code> &#x2F; <code>css()</code></li><li>获取&#x2F;设置表单值：<code>val()</code></li></ul></li><li>查找操作<ul><li>查找方法：<code>find()</code> &#x2F;  <code>parent()</code> &#x2F; <code>children()</code> &#x2F; <code>siblings()</code> &#x2F; <code>next()</code> &#x2F; <code>nextAll()</code> &#x2F; <code>prev()</code> &#x2F; <code>prevAll()</code></li><li>筛选器：<code>filter()</code> &#x2F; <code>not()</code> &#x2F; <code>has()</code> &#x2F; <code>is()</code> &#x2F; <code>contains()</code></li><li>索引编号：<code>eq()</code></li></ul></li><li>尺寸和位置<ul><li>尺寸相关：<code>height()</code> &#x2F; <code>width()</code> &#x2F; <code>innerHeight()</code> &#x2F; <code>innerWidth()</code> &#x2F; <code>outerWidth()</code> &#x2F; <code>outerHeight()</code></li><li>位置相关：<code>offset()</code> &#x2F; <code>position()</code> &#x2F; <code>scrollLeft()</code> &#x2F; <code>scrollTop()</code></li></ul></li><li>特效和动画<ul><li>基本动画：<code>show()</code> &#x2F; <code>hide()</code> &#x2F; <code>toggle()</code></li><li>消失出现：<code>fadeIn()</code> &#x2F; <code>fadeOut()</code> &#x2F; <code>fadeTo()</code> &#x2F; <code>fadeToggle()</code></li><li>滑动效果：<code>slideDown()</code> &#x2F; <code>slideUp()</code> &#x2F; <code>slideToggle()</code></li><li>自定义：<code>delay()</code> &#x2F; <code>stop()</code> &#x2F; <code>animate()</code></li></ul></li><li>事件<ul><li>文档加载：<code>ready()</code> &#x2F; <code>load()</code></li><li>用户交互：<code>on()</code> &#x2F; <code>off()</code></li></ul></li></ul><h4 id="链式操作"><a href="#链式操作" class="headerlink" title="链式操作"></a>链式操作</h4><h4 id="检测页面是否可用"><a href="#检测页面是否可用" class="headerlink" title="检测页面是否可用"></a>检测页面是否可用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="jQuery插件"><a href="#jQuery插件" class="headerlink" title="jQuery插件"></a>jQuery插件</h4><ul><li>jQuery Validation</li><li>jQuery Treeview</li><li>jQuery Autocomplete</li><li>jQuery UI</li></ul><h4 id="避免和其他库的冲突"><a href="#避免和其他库的冲突" class="headerlink" title="避免和其他库的冲突"></a>避免和其他库的冲突</h4><p>先引入其他库再引入jQuery的情况。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;other.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">jQuery.<span class="hljs-title function_">noConflict</span>();</span><br><span class="language-javascript">    <span class="hljs-title function_">jQuery</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">jQuery</span>(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">hide</span>();</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>先引入jQuery再引入其他库的情况。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;other.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">jQuery</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">jQuery</span>(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">hide</span>();</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="使用Ajax"><a href="#使用Ajax" class="headerlink" title="使用Ajax"></a>使用Ajax</h4><p>Ajax是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</p><ul><li>原生的Ajax</li><li>基于jQuery的Ajax<ul><li>加载内容</li><li>提交表单</li></ul></li></ul><h3 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h3><h4 id="渐进式框架-Vue-js"><a href="#渐进式框架-Vue-js" class="headerlink" title="渐进式框架 - Vue.js"></a>渐进式框架 - <a href="https://cn.vuejs.org/">Vue.js</a></h4><p>前后端分离开发（前端渲染）必选框架。</p><h5 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h5><ol><li><p>引入Vue的JavaScript文件，我们仍然推荐从CDN服务器加载它。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>数据绑定（声明式渲染 ）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; product &#125;&#125;库存信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-attr">product</span>: <span class="hljs-string">&#x27;iPhone X&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>条件与循环。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>库存信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;product in products&quot;</span>&gt;</span><br>&#123;&#123; product.name &#125;&#125; - &#123;&#123; product.quantity &#125;&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;product.quantity === 0&quot;</span>&gt;</span><br>已经售罄<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-attr">products</span>: [</span><br><span class="language-javascript">&#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;iPhone X&quot;</span>, <span class="hljs-string">&quot;quantity&quot;</span>: <span class="hljs-number">20</span>&#125;,</span><br><span class="language-javascript">&#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;华为 Mate20&quot;</span>, <span class="hljs-string">&quot;quantity&quot;</span>: <span class="hljs-number">0</span>&#125;,</span><br><span class="language-javascript">&#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;小米 Mix3&quot;</span>, <span class="hljs-string">&quot;quantity&quot;</span>: <span class="hljs-number">50</span>&#125;</span><br><span class="language-javascript">]</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>计算属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>库存信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;product in products&quot;</span>&gt;</span><br>&#123;&#123; product.name &#125;&#125; - &#123;&#123; product.quantity &#125;&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;product.quantity === 0&quot;</span>&gt;</span><br>已经售罄<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>库存总量：&#123;&#123; totalQuantity &#125;&#125;台<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-attr">products</span>: [</span><br><span class="language-javascript">&#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;iPhone X&quot;</span>, <span class="hljs-string">&quot;quantity&quot;</span>: <span class="hljs-number">20</span>&#125;,</span><br><span class="language-javascript">&#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;华为 Mate20&quot;</span>, <span class="hljs-string">&quot;quantity&quot;</span>: <span class="hljs-number">0</span>&#125;,</span><br><span class="language-javascript">&#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;小米 Mix3&quot;</span>, <span class="hljs-string">&quot;quantity&quot;</span>: <span class="hljs-number">50</span>&#125;</span><br><span class="language-javascript">]</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">totalQuantity</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">products</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">sum, product</span>) =&gt;</span> &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> sum + product.<span class="hljs-property">quantity</span></span><br><span class="language-javascript">&#125;, <span class="hljs-number">0</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>处理事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>库存信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;product in products&quot;</span>&gt;</span><br>&#123;&#123; product.name &#125;&#125; - &#123;&#123; product.quantity &#125;&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;product.quantity === 0&quot;</span>&gt;</span><br>已经售罄<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;product.quantity += 1&quot;</span>&gt;</span><br>增加库存<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>库存总量：&#123;&#123; totalQuantity &#125;&#125;台<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-attr">products</span>: [</span><br><span class="language-javascript">&#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;iPhone X&quot;</span>, <span class="hljs-string">&quot;quantity&quot;</span>: <span class="hljs-number">20</span>&#125;,</span><br><span class="language-javascript">&#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;华为 Mate20&quot;</span>, <span class="hljs-string">&quot;quantity&quot;</span>: <span class="hljs-number">0</span>&#125;,</span><br><span class="language-javascript">&#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;小米 Mix3&quot;</span>, <span class="hljs-string">&quot;quantity&quot;</span>: <span class="hljs-number">50</span>&#125;</span><br><span class="language-javascript">]</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">totalQuantity</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">products</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">sum, product</span>) =&gt;</span> &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> sum + product.<span class="hljs-property">quantity</span></span><br><span class="language-javascript">&#125;, <span class="hljs-number">0</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>用户输入。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>库存信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;product in products&quot;</span>&gt;</span><br>&#123;&#123; product.name &#125;&#125; - <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;product.quantity&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;product.quantity === 0&quot;</span>&gt;</span><br>已经售罄<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;product.quantity += 1&quot;</span>&gt;</span><br>增加库存<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>库存总量：&#123;&#123; totalQuantity &#125;&#125;台<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-attr">products</span>: [</span><br><span class="language-javascript">&#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;iPhone X&quot;</span>, <span class="hljs-string">&quot;quantity&quot;</span>: <span class="hljs-number">20</span>&#125;,</span><br><span class="language-javascript">&#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;华为 Mate20&quot;</span>, <span class="hljs-string">&quot;quantity&quot;</span>: <span class="hljs-number">0</span>&#125;,</span><br><span class="language-javascript">&#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;小米 Mix3&quot;</span>, <span class="hljs-string">&quot;quantity&quot;</span>: <span class="hljs-number">50</span>&#125;</span><br><span class="language-javascript">]</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">totalQuantity</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">products</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">sum, product</span>) =&gt;</span> &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> sum + product.<span class="hljs-property">quantity</span></span><br><span class="language-javascript">&#125;, <span class="hljs-number">0</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>通过网络加载JSON数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>库存信息<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;product in products&quot;</span>&gt;</span><br>&#123;&#123; product.name &#125;&#125; - &#123;&#123; product.quantity &#125;&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;product.quantity === 0&quot;</span>&gt;</span><br>已经售罄<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-attr">products</span>: []</span><br><span class="language-javascript">&#125;，</span><br><span class="language-javascript"><span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://jackfrued.top/api/products&#x27;</span>)</span><br><span class="language-javascript">.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">json</span>())</span><br><span class="language-javascript">.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">json</span> =&gt;</span> &#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">products</span> = json</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h5 id="使用脚手架-vue-cli"><a href="#使用脚手架-vue-cli" class="headerlink" title="使用脚手架 - vue-cli"></a>使用脚手架 - vue-cli</h5><p>Vue为商业项目开发提供了非常便捷的脚手架工具vue-cli，通过工具可以省去手工配置开发环境、测试环境和运行环境的步骤，让开发者只需要关注要解决的问题。</p><ol><li>安装脚手架。</li><li>创建项目。</li><li>安装依赖包。</li><li>运行项目。</li></ol><h4 id="UI框架-Element"><a href="#UI框架-Element" class="headerlink" title="UI框架 - Element"></a>UI框架 - <a href="http://element-cn.eleme.io/#/zh-CN">Element</a></h4><p>基于Vue 2.0的桌面端组件库，用于构造用户界面，支持响应式布局。</p><ol><li><p>引入Element的CSS和JavaScript文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-comment">&lt;!-- 引入样式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://unpkg.com/element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入组件库 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/element-ui/lib/index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>一个简单的例子。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://unpkg.com/element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;visible = true&quot;</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-dialog</span> <span class="hljs-attr">:visible.sync</span>=<span class="hljs-string">&quot;visible&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Hello world&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>开始使用Element吧<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-dialog</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/element-ui/lib/index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-attr">visible</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://unpkg.com/element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;tableData&quot;</span> <span class="hljs-attr">stripe</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;日期&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;姓名&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;地址&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/element-ui/lib/index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-attr">tableData</span>:  [</span><br><span class="language-javascript">&#123;</span><br><span class="language-javascript"><span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-02&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王一霸&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span><br><span class="language-javascript">&#125;, </span><br><span class="language-javascript">&#123;</span><br><span class="language-javascript"><span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-04&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;刘二狗&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1517 弄&#x27;</span></span><br><span class="language-javascript">&#125;, </span><br><span class="language-javascript">&#123;</span><br><span class="language-javascript"><span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-01&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;杨三萌&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1519 弄&#x27;</span></span><br><span class="language-javascript">&#125;, </span><br><span class="language-javascript">&#123;</span><br><span class="language-javascript"><span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2016-05-03&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;陈四吹&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海市普陀区金沙江路 1516 弄&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">]</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="报表框架-ECharts"><a href="#报表框架-ECharts" class="headerlink" title="报表框架 - ECharts"></a>报表框架 - <a href="https://echarts.baidu.com/">ECharts</a></h4><p>百度出品的开源可视化库，常用于生成各种类型的报表。</p><p><img src="/./res/baidu_echarts.png"></p><h4 id="基于弹性盒子的CSS框架-Bulma"><a href="#基于弹性盒子的CSS框架-Bulma" class="headerlink" title="基于弹性盒子的CSS框架 - Bulma"></a>基于弹性盒子的CSS框架 - <a href="https://bulma.io/">Bulma</a></h4><p>Bulma是一个基于Flexbox的现代化的CSS框架，其初衷就是移动优先（Mobile First），模块化设计，可以轻松用来实现各种简单或者复杂的内容布局，即使不懂CSS的开发者也能够使用它定制出漂亮的页面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bulma<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/bulma/0.7.4/css/bulma.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">div</span> &#123; <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>; &#125;</span><br><span class="language-css"><span class="hljs-selector-class">.column</span> &#123; <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>; <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#063</span>; <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span>; <span class="hljs-attribute">text-align</span>: center; &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;columns&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button is-primary&quot;</span>&gt;</span>Primary<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button is-link&quot;</span>&gt;</span>Link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button is-info&quot;</span>&gt;</span>Info<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button is-success&quot;</span>&gt;</span>Success<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button is-warning&quot;</span>&gt;</span>Warning<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button is-danger&quot;</span>&gt;</span>Danger<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">progress</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress is-danger is-medium&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span>60%<span class="hljs-tag">&lt;/<span class="hljs-name">progress</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table is-hoverable&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>One<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Two<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Three<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Four<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Five<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Six<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Seven<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Eight<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Nine<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Ten<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Eleven<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Twelve<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="响应式布局框架-Bootstrap"><a href="#响应式布局框架-Bootstrap" class="headerlink" title="响应式布局框架 - Bootstrap"></a>响应式布局框架 - <a href="http://www.bootcss.com/">Bootstrap</a></h4><p>用于快速开发Web应用程序的前端框架，支持响应式布局。</p><ol><li><p>特点</p><ul><li>支持主流的浏览器和移动设备</li><li>容易上手</li><li>响应式设计</li></ul></li><li><p>内容</p><ul><li>网格系统</li><li>封装的CSS</li><li>现成的组件</li><li>JavaScript插件</li></ul></li><li><p>可视化</p><p><img src="/./res/bootstrap-layoutit.png"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python100day</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python100day-16-20</title>
    <link href="/2022/08/10/python100day-16-20/"/>
    <url>/2022/08/10/python100day-16-20/</url>
    
    <content type="html"><![CDATA[<h1 id="Python语言进阶"><a href="#Python语言进阶" class="headerlink" title="Python语言进阶"></a>Python语言进阶</h1><h2 id="Python语言进阶-1"><a href="#Python语言进阶-1" class="headerlink" title="Python语言进阶"></a>Python语言进阶</h2><h3 id="重要知识点"><a href="#重要知识点" class="headerlink" title="重要知识点"></a>重要知识点</h3><ul><li><p>生成式（推导式）的用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python">prices = &#123;<br>    <span class="hljs-string">&#x27;AAPL&#x27;</span>: <span class="hljs-number">191.88</span>,<br>    <span class="hljs-string">&#x27;GOOG&#x27;</span>: <span class="hljs-number">1186.96</span>,<br>    <span class="hljs-string">&#x27;IBM&#x27;</span>: <span class="hljs-number">149.24</span>,<br>    <span class="hljs-string">&#x27;ORCL&#x27;</span>: <span class="hljs-number">48.44</span>,<br>    <span class="hljs-string">&#x27;ACN&#x27;</span>: <span class="hljs-number">166.89</span>,<br>    <span class="hljs-string">&#x27;FB&#x27;</span>: <span class="hljs-number">208.09</span>,<br>    <span class="hljs-string">&#x27;SYMC&#x27;</span>: <span class="hljs-number">21.29</span><br>&#125;<br><span class="hljs-comment"># 用股票价格大于100元的股票构造一个新的字典</span><br>prices2 = &#123;key: value <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> prices.items() <span class="hljs-keyword">if</span> value &gt; <span class="hljs-number">100</span>&#125;<br><span class="hljs-built_in">print</span>(prices2)<br></code></pre></td></tr></table></figure><blockquote><p>说明：生成式（推导式）可以用来生成列表、集合和字典。</p></blockquote></li><li><p>嵌套的列表的坑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python">names = [<span class="hljs-string">&#x27;关羽&#x27;</span>, <span class="hljs-string">&#x27;张飞&#x27;</span>, <span class="hljs-string">&#x27;赵云&#x27;</span>, <span class="hljs-string">&#x27;马超&#x27;</span>, <span class="hljs-string">&#x27;黄忠&#x27;</span>]<br>courses = [<span class="hljs-string">&#x27;语文&#x27;</span>, <span class="hljs-string">&#x27;数学&#x27;</span>, <span class="hljs-string">&#x27;英语&#x27;</span>]<br><span class="hljs-comment"># 录入五个学生三门课程的成绩</span><br><span class="hljs-comment"># 错误 - 参考http://pythontutor.com/visualize.html#mode=edit</span><br><span class="hljs-comment"># scores = [[None] * len(courses)] * len(names)</span><br>scores = [[<span class="hljs-literal">None</span>] * <span class="hljs-built_in">len</span>(courses) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(names))]<br><span class="hljs-keyword">for</span> row, name <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(names):<br>    <span class="hljs-keyword">for</span> col, course <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(courses):<br>        scores[row][col] = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">f&#x27;请输入<span class="hljs-subst">&#123;name&#125;</span>的<span class="hljs-subst">&#123;course&#125;</span>成绩: &#x27;</span>))<br>        <span class="hljs-built_in">print</span>(scores)<br></code></pre></td></tr></table></figure><p><a href="http://pythontutor.com/">Python Tutor</a> - VISUALIZE CODE AND GET LIVE HELP</p></li><li><p><code>heapq</code>模块（堆排序）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">从列表中找出最大的或最小的N个元素</span><br><span class="hljs-string">堆结构(大根堆/小根堆)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> heapq<br><br>list1 = [<span class="hljs-number">34</span>, <span class="hljs-number">25</span>, <span class="hljs-number">12</span>, <span class="hljs-number">99</span>, <span class="hljs-number">87</span>, <span class="hljs-number">63</span>, <span class="hljs-number">58</span>, <span class="hljs-number">78</span>, <span class="hljs-number">88</span>, <span class="hljs-number">92</span>]<br>list2 = [<br>    &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;IBM&#x27;</span>, <span class="hljs-string">&#x27;shares&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;price&#x27;</span>: <span class="hljs-number">91.1</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;AAPL&#x27;</span>, <span class="hljs-string">&#x27;shares&#x27;</span>: <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;price&#x27;</span>: <span class="hljs-number">543.22</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;FB&#x27;</span>, <span class="hljs-string">&#x27;shares&#x27;</span>: <span class="hljs-number">200</span>, <span class="hljs-string">&#x27;price&#x27;</span>: <span class="hljs-number">21.09</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;HPQ&#x27;</span>, <span class="hljs-string">&#x27;shares&#x27;</span>: <span class="hljs-number">35</span>, <span class="hljs-string">&#x27;price&#x27;</span>: <span class="hljs-number">31.75</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;YHOO&#x27;</span>, <span class="hljs-string">&#x27;shares&#x27;</span>: <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;price&#x27;</span>: <span class="hljs-number">16.35</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;ACME&#x27;</span>, <span class="hljs-string">&#x27;shares&#x27;</span>: <span class="hljs-number">75</span>, <span class="hljs-string">&#x27;price&#x27;</span>: <span class="hljs-number">115.65</span>&#125;<br>]<br><span class="hljs-built_in">print</span>(heapq.nlargest(<span class="hljs-number">3</span>, list1))<br><span class="hljs-built_in">print</span>(heapq.nsmallest(<span class="hljs-number">3</span>, list1))<br><span class="hljs-built_in">print</span>(heapq.nlargest(<span class="hljs-number">2</span>, list2, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&#x27;price&#x27;</span>]))<br><span class="hljs-built_in">print</span>(heapq.nlargest(<span class="hljs-number">2</span>, list2, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&#x27;shares&#x27;</span>]))<br></code></pre></td></tr></table></figure></li><li><p><code>itertools</code>模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">迭代工具模块</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> itertools<br><br><span class="hljs-comment"># 产生ABCD的全排列</span><br>itertools.permutations(<span class="hljs-string">&#x27;ABCD&#x27;</span>)<br><span class="hljs-comment"># 产生ABCDE的五选三组合</span><br>itertools.combinations(<span class="hljs-string">&#x27;ABCDE&#x27;</span>, <span class="hljs-number">3</span>)<br><span class="hljs-comment"># 产生ABCD和123的笛卡尔积</span><br>itertools.product(<span class="hljs-string">&#x27;ABCD&#x27;</span>, <span class="hljs-string">&#x27;123&#x27;</span>)<br><span class="hljs-comment"># 产生ABC的无限循环序列</span><br>itertools.cycle((<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>))<br></code></pre></td></tr></table></figure></li><li><p><code>collections</code>模块</p><p>常用的工具类：</p><ul><li><code>namedtuple</code>：命令元组，它是一个类工厂，接受类型的名称和属性列表来创建一个类。</li><li><code>deque</code>：双端队列，是列表的替代实现。Python中的列表底层是基于数组来实现的，而deque底层是双向链表，因此当你需要在头尾添加和删除元素时，deque会表现出更好的性能，渐近时间复杂度为$O(1)$。</li><li><code>Counter</code>：<code>dict</code>的子类，键是元素，值是元素的计数，它的<code>most_common()</code>方法可以帮助我们获取出现频率最高的元素。<code>Counter</code>和<code>dict</code>的继承关系我认为是值得商榷的，按照CARP原则，<code>Counter</code>跟<code>dict</code>的关系应该设计为关联关系更为合理。</li><li><code>OrderedDict</code>：<code>dict</code>的子类，它记录了键值对插入的顺序，看起来既有字典的行为，也有链表的行为。</li><li><code>defaultdict</code>：类似于字典类型，但是可以通过默认的工厂函数来获得键对应的默认值，相比字典中的<code>setdefault()</code>方法，这种做法更加高效。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">找出序列中出现次数最多的元素</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<br><br>words = [<br>    <span class="hljs-string">&#x27;look&#x27;</span>, <span class="hljs-string">&#x27;into&#x27;</span>, <span class="hljs-string">&#x27;my&#x27;</span>, <span class="hljs-string">&#x27;eyes&#x27;</span>, <span class="hljs-string">&#x27;look&#x27;</span>, <span class="hljs-string">&#x27;into&#x27;</span>, <span class="hljs-string">&#x27;my&#x27;</span>, <span class="hljs-string">&#x27;eyes&#x27;</span>,<br>    <span class="hljs-string">&#x27;the&#x27;</span>, <span class="hljs-string">&#x27;eyes&#x27;</span>, <span class="hljs-string">&#x27;the&#x27;</span>, <span class="hljs-string">&#x27;eyes&#x27;</span>, <span class="hljs-string">&#x27;the&#x27;</span>, <span class="hljs-string">&#x27;eyes&#x27;</span>, <span class="hljs-string">&#x27;not&#x27;</span>, <span class="hljs-string">&#x27;around&#x27;</span>,<br>    <span class="hljs-string">&#x27;the&#x27;</span>, <span class="hljs-string">&#x27;eyes&#x27;</span>, <span class="hljs-string">&quot;don&#x27;t&quot;</span>, <span class="hljs-string">&#x27;look&#x27;</span>, <span class="hljs-string">&#x27;around&#x27;</span>, <span class="hljs-string">&#x27;the&#x27;</span>, <span class="hljs-string">&#x27;eyes&#x27;</span>,<br>    <span class="hljs-string">&#x27;look&#x27;</span>, <span class="hljs-string">&#x27;into&#x27;</span>, <span class="hljs-string">&#x27;my&#x27;</span>, <span class="hljs-string">&#x27;eyes&#x27;</span>, <span class="hljs-string">&quot;you&#x27;re&quot;</span>, <span class="hljs-string">&#x27;under&#x27;</span><br>]<br>counter = Counter(words)<br><span class="hljs-built_in">print</span>(counter.most_common(<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure></li></ul><h3 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h3><ul><li><p>算法：解决问题的方法和步骤</p></li><li><p>评价算法的好坏：渐近时间复杂度和渐近空间复杂度。</p></li><li><p>渐近时间复杂度的大O标记：</p><ul><li><img src="http://latex.codecogs.com/gif.latex?O(c)" /> - 常量时间复杂度 - 布隆过滤器 &#x2F; 哈希存储</li><li><img src="http://latex.codecogs.com/gif.latex?O(log_2n)" /> - 对数时间复杂度 - 折半查找（二分查找）</li><li><img src="http://latex.codecogs.com/gif.latex?O(n)" /> - 线性时间复杂度 - 顺序查找 &#x2F; 计数排序</li><li><img src="http://latex.codecogs.com/gif.latex?O(n*log_2n)" /> - 对数线性时间复杂度 - 高级排序算法（归并排序、快速排序）</li><li><img src="http://latex.codecogs.com/gif.latex?O(n^2)" /> - 平方时间复杂度 - 简单排序算法（选择排序、插入排序、冒泡排序）</li><li><img src="http://latex.codecogs.com/gif.latex?O(n^3)" /> - 立方时间复杂度 - Floyd算法 &#x2F; 矩阵乘法运算</li><li><img src="http://latex.codecogs.com/gif.latex?O(2^n)" /> - 几何级数时间复杂度 - 汉诺塔</li><li><img src="http://latex.codecogs.com/gif.latex?O(n!)" /> - 阶乘时间复杂度 - 旅行经销商问题 - NPC</li></ul><p><img src="/./res/algorithm_complexity_1.png"></p><p><img src="/./res/algorithm_complexity_2.png"></p></li><li><p>排序算法（选择、冒泡和归并）和查找算法（顺序和折半）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">select_sort</span>(<span class="hljs-params">items, comp=<span class="hljs-keyword">lambda</span> x, y: x &lt; y</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;简单选择排序&quot;&quot;&quot;</span><br>    items = items[:]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(items) - <span class="hljs-number">1</span>):<br>        min_index = i<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(items)):<br>            <span class="hljs-keyword">if</span> comp(items[j], items[min_index]):<br>                min_index = j<br>        items[i], items[min_index] = items[min_index], items[i]<br>    <span class="hljs-keyword">return</span> items<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">bubble_sort</span>(<span class="hljs-params">items, comp=<span class="hljs-keyword">lambda</span> x, y: x &gt; y</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;冒泡排序&quot;&quot;&quot;</span><br>    items = items[:]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(items) - <span class="hljs-number">1</span>):<br>        swapped = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(items) - <span class="hljs-number">1</span> - i):<br>            <span class="hljs-keyword">if</span> comp(items[j], items[j + <span class="hljs-number">1</span>]):<br>                items[j], items[j + <span class="hljs-number">1</span>] = items[j + <span class="hljs-number">1</span>], items[j]<br>                swapped = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> swapped:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> items<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">bubble_sort</span>(<span class="hljs-params">items, comp=<span class="hljs-keyword">lambda</span> x, y: x &gt; y</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;搅拌排序(冒泡排序升级版)&quot;&quot;&quot;</span><br>    items = items[:]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(items) - <span class="hljs-number">1</span>):<br>        swapped = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(items) - <span class="hljs-number">1</span> - i):<br>            <span class="hljs-keyword">if</span> comp(items[j], items[j + <span class="hljs-number">1</span>]):<br>                items[j], items[j + <span class="hljs-number">1</span>] = items[j + <span class="hljs-number">1</span>], items[j]<br>                swapped = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">if</span> swapped:<br>            swapped = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(items) - <span class="hljs-number">2</span> - i, i, -<span class="hljs-number">1</span>):<br>                <span class="hljs-keyword">if</span> comp(items[j - <span class="hljs-number">1</span>], items[j]):<br>                    items[j], items[j - <span class="hljs-number">1</span>] = items[j - <span class="hljs-number">1</span>], items[j]<br>                    swapped = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> swapped:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> items<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">items1, items2, comp=<span class="hljs-keyword">lambda</span> x, y: x &lt; y</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;合并(将两个有序的列表合并成一个有序的列表)&quot;&quot;&quot;</span><br>    items = []<br>    index1, index2 = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> index1 &lt; <span class="hljs-built_in">len</span>(items1) <span class="hljs-keyword">and</span> index2 &lt; <span class="hljs-built_in">len</span>(items2):<br>        <span class="hljs-keyword">if</span> comp(items1[index1], items2[index2]):<br>            items.append(items1[index1])<br>            index1 += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            items.append(items2[index2])<br>            index2 += <span class="hljs-number">1</span><br>    items += items1[index1:]<br>    items += items2[index2:]<br>    <span class="hljs-keyword">return</span> items<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge_sort</span>(<span class="hljs-params">items, comp=<span class="hljs-keyword">lambda</span> x, y: x &lt; y</span>):<br>    <span class="hljs-keyword">return</span> _merge_sort(<span class="hljs-built_in">list</span>(items), comp)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_merge_sort</span>(<span class="hljs-params">items, comp</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;归并排序&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(items) &lt; <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> items<br>    mid = <span class="hljs-built_in">len</span>(items) // <span class="hljs-number">2</span><br>    left = _merge_sort(items[:mid], comp)<br>    right = _merge_sort(items[mid:], comp)<br>    <span class="hljs-keyword">return</span> merge(left, right, comp)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">seq_search</span>(<span class="hljs-params">items, key</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;顺序查找&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> index, item <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(items):<br>        <span class="hljs-keyword">if</span> item == key:<br>            <span class="hljs-keyword">return</span> index<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">bin_search</span>(<span class="hljs-params">items, key</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;折半查找&quot;&quot;&quot;</span><br>    start, end = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(items) - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> start &lt;= end:<br>        mid = (start + end) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> key &gt; items[mid]:<br>            start = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> key &lt; items[mid]:<br>            end = mid - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> mid<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p>常用算法：</p><ul><li>穷举法 - 又称为暴力破解法，对所有的可能性进行验证，直到找到正确答案。</li><li>贪婪法 - 在对问题求解时，总是做出在当前看来</li><li>最好的选择，不追求最优解，快速找到满意解。</li><li>分治法 - 把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题，直到可以直接求解的程度，最后将子问题的解进行合并得到原问题的解。</li><li>回溯法 - 回溯法又称为试探法，按选优条件向前搜索，当搜索到某一步发现原先选择并不优或达不到目标时，就退回一步重新选择。</li><li>动态规划 - 基本思想也是将待求解问题分解成若干个子问题，先求解并保存这些子问题的解，避免产生大量的重复运算。</li></ul><p>穷举法例子：百钱百鸡和五人分鱼。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 公鸡5元一只 母鸡3元一只 小鸡1元三只</span><br><span class="hljs-comment"># 用100元买100只鸡 问公鸡/母鸡/小鸡各多少只</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">33</span>):<br>        z = <span class="hljs-number">100</span> - x - y<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">5</span> * x + <span class="hljs-number">3</span> * y + z // <span class="hljs-number">3</span> == <span class="hljs-number">100</span> <span class="hljs-keyword">and</span> z % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(x, y, z)<br><br><span class="hljs-comment"># A、B、C、D、E五人在某天夜里合伙捕鱼 最后疲惫不堪各自睡觉</span><br><span class="hljs-comment"># 第二天A第一个醒来 他将鱼分为5份 扔掉多余的1条 拿走自己的一份</span><br><span class="hljs-comment"># B第二个醒来 也将鱼分为5份 扔掉多余的1条 拿走自己的一份</span><br><span class="hljs-comment"># 然后C、D、E依次醒来也按同样的方式分鱼 问他们至少捕了多少条鱼</span><br>fish = <span class="hljs-number">6</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    total = fish<br>    enough = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        <span class="hljs-keyword">if</span> (total - <span class="hljs-number">1</span>) % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>:<br>            total = (total - <span class="hljs-number">1</span>) // <span class="hljs-number">5</span> * <span class="hljs-number">4</span><br>        <span class="hljs-keyword">else</span>:<br>            enough = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> enough:<br>        <span class="hljs-built_in">print</span>(fish)<br>        <span class="hljs-keyword">break</span><br>    fish += <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>贪婪法例子：假设小偷有一个背包，最多能装20公斤赃物，他闯入一户人家，发现如下表所示的物品。很显然，他不能把所有物品都装进背包，所以必须确定拿走哪些物品，留下哪些物品。</p><table><thead><tr><th align="center">名称</th><th align="center">价格（美元）</th><th align="center">重量（kg）</th></tr></thead><tbody><tr><td align="center">电脑</td><td align="center">200</td><td align="center">20</td></tr><tr><td align="center">收音机</td><td align="center">20</td><td align="center">4</td></tr><tr><td align="center">钟</td><td align="center">175</td><td align="center">10</td></tr><tr><td align="center">花瓶</td><td align="center">50</td><td align="center">2</td></tr><tr><td align="center">书</td><td align="center">10</td><td align="center">1</td></tr><tr><td align="center">油画</td><td align="center">90</td><td align="center">9</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">贪婪法：在对问题求解时，总是做出在当前看来是最好的选择，不追求最优解，快速找到满意解。</span><br><span class="hljs-string">输入：</span><br><span class="hljs-string">20 6</span><br><span class="hljs-string">电脑 200 20</span><br><span class="hljs-string">收音机 20 4</span><br><span class="hljs-string">钟 175 10</span><br><span class="hljs-string">花瓶 50 2</span><br><span class="hljs-string">书 10 1</span><br><span class="hljs-string">油画 90 9</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Thing</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;物品&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, price, weight</span>):<br>        self.name = name<br>        self.price = price<br>        self.weight = weight<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">value</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;价格重量比&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self.price / self.weight<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">input_thing</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;输入物品信息&quot;&quot;&quot;</span><br>    name_str, price_str, weight_str = <span class="hljs-built_in">input</span>().split()<br>    <span class="hljs-keyword">return</span> name_str, <span class="hljs-built_in">int</span>(price_str), <span class="hljs-built_in">int</span>(weight_str)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;主函数&quot;&quot;&quot;</span><br>    max_weight, num_of_things = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    all_things = []<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_of_things):<br>        all_things.append(Thing(*input_thing()))<br>    all_things.sort(key=<span class="hljs-keyword">lambda</span> x: x.value, reverse=<span class="hljs-literal">True</span>)<br>    total_weight = <span class="hljs-number">0</span><br>    total_price = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> thing <span class="hljs-keyword">in</span> all_things:<br>        <span class="hljs-keyword">if</span> total_weight + thing.weight &lt;= max_weight:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;小偷拿走了<span class="hljs-subst">&#123;thing.name&#125;</span>&#x27;</span>)<br>            total_weight += thing.weight<br>            total_price += thing.price<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;总价值: <span class="hljs-subst">&#123;total_price&#125;</span>美元&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>分治法例子：<a href="https://zh.wikipedia.org/zh/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F">快速排序</a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">快速排序 - 选择枢轴对元素进行划分，左边都比枢轴小右边都比枢轴大</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">quick_sort</span>(<span class="hljs-params">items, comp=<span class="hljs-keyword">lambda</span> x, y: x &lt;= y</span>):<br>    items = <span class="hljs-built_in">list</span>(items)[:]<br>    _quick_sort(items, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(items) - <span class="hljs-number">1</span>, comp)<br>    <span class="hljs-keyword">return</span> items<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_quick_sort</span>(<span class="hljs-params">items, start, end, comp</span>):<br>    <span class="hljs-keyword">if</span> start &lt; end:<br>        pos = _partition(items, start, end, comp)<br>        _quick_sort(items, start, pos - <span class="hljs-number">1</span>, comp)<br>        _quick_sort(items, pos + <span class="hljs-number">1</span>, end, comp)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_partition</span>(<span class="hljs-params">items, start, end, comp</span>):<br>    pivot = items[end]<br>    i = start - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start, end):<br>        <span class="hljs-keyword">if</span> comp(items[j], pivot):<br>            i += <span class="hljs-number">1</span><br>            items[i], items[j] = items[j], items[i]<br>    items[i + <span class="hljs-number">1</span>], items[end] = items[end], items[i + <span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>回溯法例子：<a href="https://zh.wikipedia.org/zh/%E9%AA%91%E5%A3%AB%E5%B7%A1%E9%80%BB">骑士巡逻</a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">递归回溯法：叫称为试探法，按选优条件向前搜索，当搜索到某一步，发现原先选择并不优或达不到目标时，就退回一步重新选择，比较经典的问题包括骑士巡逻、八皇后和迷宫寻路等。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> time<br><br>SIZE = <span class="hljs-number">5</span><br>total = <span class="hljs-number">0</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_board</span>(<span class="hljs-params">board</span>):<br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> board:<br>        <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> row:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(col).center(<span class="hljs-number">4</span>), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-built_in">print</span>()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">patrol</span>(<span class="hljs-params">board, row, col, step=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-keyword">if</span> row &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> row &lt; SIZE <span class="hljs-keyword">and</span> \<br>        col &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> col &lt; SIZE <span class="hljs-keyword">and</span> \<br>        board[row][col] == <span class="hljs-number">0</span>:<br>        board[row][col] = step<br>        <span class="hljs-keyword">if</span> step == SIZE * SIZE:<br>            <span class="hljs-keyword">global</span> total<br>            total += <span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;第<span class="hljs-subst">&#123;total&#125;</span>种走法: &#x27;</span>)<br>            print_board(board)<br>        patrol(board, row - <span class="hljs-number">2</span>, col - <span class="hljs-number">1</span>, step + <span class="hljs-number">1</span>)<br>        patrol(board, row - <span class="hljs-number">1</span>, col - <span class="hljs-number">2</span>, step + <span class="hljs-number">1</span>)<br>        patrol(board, row + <span class="hljs-number">1</span>, col - <span class="hljs-number">2</span>, step + <span class="hljs-number">1</span>)<br>        patrol(board, row + <span class="hljs-number">2</span>, col - <span class="hljs-number">1</span>, step + <span class="hljs-number">1</span>)<br>        patrol(board, row + <span class="hljs-number">2</span>, col + <span class="hljs-number">1</span>, step + <span class="hljs-number">1</span>)<br>        patrol(board, row + <span class="hljs-number">1</span>, col + <span class="hljs-number">2</span>, step + <span class="hljs-number">1</span>)<br>        patrol(board, row - <span class="hljs-number">1</span>, col + <span class="hljs-number">2</span>, step + <span class="hljs-number">1</span>)<br>        patrol(board, row - <span class="hljs-number">2</span>, col + <span class="hljs-number">1</span>, step + <span class="hljs-number">1</span>)<br>        board[row][col] = <span class="hljs-number">0</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    board = [[<span class="hljs-number">0</span>] * SIZE <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(SIZE)]<br>    patrol(board, SIZE - <span class="hljs-number">1</span>, SIZE - <span class="hljs-number">1</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>动态规划例子：子列表元素之和的最大值。</p><blockquote><p>说明：子列表指的是列表中索引（下标）连续的元素构成的列表；列表中的元素是int类型，可能包含正整数、0、负整数；程序输入列表中的元素，输出子列表元素求和的最大值，例如：</p><p>输入：1 -2 3 5 -3 2</p><p>输出：8</p><p>输入：0 -2 3 5 -1 2</p><p>输出：9</p><p>输入：-9 -2 -3 -5 -3</p><p>输出：-2</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    items = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>    overall = partial = items[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(items)):<br>        partial = <span class="hljs-built_in">max</span>(items[i], partial + items[i])<br>        overall = <span class="hljs-built_in">max</span>(partial, overall)<br>    <span class="hljs-built_in">print</span>(overall)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：这个题目最容易想到的解法是使用二重循环，但是代码的时间性能将会变得非常的糟糕。使用动态规划的思想，仅仅是多用了两个变量，就将原来$O(N^2)$复杂度的问题变成了$O(N)$。</p></blockquote></li></ul><h3 id="函数的使用方式"><a href="#函数的使用方式" class="headerlink" title="函数的使用方式"></a>函数的使用方式</h3><ul><li><p>将函数视为“一等公民”</p><ul><li>函数可以赋值给变量</li><li>函数可以作为函数的参数</li><li>函数可以作为函数的返回值</li></ul></li><li><p>高阶函数的用法（<code>filter</code>、<code>map</code>以及它们的替代品）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python">items1 = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x ** <span class="hljs-number">2</span>, <span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x % <span class="hljs-number">2</span>, <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>))))<br>items2 = [x ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>) <span class="hljs-keyword">if</span> x % <span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure></li><li><p>位置参数、可变参数、关键字参数、命名关键字参数</p></li><li><p>参数的元信息（代码可读性问题）</p></li><li><p>匿名函数和内联函数的用法（<code>lambda</code>函数）</p></li><li><p>闭包和作用域问题</p><ul><li><p>Python搜索变量的LEGB顺序（Local &gt;&gt;&gt; Embedded &gt;&gt;&gt; Global &gt;&gt;&gt; Built-in）</p></li><li><p><code>global</code>和<code>nonlocal</code>关键字的作用</p><p><code>global</code>：声明或定义全局变量（要么直接使用现有的全局作用域的变量，要么定义一个变量放到全局作用域）。</p><p><code>nonlocal</code>：声明使用嵌套作用域的变量（嵌套作用域必须存在该变量，否则报错）。</p></li></ul></li><li><p>装饰器函数（使用装饰器和取消装饰器）</p><p>例子：输出函数执行时间的装饰器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">record_time</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;自定义装饰函数的装饰器&quot;&quot;&quot;</span><br>    <br><span class="hljs-meta">    @wraps(<span class="hljs-params">func</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        start = time()<br>        result = func(*args, **kwargs)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;func.__name__&#125;</span>: <span class="hljs-subst">&#123;time() - start&#125;</span>秒&#x27;</span>)<br>        <span class="hljs-keyword">return</span> result<br>        <br>    <span class="hljs-keyword">return</span> wrapper<br></code></pre></td></tr></table></figure><p>如果装饰器不希望跟<code>print</code>函数耦合，可以编写可以参数化的装饰器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">record</span>(<span class="hljs-params">output</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;可以参数化的装饰器&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decorate</span>(<span class="hljs-params">func</span>):<br><br><span class="hljs-meta">@wraps(<span class="hljs-params">func</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>start = time()<br>result = func(*args, **kwargs)<br>output(func.__name__, time() - start)<br><span class="hljs-keyword">return</span> result<br>            <br><span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-keyword">return</span> decorate<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Record</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;通过定义类的方式定义装饰器&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, output</span>):<br>        self.output = output<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, func</span>):<br><br><span class="hljs-meta">        @wraps(<span class="hljs-params">func</span>)</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            start = time()<br>            result = func(*args, **kwargs)<br>            self.output(func.__name__, time() - start)<br>            <span class="hljs-keyword">return</span> result<br><br>        <span class="hljs-keyword">return</span> wrapper<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：由于对带装饰功能的函数添加了@wraps装饰器，可以通过<code>func.__wrapped__</code>方式获得被装饰之前的函数或类来取消装饰器的作用。</p></blockquote><p>例子：用装饰器来实现单例模式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">singleton</span>(<span class="hljs-params">cls</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;装饰类的装饰器&quot;&quot;&quot;</span><br>    instances = &#123;&#125;<br><br><span class="hljs-meta">    @wraps(<span class="hljs-params">cls</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-keyword">if</span> cls <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> instances:<br>            instances[cls] = cls(*args, **kwargs)<br>        <span class="hljs-keyword">return</span> instances[cls]<br><br>    <span class="hljs-keyword">return</span> wrapper<br><br><br><span class="hljs-meta">@singleton</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">President</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;总统(单例类)&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>提示</strong>：上面的代码中用到了闭包（closure），不知道你是否已经意识到了。还没有一个小问题就是，上面的代码并没有实现线程安全的单例，如果要实现线程安全的单例应该怎么做呢？</p></blockquote><p>线程安全的单例装饰器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> RLock<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">singleton</span>(<span class="hljs-params">cls</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;线程安全的单例装饰器&quot;&quot;&quot;</span><br>    instances = &#123;&#125;<br>    locker = RLock()<br><br><span class="hljs-meta">    @wraps(<span class="hljs-params">cls</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-keyword">if</span> cls <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> instances:<br>            <span class="hljs-keyword">with</span> locker:<br>                <span class="hljs-keyword">if</span> cls <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> instances:<br>                    instances[cls] = cls(*args, **kwargs)<br>        <span class="hljs-keyword">return</span> instances[cls]<br><br>    <span class="hljs-keyword">return</span> wrapper<br></code></pre></td></tr></table></figure><blockquote><p><strong>提示</strong>：上面的代码用到了<code>with</code>上下文语法来进行锁操作，因为锁对象本身就是上下文管理器对象（支持<code>__enter__</code>和<code>__exit__</code>魔术方法）。在<code>wrapper</code>函数中，我们先做了一次不带锁的检查，然后再做带锁的检查，这样做比直接加锁检查性能要更好，如果对象已经创建就没有必须再去加锁而是直接返回该对象就可以了。</p></blockquote></li></ul><h3 id="面向对象相关知识"><a href="#面向对象相关知识" class="headerlink" title="面向对象相关知识"></a>面向对象相关知识</h3><ul><li><p>三大支柱：封装、继承、多态</p><p>例子：工资结算系统。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">月薪结算系统 - 部门经理每月15000 程序员每小时200 销售员1800底薪加销售额5%提成</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> ABCMeta, abstractmethod<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>(metaclass=ABCMeta):<br>    <span class="hljs-string">&quot;&quot;&quot;员工(抽象类)&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        self.name = name<br><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_salary</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;结算月薪(抽象方法)&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span>(<span class="hljs-title class_ inherited__">Employee</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;部门经理&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_salary</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">15000.0</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Programmer</span>(<span class="hljs-title class_ inherited__">Employee</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;程序员&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, working_hour=<span class="hljs-number">0</span></span>):<br>        self.working_hour = working_hour<br>        <span class="hljs-built_in">super</span>().__init__(name)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_salary</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">200.0</span> * self.working_hour<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Salesman</span>(<span class="hljs-title class_ inherited__">Employee</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;销售员&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, sales=<span class="hljs-number">0.0</span></span>):<br>        self.sales = sales<br>        <span class="hljs-built_in">super</span>().__init__(name)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_salary</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1800.0</span> + self.sales * <span class="hljs-number">0.05</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeFactory</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;创建员工的工厂（工厂模式 - 通过工厂实现对象使用者和对象之间的解耦合）&quot;&quot;&quot;</span><br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">emp_type, *args, **kwargs</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;创建员工&quot;&quot;&quot;</span><br>        all_emp_types = &#123;<span class="hljs-string">&#x27;M&#x27;</span>: Manager, <span class="hljs-string">&#x27;P&#x27;</span>: Programmer, <span class="hljs-string">&#x27;S&#x27;</span>: Salesman&#125;<br>        cls = all_emp_types[emp_type.upper()]<br>        <span class="hljs-keyword">return</span> cls(*args, **kwargs) <span class="hljs-keyword">if</span> cls <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;主函数&quot;&quot;&quot;</span><br>    emps = [<br>        EmployeeFactory.create(<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;曹操&#x27;</span>), <br>        EmployeeFactory.create(<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;荀彧&#x27;</span>, <span class="hljs-number">120</span>),<br>        EmployeeFactory.create(<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;郭嘉&#x27;</span>, <span class="hljs-number">85</span>), <br>        EmployeeFactory.create(<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;典韦&#x27;</span>, <span class="hljs-number">123000</span>),<br>    ]<br>    <span class="hljs-keyword">for</span> emp <span class="hljs-keyword">in</span> emps:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;emp.name&#125;</span>: <span class="hljs-subst">&#123;emp.get_salary():<span class="hljs-number">.2</span>f&#125;</span>元&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure></li><li><p>类与类之间的关系</p><ul><li>is-a关系：继承</li><li>has-a关系：关联 &#x2F; 聚合 &#x2F; 合成</li><li>use-a关系：依赖</li></ul><p>例子：扑克游戏。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">经验：符号常量总是优于字面常量，枚举类型是定义符号常量的最佳选择</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum, unique<br><br><span class="hljs-keyword">import</span> random<br><br><br><span class="hljs-meta">@unique</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Suite</span>(<span class="hljs-title class_ inherited__">Enum</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;花色&quot;&quot;&quot;</span><br><br>    SPADE, HEART, CLUB, DIAMOND = <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__lt__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">return</span> self.value &lt; other.value<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Card</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;牌&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, suite, face</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化方法&quot;&quot;&quot;</span><br>        self.suite = suite<br>        self.face = face<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;显示牌面&quot;&quot;&quot;</span><br>        suites = [<span class="hljs-string">&#x27;♠︎&#x27;</span>, <span class="hljs-string">&#x27;♥︎&#x27;</span>, <span class="hljs-string">&#x27;♣︎&#x27;</span>, <span class="hljs-string">&#x27;♦︎&#x27;</span>]<br>        faces = [<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;10&#x27;</span>, <span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;K&#x27;</span>]<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;suites[self.suite.value]&#125;</span><span class="hljs-subst">&#123;faces[self.face]&#125;</span>&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.show()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Poker</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;扑克&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.index = <span class="hljs-number">0</span><br>        self.cards = [Card(suite, face)<br>                      <span class="hljs-keyword">for</span> suite <span class="hljs-keyword">in</span> Suite<br>                      <span class="hljs-keyword">for</span> face <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">14</span>)]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">shuffle</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;洗牌（随机乱序）&quot;&quot;&quot;</span><br>        random.shuffle(self.cards)<br>        self.index = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">deal</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;发牌&quot;&quot;&quot;</span><br>        card = self.cards[self.index]<br>        self.index += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> card<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">has_more</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.index &lt; <span class="hljs-built_in">len</span>(self.cards)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Player</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;玩家&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        self.name = name<br>        self.cards = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_one</span>(<span class="hljs-params">self, card</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;摸一张牌&quot;&quot;&quot;</span><br>        self.cards.append(card)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sort</span>(<span class="hljs-params">self, comp=<span class="hljs-keyword">lambda</span> card: (<span class="hljs-params">card.suite, card.face</span>)</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;整理手上的牌&quot;&quot;&quot;</span><br>        self.cards.sort(key=comp)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;主函数&quot;&quot;&quot;</span><br>    poker = Poker()<br>    poker.shuffle()<br>    players = [Player(<span class="hljs-string">&#x27;东邪&#x27;</span>), Player(<span class="hljs-string">&#x27;西毒&#x27;</span>), Player(<span class="hljs-string">&#x27;南帝&#x27;</span>), Player(<span class="hljs-string">&#x27;北丐&#x27;</span>)]<br>    <span class="hljs-keyword">while</span> poker.has_more:<br>        <span class="hljs-keyword">for</span> player <span class="hljs-keyword">in</span> players:<br>                player.get_one(poker.deal())<br>    <span class="hljs-keyword">for</span> player <span class="hljs-keyword">in</span> players:<br>        player.sort()<br>        <span class="hljs-built_in">print</span>(player.name, end=<span class="hljs-string">&#x27;: &#x27;</span>)<br>        <span class="hljs-built_in">print</span>(player.cards)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面的代码中使用了Emoji字符来表示扑克牌的四种花色，在某些不支持Emoji字符的系统上可能无法显示。</p></blockquote></li><li><p>对象的复制（深复制&#x2F;深拷贝&#x2F;深度克隆和浅复制&#x2F;浅拷贝&#x2F;影子克隆）</p></li><li><p>垃圾回收、循环引用和弱引用</p><p>Python使用了自动化内存管理，这种管理机制以<strong>引用计数</strong>为基础，同时也引入了<strong>标记-清除</strong>和<strong>分代收集</strong>两种机制为辅的策略。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">object</span> &#123;</span><br>    <span class="hljs-comment">/* 引用计数 */</span><br>    <span class="hljs-type">int</span> ob_refcnt;<br>    <span class="hljs-comment">/* 对象指针 */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">typeobject</span> *<span class="hljs-title">ob_type</span>;</span><br>&#125; PyObject;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/* 增加引用计数的宏定义 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Py_INCREF(op)   ((op)-&gt;ob_refcnt++)</span><br><span class="hljs-comment">/* 减少引用计数的宏定义 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Py_DECREF(op) \ <span class="hljs-comment">//减少计数</span></span><br>    <span class="hljs-keyword">if</span> (--(op)-&gt;ob_refcnt != <span class="hljs-number">0</span>) \<br>        ; \<br>    <span class="hljs-keyword">else</span> \<br>        __Py_Dealloc((PyObject *)(op))<br></code></pre></td></tr></table></figure><p>导致引用计数+1的情况：</p><ul><li>对象被创建，例如<code>a = 23</code></li><li>对象被引用，例如<code>b = a</code></li><li>对象被作为参数，传入到一个函数中，例如<code>f(a)</code></li><li>对象作为一个元素，存储在容器中，例如<code>list1 = [a, a]</code></li></ul><p>导致引用计数-1的情况：</p><ul><li>对象的别名被显式销毁，例如<code>del a</code></li><li>对象的别名被赋予新的对象，例如<code>a = 24</code></li><li>一个对象离开它的作用域，例如f函数执行完毕时，f函数中的局部变量（全局变量不会）</li><li>对象所在的容器被销毁，或从容器中删除对象</li></ul><p>引用计数可能会导致循环引用问题，而循环引用会导致内存泄露，如下面的代码所示。为了解决这个问题，Python中引入了“标记-清除”和“分代收集”。在创建一个对象的时候，对象被放在第一代中，如果在第一代的垃圾检查中对象存活了下来，该对象就会被放到第二代中，同理在第二代的垃圾检查中对象存活下来，该对象就会被放到第三代中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 循环引用会导致内存泄露 - Python除了引用技术还引入了标记清理和分代回收</span><br><span class="hljs-comment"># 在Python 3.6以前如果重写__del__魔术方法会导致循环引用处理失效</span><br><span class="hljs-comment"># 如果不想造成循环引用可以使用弱引用</span><br>list1 = []<br>list2 = [] <br>list1.append(list2)<br>list2.append(list1)<br></code></pre></td></tr></table></figure><p>以下情况会导致垃圾回收：</p><ul><li>调用<code>gc.collect()</code></li><li><code>gc</code>模块的计数器达到阀值</li><li>程序退出</li></ul><p>如果循环引用中两个对象都定义了<code>__del__</code>方法，<code>gc</code>模块不会销毁这些不可达对象，因为gc模块不知道应该先调用哪个对象的<code>__del__</code>方法，这个问题在Python 3.6中得到了解决。</p><p>也可以通过<code>weakref</code>模块构造弱引用的方式来解决循环引用的问题。</p></li><li><p>魔法属性和方法（请参考《Python魔法方法指南》）</p><p>有几个小问题请大家思考：</p><ul><li>自定义的对象能不能使用运算符做运算？</li><li>自定义的对象能不能放到<code>set</code>中？能去重吗？</li><li>自定义的对象能不能作为<code>dict</code>的键？</li><li>自定义的对象能不能使用上下文语法？</li></ul></li><li><p>混入（Mixin）</p><p>例子：自定义字典限制只有在指定的key不存在时才能在字典中设置键值对。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SetOnceMappingMixin</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;自定义混入类&quot;&quot;&quot;</span><br>    __slots__ = ()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__setitem__</span>(<span class="hljs-params">self, key, value</span>):<br>        <span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> self:<br>            <span class="hljs-keyword">raise</span> KeyError(<span class="hljs-built_in">str</span>(key) + <span class="hljs-string">&#x27; already set&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>().__setitem__(key, value)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SetOnceDict</span>(SetOnceMappingMixin, <span class="hljs-built_in">dict</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;自定义字典&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">pass</span><br><br><br>my_dict= SetOnceDict()<br><span class="hljs-keyword">try</span>:<br>    my_dict[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-string">&#x27;jackfrued&#x27;</span><br>    my_dict[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-string">&#x27;hellokitty&#x27;</span><br><span class="hljs-keyword">except</span> KeyError:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-built_in">print</span>(my_dict)<br></code></pre></td></tr></table></figure></li><li><p>元编程和元类</p><p>对象是通过类创建的，类是通过元类创建的，元类提供了创建类的元信息。所有的类都直接或间接的继承自<code>object</code>，所有的元类都直接或间接的继承自<code>type</code>。</p><p>例子：用元类实现单例模式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> threading<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonMeta</span>(<span class="hljs-title class_ inherited__">type</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;自定义元类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        cls.__instance = <span class="hljs-literal">None</span><br>        cls.__lock = threading.RLock()<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        <span class="hljs-keyword">if</span> cls.__instance <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">with</span> cls.__lock:<br>                <span class="hljs-keyword">if</span> cls.__instance <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                    cls.__instance = <span class="hljs-built_in">super</span>().__call__(*args, **kwargs)<br>        <span class="hljs-keyword">return</span> cls.__instance<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">President</span>(metaclass=SingletonMeta):<br>    <span class="hljs-string">&quot;&quot;&quot;总统(单例类)&quot;&quot;&quot;</span><br>    <br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure></li><li><p>面向对象设计原则</p><ul><li>单一职责原则 （<strong>S</strong>RP）- 一个类只做该做的事情（类的设计要高内聚）</li><li>开闭原则 （<strong>O</strong>CP）- 软件实体应该对扩展开发对修改关闭</li><li>依赖倒转原则（DIP）- 面向抽象编程（在弱类型语言中已经被弱化）</li><li>里氏替换原则（<strong>L</strong>SP） - 任何时候可以用子类对象替换掉父类对象</li><li>接口隔离原则（<strong>I</strong>SP）- 接口要小而专不要大而全（Python中没有接口的概念）</li><li>合成聚合复用原则（CARP） - 优先使用强关联关系而不是继承关系复用代码</li><li>最少知识原则（迪米特法则，Lo<strong>D</strong>）- 不要给没有必然联系的对象发消息</li></ul><blockquote><p><strong>说明</strong>：上面加粗的字母放在一起称为面向对象的<strong>SOLID</strong>原则。</p></blockquote></li><li><p>GoF设计模式</p><ul><li>创建型模式：单例、工厂、建造者、原型</li><li>结构型模式：适配器、门面（外观）、代理</li><li>行为型模式：迭代器、观察者、状态、策略</li></ul><p>例子：可插拔的哈希算法（策略模式）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamHasher</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;哈希摘要生成器&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, alg=<span class="hljs-string">&#x27;md5&#x27;</span>, size=<span class="hljs-number">4096</span></span>):<br>        self.size = size<br>        alg = alg.lower()<br>        self.hasher = <span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;hashlib&#x27;</span>), alg.lower())()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, stream</span>):<br>        <span class="hljs-keyword">return</span> self.to_digest(stream)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">to_digest</span>(<span class="hljs-params">self, stream</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;生成十六进制形式的摘要&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> buf <span class="hljs-keyword">in</span> <span class="hljs-built_in">iter</span>(<span class="hljs-keyword">lambda</span>: stream.read(self.size), <span class="hljs-string">b&#x27;&#x27;</span>):<br>            self.hasher.update(buf)<br>        <span class="hljs-keyword">return</span> self.hasher.hexdigest()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;主函数&quot;&quot;&quot;</span><br>    hasher1 = StreamHasher()<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;Python-3.7.6.tgz&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> stream:<br>        <span class="hljs-built_in">print</span>(hasher1.to_digest(stream))<br>    hasher2 = StreamHasher(<span class="hljs-string">&#x27;sha1&#x27;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;Python-3.7.6.tgz&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> stream:<br>        <span class="hljs-built_in">print</span>(hasher2(stream))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure></li></ul><h3 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h3><ul><li><p>迭代器是实现了迭代器协议的对象。</p><ul><li>Python中没有像<code>protocol</code>或<code>interface</code>这样的定义协议的关键字。</li><li>Python中用魔术方法表示协议。</li><li><code>__iter__</code>和<code>__next__</code>魔术方法就是迭代器协议。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fib</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;迭代器&quot;&quot;&quot;</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num</span>):<br>        self.num = num<br>        self.a, self.b = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>        self.idx = <span class="hljs-number">0</span><br>   <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self.idx &lt; self.num:<br>            self.a, self.b = self.b, self.a + self.b<br>            self.idx += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> self.a<br>        <span class="hljs-keyword">raise</span> StopIteration()<br></code></pre></td></tr></table></figure></li><li><p>生成器是语法简化版的迭代器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;生成器&quot;&quot;&quot;</span><br>    a, b = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        a, b = b, a + b<br>        <span class="hljs-keyword">yield</span> a<br></code></pre></td></tr></table></figure></li><li><p>生成器进化为协程。</p><p>生成器对象可以使用<code>send()</code>方法发送数据，发送的数据会成为生成器函数中通过<code>yield</code>表达式获得的值。这样，生成器就可以作为协程使用，协程简单的说就是可以相互协作的子程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_avg</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;流式计算平均值&quot;&quot;&quot;</span><br>    total, counter = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    avg_value = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        value = <span class="hljs-keyword">yield</span> avg_value<br>        total, counter = total + value, counter + <span class="hljs-number">1</span><br>        avg_value = total / counter<br><br><br>gen = calc_avg()<br><span class="hljs-built_in">next</span>(gen)<br><span class="hljs-built_in">print</span>(gen.send(<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(gen.send(<span class="hljs-number">20</span>))<br><span class="hljs-built_in">print</span>(gen.send(<span class="hljs-number">30</span>))<br></code></pre></td></tr></table></figure></li></ul><h3 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h3><p>Python中实现并发编程的三种方案：多线程、多进程和异步I&#x2F;O。并发编程的好处在于可以提升程序的执行效率以及改善用户体验；坏处在于并发的程序不容易开发和调试，同时对其他程序来说它并不友好。</p><ul><li><p>多线程：Python中提供了<code>Thread</code>类并辅以<code>Lock</code>、<code>Condition</code>、<code>Event</code>、<code>Semaphore</code>和<code>Barrier</code>。Python中有GIL来防止多个线程同时执行本地字节码，这个锁对于CPython是必须的，因为CPython的内存管理并不是线程安全的，因为GIL的存在多线程并不能发挥CPU的多核特性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">面试题：进程和线程的区别和联系？</span><br><span class="hljs-string">进程 - 操作系统分配内存的基本单位 - 一个进程可以包含一个或多个线程</span><br><span class="hljs-string">线程 - 操作系统分配CPU的基本单位</span><br><span class="hljs-string">并发编程（concurrent programming）</span><br><span class="hljs-string">1. 提升执行性能 - 让程序中没有因果关系的部分可以并发的执行</span><br><span class="hljs-string">2. 改善用户体验 - 让耗时间的操作不会造成程序的假死</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> glob<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>PREFIX = <span class="hljs-string">&#x27;thumbnails&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_thumbnail</span>(<span class="hljs-params">infile, size, <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;PNG&#x27;</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;生成指定图片文件的缩略图&quot;&quot;&quot;</span><br>file, ext = os.path.splitext(infile)<br>file = file[file.rfind(<span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>:]<br>outfile = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;PREFIX&#125;</span>/<span class="hljs-subst">&#123;file&#125;</span>_<span class="hljs-subst">&#123;size[<span class="hljs-number">0</span>]&#125;</span>_<span class="hljs-subst">&#123;size[<span class="hljs-number">1</span>]&#125;</span>.<span class="hljs-subst">&#123;ext&#125;</span>&#x27;</span><br>img = Image.<span class="hljs-built_in">open</span>(infile)<br>img.thumbnail(size, Image.ANTIALIAS)<br>img.save(outfile, <span class="hljs-built_in">format</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;主函数&quot;&quot;&quot;</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(PREFIX):<br>os.mkdir(PREFIX)<br><span class="hljs-keyword">for</span> infile <span class="hljs-keyword">in</span> glob.glob(<span class="hljs-string">&#x27;images/*.png&#x27;</span>):<br><span class="hljs-keyword">for</span> size <span class="hljs-keyword">in</span> (<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">128</span>):<br>            <span class="hljs-comment"># 创建并启动线程</span><br>threading.Thread(<br>target=generate_thumbnail, <br>args=(infile, (size, size))<br>).start()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>main()<br></code></pre></td></tr></table></figure><p>多个线程竞争资源的情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">多线程程序如果没有竞争资源处理起来通常也比较简单</span><br><span class="hljs-string">当多个线程竞争临界资源的时候如果缺乏必要的保护措施就会导致数据错乱</span><br><span class="hljs-string">说明：临界资源就是被多个线程竞争的资源</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;银行账户&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.balance = <span class="hljs-number">0.0</span><br>        self.lock = threading.Lock()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">deposit</span>(<span class="hljs-params">self, money</span>):<br>        <span class="hljs-comment"># 通过锁保护临界资源</span><br>        <span class="hljs-keyword">with</span> self.lock:<br>            new_balance = self.balance + money<br>            time.sleep(<span class="hljs-number">0.001</span>)<br>            self.balance = new_balance<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;主函数&quot;&quot;&quot;</span><br>    account = Account()<br>    <span class="hljs-comment"># 创建线程池</span><br>    pool = ThreadPoolExecutor(max_workers=<span class="hljs-number">10</span>)<br>    futures = []<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        future = pool.submit(account.deposit, <span class="hljs-number">1</span>)<br>        futures.append(future)<br>    <span class="hljs-comment"># 关闭线程池</span><br>    pool.shutdown()<br>    <span class="hljs-keyword">for</span> future <span class="hljs-keyword">in</span> futures:<br>        future.result()<br>    <span class="hljs-built_in">print</span>(account.balance)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>修改上面的程序，启动5个线程向账户中存钱，5个线程从账户中取钱，取钱时如果余额不足就暂停线程进行等待。为了达到上述目标，需要对存钱和取钱的线程进行调度，在余额不足时取钱的线程暂停并释放锁，而存钱的线程将钱存入后要通知取钱的线程，使其从暂停状态被唤醒。可以使用<code>threading</code>模块的<code>Condition</code>来实现线程调度，该对象也是基于锁来创建的，代码如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">多个线程竞争一个资源 - 保护临界资源 - 锁（Lock/RLock）</span><br><span class="hljs-string">多个线程竞争多个资源（线程数&gt;资源数） - 信号量（Semaphore）</span><br><span class="hljs-string">多个线程的调度 - 暂停线程执行/唤醒等待中的线程 - Condition</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><br><span class="hljs-keyword">import</span> threading<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;银行账户&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, balance=<span class="hljs-number">0</span></span>):<br>        self.balance = balance<br>        lock = threading.RLock()<br>        self.condition = threading.Condition(lock)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">withdraw</span>(<span class="hljs-params">self, money</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;取钱&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">with</span> self.condition:<br>            <span class="hljs-keyword">while</span> money &gt; self.balance:<br>                self.condition.wait()<br>            new_balance = self.balance - money<br>            sleep(<span class="hljs-number">0.001</span>)<br>            self.balance = new_balance<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">deposit</span>(<span class="hljs-params">self, money</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;存钱&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">with</span> self.condition:<br>            new_balance = self.balance + money<br>            sleep(<span class="hljs-number">0.001</span>)<br>            self.balance = new_balance<br>            self.condition.notify_all()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_money</span>(<span class="hljs-params">account</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        money = randint(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>)<br>        account.deposit(money)<br>        <span class="hljs-built_in">print</span>(threading.current_thread().name, <br>              <span class="hljs-string">&#x27;:&#x27;</span>, money, <span class="hljs-string">&#x27;====&gt;&#x27;</span>, account.balance)<br>        sleep(<span class="hljs-number">0.5</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub_money</span>(<span class="hljs-params">account</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        money = randint(<span class="hljs-number">10</span>, <span class="hljs-number">30</span>)<br>        account.withdraw(money)<br>        <span class="hljs-built_in">print</span>(threading.current_thread().name, <br>              <span class="hljs-string">&#x27;:&#x27;</span>, money, <span class="hljs-string">&#x27;&lt;====&#x27;</span>, account.balance)<br>        sleep(<span class="hljs-number">1</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    account = Account()<br>    <span class="hljs-keyword">with</span> ThreadPoolExecutor(max_workers=<span class="hljs-number">15</span>) <span class="hljs-keyword">as</span> pool:<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>            pool.submit(add_money, account)<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>            pool.submit(sub_money, account)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure></li><li><p>多进程：多进程可以有效的解决GIL的问题，实现多进程主要的类是<code>Process</code>，其他辅助的类跟<code>threading</code>模块中的类似，进程间共享数据可以使用管道、套接字等，在<code>multiprocessing</code>模块中有一个<code>Queue</code>类，它基于管道和锁机制提供了多个进程共享的队列。下面是官方文档上关于多进程和进程池的一个示例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">多进程和进程池的使用</span><br><span class="hljs-string">多线程因为GIL的存在不能够发挥CPU的多核特性</span><br><span class="hljs-string">对于计算密集型任务应该考虑使用多进程</span><br><span class="hljs-string">time python3 example22.py</span><br><span class="hljs-string">real    0m11.512s</span><br><span class="hljs-string">user    0m39.319s</span><br><span class="hljs-string">sys     0m0.169s</span><br><span class="hljs-string">使用多进程后实际执行时间为11.512秒，而用户时间39.319秒约为实际执行时间的4倍</span><br><span class="hljs-string">这就证明我们的程序通过多进程使用了CPU的多核特性，而且这台计算机配置了4核的CPU</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> concurrent.futures<br><span class="hljs-keyword">import</span> math<br><br>PRIMES = [<br>    <span class="hljs-number">1116281</span>,<br>    <span class="hljs-number">1297337</span>,<br>    <span class="hljs-number">104395303</span>,<br>    <span class="hljs-number">472882027</span>,<br>    <span class="hljs-number">533000389</span>,<br>    <span class="hljs-number">817504243</span>,<br>    <span class="hljs-number">982451653</span>,<br>    <span class="hljs-number">112272535095293</span>,<br>    <span class="hljs-number">112582705942171</span>,<br>    <span class="hljs-number">112272535095293</span>,<br>    <span class="hljs-number">115280095190773</span>,<br>    <span class="hljs-number">115797848077099</span>,<br>    <span class="hljs-number">1099726899285419</span><br>] * <span class="hljs-number">5</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_prime</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;判断素数&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    sqrt_n = <span class="hljs-built_in">int</span>(math.floor(math.sqrt(n)))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>, sqrt_n + <span class="hljs-number">1</span>, <span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">if</span> n % i == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;主函数&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">with</span> concurrent.futures.ProcessPoolExecutor() <span class="hljs-keyword">as</span> executor:<br>        <span class="hljs-keyword">for</span> number, prime <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(PRIMES, executor.<span class="hljs-built_in">map</span>(is_prime, PRIMES)):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d is prime: %s&#x27;</span> % (number, prime))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><blockquote><p><strong>重点</strong>：<strong>多线程和多进程的比较</strong>。</p><p>以下情况需要使用多线程：</p><ol><li>程序需要维护许多共享的状态（尤其是可变状态），Python中的列表、字典、集合都是线程安全的，所以使用线程而不是进程维护共享状态的代价相对较小。</li><li>程序会花费大量时间在I&#x2F;O操作上，没有太多并行计算的需求且不需占用太多的内存。</li></ol><p>以下情况需要使用多进程：</p><ol><li>程序执行计算密集型任务（如：字节码操作、数据处理、科学计算）。</li><li>程序的输入可以并行的分成块，并且可以将运算结果合并。</li><li>程序在内存使用方面没有任何限制且不强依赖于I&#x2F;O操作（如：读写文件、套接字等）。</li></ol></blockquote></li><li><p>异步处理：从调度程序的任务队列中挑选任务，该调度程序以交叉的形式执行这些任务，我们并不能保证任务将以某种顺序去执行，因为执行顺序取决于队列中的一项任务是否愿意将CPU处理时间让位给另一项任务。异步任务通常通过多任务协作处理的方式来实现，由于执行时间和顺序的不确定，因此需要通过回调式编程或者<code>future</code>对象来获取任务执行的结果。Python 3通过<code>asyncio</code>模块和<code>await</code>和<code>async</code>关键字（在Python 3.7中正式被列为关键字）来支持异步处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">异步I/O - async / await</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> asyncio<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">num_generator</span>(<span class="hljs-params">m, n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;指定范围的数字生成器&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> <span class="hljs-built_in">range</span>(m, n + <span class="hljs-number">1</span>)<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">prime_filter</span>(<span class="hljs-params">m, n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;素数过滤器&quot;&quot;&quot;</span><br>    primes = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> num_generator(m, n):<br>        flag = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">int</span>(i ** <span class="hljs-number">0.5</span> + <span class="hljs-number">1</span>)):<br>            <span class="hljs-keyword">if</span> i % j == <span class="hljs-number">0</span>:<br>                flag = <span class="hljs-literal">False</span><br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> flag:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Prime =&gt;&#x27;</span>, i)<br>            primes.append(i)<br><br>        <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">0.001</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">tuple</span>(primes)<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">square_mapper</span>(<span class="hljs-params">m, n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;平方映射器&quot;&quot;&quot;</span><br>    squares = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> num_generator(m, n):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Square =&gt;&#x27;</span>, i * i)<br>        squares.append(i * i)<br><br>        <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">0.001</span>)<br>    <span class="hljs-keyword">return</span> squares<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;主函数&quot;&quot;&quot;</span><br>    loop = asyncio.get_event_loop()<br>    future = asyncio.gather(prime_filter(<span class="hljs-number">2</span>, <span class="hljs-number">100</span>), square_mapper(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>))<br>    future.add_done_callback(<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">print</span>(x.result()))<br>    loop.run_until_complete(future)<br>    loop.close()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面的代码使用<code>get_event_loop</code>函数获得系统默认的事件循环，通过<code>gather</code>函数可以获得一个<code>future</code>对象，<code>future</code>对象的<code>add_done_callback</code>可以添加执行完成时的回调函数，<code>loop</code>对象的<code>run_until_complete</code>方法可以等待通过<code>future</code>对象获得协程执行结果。</p></blockquote><p>Python中有一个名为<code>aiohttp</code>的三方库，它提供了异步的HTTP客户端和服务器，这个三方库可以跟<code>asyncio</code>模块一起工作，并提供了对<code>Future</code>对象的支持。Python 3.6中引入了<code>async</code>和<code>await</code>来定义异步执行的函数以及创建异步上下文，在Python 3.7中它们正式成为了关键字。下面的代码异步的从5个URL中获取页面并通过正则表达式的命名捕获组提取了网站的标题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-keyword">import</span> aiohttp<br><br>PATTERN = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\&lt;title\&gt;(?P&lt;title&gt;.*)\&lt;\/title\&gt;&#x27;</span>)<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_page</span>(<span class="hljs-params">session, url</span>):<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> session.get(url, ssl=<span class="hljs-literal">False</span>) <span class="hljs-keyword">as</span> resp:<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> resp.text()<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">show_title</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> aiohttp.ClientSession() <span class="hljs-keyword">as</span> session:<br>        html = <span class="hljs-keyword">await</span> fetch_page(session, url)<br>        <span class="hljs-built_in">print</span>(PATTERN.search(html).group(<span class="hljs-string">&#x27;title&#x27;</span>))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    urls = (<span class="hljs-string">&#x27;https://www.python.org/&#x27;</span>,<br>            <span class="hljs-string">&#x27;https://git-scm.com/&#x27;</span>,<br>            <span class="hljs-string">&#x27;https://www.jd.com/&#x27;</span>,<br>            <span class="hljs-string">&#x27;https://www.taobao.com/&#x27;</span>,<br>            <span class="hljs-string">&#x27;https://www.douban.com/&#x27;</span>)<br>    loop = asyncio.get_event_loop()<br>    cos = [show_title(url) <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls]<br>    loop.run_until_complete(asyncio.wait(cos))<br>    loop.close()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><blockquote><p><strong>重点</strong>：<strong>异步I&#x2F;O与多进程的比较</strong>。</p><p>当程序不需要真正的并发性或并行性，而是更多的依赖于异步处理和回调时，<code>asyncio</code>就是一种很好的选择。如果程序中有大量的等待与休眠时，也应该考虑<code>asyncio</code>，它很适合编写没有实时数据处理需求的Web应用服务器。</p></blockquote><p>Python还有很多用于处理并行任务的三方库，例如：<code>joblib</code>、<code>PyMP</code>等。实际开发中，要提升系统的可扩展性和并发性通常有垂直扩展（增加单个节点的处理能力）和水平扩展（将单个节点变成多个节点）两种做法。可以通过消息队列来实现应用程序的解耦合，消息队列相当于是多线程同步队列的扩展版本，不同机器上的应用程序相当于就是线程，而共享的分布式消息队列就是原来程序中的Queue。消息队列（面向消息的中间件）的最流行和最标准化的实现是AMQP（高级消息队列协议），AMQP源于金融行业，提供了排队、路由、可靠传输、安全等功能，最著名的实现包括：Apache的ActiveMQ、RabbitMQ等。</p><p>要实现任务的异步化，可以使用名为<code>Celery</code>的三方库。<code>Celery</code>是Python编写的分布式任务队列，它使用分布式消息进行工作，可以基于RabbitMQ或Redis来作为后端的消息代理。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>python100day</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pod亲和性和反亲和性</title>
    <link href="/2022/08/09/pod%E4%BA%B2%E5%92%8C%E6%80%A7%E5%92%8C%E5%8F%8D%E4%BA%B2%E5%92%8C%E6%80%A7/"/>
    <url>/2022/08/09/pod%E4%BA%B2%E5%92%8C%E6%80%A7%E5%92%8C%E5%8F%8D%E4%BA%B2%E5%92%8C%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="pod亲和性和反亲和性"><a href="#pod亲和性和反亲和性" class="headerlink" title="pod亲和性和反亲和性"></a>pod亲和性和反亲和性</h1><h2 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h2><p>实际使用中，如果希望2个pod在一个node上，那么可以用到node的亲和性，或者使用pod亲和性。如果希望2个io密集型或者2个CPU密集型的pod不在一个node上，就可以用到pod的反亲和性。</p><p>一般情况下我们部署的 Pod 是通过集群的自动调度策略来选择节点的，默认情况下调度器考虑的是资源足够，并且负载尽量平均，但是有的时候我们需要能够更加细粒度的去控制 Pod 的调度，比如我们内部的一些服务 gitlab 之类的也是跑在Kubernetes集群上的，我们就不希望对外的一些服务和内部的服务跑在同一个节点上了，害怕内部服务对外部的服务产生影响；但是有的时候我们的服务之间交流比较频繁，又希望能够将这两个服务的 Pod 调度到同一个的节点上。这就需要用到 Kubernetes 里面的一个概念：亲和性和反亲和性。</p><p>亲和性有分成节点亲和性(nodeAffinity)和 Pod 亲和性(podAffinity)。</p><h3 id="nodeSelector"><a href="#nodeSelector" class="headerlink" title="nodeSelector"></a>nodeSelector</h3><p>在了解亲和性之前，我们先来了解一个非常常用的调度方式：nodeSelector。我们知道label是kubernetes中一个非常重要的概念，用户可以非常灵活的利用 label 来管理集群中的资源，比如最常见的一个就是 service 通过匹配 label 去匹配 Pod 资源，而 Pod 的调度也可以根据节点的 label 来进行调度。</p><p>我们可以通过下面的命令查看我们的 node 的 label：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ kubectl get nodes --show-labels<br>NAME      STATUS    ROLES     AGE       VERSION   LABELS<br>master    Ready     master    147d      v1.10.0   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/hostname=master,node-role.kubernetes.io/master=<br>node02    Ready     &lt;none&gt;    67d       v1.10.0   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,course=k8s,kubernetes.io/hostname=node02<br>node03    Ready     &lt;none&gt;    127d      v1.10.0   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,jnlp=haimaxy,kubernetes.io/hostname=node03<br><br></code></pre></td></tr></table></figure><p>现在我们先给节点node02增加一个com&#x3D;youdianzhishi的标签，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ kubectl label nodes node02 com=youdianzhishi<br>node <span class="hljs-string">&quot;node02&quot;</span> labeled<br></code></pre></td></tr></table></figure><p>我们可以通过上面的–show-labels参数可以查看上述标签是否生效。当 node 被打上了相关标签后，在调度的时候就可以使用这些标签了，只需要在 Pod 的spec字段中添加nodeSelector字段，里面是我们需要被调度的节点的 label 即可。比如，下面的 Pod 我们要强制调度到 node02 这个节点上去，我们就可以使用 nodeSelector 来表示了：(node-selector-demo.yaml)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">busybox-pod</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-busybox</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">command:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">sleep</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3600&quot;</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">test-busybox</span><br>  <span class="hljs-attr">nodeSelector:</span><br>    <span class="hljs-attr">com:</span> <span class="hljs-string">youdianzhishi</span><br></code></pre></td></tr></table></figure><p>然后我们可以通过 describe 命令查看调度结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ kubectl create -f node-selector-demo.yaml<br>pod <span class="hljs-string">&quot;test-busybox&quot;</span> created<br>$ kubectl describe pod test-busybox<br>Name:         test-busybox<br>Namespace:    default<br>Node:         node02/10.151.30.63<br>......<br>QoS Class:       BestEffort<br>Node-Selectors:  com=youdianzhishi<br>Tolerations:     node.kubernetes.io/not-ready:NoExecute <span class="hljs-keyword">for</span> 300s<br>                 node.kubernetes.io/unreachable:NoExecute <span class="hljs-keyword">for</span> 300s<br>Events:<br>  Type    Reason                 Age   From               Message<br>  ----    ------                 ----  ----               -------<br>  Normal  SuccessfulMountVolume  55s   kubelet, node02    MountVolume.SetUp succeeded <span class="hljs-keyword">for</span> volume <span class="hljs-string">&quot;default-token-n9w2d&quot;</span><br>  Normal  Scheduled              54s   default-scheduler  Successfully assigned test-busybox to node02<br>  Normal  Pulling                54s   kubelet, node02    pulling image <span class="hljs-string">&quot;busybox&quot;</span><br>  Normal  Pulled                 40s   kubelet, node02    Successfully pulled image <span class="hljs-string">&quot;busybox&quot;</span><br>  Normal  Created                40s   kubelet, node02    Created container<br>  Normal  Started                40s   kubelet, node02    Started container<br></code></pre></td></tr></table></figure><p>我们可以看到 Events 下面的信息，我们的 Pod 通过默认的 default-scheduler 调度器被绑定到了node02节点。不过需要注意的是nodeSelector属于强制性的，如果我们的目标节点没有可用的资源，我们的 Pod 就会一直处于 Pending 状态，这就是nodeSelector的用法。</p><p>通过上面的例子我们可以感受到nodeSelector的方式比较直观，但是还够灵活，控制粒度偏大，接下来我们再和大家了解下更加灵活的方式：节点亲和性(nodeAffinity)。</p><h2 id="亲和性和反亲和性调度"><a href="#亲和性和反亲和性调度" class="headerlink" title="亲和性和反亲和性调度"></a>亲和性和反亲和性调度</h2><p>上节课我们了解了 kubernetes 调度器的一个调度流程，我们知道默认的调度器在使用的时候，经过了 predicates 和 priorities 两个阶段，但是在实际的生产环境中，往往我们需要根据自己的一些实际需求来控制 pod 的调度，这就需要用到 nodeAffinity(节点亲和性)、podAffinity(pod 亲和性) 以及 podAntiAffinity(pod 反亲和性)。</p><p>亲和性调度可以分成软策略和硬策略两种方式:</p><ul><li>软策略就是如果你没有满足调度要求的节点的话，pod 就会忽略这条规则，继续完成调度过程，说白了就是满足条件最好了，没有的话也无所谓了的策略</li><li>硬策略就比较强硬了，如果没有满足条件的节点的话，就不断重试直到满足条件为止，简单说就是你必须满足我的要求，不然我就不干的策略。</li></ul><p>对于亲和性和反亲和性都有这两种规则可以设置：<br>preferredDuringSchedulingIgnoredDuringExecution和requiredDuringSchedulingIgnoredDuringExecution，前面的就是软策略，后面的就是硬策略。</p><h3 id="nodeAffinity"><a href="#nodeAffinity" class="headerlink" title="nodeAffinity"></a>nodeAffinity</h3><p>节点亲和性主要是用来控制 pod 要部署在哪些主机上，以及不能部署在哪些主机上的。它可以进行一些简单的逻辑组合了，不只是简单的相等匹配。</p><p>比如现在我们用一个 Deployment 来管理3个 pod 副本，现在我们来控制下这些 pod 的调度，如下例子：（node-affinity-demo.yaml）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">affinity</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">affinity</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">15</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">affinity</span><br>        <span class="hljs-attr">role:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.7.9</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">nginxweb</span><br>      <span class="hljs-attr">affinity:</span><br>        <span class="hljs-attr">nodeAffinity:</span><br>          <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span>  <span class="hljs-comment"># 硬策略</span><br>            <span class="hljs-attr">nodeSelectorTerms:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">matchExpressions:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">kubernetes.io/hostname</span><br>                <span class="hljs-attr">operator:</span> <span class="hljs-string">NotIn</span><br>                <span class="hljs-attr">values:</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">node03</span><br>          <span class="hljs-attr">preferredDuringSchedulingIgnoredDuringExecution:</span>  <span class="hljs-comment"># 软策略</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">weight:</span> <span class="hljs-number">1</span><br>            <span class="hljs-attr">preference:</span><br>              <span class="hljs-attr">matchExpressions:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">com</span><br>                <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>                <span class="hljs-attr">values:</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">youdianzhishi</span><br></code></pre></td></tr></table></figure><p>上面这个 pod 首先是要求不能运行在 node03 这个节点上，如果有个节点满足com&#x3D;youdianzhishi的话就优先调度到这个节点上。</p><p>下面是我们测试的节点列表信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ kubectl get nodes --show-labels<br>NAME      STATUS    ROLES     AGE       VERSION   LABELS<br>master    Ready     master    154d      v1.10.0   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/hostname=master,node-role.kubernetes.io/master=<br>node02    Ready     &lt;none&gt;    74d       v1.10.0   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,com=youdianzhishi,course=k8s,kubernetes.io/hostname=node02<br>node03    Ready     &lt;none&gt;    134d      v1.10.0   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,jnlp=haimaxy,kubernetes.io/hostname=node03<br></code></pre></td></tr></table></figure><p>可以看到 node02 节点有com&#x3D;youdianzhishi这样的 label，按要求会优先调度到这个节点来的，现在我们来创建这个 pod，然后使用descirbe命令查看具体的调度情况是否满足我们的要求。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ kubectl create -f node-affinity-demo.yaml<br>deployment.apps <span class="hljs-string">&quot;affinity&quot;</span> created<br>$ kubectl get pods -l app=affinity -o wide<br>NAME                        READY     STATUS    RESTARTS   AGE       IP             NODE<br>affinity-7b4c946854-5gfln   1/1       Running   0          47s       10.244.4.214   node02<br>affinity-7b4c946854-l8b47   1/1       Running   0          47s       10.244.4.215   node02<br>affinity-7b4c946854-r86p5   1/1       Running   0          47s       10.244.4.213   node02<br></code></pre></td></tr></table></figure><p>从结果可以看出 pod 都被部署到了 node02，其他节点上没有部署 pod，这里的匹配逻辑是 label 的值在某个列表中，现在Kubernetes提供的操作符有下面的几种：</p><ul><li>In：label 的值在某个列表中</li><li>NotIn：label 的值不在某个列表中</li><li>Gt：label 的值大于某个值</li><li>Lt：label 的值小于某个值</li><li>Exists：某个 label 存在</li><li>DoesNotExist：某个 label 不存在</li></ul><blockquote><p>如果nodeSelectorTerms下面有多个选项的话，满足任何一个条件就可以了；如果matchExpressions有多个选项的话，则必须同时满足这些条件才能正常调度 POD。</p></blockquote><h3 id="podAffinity"><a href="#podAffinity" class="headerlink" title="podAffinity"></a>podAffinity</h3><p>pod 亲和性主要解决 pod 可以和哪些 pod 部署在同一个拓扑域中的问题（其中拓扑域用主机标签实现，可以是单个主机，也可以是多个主机组成的 cluster、zone 等等），而 pod 反亲和性主要是解决 pod 不能和哪些 pod 部署在同一个拓扑域中的问题，它们都是处理的 pod 与 pod 之间的关系，比如一个 pod 在一个节点上了，那么我这个也得在这个节点，或者你这个 pod 在节点上了，那么我就不想和你待在同一个节点上。</p><p>由于我们这里只有一个集群，并没有区域或者机房的概念，所以我们这里直接使用主机名来作为拓扑域，把 pod 创建在同一个主机上面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ kubectl get nodes --show-labels<br>NAME      STATUS    ROLES     AGE       VERSION   LABELS<br>master    Ready     master    154d      v1.10.0   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/hostname=master,node-role.kubernetes.io/master=<br>node02    Ready     &lt;none&gt;    74d       v1.10.0   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,com=youdianzhishi,course=k8s,kubernetes.io/hostname=node02<br>node03    Ready     &lt;none&gt;    134d      v1.10.0   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,jnlp=haimaxy,kubernetes.io/hostname=node03<br></code></pre></td></tr></table></figure><p>同样，还是针对上面的资源对象，我们来测试下 pod 的亲和性：（pod-affinity-demo.yaml）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">affinity</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">affinity</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">15</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">affinity</span><br>        <span class="hljs-attr">role:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.7.9</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">nginxweb</span><br>      <span class="hljs-attr">affinity:</span><br>        <span class="hljs-attr">podAffinity:</span><br>          <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span>  <span class="hljs-comment"># 硬策略</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">labelSelector:</span><br>              <span class="hljs-attr">matchExpressions:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">app</span><br>                <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>                <span class="hljs-attr">values:</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">busybox-pod</span><br>            <span class="hljs-attr">topologyKey:</span> <span class="hljs-string">kubernetes.io/hostname</span><br></code></pre></td></tr></table></figure><p>上面这个例子中的 pod 需要调度到某个指定的主机上，至少有一个节点上运行了这样的 pod：这个 pod 有一个app&#x3D;busybox-pod的 label。</p><p>我们查看有标签app&#x3D;busybox-pod的 pod 列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ kubectl get pods -o wide -l app=busybox-pod<br>NAME           READY     STATUS    RESTARTS   AGE       IP             NODE<br>test-busybox   1/1       Running   164        7d        10.244.4.205   node02<br></code></pre></td></tr></table></figure><p>我们看到这个 pod 运行在了 node02 的节点上面，所以按照上面的亲和性来说，上面我们部署的3个 pod 副本也应该运行在 node02 节点上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ kubectl get pods -o wide -l app=affinity<br>NAME                        READY     STATUS    RESTARTS   AGE       IP             NODE<br>affinity-564f9d7db9-lzzvq   1/1       Running   0          3m        10.244.4.216   node02<br>affinity-564f9d7db9-p79cq   1/1       Running   0          3m        10.244.4.217   node02<br>affinity-564f9d7db9-spfzs   1/1       Running   0          3m        10.244.4.218   node02<br></code></pre></td></tr></table></figure><p>如果我们把上面的 test-busybox 和 affinity 这个 Deployment 都删除，然后重新创建 affinity 这个资源，看看能不能正常调度呢：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ kubectl delete -f node-selector-demo.yaml<br>pod <span class="hljs-string">&quot;test-busybox&quot;</span> deleted<br>$ kubectl delete -f pod-affinity-demo.yaml<br>deployment.apps <span class="hljs-string">&quot;affinity&quot;</span> deleted<br>$ kubectl create -f pod-affinity-demo.yaml<br>deployment.apps <span class="hljs-string">&quot;affinity&quot;</span> created<br>$ kubectl get pods -o wide -l app=affinity<br>NAME                        READY     STATUS    RESTARTS   AGE       IP        NODE<br>affinity-564f9d7db9-fbc8w   0/1       Pending   0          2m        &lt;none&gt;    &lt;none&gt;<br>affinity-564f9d7db9-n8gcf   0/1       Pending   0          2m        &lt;none&gt;    &lt;none&gt;<br>affinity-564f9d7db9-qc7x6   0/1       Pending   0          2m        &lt;none&gt;    &lt;none&gt;<br></code></pre></td></tr></table></figure><p>我们可以看到处于Pending状态了，这是因为现在没有一个节点上面拥有busybox-pod这个 label 的 pod，而上面我们的调度使用的是硬策略，所以就没办法进行调度了，大家可以去尝试下重新将 test-busybox 这个 pod 调度到 node03 这个节点上，看看上面的 affinity 的3个副本会不会也被调度到 node03 这个节点上去？</p><p>我们这个地方使用的是kubernetes.io&#x2F;hostname这个拓扑域，意思就是我们当前调度的 pod 要和目标的 pod 处于同一个主机上面，因为要处于同一个拓扑域下面，为了说明这个问题，我们把拓扑域改成beta.kubernetes.io&#x2F;os，同样的我们当前调度的 pod 要和目标的 pod 处于同一个拓扑域中，目标的 pod 是不是拥有beta.kubernetes.io&#x2F;os&#x3D;linux的标签，而我们这里3个节点都有这样的标签，这也就意味着我们3个节点都在同一个拓扑域中，所以我们这里的 pod 可能会被调度到任何一个节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ kubectl get pods -o wide<br>NAME                                      READY     STATUS      RESTARTS   AGE       IP             NODE<br>affinity-7d86749984-glkhz                 1/1       Running     0          3m        10.244.2.16    node03<br>affinity-7d86749984-h4fb9                 1/1       Running     0          3m        10.244.4.219   node02<br>affinity-7d86749984-tj7k2                 1/1       Running     0          3m        10.244.2.14    node03<br></code></pre></td></tr></table></figure><h3 id="podAntiAffinity"><a href="#podAntiAffinity" class="headerlink" title="podAntiAffinity"></a>podAntiAffinity</h3><p>这就是 pod 亲和性的用法，而 pod 反亲和性则是反着来的，比如一个节点上运行了某个 pod，那么我们的 pod 则希望被调度到其他节点上去，同样我们把上面的 podAffinity 直接改成 podAntiAffinity，(pod-antiaffinity-demo.yaml)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">affinity</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">affinity</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">15</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">affinity</span><br>        <span class="hljs-attr">role:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.7.9</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">nginxweb</span><br>      <span class="hljs-attr">affinity:</span><br>        <span class="hljs-attr">podAntiAffinity:</span><br>          <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span>  <span class="hljs-comment"># 硬策略</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">labelSelector:</span><br>              <span class="hljs-attr">matchExpressions:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">app</span><br>                <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>                <span class="hljs-attr">values:</span><br>                <span class="hljs-bullet">-</span> <span class="hljs-string">busybox-pod</span><br>            <span class="hljs-attr">topologyKey:</span> <span class="hljs-string">kubernetes.io/hostname</span><br></code></pre></td></tr></table></figure><p>这里的意思就是如果一个节点上面有一个app&#x3D;busybox-pod这样的 pod 的话，那么我们的 pod 就别调度到这个节点上面来，上面我们把app&#x3D;busybox-pod这个 pod 固定到了 node03 这个节点上面来，所以正常来说我们这里的 pod 不会出现在 node03 节点上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ kubectl create -f pod-antiaffinity-demo.yaml<br>deployment.apps <span class="hljs-string">&quot;affinity&quot;</span> created<br>$ kubectl get pods -o wide<br>NAME                                      READY     STATUS      RESTARTS   AGE       IP             NODE<br>affinity-bcbd8854f-br8z8                  1/1       Running     0          5s        10.244.4.222   node02<br>affinity-bcbd8854f-cdffh                  1/1       Running     0          5s        10.244.4.223   node02<br>affinity-bcbd8854f-htb52                  1/1       Running     0          5s        10.244.4.224   node02<br>test-busybox                              1/1       Running     0          23m       10.244.2.10    node03<br></code></pre></td></tr></table></figure><p>这就是 pod 反亲和性的用法。</p><h2 id="污点（taints）与容忍（tolerations）"><a href="#污点（taints）与容忍（tolerations）" class="headerlink" title="污点（taints）与容忍（tolerations）"></a>污点（taints）与容忍（tolerations）</h2><p>对于nodeAffinity无论是硬策略还是软策略方式，都是调度 pod 到预期节点上，而Taints恰好与之相反，如果一个节点标记为 Taints ，除非 pod 也被标识为可以容忍污点节点，否则该 Taints 节点不会被调度 pod。也就是节点只要有了污点，正常pod都不会调度到这个节点上去了。</p><p>比如用户希望把 Master 节点保留给 Kubernetes 系统组件使用，或者把一组具有特殊资源预留给某些 pod，则污点就很有用了，pod 不会再被调度到 taint 标记过的节点。我们使用kubeadm搭建的集群默认就给 master 节点添加了一个污点标记，所以我们看到我们平时的 pod 都没有被调度到 master 上去：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ kubectl describe node master<br>Name:               master<br>Roles:              master<br>Labels:             beta.kubernetes.io/arch=amd64<br>                    beta.kubernetes.io/os=linux<br>                    kubernetes.io/hostname=master<br>                    node-role.kubernetes.io/master=<br>......<br>Taints:             node-role.kubernetes.io/master:NoSchedule<br>Unschedulable:      <span class="hljs-literal">false</span><br>......<br></code></pre></td></tr></table></figure><p>我们可以使用上面的命令查看 master 节点的信息，其中有一条关于 Taints 的信息：node-role.kubernetes.io&#x2F;master:NoSchedule，就表示给 master 节点打了一个污点的标记，其中影响的参数是NoSchedule，表示 pod 不会被调度到标记为 taints 的节点，除了 NoSchedule 外，还有另外两个选项：</p><ul><li>PreferNoSchedule：NoSchedule 的软策略版本，表示尽量不调度到污点节点上去</li><li>NoExecute：该选项意味着一旦 Taint 生效，如该节点内正在运行的 pod 没有对应 Tolerate 设置，会直接被逐出<br>　　污点 taint 标记节点的命令如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ kubectl taint nodes node02 <span class="hljs-built_in">test</span>=node02:NoSchedule<br>node <span class="hljs-string">&quot;node02&quot;</span> tainted<br></code></pre></td></tr></table></figure><p>上面的命名将 node02 节点标记为了污点，影响策略是 NoSchedule，只会影响新的 pod 调度，如果仍然希望某个 pod 调度到 taint 节点上，则必须在 Spec 中做出Toleration定义，才能调度到该节点，比如现在我们想要将一个 pod 调度到 master 节点：(taint-demo.yaml)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">taint</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">taint</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">taint</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.7.9</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">tolerations:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;node-role.kubernetes.io/master&quot;</span><br>        <span class="hljs-attr">operator:</span> <span class="hljs-string">&quot;Exists&quot;</span><br>        <span class="hljs-attr">effect:</span> <span class="hljs-string">&quot;NoSchedule&quot;</span><br></code></pre></td></tr></table></figure><p>由于 master 节点被标记为了污点节点，所以我们这里要想 pod 能够调度到 master 节点去，就需要增加容忍的声明：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tolerations:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;node-role.kubernetes.io/master&quot;</span><br>  <span class="hljs-attr">operator:</span> <span class="hljs-string">&quot;Exists&quot;</span><br>  <span class="hljs-attr">effect:</span> <span class="hljs-string">&quot;NoSchedule&quot;</span><br></code></pre></td></tr></table></figure><p>然后创建上面的资源，查看结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ kubectl create -f taint-demo.yaml<br>deployment.apps <span class="hljs-string">&quot;taint&quot;</span> created<br>$ kubectl get pods -o wide<br>NAME                                      READY     STATUS             RESTARTS   AGE       IP             NODE<br>......<br>taint-845d8bb4fb-57mhm                    1/1       Running            0          1m        10.244.4.247   node02<br>taint-845d8bb4fb-bbvmp                    1/1       Running            0          1m        10.244.0.33    master<br>taint-845d8bb4fb-zb78x                    1/1       Running            0          1m        10.244.4.246   node02<br>......<br></code></pre></td></tr></table></figure><p>我们可以看到有一个 pod 副本被调度到了 master 节点，这就是容忍的使用方法。</p><p>对于 tolerations 属性的写法，其中的 key、value、effect 与 Node 的 Taint 设置需保持一致， 还有以下几点说明：</p><ul><li>如果 operator 的值是 Exists，则 value 属性可省略</li><li>如果 operator 的值是 Equal，则表示其 key 与 value 之间的关系是 equal(等于)</li><li>如果不指定 operator 属性，则默认值为 Equal</li></ul><p>另外，还有两个特殊值：</p><ul><li>空的 key 如果再配合 Exists 就能匹配所有的 key 与 value，也是是能容忍所有 node 的所有 Taints</li><li>空的 effect 匹配所有的 effect</li></ul><p>最后，如果我们要取消节点的污点标记，可以使用下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ kubectl taint nodes node02 <span class="hljs-built_in">test</span>-<br>node <span class="hljs-string">&quot;node02&quot;</span> untainted<br></code></pre></td></tr></table></figure><p>这就是污点和容忍的使用方法。</p>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>python100day-15</title>
    <link href="/2022/08/09/python100day-15/"/>
    <url>/2022/08/09/python100day-15/</url>
    
    <content type="html"><![CDATA[<h2 id="图像和办公文档处理"><a href="#图像和办公文档处理" class="headerlink" title="图像和办公文档处理"></a>图像和办公文档处理</h2><p>用程序来处理图像和办公文档经常出现在实际开发中，Python的标准库中虽然没有直接支持这些操作的模块，但我们可以通过Python生态圈中的第三方模块来完成这些操作。</p><h3 id="操作图像"><a href="#操作图像" class="headerlink" title="操作图像"></a>操作图像</h3><h4 id="计算机图像相关知识"><a href="#计算机图像相关知识" class="headerlink" title="计算机图像相关知识"></a>计算机图像相关知识</h4><ol><li><p>颜色。如果你有使用颜料画画的经历，那么一定知道混合红、黄、蓝三种颜料可以得到其他的颜色，事实上这三种颜色就是被我们称为美术三原色的东西，它们是不能再分解的基本颜色。在计算机中，我们可以将红、绿、蓝三种色光以不同的比例叠加来组合成其他的颜色，因此这三种颜色就是色光三原色，所以我们通常会将一个颜色表示为一个RGB值或RGBA值（其中的A表示Alpha通道，它决定了透过这个图像的像素，也就是透明度）。</p><table><thead><tr><th align="center">名称</th><th align="center">RGBA值</th><th align="center">名称</th><th align="center">RGBA值</th></tr></thead><tbody><tr><td align="center">White</td><td align="center">(255, 255, 255, 255)</td><td align="center">Red</td><td align="center">(255, 0, 0, 255)</td></tr><tr><td align="center">Green</td><td align="center">(0, 255, 0, 255)</td><td align="center">Blue</td><td align="center">(0, 0, 255, 255)</td></tr><tr><td align="center">Gray</td><td align="center">(128, 128, 128, 255)</td><td align="center">Yellow</td><td align="center">(255, 255, 0, 255)</td></tr><tr><td align="center">Black</td><td align="center">(0, 0, 0, 255)</td><td align="center">Purple</td><td align="center">(128, 0, 128, 255)</td></tr></tbody></table></li><li><p>像素。对于一个由数字序列表示的图像来说，最小的单位就是图像上单一颜色的小方格，这些小方块都有一个明确的位置和被分配的色彩数值，而这些一小方格的颜色和位置决定了该图像最终呈现出来的样子，它们是不可分割的单位，我们通常称之为像素（pixel）。每一个图像都包含了一定量的像素，这些像素决定图像在屏幕上所呈现的大小。</p></li></ol><h4 id="用Pillow操作图像"><a href="#用Pillow操作图像" class="headerlink" title="用Pillow操作图像"></a>用Pillow操作图像</h4><p>Pillow是由从著名的Python图像处理库PIL发展出来的一个分支，通过Pillow可以实现图像压缩和图像处理等各种操作。可以使用下面的命令来安装Pillow。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">pip install pillow<br></code></pre></td></tr></table></figure><p>Pillow中最为重要的是Image类，读取和处理图像都要通过这个类来完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./res/guido.jpg&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>image.<span class="hljs-built_in">format</span>, image.size, image.mode<br>(<span class="hljs-string">&#x27;JPEG&#x27;</span>, (<span class="hljs-number">500</span>, <span class="hljs-number">750</span>), <span class="hljs-string">&#x27;RGB&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>image.show()<br></code></pre></td></tr></table></figure><p><img src="/images/pasted-79.png" alt="upload successful"></p><ol><li><p>剪裁图像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./res/guido.jpg&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>rect = <span class="hljs-number">80</span>, <span class="hljs-number">20</span>, <span class="hljs-number">310</span>, <span class="hljs-number">360</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>image.crop(rect).show()<br></code></pre></td></tr></table></figure></li></ol><p>  <br><img src="/images/pasted-80.png" alt="upload successful"></p><ol start="2"><li><p>生成缩略图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./res/guido.jpg&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>size = <span class="hljs-number">128</span>, <span class="hljs-number">128</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>image.thumbnail(size)<br><span class="hljs-meta">&gt;&gt;&gt; </span>image.show()<br></code></pre></td></tr></table></figure></li></ol><p>  <br><img src="/images/pasted-81.png" alt="upload successful"></p><ol start="3"><li><p>缩放和黏贴图像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>image1 = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./res/luohao.png&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>image2 = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./res/guido.jpg&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>rect = <span class="hljs-number">80</span>, <span class="hljs-number">20</span>, <span class="hljs-number">310</span>, <span class="hljs-number">360</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>guido_head = image2.crop(rect)<br><span class="hljs-meta">&gt;&gt;&gt; </span>width, height = guido_head.size<br><span class="hljs-meta">&gt;&gt;&gt; </span>image1.paste(guido_head.resize((<span class="hljs-built_in">int</span>(width / <span class="hljs-number">1.5</span>), <span class="hljs-built_in">int</span>(height / <span class="hljs-number">1.5</span>))), (<span class="hljs-number">172</span>, <span class="hljs-number">40</span>))<br></code></pre></td></tr></table></figure></li></ol><p>  <br><img src="/images/pasted-82.png" alt="upload successful"></p><ol start="4"><li><p>旋转和翻转</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./res/guido.png&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>image.rotate(<span class="hljs-number">180</span>).show()<br><span class="hljs-meta">&gt;&gt;&gt; </span>image.transpose(Image.FLIP_LEFT_RIGHT).show()<br></code></pre></td></tr></table></figure></li></ol><p>  <br><img src="/images/pasted-83.png" alt="upload successful"></p><p>  <br><img src="/images/pasted-84.png" alt="upload successful"></p><ol start="5"><li><p>操作像素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./res/guido.jpg&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">80</span>, <span class="hljs-number">310</span>):<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>, <span class="hljs-number">360</span>):<br><span class="hljs-meta">... </span>        image.putpixel((x, y), (<span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>))<br><span class="hljs-meta">... </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>image.show()<br></code></pre></td></tr></table></figure><p><img src="/images/pasted-85.png" alt="upload successful"></p></li><li><p>滤镜效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageFilter<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./res/guido.jpg&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>image.<span class="hljs-built_in">filter</span>(ImageFilter.CONTOUR).show()<br></code></pre></td></tr></table></figure></li></ol><p><img src="/images/pasted-86.png" alt="upload successful">   </p><h3 id="处理Excel电子表格"><a href="#处理Excel电子表格" class="headerlink" title="处理Excel电子表格"></a>处理Excel电子表格</h3><p>Python的openpyxl模块让我们可以在Python程序中读取和修改Excel电子表格，由于微软从Office 2007开始使用了新的文件格式，这使得Office Excel和LibreOffice Calc、OpenOffice Calc是完全兼容的，这就意味着openpyxl模块也能处理来自这些软件生成的电子表格。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-keyword">from</span> openpyxl <span class="hljs-keyword">import</span> Workbook<br><br>wb = Workbook()<br>ws = wb.active<br><br>ws[<span class="hljs-string">&#x27;A1&#x27;</span>] = <span class="hljs-number">42</span><br>ws.append([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>ws[<span class="hljs-string">&#x27;A2&#x27;</span>] = datetime.datetime.now()<br><br>wb.save(<span class="hljs-string">&quot;sample.xlsx&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="处理Word文档"><a href="#处理Word文档" class="headerlink" title="处理Word文档"></a>处理Word文档</h3><p>利用python-docx模块，Python可以创建和修改Word文档，当然这里的Word文档不仅仅是指通过微软的Office软件创建的扩展名为docx的文档，LibreOffice Writer和OpenOffice Writer都是免费的字处理软件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> docx <span class="hljs-keyword">import</span> Document<br><span class="hljs-keyword">from</span> docx.shared <span class="hljs-keyword">import</span> Inches<br><br>document = Document()<br><br>document.add_heading(<span class="hljs-string">&#x27;Document Title&#x27;</span>, <span class="hljs-number">0</span>)<br><br>p = document.add_paragraph(<span class="hljs-string">&#x27;A plain paragraph having some &#x27;</span>)<br>p.add_run(<span class="hljs-string">&#x27;bold&#x27;</span>).bold = <span class="hljs-literal">True</span><br>p.add_run(<span class="hljs-string">&#x27; and some &#x27;</span>)<br>p.add_run(<span class="hljs-string">&#x27;italic.&#x27;</span>).italic = <span class="hljs-literal">True</span><br><br>document.add_heading(<span class="hljs-string">&#x27;Heading, level 1&#x27;</span>, level=<span class="hljs-number">1</span>)<br>document.add_paragraph(<span class="hljs-string">&#x27;Intense quote&#x27;</span>, style=<span class="hljs-string">&#x27;Intense Quote&#x27;</span>)<br><br>document.add_paragraph(<br>    <span class="hljs-string">&#x27;first item in unordered list&#x27;</span>, style=<span class="hljs-string">&#x27;List Bullet&#x27;</span><br>)<br>document.add_paragraph(<br>    <span class="hljs-string">&#x27;first item in ordered list&#x27;</span>, style=<span class="hljs-string">&#x27;List Number&#x27;</span><br>)<br><br>document.add_picture(<span class="hljs-string">&#x27;monty-truth.png&#x27;</span>, width=Inches(<span class="hljs-number">1.25</span>))<br><br>records = (<br>    (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;101&#x27;</span>, <span class="hljs-string">&#x27;Spam&#x27;</span>),<br>    (<span class="hljs-number">7</span>, <span class="hljs-string">&#x27;422&#x27;</span>, <span class="hljs-string">&#x27;Eggs&#x27;</span>),<br>    (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;631&#x27;</span>, <span class="hljs-string">&#x27;Spam, spam, eggs, and spam&#x27;</span>)<br>)<br><br>table = document.add_table(rows=<span class="hljs-number">1</span>, cols=<span class="hljs-number">3</span>)<br>hdr_cells = table.rows[<span class="hljs-number">0</span>].cells<br>hdr_cells[<span class="hljs-number">0</span>].text = <span class="hljs-string">&#x27;Qty&#x27;</span><br>hdr_cells[<span class="hljs-number">1</span>].text = <span class="hljs-string">&#x27;Id&#x27;</span><br>hdr_cells[<span class="hljs-number">2</span>].text = <span class="hljs-string">&#x27;Desc&#x27;</span><br><span class="hljs-keyword">for</span> qty, <span class="hljs-built_in">id</span>, desc <span class="hljs-keyword">in</span> records:<br>    row_cells = table.add_row().cells<br>    row_cells[<span class="hljs-number">0</span>].text = <span class="hljs-built_in">str</span>(qty)<br>    row_cells[<span class="hljs-number">1</span>].text = <span class="hljs-built_in">id</span><br>    row_cells[<span class="hljs-number">2</span>].text = desc<br><br>document.add_page_break()<br><br>document.save(<span class="hljs-string">&#x27;demo.docx&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python100day</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell declare的使用方法</title>
    <link href="/2022/08/05/Shell-declare%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2022/08/05/Shell-declare%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Shell-declare的使用方法"><a href="#Shell-declare的使用方法" class="headerlink" title="Shell declare的使用方法"></a>Shell declare的使用方法</h1><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><p>declare声明变量总结如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">declare</span> [+/-][选项] 变量名<br><br>选项：<br>   -：给变量舍得类型属性<br>   +：取消变量的类型属性<br>  -a：将变量声明为数组型<br>  -i：将变量声明为整型<br>  -x：将变量声明为环境变量<br>  -r：将变量声明为只读变量<br>  -p：查看变量的被声明的类型<br></code></pre></td></tr></table></figure><h3 id="1、变量声明为数值型"><a href="#1、变量声明为数值型" class="headerlink" title="1、变量声明为数值型"></a>1、变量声明为数值型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">declare</span> -i num=12<br></code></pre></td></tr></table></figure><p>也可以查看变量类型</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">declare -<span class="hljs-selector-tag">p</span> num<br></code></pre></td></tr></table></figure><p>得到的结果如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">declare</span> <span class="hljs-operator">-</span>i num<span class="hljs-operator">=</span>&quot;12&quot;<br></code></pre></td></tr></table></figure><h3 id="2、声明数组变量"><a href="#2、声明数组变量" class="headerlink" title="2、声明数组变量"></a>2、<a href="https://so.csdn.net/so/search?q=%E5%A3%B0%E6%98%8E%E6%95%B0%E7%BB%84&spm=1001.2101.3001.7020">声明数组</a>变量</h3><p>（1）定义<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E7%BB%84&spm=1001.2101.3001.7020">数组</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">arr[<span class="hljs-number">0</span>]<span class="hljs-operator">=</span>x<br><br>arr[<span class="hljs-number">1</span>]<span class="hljs-operator">=</span>y<br><br><span class="hljs-keyword">declare</span> <span class="hljs-operator">-</span>a arr[<span class="hljs-number">2</span>]<span class="hljs-operator">=</span>z<br></code></pre></td></tr></table></figure><p>（2）查看数组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;arr&#125;</span> ---结果x<br><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;arr[2]&#125;</span> ---结果z<br><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;arr[8]&#125;</span> ---结果x y z<br></code></pre></td></tr></table></figure><p>和普通变量区别是使用大括号，同时使用下标，若没有下标，则默认使用0。</p><h3 id="3、声明环境变量"><a href="#3、声明环境变量" class="headerlink" title="3、声明环境变量"></a>3、声明<a href="https://so.csdn.net/so/search?q=%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&spm=1001.2101.3001.7020">环境变量</a></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">declare</span> <span class="hljs-operator">-</span>x t<span class="hljs-operator">=</span><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>export命令调用的也是上面declare -x 的命令</p><h3 id="4、声明变量只读属性"><a href="#4、声明变量只读属性" class="headerlink" title="4、声明变量只读属性"></a>4、声明变量只读属性</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">declare</span> <span class="hljs-operator">-</span>r a<span class="hljs-operator">=</span><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>重新赋值会报错，不能修改，不能删除</p><h3 id="5、查看变量属性"><a href="#5、查看变量属性" class="headerlink" title="5、查看变量属性"></a>5、查看变量属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">declare -<span class="hljs-selector-tag">p</span>     查看所有变量属性<br>declare -<span class="hljs-selector-tag">p</span>  变量名  查看指定变量的属性<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gitea备份与恢复</title>
    <link href="/2022/08/05/gitea%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/"/>
    <url>/2022/08/05/gitea%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="Gitea安装，备份及恢复"><a href="#Gitea安装，备份及恢复" class="headerlink" title="Gitea安装，备份及恢复"></a>Gitea安装，备份及恢复</h1><p>官网：<a href="https://gitea.io/en-us/">https://gitea.io/en-us/</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>环境安装<br>查看有没有安装git</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">apt <span class="hljs-keyword">install</span> git<br></code></pre></td></tr></table></figure><h3 id="安装sqlite3"><a href="#安装sqlite3" class="headerlink" title="安装sqlite3"></a>安装sqlite3</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">apt <span class="hljs-keyword">install</span> sqlite3<br></code></pre></td></tr></table></figure><p>下载gitea</p><p>在官方地址下载匹配的版本文件，替换后面的URL即可</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> -O gitea https://dl.gitea.io/gitea/<span class="hljs-number">1</span>.<span class="hljs-number">15</span>.<span class="hljs-number">2</span>/gitea-<span class="hljs-number">1</span>.<span class="hljs-number">15</span>.<span class="hljs-number">2</span>-linux-amd64<br></code></pre></td></tr></table></figure><p>下载后将文件移动至&#x2F;usr&#x2F;loacl&#x2F;bin下并添加可执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> gitea /usr/local/bin<br><span class="hljs-built_in">chmod</span> +x gitea<br></code></pre></td></tr></table></figure><p>可以用.&#x2F;gitea web测试一下，登录IP：3000即可出现测试页面，但不要点注册和登录按键</p><p>创建gitea启动用户及需要的文件<br>创建gitea启动用户</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">adduser git <span class="hljs-params">--system</span> <span class="hljs-params">--shell</span> <span class="hljs-string">/bin/bash</span> <span class="hljs-params">--gecos</span> &#x27;Git Version Control&#x27; <span class="hljs-params">--group</span> <span class="hljs-params">--disabled-password</span> <span class="hljs-params">--home</span> <span class="hljs-string">/home/git</span><br></code></pre></td></tr></table></figure><p>1创建需要的文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/gitea/</span>&#123;custom,data,log&#125;   <span class="hljs-comment"># data用来存放数据</span><br>chown -R git:git <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/gitea/</span><br>chmod -R <span class="hljs-number">750</span> <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/gitea/</span><br>mkdir <span class="hljs-regexp">/etc/gi</span>tea<span class="hljs-comment"># /gitea存放gitea的主要配置文件 app.ini</span><br>chown root:git <span class="hljs-regexp">/etc/gi</span>tea<br>chmod <span class="hljs-number">770</span> <span class="hljs-regexp">/etc/gi</span>tea<br></code></pre></td></tr></table></figure><p>将Linux作为服务器运行<br>在&#x2F;etc&#x2F;systemd&#x2F;system下创建gitea.service文件，内容如下</p><p>将Linux作为服务器运行<br>在&#x2F;etc&#x2F;systemd&#x2F;system下创建gitea.service文件，内容如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=Gitea (Git with a cup of tea)<br><span class="hljs-attr">After</span>=syslog.target<br><span class="hljs-attr">After</span>=network.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">RestartSec</span>=<span class="hljs-number">2</span>s<br><span class="hljs-attr">Type</span>=simple<br><span class="hljs-attr">User</span>=git            <span class="hljs-comment"># 修改为自己的启动用户名</span><br><span class="hljs-attr">Group</span>=git           <span class="hljs-comment"># 修改为自己的启动用户的组名</span><br><span class="hljs-attr">WorkingDirectory</span>=/var/lib/gitea/                                     <span class="hljs-comment">#工作路径，其中包括custom，data，log文件</span><br><span class="hljs-attr">ExecStart</span>=/usr/local/bin/gitea web --config /etc/gitea/app.ini       <span class="hljs-comment"># 存放app.ini</span><br><span class="hljs-attr">Restart</span>=always<br><span class="hljs-attr">Environment</span>=USER=git HOME=/home/git GITEA_WORK_DIR=/var/lib/gitea<br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><p>给gitea.service 文件加上可执行权限</p><p>给gitea.service 文件加上可执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x gitea.service <br></code></pre></td></tr></table></figure><p>之后即可用systemctl命令运行服务</p><p>之后即可用systemctl命令运行服务</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl start gitea<br><span class="hljs-params">system</span>ctl restat gitea<br><span class="hljs-params">system</span>ctl status gitea<br><span class="hljs-params">system</span>ctl stop gitea<br></code></pre></td></tr></table></figure><p>运行成功后输入IP:3000即可进入gitea配置界面，之后可以通过修改app.ini文件更改gitea的配置</p><h2 id="Gitea-迁移"><a href="#Gitea-迁移" class="headerlink" title="Gitea 迁移"></a>Gitea 迁移</h2><h3 id="Gitea备份"><a href="#Gitea备份" class="headerlink" title="Gitea备份"></a>Gitea备份</h3><p>首先切换到Gitea用户，执行以下命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/gitea dump -c /</span>etc<span class="hljs-regexp">/gitea/</span>app.ini    <br></code></pre></td></tr></table></figure><p>更具自己的app.ini文件更改路径</p><p>文件会打包进gitea-dump-*****.zip中</p><h3 id="Gitea恢复"><a href="#Gitea恢复" class="headerlink" title="Gitea恢复"></a>Gitea恢复</h3><p>首先从第二台主机上配置好Gitea</p><p>解压备份好的压缩包</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">mkdire</span> <span class="hljs-meta">Data</span><br><span class="hljs-symbol">unzip</span> -d /<span class="hljs-meta">Data</span> gitea-dump-*****.zip<br></code></pre></td></tr></table></figure><p>将custom，data中的数据复制到对应的地址下，覆盖原文件</p><p>利用sqlite3 数据库文件&lt; gitea-db.sql导入数据库完成，覆盖原文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">cd /Data<br>mv <span class="hljs-regexp">/custom/</span>* <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/gitea/</span>custom<br>mv <span class="hljs-regexp">/data/</span>* <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/gitea/</span>data<br>mv <span class="hljs-regexp">/repos/</span>* <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/gitea/</span>data/gitea-<span class="hljs-keyword">repositories</span><br><br>sqlite3 gitea.db &lt; gitea-db.sql<br>mv gitea.db <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/gitea/</span>data<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python100day-14</title>
    <link href="/2022/08/05/python100day-14/"/>
    <url>/2022/08/05/python100day-14/</url>
    
    <content type="html"><![CDATA[<h2 id="网络编程入门"><a href="#网络编程入门" class="headerlink" title="网络编程入门"></a>网络编程入门</h2><h3 id="计算机网络基础"><a href="#计算机网络基础" class="headerlink" title="计算机网络基础"></a>计算机网络基础</h3><p>计算机网络是独立自主的计算机互联而成的系统的总称，组建计算机网络最主要的目的是实现多台计算机之间的通信和资源共享。今天计算机网络中的设备和计算机网络的用户已经多得不可计数，而计算机网络也可以称得上是一个“复杂巨系统”，对于这样的系统，我们不可能用一两篇文章把它讲清楚，有兴趣的读者可以自行阅读Andrew S.Tanenbaum老师的经典之作《计算机网络》或Kurose和Ross老师合著的《计算机网络:自顶向下方法》来了解计算机网络的相关知识。</p><h4 id="计算机网络发展史"><a href="#计算机网络发展史" class="headerlink" title="计算机网络发展史"></a>计算机网络发展史</h4><ol><li>1960s - 美国国防部ARPANET项目问世，奠定了分组交换网络的基础。</li></ol><p><img src="/images/pasted-72.png" alt="upload successful"></p><ol start="2"><li>1980s - 国际标准化组织（ISO）发布OSI&#x2F;RM，奠定了网络技术标准化的基础。</li></ol><p><img src="/images/pasted-73.png" alt="upload successful"></p><ol start="3"><li><p>1990s - 英国人<a href="https://zh.wikipedia.org/wiki/%E6%8F%90%E5%A7%86%C2%B7%E6%9F%8F%E5%85%A7%E8%8C%B2-%E6%9D%8E">蒂姆·伯纳斯-李</a>发明了图形化的浏览器，浏览器的简单易用性使得计算机网络迅速被普及。</p><p>在没有浏览器的年代，上网是这样的。</p></li></ol><p>  <br><img src="/images/pasted-74.png" alt="upload successful"></p><p>   有了浏览器以后，上网是这样的。</p><p>  </p><p><img src="/images/pasted-78.png" alt="upload successful"></p><h4 id="TCP-x2F-IP模型"><a href="#TCP-x2F-IP模型" class="headerlink" title="TCP&#x2F;IP模型"></a>TCP&#x2F;IP模型</h4><p>实现网络通信的基础是网络通信协议，这些协议通常是由<a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E5%B7%A5%E7%A8%8B%E4%BB%BB%E5%8A%A1%E7%BB%84">互联网工程任务组</a> （IETF）制定的。所谓“协议”就是通信计算机双方必须共同遵从的一组约定，例如怎样建立连接、怎样互相识别等，网络协议的三要素是：语法、语义和时序。构成我们今天使用的Internet的基础的是TCP&#x2F;IP协议族，所谓协议族就是一系列的协议及其构成的通信模型，我们通常也把这套东西称为TCP&#x2F;IP模型。与国际标准化组织发布的OSI&#x2F;RM这个七层模型不同，TCP&#x2F;IP是一个四层模型，也就是说，该模型将我们使用的网络从逻辑上分解为四个层次，自底向上依次是：网络接口层、网络层、传输层和应用层，如下图所示。</p><p><img src="/images/pasted-76.png" alt="upload successful"></p><p>IP通常被翻译为网际协议，它服务于网络层，主要实现了寻址和路由的功能。接入网络的每一台主机都需要有自己的IP地址，IP地址就是主机在计算机网络上的身份标识。当然由于IPv4地址的匮乏，我们平常在家里、办公室以及其他可以接入网络的公共区域上网时获得的IP地址并不是全球唯一的IP地址，而是一个<a href="https://zh.wikipedia.org/zh-hans/%E5%B1%80%E5%9F%9F%E7%BD%91">局域网（LAN）</a>中的内部IP地址，通过<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2">网络地址转换（NAT）服务</a>我们也可以实现对网络的访问。计算机网络上有大量的被我们称为“<a href="https://zh.wikipedia.org/wiki/%E8%B7%AF%E7%94%B1%E5%99%A8">路由器</a>”的网络中继设备，它们会存储转发我们发送到网络上的数据分组，让从源头发出的数据最终能够找到传送到目的地通路，这项功能就是所谓的路由。</p><p>TCP全称传输控制协议，它是基于IP提供的寻址和路由服务而建立起来的负责实现端到端可靠传输的协议，之所以将TCP称为可靠的传输协议是因为TCP向调用者承诺了三件事情：</p><ol><li>数据不传丢不传错（利用握手、校验和重传机制可以实现）。</li><li>流量控制（通过滑动窗口匹配数据发送者和接收者之间的传输速度）。</li><li>拥塞控制（通过RTT时间以及对滑动窗口的控制缓解网络拥堵）。</li></ol><h4 id="网络应用模式"><a href="#网络应用模式" class="headerlink" title="网络应用模式"></a>网络应用模式</h4><ol><li>C&#x2F;S模式和B&#x2F;S模式。这里的C指的是Client（客户端），通常是一个需要安装到某个宿主操作系统上的应用程序；而B指的是Browser（浏览器），它几乎是所有图形化操作系统都默认安装了的一个应用软件；通过C或B都可以实现对S（服务器）的访问。关于二者的比较和讨论在网络上有一大堆的文章，在此我们就不再浪费笔墨了。</li><li>去中心化的网络应用模式。不管是B&#x2F;S还是C&#x2F;S都需要服务器的存在，服务器就是整个应用模式的中心，而去中心化的网络应用通常没有固定的服务器或者固定的客户端，所有应用的使用者既可以作为资源的提供者也可以作为资源的访问者。</li></ol><h3 id="基于HTTP协议的网络资源访问"><a href="#基于HTTP协议的网络资源访问" class="headerlink" title="基于HTTP协议的网络资源访问"></a>基于HTTP协议的网络资源访问</h3><h4 id="HTTP（超文本传输协议）"><a href="#HTTP（超文本传输协议）" class="headerlink" title="HTTP（超文本传输协议）"></a>HTTP（超文本传输协议）</h4><p>HTTP是超文本传输协议（Hyper-Text Transfer Proctol）的简称，维基百科上对HTTP的解释是：超文本传输协议是一种用于分布式、协作式和超媒体信息系统的应用层协议，它是<a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E7%90%83%E8%B3%87%E8%A8%8A%E7%B6%B2">万维网</a>数据通信的基础，设计HTTP最初的目的是为了提供一种发布和接收<a href="https://zh.wikipedia.org/wiki/HTML">HTML</a>页面的方法，通过HTTP或者<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE">HTTPS</a>（超文本传输安全协议）请求的资源由URI（<a href="https://zh.wikipedia.org/wiki/%E7%B5%B1%E4%B8%80%E8%B3%87%E6%BA%90%E6%A8%99%E8%AD%98%E7%AC%A6">统一资源标识符</a>）来标识。关于HTTP的更多内容，我们推荐阅读阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2016/08/http.html">《HTTP 协议入门》</a>，简单的说，通过HTTP我们可以获取网络上的（基于字符的）资源，开发中经常会用到的网络API（有的地方也称之为网络数据接口）就是基于HTTP来实现数据传输的。</p><h4 id="JSON格式"><a href="#JSON格式" class="headerlink" title="JSON格式"></a>JSON格式</h4><p><strong>JSON</strong>（<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation）是一种轻量级的数据交换语言，该语言以易于让人阅读的文字（纯文本）为基础，用来传输由属性值或者序列性的值组成的数据对象。尽管JSON是最初只是Javascript中一种创建对象的字面量语法，但它在当下更是一种独立于语言的数据格式，很多编程语言都支持JSON格式数据的生成和解析，Python内置的json模块也提供了这方面的功能。由于JSON是纯文本，它和<a href="https://zh.wikipedia.org/wiki/XML">XML</a>一样都适用于异构系统之间的数据交换，而相较于XML，JSON显得更加的轻便和优雅。下面是表达同样信息的XML和JSON，而JSON的优势是相当直观的。</p><p>XML的例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">message</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>Alice<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>Bob<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">content</span>&gt;</span>Will you marry me?<span class="hljs-tag">&lt;/<span class="hljs-name">content</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">message</span>&gt;</span><br></code></pre></td></tr></table></figure><p>JSON的例子：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Alice&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;to&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Bob&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Will you marry me?&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h4><p>requests是一个基于HTTP协议来使用网络的第三库，其<a href="http://cn.python-requests.org/zh_CN/latest/">官方网站</a>有这样的一句介绍它的话：“Requests是唯一的一个<strong>非转基因</strong>的Python HTTP库，人类可以安全享用。”简单的说，使用requests库可以非常方便的使用HTTP，避免安全缺陷、冗余代码以及“重复发明轮子”（行业黑话，通常用在软件工程领域表示重新创造一个已有的或是早已被优化過的基本方法）。前面的文章中我们已经使用过这个库，下面我们还是通过requests来实现一个访问网络数据接口并从中获取美女图片下载链接然后下载美女图片到本地的例子程序，程序中使用了<a href="https://www.tianapi.com/">天行数据</a>提供的网络API。</p><p>我们可以先通过pip安装requests及其依赖库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">pip install requests<br></code></pre></td></tr></table></figure><p>如果使用PyCharm作为开发工具，可以直接在代码中书写<code>import requests</code>，然后通过代码修复功能来自动下载安装requests。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><br><span class="hljs-keyword">import</span> requests<br><br><br><span class="hljs-comment"># 继承Thread类创建自定义的线程类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadHanlder</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, url</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.url = url<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        filename = self.url[self.url.rfind(<span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>:]<br>        resp = requests.get(self.url)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/Users/Hao/&#x27;</span> + filename, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(resp.content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 通过requests模块的get函数获取网络资源</span><br>    <span class="hljs-comment"># 下面的代码中使用了天行数据接口提供的网络API</span><br>    <span class="hljs-comment"># 要使用该数据接口需要在天行数据的网站上注册</span><br>    <span class="hljs-comment"># 然后用自己的Key替换掉下面代码的中APIKey即可</span><br>    resp = requests.get(<br>        <span class="hljs-string">&#x27;http://api.tianapi.com/meinv/?key=APIKey&amp;num=10&#x27;</span>)<br>    <span class="hljs-comment"># 将服务器返回的JSON格式的数据解析为字典</span><br>    data_model = resp.json()<br>    <span class="hljs-keyword">for</span> mm_dict <span class="hljs-keyword">in</span> data_model[<span class="hljs-string">&#x27;newslist&#x27;</span>]:<br>        url = mm_dict[<span class="hljs-string">&#x27;picUrl&#x27;</span>]<br>        <span class="hljs-comment"># 通过多线程的方式实现图片下载</span><br>        DownloadHanlder(url).start()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="基于传输层协议的套接字编程"><a href="#基于传输层协议的套接字编程" class="headerlink" title="基于传输层协议的套接字编程"></a>基于传输层协议的套接字编程</h3><p>套接字这个词对很多不了解网络编程的人来说显得非常晦涩和陌生，其实说得通俗点，套接字就是一套用<a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C语言</a>写成的应用程序开发库，主要用于实现进程间通信和网络编程，在网络应用开发中被广泛使用。在Python中也可以基于套接字来使用传输层提供的传输服务，并基于此开发自己的网络应用。实际开发中使用的套接字可以分为三类：流套接字（TCP套接字）、数据报套接字和原始套接字。</p><h4 id="TCP套接字"><a href="#TCP套接字" class="headerlink" title="TCP套接字"></a>TCP套接字</h4><p>所谓TCP套接字就是使用TCP协议提供的传输服务来实现网络通信的编程接口。在Python中可以通过创建socket对象并指定type属性为SOCK_STREAM来使用TCP套接字。由于一台主机可能拥有多个IP地址，而且很有可能会配置多个不同的服务，所以作为服务器端的程序，需要在创建套接字对象后将其绑定到指定的IP地址和端口上。这里的端口并不是物理设备而是对IP地址的扩展，用于区分不同的服务，例如我们通常将HTTP服务跟80端口绑定，而MySQL数据库服务默认绑定在3306端口，这样当服务器收到用户请求时就可以根据端口号来确定到底用户请求的是HTTP服务器还是数据库服务器提供的服务。端口的取值范围是0~65535，而1024以下的端口我们通常称之为“著名端口”（留给像FTP、HTTP、SMTP等“著名服务”使用的端口，有的地方也称之为“周知端口”），自定义的服务通常不使用这些端口，除非自定义的是HTTP或FTP这样的著名服务。</p><p>下面的代码实现了一个提供时间日期的服务器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> socket, SOCK_STREAM, AF_INET<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 1.创建套接字对象并指定使用哪种传输服务</span><br>    <span class="hljs-comment"># family=AF_INET - IPv4地址</span><br>    <span class="hljs-comment"># family=AF_INET6 - IPv6地址</span><br>    <span class="hljs-comment"># type=SOCK_STREAM - TCP套接字</span><br>    <span class="hljs-comment"># type=SOCK_DGRAM - UDP套接字</span><br>    <span class="hljs-comment"># type=SOCK_RAW - 原始套接字</span><br>    server = socket(family=AF_INET, <span class="hljs-built_in">type</span>=SOCK_STREAM)<br>    <span class="hljs-comment"># 2.绑定IP地址和端口(端口用于区分不同的服务)</span><br>    <span class="hljs-comment"># 同一时间在同一个端口上只能绑定一个服务否则报错</span><br>    server.bind((<span class="hljs-string">&#x27;192.168.1.2&#x27;</span>, <span class="hljs-number">6789</span>))<br>    <span class="hljs-comment"># 3.开启监听 - 监听客户端连接到服务器</span><br>    <span class="hljs-comment"># 参数512可以理解为连接队列的大小</span><br>    server.listen(<span class="hljs-number">512</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;服务器启动开始监听...&#x27;</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment"># 4.通过循环接收客户端的连接并作出相应的处理(提供服务)</span><br>        <span class="hljs-comment"># accept方法是一个阻塞方法如果没有客户端连接到服务器代码不会向下执行</span><br>        <span class="hljs-comment"># accept方法返回一个元组其中的第一个元素是客户端对象</span><br>        <span class="hljs-comment"># 第二个元素是连接到服务器的客户端的地址(由IP和端口两部分构成)</span><br>        client, addr = server.accept()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(addr) + <span class="hljs-string">&#x27;连接到了服务器.&#x27;</span>)<br>        <span class="hljs-comment"># 5.发送数据</span><br>        client.send(<span class="hljs-built_in">str</span>(datetime.now()).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>        <span class="hljs-comment"># 6.断开连接</span><br>        client.close()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>运行服务器程序后我们可以通过Windows系统的telnet来访问该服务器，结果如下图所示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">telnet 192.168.1.2 6789<br></code></pre></td></tr></table></figure><p><img src="/images/pasted-77.png" alt="upload successful"></p><p>当然我们也可以通过Python的程序来实现TCP客户端的功能，相较于实现服务器程序，实现客户端程序就简单多了，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> socket<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 1.创建套接字对象默认使用IPv4和TCP协议</span><br>    client = socket()<br>    <span class="hljs-comment"># 2.连接到服务器(需要指定IP地址和端口)</span><br>    client.connect((<span class="hljs-string">&#x27;192.168.1.2&#x27;</span>, <span class="hljs-number">6789</span>))<br>    <span class="hljs-comment"># 3.从服务器接收数据</span><br>    <span class="hljs-built_in">print</span>(client.recv(<span class="hljs-number">1024</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    client.close()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>需要注意的是，上面的服务器并没有使用多线程或者异步I&#x2F;O的处理方式，这也就意味着当服务器与一个客户端处于通信状态时，其他的客户端只能排队等待。很显然，这样的服务器并不能满足我们的需求，我们需要的服务器是能够同时接纳和处理多个用户请求的。下面我们来设计一个使用多线程技术处理多个用户请求的服务器，该服务器会向连接到服务器的客户端发送一张图片。</p><p>服务器端代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> socket, SOCK_STREAM, AF_INET<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode<br><span class="hljs-keyword">from</span> json <span class="hljs-keyword">import</span> dumps<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <br>    <span class="hljs-comment"># 自定义线程类</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileTransferHandler</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, cclient</span>):<br>            <span class="hljs-built_in">super</span>().__init__()<br>            self.cclient = cclient<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>            my_dict = &#123;&#125;<br>            my_dict[<span class="hljs-string">&#x27;filename&#x27;</span>] = <span class="hljs-string">&#x27;guido.jpg&#x27;</span><br>            <span class="hljs-comment"># JSON是纯文本不能携带二进制数据</span><br>            <span class="hljs-comment"># 所以图片的二进制数据要处理成base64编码</span><br>            my_dict[<span class="hljs-string">&#x27;filedata&#x27;</span>] = data<br>            <span class="hljs-comment"># 通过dumps函数将字典处理成JSON字符串</span><br>            json_str = dumps(my_dict)<br>            <span class="hljs-comment"># 发送JSON字符串</span><br>            self.cclient.send(json_str.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>            self.cclient.close()<br><br>    <span class="hljs-comment"># 1.创建套接字对象并指定使用哪种传输服务</span><br>    server = socket()<br>    <span class="hljs-comment"># 2.绑定IP地址和端口(区分不同的服务)</span><br>    server.bind((<span class="hljs-string">&#x27;192.168.1.2&#x27;</span>, <span class="hljs-number">5566</span>))<br>    <span class="hljs-comment"># 3.开启监听 - 监听客户端连接到服务器</span><br>    server.listen(<span class="hljs-number">512</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;服务器启动开始监听...&#x27;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;guido.jpg&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-comment"># 将二进制数据处理成base64再解码成字符串</span><br>        data = b64encode(f.read()).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        client, addr = server.accept()<br>        <span class="hljs-comment"># 启动一个线程来处理客户端的请求</span><br>        FileTransferHandler(client).start()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>客户端代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">from</span> json <span class="hljs-keyword">import</span> loads<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    client = socket()<br>    client.connect((<span class="hljs-string">&#x27;192.168.1.2&#x27;</span>, <span class="hljs-number">5566</span>))<br>    <span class="hljs-comment"># 定义一个保存二进制数据的对象</span><br>    in_data = <span class="hljs-built_in">bytes</span>()<br>    <span class="hljs-comment"># 由于不知道服务器发送的数据有多大每次接收1024字节</span><br>    data = client.recv(<span class="hljs-number">1024</span>)<br>    <span class="hljs-keyword">while</span> data:<br>        <span class="hljs-comment"># 将收到的数据拼接起来</span><br>        in_data += data<br>        data = client.recv(<span class="hljs-number">1024</span>)<br>    <span class="hljs-comment"># 将收到的二进制数据解码成JSON字符串并转换成字典</span><br>    <span class="hljs-comment"># loads函数的作用就是将JSON字符串转成字典对象</span><br>    my_dict = loads(in_data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    filename = my_dict[<span class="hljs-string">&#x27;filename&#x27;</span>]<br>    filedata = my_dict[<span class="hljs-string">&#x27;filedata&#x27;</span>].encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/Users/Hao/&#x27;</span> + filename, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-comment"># 将base64格式的数据解码成二进制数据并写入文件</span><br>        f.write(b64decode(filedata))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;图片已保存.&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>在这个案例中，我们使用了JSON作为数据传输的格式（通过JSON格式对传输的数据进行了序列化和反序列化的操作），但是JSON并不能携带二进制数据，因此对图片的二进制数据进行了Base64编码的处理。Base64是一种用64个字符表示所有二进制数据的编码方式，通过将二进制数据每6位一组的方式重新组织，刚好可以使用0~9的数字、大小写字母以及“+”和“&#x2F;”总共64个字符表示从<code>000000</code>到<code>111111</code>的64种状态。<a href="https://zh.wikipedia.org/wiki/Base64">维基百科</a>上有关于Base64编码的详细讲解，不熟悉Base64的读者可以自行阅读。</p><blockquote><p><strong>说明：</strong> 上面的代码主要为了讲解网络编程的相关内容因此并没有对异常状况进行处理，请读者自行添加异常处理代码来增强程序的健壮性。</p></blockquote><h4 id="UDP套接字"><a href="#UDP套接字" class="headerlink" title="UDP套接字"></a>UDP套接字</h4><p>传输层除了有可靠的传输协议TCP之外，还有一种非常轻便的传输协议叫做用户数据报协议，简称UDP。TCP和UDP都是提供端到端传输服务的协议，二者的差别就如同打电话和发短信的区别，后者不对传输的可靠性和可达性做出任何承诺从而避免了TCP中握手和重传的开销，所以在强调性能和而不是数据完整性的场景中（例如传输网络音视频数据），UDP可能是更好的选择。可能大家会注意到一个现象，就是在观看网络视频时，有时会出现卡顿，有时会出现花屏，这无非就是部分数据传丢或传错造成的。在Python中也可以使用UDP套接字来创建网络应用，对此我们不进行赘述，有兴趣的读者可以自行研究。</p><h3 id="网络应用开发"><a href="#网络应用开发" class="headerlink" title="网络应用开发"></a>网络应用开发</h3><h4 id="发送电子邮件"><a href="#发送电子邮件" class="headerlink" title="发送电子邮件"></a>发送电子邮件</h4><p>在即时通信软件如此发达的今天，电子邮件仍然是互联网上使用最为广泛的应用之一，公司向应聘者发出录用通知、网站向用户发送一个激活账号的链接、银行向客户推广它们的理财产品等几乎都是通过电子邮件来完成的，而这些任务应该都是由程序自动完成的。</p><p>就像我们可以用HTTP（超文本传输协议）来访问一个网站一样，发送邮件要使用SMTP（简单邮件传输协议），SMTP也是一个建立在TCP（传输控制协议）提供的可靠数据传输服务的基础上的应用级协议，它规定了邮件的发送者如何跟发送邮件的服务器进行通信的细节，而Python中的smtplib模块将这些操作简化成了几个简单的函数。</p><p>下面的代码演示了如何在Python发送邮件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> smtplib <span class="hljs-keyword">import</span> SMTP<br><span class="hljs-keyword">from</span> email.header <span class="hljs-keyword">import</span> Header<br><span class="hljs-keyword">from</span> email.mime.text <span class="hljs-keyword">import</span> MIMEText<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 请自行修改下面的邮件发送者和接收者</span><br>    sender = <span class="hljs-string">&#x27;abcdefg@126.com&#x27;</span><br>    receivers = [<span class="hljs-string">&#x27;uvwxyz@qq.com&#x27;</span>, <span class="hljs-string">&#x27;uvwxyz@126.com&#x27;</span>]<br>    message = MIMEText(<span class="hljs-string">&#x27;用Python发送邮件的示例代码.&#x27;</span>, <span class="hljs-string">&#x27;plain&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    message[<span class="hljs-string">&#x27;From&#x27;</span>] = Header(<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    message[<span class="hljs-string">&#x27;To&#x27;</span>] = Header(<span class="hljs-string">&#x27;骆昊&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    message[<span class="hljs-string">&#x27;Subject&#x27;</span>] = Header(<span class="hljs-string">&#x27;示例代码实验邮件&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    smtper = SMTP(<span class="hljs-string">&#x27;smtp.126.com&#x27;</span>)<br>    <span class="hljs-comment"># 请自行修改下面的登录口令</span><br>    smtper.login(sender, <span class="hljs-string">&#x27;secretpass&#x27;</span>)<br>    smtper.sendmail(sender, receivers, message.as_string())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;邮件发送完成!&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>如果要发送带有附件的邮件，那么可以按照下面的方式进行操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> smtplib <span class="hljs-keyword">import</span> SMTP<br><span class="hljs-keyword">from</span> email.header <span class="hljs-keyword">import</span> Header<br><span class="hljs-keyword">from</span> email.mime.text <span class="hljs-keyword">import</span> MIMEText<br><span class="hljs-keyword">from</span> email.mime.image <span class="hljs-keyword">import</span> MIMEImage<br><span class="hljs-keyword">from</span> email.mime.multipart <span class="hljs-keyword">import</span> MIMEMultipart<br><br><span class="hljs-keyword">import</span> urllib<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 创建一个带附件的邮件消息对象</span><br>    message = MIMEMultipart()<br>    <br>    <span class="hljs-comment"># 创建文本内容</span><br>    text_content = MIMEText(<span class="hljs-string">&#x27;附件中有本月数据请查收&#x27;</span>, <span class="hljs-string">&#x27;plain&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    message[<span class="hljs-string">&#x27;Subject&#x27;</span>] = Header(<span class="hljs-string">&#x27;本月数据&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-comment"># 将文本内容添加到邮件消息对象中</span><br>    message.attach(text_content)<br><br>    <span class="hljs-comment"># 读取文件并将文件作为附件添加到邮件消息对象中</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/Users/Hao/Desktop/hello.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        txt = MIMEText(f.read(), <span class="hljs-string">&#x27;base64&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        txt[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;text/plain&#x27;</span><br>        txt[<span class="hljs-string">&#x27;Content-Disposition&#x27;</span>] = <span class="hljs-string">&#x27;attachment; filename=hello.txt&#x27;</span><br>        message.attach(txt)<br>    <span class="hljs-comment"># 读取文件并将文件作为附件添加到邮件消息对象中</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/Users/Hao/Desktop/汇总数据.xlsx&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        xls = MIMEText(f.read(), <span class="hljs-string">&#x27;base64&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        xls[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;application/vnd.ms-excel&#x27;</span><br>        xls[<span class="hljs-string">&#x27;Content-Disposition&#x27;</span>] = <span class="hljs-string">&#x27;attachment; filename=month-data.xlsx&#x27;</span><br>        message.attach(xls)<br>    <br>    <span class="hljs-comment"># 创建SMTP对象</span><br>    smtper = SMTP(<span class="hljs-string">&#x27;smtp.126.com&#x27;</span>)<br>    <span class="hljs-comment"># 开启安全连接</span><br>    <span class="hljs-comment"># smtper.starttls()</span><br>    sender = <span class="hljs-string">&#x27;abcdefg@126.com&#x27;</span><br>    receivers = [<span class="hljs-string">&#x27;uvwxyz@qq.com&#x27;</span>]<br>    <span class="hljs-comment"># 登录到SMTP服务器</span><br>    <span class="hljs-comment"># 请注意此处不是使用密码而是邮件客户端授权码进行登录</span><br>    <span class="hljs-comment"># 对此有疑问的读者可以联系自己使用的邮件服务器客服</span><br>    smtper.login(sender, <span class="hljs-string">&#x27;secretpass&#x27;</span>)<br>    <span class="hljs-comment"># 发送邮件</span><br>    smtper.sendmail(sender, receivers, message.as_string())<br>    <span class="hljs-comment"># 与邮件服务器断开连接</span><br>    smtper.quit()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;发送完成!&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h4 id="发送短信"><a href="#发送短信" class="headerlink" title="发送短信"></a>发送短信</h4><p>发送短信也是项目中常见的功能，网站的注册码、验证码、营销信息基本上都是通过短信来发送给用户的。在下面的代码中我们使用了<a href="http://www.ihuyi.com/">互亿无线</a>短信平台（该平台为注册用户提供了50条免费短信以及常用开发语言发送短信的demo，可以登录该网站并在用户自服务页面中对短信进行配置）提供的API接口实现了发送短信的服务，当然国内的短信平台很多，读者可以根据自己的需要进行选择（通常会考虑费用预算、短信达到率、使用的难易程度等指标），如果需要在商业项目中使用短信服务建议购买短信平台提供的套餐服务。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> http.client<br><span class="hljs-keyword">import</span> json<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    host  = <span class="hljs-string">&quot;106.ihuyi.com&quot;</span><br>    sms_send_uri = <span class="hljs-string">&quot;/webservice/sms.php?method=Submit&quot;</span><br>    <span class="hljs-comment"># 下面的参数需要填入自己注册的账号和对应的密码</span><br>    params = urllib.parse.urlencode(&#123;<span class="hljs-string">&#x27;account&#x27;</span>: <span class="hljs-string">&#x27;你自己的账号&#x27;</span>, <span class="hljs-string">&#x27;password&#x27;</span> : <span class="hljs-string">&#x27;你自己的密码&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>: <span class="hljs-string">&#x27;您的验证码是：147258。请不要把验证码泄露给其他人。&#x27;</span>, <span class="hljs-string">&#x27;mobile&#x27;</span>: <span class="hljs-string">&#x27;接收者的手机号&#x27;</span>, <span class="hljs-string">&#x27;format&#x27;</span>:<span class="hljs-string">&#x27;json&#x27;</span> &#125;)<br>    <span class="hljs-built_in">print</span>(params)<br>    headers = &#123;<span class="hljs-string">&#x27;Content-type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>, <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;text/plain&#x27;</span>&#125;<br>    conn = http.client.HTTPConnection(host, port=<span class="hljs-number">80</span>, timeout=<span class="hljs-number">30</span>)<br>    conn.request(<span class="hljs-string">&#x27;POST&#x27;</span>, sms_send_uri, params, headers)<br>    response = conn.getresponse()<br>    response_str = response.read()<br>    jsonstr = response_str.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(json.loads(jsonstr))<br>    conn.close()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python100day</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python100day-13</title>
    <link href="/2022/08/03/python100day-13/"/>
    <url>/2022/08/03/python100day-13/</url>
    
    <content type="html"><![CDATA[<h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p>今天我们使用的计算机早已进入多CPU或多核时代，而我们使用的操作系统都是支持“多任务”的操作系统，这使得我们可以同时运行多个程序，也可以将一个程序分解为若干个相对独立的子任务，让多个子任务并发的执行，从而缩短程序的执行时间，同时也让用户获得更好的体验。因此在当下不管是用什么编程语言进行开发，实现让程序同时执行多个任务也就是常说的“并发编程”，应该是程序员必备技能之一。为此，我们需要先讨论两个概念，一个叫进程，一个叫线程。</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>进程就是操作系统中执行的一个程序，操作系统以进程为单位分配存储空间，每个进程都有自己的地址空间、数据栈以及其他用于跟踪进程执行的辅助数据，操作系统管理所有进程的执行，为它们合理的分配资源。进程可以通过fork或spawn的方式来创建新的进程来执行其他的任务，不过新的进程也有自己独立的内存空间，因此必须通过进程间通信机制（IPC，Inter-Process Communication）来实现数据共享，具体的方式包括管道、信号、套接字、共享内存区等。</p><p>一个进程还可以拥有多个并发的执行线索，简单的说就是拥有多个可以获得CPU调度的执行单元，这就是所谓的线程。由于线程在同一个进程下，它们可以共享相同的上下文，因此相对于进程而言，线程间的信息共享和通信更加容易。当然在单核CPU系统中，真正的并发是不可能的，因为在某个时刻能够获得CPU的只有唯一的一个线程，多个线程共享了CPU的执行时间。使用多线程实现并发编程为程序带来的好处是不言而喻的，最主要的体现在提升程序的性能和改善用户体验，今天我们使用的软件几乎都用到了多线程技术，这一点可以利用系统自带的进程监控工具（如macOS中的“活动监视器”、Windows中的“任务管理器”）来证实，如下图所示。</p><p><img src="/./res/macos-monitor.png"></p><p>当然多线程也并不是没有坏处，站在其他进程的角度，多线程的程序对其他程序并不友好，因为它占用了更多的CPU执行时间，导致其他程序无法获得足够的CPU执行时间；另一方面，站在开发者的角度，编写和调试多线程的程序都对开发者有较高的要求，对于初学者来说更加困难。</p><p>Python既支持多进程又支持多线程，因此使用Python实现并发编程主要有3种方式：多进程、多线程、多进程+多线程。</p><h3 id="Python中的多进程"><a href="#Python中的多进程" class="headerlink" title="Python中的多进程"></a>Python中的多进程</h3><p>Unix和Linux操作系统上提供了<code>fork()</code>系统调用来创建进程，调用<code>fork()</code>函数的是父进程，创建出的是子进程，子进程是父进程的一个拷贝，但是子进程拥有自己的PID。<code>fork()</code>函数非常特殊它会返回两次，父进程中可以通过<code>fork()</code>函数的返回值得到子进程的PID，而子进程中的返回值永远都是0。Python的os模块提供了<code>fork()</code>函数。由于Windows系统没有<code>fork()</code>调用，因此要实现跨平台的多进程编程，可以使用multiprocessing模块的<code>Process</code>类来创建子进程，而且该模块还提供了更高级的封装，例如批量启动进程的进程池（<code>Pool</code>）、用于进程间通信的队列（<code>Queue</code>）和管道（<code>Pipe</code>）等。</p><p>下面用一个下载文件的例子来说明使用多进程和不使用多进程到底有什么差别，先看看下面的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time, sleep<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download_task</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开始下载%s...&#x27;</span> % filename)<br>    time_to_download = randint(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>)<br>    sleep(time_to_download)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s下载完成! 耗费了%d秒&#x27;</span> % (filename, time_to_download))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    start = time()<br>    download_task(<span class="hljs-string">&#x27;Python从入门到住院.pdf&#x27;</span>)<br>    download_task(<span class="hljs-string">&#x27;Peking Hot.avi&#x27;</span>)<br>    end = time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;总共耗费了%.2f秒.&#x27;</span> % (end - start))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>下面是运行程序得到的一次运行结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Shell">开始下载Python从入门到住院.pdf...<br>Python从入门到住院.pdf下载完成! 耗费了6秒<br>开始下载Peking Hot.avi...<br>Peking Hot.avi下载完成! 耗费了7秒<br>总共耗费了13.01秒.<br></code></pre></td></tr></table></figure><p>从上面的例子可以看出，如果程序中的代码只能按顺序一点点的往下执行，那么即使执行两个毫不相关的下载任务，也需要先等待一个文件下载完成后才能开始下一个下载任务，很显然这并不合理也没有效率。接下来我们使用多进程的方式将两个下载任务放到不同的进程中，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> getpid<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time, sleep<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download_task</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;启动下载进程，进程号[%d].&#x27;</span> % getpid())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开始下载%s...&#x27;</span> % filename)<br>    time_to_download = randint(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>)<br>    sleep(time_to_download)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s下载完成! 耗费了%d秒&#x27;</span> % (filename, time_to_download))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    start = time()<br>    p1 = Process(target=download_task, args=(<span class="hljs-string">&#x27;Python从入门到住院.pdf&#x27;</span>, ))<br>    p1.start()<br>    p2 = Process(target=download_task, args=(<span class="hljs-string">&#x27;Peking Hot.avi&#x27;</span>, ))<br>    p2.start()<br>    p1.join()<br>    p2.join()<br>    end = time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;总共耗费了%.2f秒.&#x27;</span> % (end - start))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>在上面的代码中，我们通过<code>Process</code>类创建了进程对象，通过<code>target</code>参数我们传入一个函数来表示进程启动后要执行的代码，后面的<code>args</code>是一个元组，它代表了传递给函数的参数。<code>Process</code>对象的<code>start</code>方法用来启动进程，而<code>join</code>方法表示等待进程执行结束。运行上面的代码可以明显发现两个下载任务“同时”启动了，而且程序的执行时间将大大缩短，不再是两个任务的时间总和。下面是程序的一次执行结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Shell">启动下载进程，进程号[1530].<br>开始下载Python从入门到住院.pdf...<br>启动下载进程，进程号[1531].<br>开始下载Peking Hot.avi...<br>Peking Hot.avi下载完成! 耗费了7秒<br>Python从入门到住院.pdf下载完成! 耗费了10秒<br>总共耗费了10.01秒.<br></code></pre></td></tr></table></figure><p>我们也可以使用subprocess模块中的类和函数来创建和启动子进程，然后通过管道来和子进程通信，这些内容我们不在此进行讲解，有兴趣的读者可以自己了解这些知识。接下来我们将重点放在如何实现两个进程间的通信。我们启动两个进程，一个输出Ping，一个输出Pong，两个进程输出的Ping和Pong加起来一共10个。听起来很简单吧，但是如果这样写可是错的哦。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><br>counter = <span class="hljs-number">0</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub_task</span>(<span class="hljs-params">string</span>):<br>    <span class="hljs-keyword">global</span> counter<br>    <span class="hljs-keyword">while</span> counter &lt; <span class="hljs-number">10</span>:<br>        <span class="hljs-built_in">print</span>(string, end=<span class="hljs-string">&#x27;&#x27;</span>, flush=<span class="hljs-literal">True</span>)<br>        counter += <span class="hljs-number">1</span><br>        sleep(<span class="hljs-number">0.01</span>)<br><br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    Process(target=sub_task, args=(<span class="hljs-string">&#x27;Ping&#x27;</span>, )).start()<br>    Process(target=sub_task, args=(<span class="hljs-string">&#x27;Pong&#x27;</span>, )).start()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>看起来没毛病，但是最后的结果是Ping和Pong各输出了10个，Why？当我们在程序中创建进程的时候，子进程复制了父进程及其所有的数据结构，每个子进程有自己独立的内存空间，这也就意味着两个子进程中各有一个<code>counter</code>变量，所以结果也就可想而知了。要解决这个问题比较简单的办法是使用multiprocessing模块中的<code>Queue</code>类，它是可以被多个进程共享的队列，底层是通过管道和<a href="">信号量（semaphore）</a>机制来实现的，有兴趣的读者可以自己尝试一下。</p><h3 id="Python中的多线程"><a href="#Python中的多线程" class="headerlink" title="Python中的多线程"></a>Python中的多线程</h3><p>在Python早期的版本中就引入了thread模块（现在名为_thread）来实现多线程编程，然而该模块过于底层，而且很多功能都没有提供，因此目前的多线程开发我们推荐使用threading模块，该模块对多线程编程提供了更好的面向对象的封装。我们把刚才下载文件的例子用多线程的方式来实现一遍。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time, sleep<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开始下载%s...&#x27;</span> % filename)<br>    time_to_download = randint(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>)<br>    sleep(time_to_download)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s下载完成! 耗费了%d秒&#x27;</span> % (filename, time_to_download))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    start = time()<br>    t1 = Thread(target=download, args=(<span class="hljs-string">&#x27;Python从入门到住院.pdf&#x27;</span>,))<br>    t1.start()<br>    t2 = Thread(target=download, args=(<span class="hljs-string">&#x27;Peking Hot.avi&#x27;</span>,))<br>    t2.start()<br>    t1.join()<br>    t2.join()<br>    end = time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;总共耗费了%.3f秒&#x27;</span> % (end - start))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>我们可以直接使用threading模块的<code>Thread</code>类来创建线程，但是我们之前讲过一个非常重要的概念叫“继承”，我们可以从已有的类创建新类，因此也可以通过继承<code>Thread</code>类的方式来创建自定义的线程类，然后再创建线程对象并启动线程。代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time, sleep<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadTask</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, filename</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self._filename = filename<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开始下载%s...&#x27;</span> % self._filename)<br>        time_to_download = randint(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>)<br>        sleep(time_to_download)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s下载完成! 耗费了%d秒&#x27;</span> % (self._filename, time_to_download))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    start = time()<br>    t1 = DownloadTask(<span class="hljs-string">&#x27;Python从入门到住院.pdf&#x27;</span>)<br>    t1.start()<br>    t2 = DownloadTask(<span class="hljs-string">&#x27;Peking Hot.avi&#x27;</span>)<br>    t2.start()<br>    t1.join()<br>    t2.join()<br>    end = time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;总共耗费了%.2f秒.&#x27;</span> % (end - start))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>因为多个线程可以共享进程的内存空间，因此要实现多个线程间的通信相对简单，大家能想到的最直接的办法就是设置一个全局变量，多个线程共享这个全局变量即可。但是当多个线程共享同一个变量（我们通常称之为“资源”）的时候，很有可能产生不可控的结果从而导致程序失效甚至崩溃。如果一个资源被多个线程竞争使用，那么我们通常称之为“临界资源”，对“临界资源”的访问需要加上保护，否则资源会处于“混乱”的状态。下面的例子演示了100个线程向同一个银行账户转账（转入1元钱）的场景，在这个例子中，银行账户就是一个临界资源，在没有保护的情况下我们很有可能会得到错误的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self._balance = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">deposit</span>(<span class="hljs-params">self, money</span>):<br>        <span class="hljs-comment"># 计算存款后的余额</span><br>        new_balance = self._balance + money<br>        <span class="hljs-comment"># 模拟受理存款业务需要0.01秒的时间</span><br>        sleep(<span class="hljs-number">0.01</span>)<br>        <span class="hljs-comment"># 修改账户余额</span><br>        self._balance = new_balance<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">balance</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._balance<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddMoneyThread</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, account, money</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self._account = account<br>        self._money = money<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        self._account.deposit(self._money)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    account = Account()<br>    threads = []<br>    <span class="hljs-comment"># 创建100个存款的线程向同一个账户中存钱</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        t = AddMoneyThread(account, <span class="hljs-number">1</span>)<br>        threads.append(t)<br>        t.start()<br>    <span class="hljs-comment"># 等所有存款的线程都执行完毕</span><br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.join()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;账户余额为: ￥%d元&#x27;</span> % account.balance)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>运行上面的程序，结果让人大跌眼镜，100个线程分别向账户中转入1元钱，结果居然远远小于100元。之所以出现这种情况是因为我们没有对银行账户这个“临界资源”加以保护，多个线程同时向账户中存钱时，会一起执行到<code>new_balance = self._balance + money</code>这行代码，多个线程得到的账户余额都是初始状态下的<code>0</code>，所以都是<code>0</code>上面做了+1的操作，因此得到了错误的结果。在这种情况下，“锁”就可以派上用场了。我们可以通过“锁”来保护“临界资源”，只有获得“锁”的线程才能访问“临界资源”，而其他没有得到“锁”的线程只能被阻塞起来，直到获得“锁”的线程释放了“锁”，其他线程才有机会获得“锁”，进而访问被保护的“临界资源”。下面的代码演示了如何使用“锁”来保护对银行账户的操作，从而获得正确的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread, Lock<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self._balance = <span class="hljs-number">0</span><br>        self._lock = Lock()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">deposit</span>(<span class="hljs-params">self, money</span>):<br>        <span class="hljs-comment"># 先获取锁才能执行后续的代码</span><br>        self._lock.acquire()<br>        <span class="hljs-keyword">try</span>:<br>            new_balance = self._balance + money<br>            sleep(<span class="hljs-number">0.01</span>)<br>            self._balance = new_balance<br>        <span class="hljs-keyword">finally</span>:<br>            <span class="hljs-comment"># 在finally中执行释放锁的操作保证正常异常锁都能释放</span><br>            self._lock.release()<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">balance</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._balance<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddMoneyThread</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, account, money</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self._account = account<br>        self._money = money<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        self._account.deposit(self._money)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    account = Account()<br>    threads = []<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        t = AddMoneyThread(account, <span class="hljs-number">1</span>)<br>        threads.append(t)<br>        t.start()<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.join()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;账户余额为: ￥%d元&#x27;</span> % account.balance)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>比较遗憾的一件事情是Python的多线程并不能发挥CPU的多核特性，这一点只要启动几个执行死循环的线程就可以得到证实了。之所以如此，是因为Python的解释器有一个“全局解释器锁”（GIL）的东西，任何线程执行前必须先获得GIL锁，然后每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行，这是一个历史遗留问题，但是即便如此，就如我们之前举的例子，使用多线程在提升执行效率和改善用户体验方面仍然是有积极意义的。</p><h3 id="多进程还是多线程"><a href="#多进程还是多线程" class="headerlink" title="多进程还是多线程"></a>多进程还是多线程</h3><p>无论是多进程还是多线程，只要数量一多，效率肯定上不去，为什么呢？我们打个比方，假设你不幸正在准备中考，每天晚上需要做语文、数学、英语、物理、化学这5科的作业，每项作业耗时1小时。如果你先花1小时做语文作业，做完了，再花1小时做数学作业，这样，依次全部做完，一共花5小时，这种方式称为单任务模型。如果你打算切换到多任务模型，可以先做1分钟语文，再切换到数学作业，做1分钟，再切换到英语，以此类推，只要切换速度足够快，这种方式就和单核CPU执行多任务是一样的了，以旁观者的角度来看，你就正在同时写5科作业。</p><p>但是，切换作业是有代价的，比如从语文切到数学，要先收拾桌子上的语文书本、钢笔（这叫保存现场），然后，打开数学课本、找出圆规直尺（这叫准备新环境），才能开始做数学作业。操作系统在切换进程或者线程时也是一样的，它需要先保存当前执行的现场环境（CPU寄存器状态、内存页等），然后，把新任务的执行环境准备好（恢复上次的寄存器状态，切换内存页等），才能开始执行。这个切换过程虽然很快，但是也需要耗费时间。如果有几千个任务同时进行，操作系统可能就主要忙着切换任务，根本没有多少时间去执行任务了，这种情况最常见的就是硬盘狂响，点窗口无反应，系统处于假死状态。所以，多任务一旦多到一个限度，反而会使得系统性能急剧下降，最终导致所有任务都做不好。</p><p>是否采用多任务的第二个考虑是任务的类型，可以把任务分为计算密集型和I&#x2F;O密集型。计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如对视频进行编码解码或者格式转换等等，这种任务全靠CPU的运算能力，虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低。计算密集型任务由于主要消耗CPU资源，这类任务用Python这样的脚本语言去执行效率通常很低，最能胜任这类任务的是C语言，我们之前提到过Python中有嵌入C&#x2F;C++代码的机制。</p><p>除了计算密集型任务，其他的涉及到网络、存储介质I&#x2F;O的任务都可以视为I&#x2F;O密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待I&#x2F;O操作完成（因为I&#x2F;O的速度远远低于CPU和内存的速度）。对于I&#x2F;O密集型任务，如果启动多任务，就可以减少I&#x2F;O等待时间从而让CPU高效率的运转。有一大类的任务都属于I&#x2F;O密集型任务，这其中包括了我们很快会涉及到的网络应用和Web应用。</p><blockquote><p><strong>说明：</strong> 上面的内容和例子来自于<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000">廖雪峰官方网站的《Python教程》</a>，因为对作者文中的某些观点持有不同的看法，对原文的文字描述做了适当的调整。</p></blockquote><h3 id="单线程-异步I-x2F-O"><a href="#单线程-异步I-x2F-O" class="headerlink" title="单线程+异步I&#x2F;O"></a>单线程+异步I&#x2F;O</h3><p>现代操作系统对I&#x2F;O操作的改进中最为重要的就是支持异步I&#x2F;O。如果充分利用操作系统提供的异步I&#x2F;O支持，就可以用单进程单线程模型来执行多任务，这种全新的模型称为事件驱动模型。Nginx就是支持异步I&#x2F;O的Web服务器，它在单核CPU上采用单进程模型就可以高效地支持多任务。在多核CPU上，可以运行多个进程（数量与CPU核心数相同），充分利用多核CPU。用Node.js开发的服务器端程序也使用了这种工作模式，这也是当下并发编程的一种流行方案。</p><p>在Python语言中，单线程+异步I&#x2F;O的编程模型称为协程，有了协程的支持，就可以基于事件驱动编写高效的多任务程序。协程最大的优势就是极高的执行效率，因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销。协程的第二个优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不用加锁，只需要判断状态就好了，所以执行效率比多线程高很多。如果想要充分利用CPU的多核特性，最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。关于这方面的内容，在后续的课程中会进行讲解。</p><h3 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h3><h4 id="例子1：将耗时间的任务放到线程中以获得更好的用户体验。"><a href="#例子1：将耗时间的任务放到线程中以获得更好的用户体验。" class="headerlink" title="例子1：将耗时间的任务放到线程中以获得更好的用户体验。"></a>例子1：将耗时间的任务放到线程中以获得更好的用户体验。</h4><p>如下所示的界面中，有“下载”和“关于”两个按钮，用休眠的方式模拟点击“下载”按钮会联网下载文件需要耗费10秒的时间，如果不使用“多线程”，我们会发现，当点击“下载”按钮后整个程序的其他部分都被这个耗时间的任务阻塞而无法执行了，这显然是非常糟糕的用户体验，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> tkinter<br><span class="hljs-keyword">import</span> tkinter.messagebox<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>():<br>    <span class="hljs-comment"># 模拟下载任务需要花费10秒钟时间</span><br>    time.sleep(<span class="hljs-number">10</span>)<br>    tkinter.messagebox.showinfo(<span class="hljs-string">&#x27;提示&#x27;</span>, <span class="hljs-string">&#x27;下载完成!&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_about</span>():<br>    tkinter.messagebox.showinfo(<span class="hljs-string">&#x27;关于&#x27;</span>, <span class="hljs-string">&#x27;作者: 骆昊(v1.0)&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    top = tkinter.Tk()<br>    top.title(<span class="hljs-string">&#x27;单线程&#x27;</span>)<br>    top.geometry(<span class="hljs-string">&#x27;200x150&#x27;</span>)<br>    top.wm_attributes(<span class="hljs-string">&#x27;-topmost&#x27;</span>, <span class="hljs-literal">True</span>)<br><br>    panel = tkinter.Frame(top)<br>    button1 = tkinter.Button(panel, text=<span class="hljs-string">&#x27;下载&#x27;</span>, command=download)<br>    button1.pack(side=<span class="hljs-string">&#x27;left&#x27;</span>)<br>    button2 = tkinter.Button(panel, text=<span class="hljs-string">&#x27;关于&#x27;</span>, command=show_about)<br>    button2.pack(side=<span class="hljs-string">&#x27;right&#x27;</span>)<br>    panel.pack(side=<span class="hljs-string">&#x27;bottom&#x27;</span>)<br><br>    tkinter.mainloop()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>如果使用多线程将耗时间的任务放到一个独立的线程中执行，这样就不会因为执行耗时间的任务而阻塞了主线程，修改后的代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> tkinter<br><span class="hljs-keyword">import</span> tkinter.messagebox<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadTaskHandler</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>            time.sleep(<span class="hljs-number">10</span>)<br>            tkinter.messagebox.showinfo(<span class="hljs-string">&#x27;提示&#x27;</span>, <span class="hljs-string">&#x27;下载完成!&#x27;</span>)<br>            <span class="hljs-comment"># 启用下载按钮</span><br>            button1.config(state=tkinter.NORMAL)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>():<br>        <span class="hljs-comment"># 禁用下载按钮</span><br>        button1.config(state=tkinter.DISABLED)<br>        <span class="hljs-comment"># 通过daemon参数将线程设置为守护线程(主程序退出就不再保留执行)</span><br>        <span class="hljs-comment"># 在线程中处理耗时间的下载任务</span><br>        DownloadTaskHandler(daemon=<span class="hljs-literal">True</span>).start()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show_about</span>():<br>        tkinter.messagebox.showinfo(<span class="hljs-string">&#x27;关于&#x27;</span>, <span class="hljs-string">&#x27;作者: 骆昊(v1.0)&#x27;</span>)<br><br>    top = tkinter.Tk()<br>    top.title(<span class="hljs-string">&#x27;单线程&#x27;</span>)<br>    top.geometry(<span class="hljs-string">&#x27;200x150&#x27;</span>)<br>    top.wm_attributes(<span class="hljs-string">&#x27;-topmost&#x27;</span>, <span class="hljs-number">1</span>)<br><br>    panel = tkinter.Frame(top)<br>    button1 = tkinter.Button(panel, text=<span class="hljs-string">&#x27;下载&#x27;</span>, command=download)<br>    button1.pack(side=<span class="hljs-string">&#x27;left&#x27;</span>)<br>    button2 = tkinter.Button(panel, text=<span class="hljs-string">&#x27;关于&#x27;</span>, command=show_about)<br>    button2.pack(side=<span class="hljs-string">&#x27;right&#x27;</span>)<br>    panel.pack(side=<span class="hljs-string">&#x27;bottom&#x27;</span>)<br><br>    tkinter.mainloop()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h4 id="例子2：使用多进程对复杂任务进行“分而治之”。"><a href="#例子2：使用多进程对复杂任务进行“分而治之”。" class="headerlink" title="例子2：使用多进程对复杂任务进行“分而治之”。"></a>例子2：使用多进程对复杂任务进行“分而治之”。</h4><p>我们来完成1~100000000求和的计算密集型任务，这个问题本身非常简单，有点循环的知识就能解决，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    total = <span class="hljs-number">0</span><br>    number_list = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100000001</span>)]<br>    start = time()<br>    <span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> number_list:<br>        total += number<br>    <span class="hljs-built_in">print</span>(total)<br>    end = time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Execution time: %.3fs&#x27;</span> % (end - start))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>在上面的代码中，我故意先去创建了一个列表容器然后填入了100000000个数，这一步其实是比较耗时间的，所以为了公平起见，当我们将这个任务分解到8个进程中去执行的时候，我们暂时也不考虑列表切片操作花费的时间，只是把做运算和合并运算结果的时间统计出来，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process, Queue<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task_handler</span>(<span class="hljs-params">curr_list, result_queue</span>):<br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> curr_list:<br>        total += number<br>    result_queue.put(total)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    processes = []<br>    number_list = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100000001</span>)]<br>    result_queue = Queue()<br>    index = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 启动8个进程将数据切片后进行运算</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        p = Process(target=task_handler,<br>                    args=(number_list[index:index + <span class="hljs-number">12500000</span>], result_queue))<br>        index += <span class="hljs-number">12500000</span><br>        processes.append(p)<br>        p.start()<br>    <span class="hljs-comment"># 开始记录所有进程执行完成花费的时间</span><br>    start = time()<br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> processes:<br>        p.join()<br>    <span class="hljs-comment"># 合并执行结果</span><br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> result_queue.empty():<br>        total += result_queue.get()<br>    <span class="hljs-built_in">print</span>(total)<br>    end = time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Execution time: &#x27;</span>, (end - start), <span class="hljs-string">&#x27;s&#x27;</span>, sep=<span class="hljs-string">&#x27;&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>比较两段代码的执行结果（在我目前使用的MacBook上，上面的代码需要大概6秒左右的时间，而下面的代码只需要不到1秒的时间，再强调一次我们只是比较了运算的时间，不考虑列表创建及切片操作花费的时间），使用多进程后由于获得了更多的CPU执行时间以及更好的利用了CPU的多核特性，明显的减少了程序的执行时间，而且计算量越大效果越明显。当然，如果愿意还可以将多个进程部署在不同的计算机上，做成分布式进程，具体的做法就是通过<code>multiprocessing.managers</code>模块中提供的管理器将<code>Queue</code>对象通过网络共享出来（注册到网络上让其他计算机可以访问），这部分内容也留到爬虫的专题再进行讲解。</p>]]></content>
    
    
    <categories>
      
      <category>python100day</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python100day-12</title>
    <link href="/2022/08/02/python100day-12/"/>
    <url>/2022/08/02/python100day-12/</url>
    
    <content type="html"><![CDATA[<h2 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h2><h3 id="正则表达式相关知识"><a href="#正则表达式相关知识" class="headerlink" title="正则表达式相关知识"></a>正则表达式相关知识</h3><p>在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要，正则表达式就是用于描述这些规则的工具，换句话说正则表达式是一种工具，它定义了字符串的匹配模式（如何检查一个字符串是否有跟某种模式匹配的部分或者从一个字符串中将与模式匹配的部分提取出来或者替换掉）。如果你在Windows操作系统中使用过文件查找并且在指定文件名时使用过通配符（*和?），那么正则表达式也是与之类似的用来进行文本匹配的工具，只不过比起通配符正则表达式更强大，它能更精确地描述你的需求（当然你付出的代价是书写一个正则表达式比打出一个通配符要复杂得多，要知道任何给你带来好处的东西都是有代价的，就如同学习一门编程语言一样），比如你可以编写一个正则表达式，用来查找所有以0开头，后面跟着2-3个数字，然后是一个连字号“-”，最后是7或8位数字的字符串（像028-12345678或0813-7654321），这不就是国内的座机号码吗。最初计算机是为了做数学运算而诞生的，处理的信息基本上都是数值，而今天我们在日常工作中处理的信息基本上都是文本数据，我们希望计算机能够识别和处理符合某些模式的文本，正则表达式就显得非常重要了。今天几乎所有的编程语言都提供了对正则表达式操作的支持，Python通过标准库中的re模块来支持正则表达式操作。</p><p>我们可以考虑下面一个问题：我们从某个地方（可能是一个文本文件，也可能是网络上的一则新闻）获得了一个字符串，希望在字符串中找出手机号和座机号。当然我们可以设定手机号是11位的数字（注意并不是随机的11位数字，因为你没有见过“25012345678”这样的手机号吧）而座机号跟上一段中描述的模式相同，如果不使用正则表达式要完成这个任务就会很麻烦。</p><p>关于正则表达式的相关知识，大家可以阅读一篇非常有名的博客叫<a href="https://deerchao.net/tutorials/regex/regex.htm">《正则表达式30分钟入门教程》</a>，读完这篇文章后你就可以看懂下面的表格，这是我们对正则表达式中的一些基本符号进行的扼要总结。</p><table><thead><tr><th>符号</th><th>解释</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配任意字符</td><td>b.t</td><td>可以匹配bat &#x2F; but &#x2F; b#t &#x2F; b1t等</td></tr><tr><td>\w</td><td>匹配字母&#x2F;数字&#x2F;下划线</td><td>b\wt</td><td>可以匹配bat &#x2F; b1t &#x2F; b_t等<br>但不能匹配b#t</td></tr><tr><td>\s</td><td>匹配空白字符（包括\r、\n、\t等）</td><td>love\syou</td><td>可以匹配love you</td></tr><tr><td>\d</td><td>匹配数字</td><td>\d\d</td><td>可以匹配01 &#x2F; 23 &#x2F; 99等</td></tr><tr><td>\b</td><td>匹配单词的边界</td><td>\bThe\b</td><td></td></tr><tr><td>^</td><td>匹配字符串的开始</td><td>^The</td><td>可以匹配The开头的字符串</td></tr><tr><td>$</td><td>匹配字符串的结束</td><td>.exe$</td><td>可以匹配.exe结尾的字符串</td></tr><tr><td>\W</td><td>匹配非字母&#x2F;数字&#x2F;下划线</td><td>b\Wt</td><td>可以匹配b#t &#x2F; b@t等<br>但不能匹配but &#x2F; b1t &#x2F; b_t等</td></tr><tr><td>\S</td><td>匹配非空白字符</td><td>love\Syou</td><td>可以匹配love#you等<br>但不能匹配love you</td></tr><tr><td>\D</td><td>匹配非数字</td><td>\d\D</td><td>可以匹配9a &#x2F; 3# &#x2F; 0F等</td></tr><tr><td>\B</td><td>匹配非单词边界</td><td>\Bio\B</td><td></td></tr><tr><td>[]</td><td>匹配来自字符集的任意单一字符</td><td>[aeiou]</td><td>可以匹配任一元音字母字符</td></tr><tr><td>[^]</td><td>匹配不在字符集中的任意单一字符</td><td>[^aeiou]</td><td>可以匹配任一非元音字母字符</td></tr><tr><td>*</td><td>匹配0次或多次</td><td>\w*</td><td></td></tr><tr><td>+</td><td>匹配1次或多次</td><td>\w+</td><td></td></tr><tr><td>?</td><td>匹配0次或1次</td><td>\w?</td><td></td></tr><tr><td>{N}</td><td>匹配N次</td><td>\w{3}</td><td></td></tr><tr><td>{M,}</td><td>匹配至少M次</td><td>\w{3,}</td><td></td></tr><tr><td>{M,N}</td><td>匹配至少M次至多N次</td><td>\w{3,6}</td><td></td></tr><tr><td>|</td><td>分支</td><td>foo|bar</td><td>可以匹配foo或者bar</td></tr><tr><td>(?#)</td><td>注释</td><td></td><td></td></tr><tr><td>(exp)</td><td>匹配exp并捕获到自动命名的组中</td><td></td><td></td></tr><tr><td>(?&lt;name&gt;exp)</td><td>匹配exp并捕获到名为name的组中</td><td></td><td></td></tr><tr><td>(?:exp)</td><td>匹配exp但是不捕获匹配的文本</td><td></td><td></td></tr><tr><td>(?&#x3D;exp)</td><td>匹配exp前面的位置</td><td>\b\w+(?&#x3D;ing)</td><td>可以匹配I’m dancing中的danc</td></tr><tr><td>(?&lt;&#x3D;exp)</td><td>匹配exp后面的位置</td><td>(?&lt;&#x3D;\bdanc)\w+\b</td><td>可以匹配I love dancing and reading中的第一个ing</td></tr><tr><td>(?!exp)</td><td>匹配后面不是exp的位置</td><td></td><td></td></tr><tr><td>(?&lt;!exp)</td><td>匹配前面不是exp的位置</td><td></td><td></td></tr><tr><td>*?</td><td>重复任意次，但尽可能少重复</td><td>a.*b<br>a.*?b</td><td>将正则表达式应用于aabab，前者会匹配整个字符串aabab，后者会匹配aab和ab两个字符串</td></tr><tr><td>+?</td><td>重复1次或多次，但尽可能少重复</td><td></td><td></td></tr><tr><td>??</td><td>重复0次或1次，但尽可能少重复</td><td></td><td></td></tr><tr><td>{M,N}?</td><td>重复M到N次，但尽可能少重复</td><td></td><td></td></tr><tr><td>{M,}?</td><td>重复M次以上，但尽可能少重复</td><td></td><td></td></tr></tbody></table><blockquote><p><strong>说明：</strong> 如果需要匹配的字符是正则表达式中的特殊字符，那么可以使用\进行转义处理，例如想匹配小数点可以写成\.就可以了，因为直接写.会匹配任意字符；同理，想匹配圆括号必须写成\(和\)，否则圆括号被视为正则表达式中的分组。</p></blockquote><h3 id="Python对正则表达式的支持"><a href="#Python对正则表达式的支持" class="headerlink" title="Python对正则表达式的支持"></a>Python对正则表达式的支持</h3><p>Python提供了re模块来支持正则表达式相关操作，下面是re模块中的核心函数。</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>compile(pattern, flags&#x3D;0)</td><td>编译正则表达式返回正则表达式对象</td></tr><tr><td>match(pattern, string, flags&#x3D;0)</td><td>用正则表达式匹配字符串 成功返回匹配对象 否则返回None</td></tr><tr><td>search(pattern, string, flags&#x3D;0)</td><td>搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象 否则返回None</td></tr><tr><td>split(pattern, string, maxsplit&#x3D;0, flags&#x3D;0)</td><td>用正则表达式指定的模式分隔符拆分字符串 返回列表</td></tr><tr><td>sub(pattern, repl, string, count&#x3D;0, flags&#x3D;0)</td><td>用指定的字符串替换原字符串中与正则表达式匹配的模式 可以用count指定替换的次数</td></tr><tr><td>fullmatch(pattern, string, flags&#x3D;0)</td><td>match函数的完全匹配（从字符串开头到结尾）版本</td></tr><tr><td>findall(pattern, string, flags&#x3D;0)</td><td>查找字符串所有与正则表达式匹配的模式 返回字符串的列表</td></tr><tr><td>finditer(pattern, string, flags&#x3D;0)</td><td>查找字符串所有与正则表达式匹配的模式 返回一个迭代器</td></tr><tr><td>purge()</td><td>清除隐式编译的正则表达式的缓存</td></tr><tr><td>re.I &#x2F; re.IGNORECASE</td><td>忽略大小写匹配标记</td></tr><tr><td>re.M &#x2F; re.MULTILINE</td><td>多行匹配标记</td></tr></tbody></table><blockquote><p><strong>说明：</strong> 上面提到的re模块中的这些函数，实际开发中也可以用正则表达式对象的方法替代对这些函数的使用，如果一个正则表达式需要重复的使用，那么先通过compile函数编译正则表达式并创建出正则表达式对象无疑是更为明智的选择。</p></blockquote><p>下面我们通过一系列的例子来告诉大家在Python中如何使用正则表达式。</p><h4 id="例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。"><a href="#例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。" class="headerlink" title="例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。"></a>例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">验证输入用户名和QQ号是否有效并给出对应的提示信息</span><br><span class="hljs-string"></span><br><span class="hljs-string">要求：用户名必须由字母、数字或下划线构成且长度在6~20个字符之间，QQ号是5~12的数字且首位不能为0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> re<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    username = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入用户名: &#x27;</span>)<br>    qq = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入QQ号: &#x27;</span>)<br>    <span class="hljs-comment"># match函数的第一个参数是正则表达式字符串或正则表达式对象</span><br>    <span class="hljs-comment"># 第二个参数是要跟正则表达式做匹配的字符串对象</span><br>    m1 = re.match(<span class="hljs-string">r&#x27;^[0-9a-zA-Z_]&#123;6,20&#125;$&#x27;</span>, username)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> m1:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请输入有效的用户名.&#x27;</span>)<br>    m2 = re.match(<span class="hljs-string">r&#x27;^[1-9]\d&#123;4,11&#125;$&#x27;</span>, qq)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> m2:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请输入有效的QQ号.&#x27;</span>)<br>    <span class="hljs-keyword">if</span> m1 <span class="hljs-keyword">and</span> m2:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你输入的信息是有效的!&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><blockquote><p><strong>提示：</strong> 上面在书写正则表达式时使用了“原始字符串”的写法（在字符串前面加上了r），所谓“原始字符串”就是字符串中的每个字符都是它原始的意义，说得更直接一点就是字符串中没有所谓的转义字符啦。因为正则表达式中有很多元字符和需要进行转义的地方，如果不使用原始字符串就需要将反斜杠写作\\，例如表示数字的\d得书写成\\d，这样不仅写起来不方便，阅读的时候也会很吃力。</p></blockquote><h4 id="例子2：从一段文字中提取出国内手机号码。"><a href="#例子2：从一段文字中提取出国内手机号码。" class="headerlink" title="例子2：从一段文字中提取出国内手机号码。"></a>例子2：从一段文字中提取出国内手机号码。</h4><p>下面这张图是截止到2017年底，国内三家运营商推出的手机号段。</p><p><img src="/./res/tel-start-number.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 创建正则表达式对象 使用了前瞻和回顾来保证手机号前后不应该出现数字</span><br>    pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;(?&lt;=\D)1[34578]\d&#123;9&#125;(?=\D)&#x27;</span>)<br>    sentence = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    重要的事情说8130123456789遍，我的手机号是13512346789这个靓号，</span><br><span class="hljs-string">    不是15600998765，也是110或119，王大锤的手机号才是15600998765。</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-comment"># 查找所有匹配并保存到一个列表中</span><br>    mylist = re.findall(pattern, sentence)<br>    <span class="hljs-built_in">print</span>(mylist)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;--------华丽的分隔线--------&#x27;</span>)<br>    <span class="hljs-comment"># 通过迭代器取出匹配对象并获得匹配的内容</span><br>    <span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> pattern.finditer(sentence):<br>        <span class="hljs-built_in">print</span>(temp.group())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;--------华丽的分隔线--------&#x27;</span>)<br>    <span class="hljs-comment"># 通过search函数指定搜索位置找出所有匹配</span><br>    m = pattern.search(sentence)<br>    <span class="hljs-keyword">while</span> m:<br>        <span class="hljs-built_in">print</span>(m.group())<br>        m = pattern.search(sentence, m.end())<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 上面匹配国内手机号的正则表达式并不够好，因为像14开头的号码只有145或147，而上面的正则表达式并没有考虑这种情况，要匹配国内手机号，更好的正则表达式的写法是：<code>(?&lt;=\D)(1[38]\d&#123;9&#125;|14[57]\d&#123;8&#125;|15[0-35-9]\d&#123;8&#125;|17[678]\d&#123;8&#125;)(?=\D)</code>，国内最近好像有19和16开头的手机号了，但是这个暂时不在我们考虑之列。</p></blockquote><h4 id="例子3：替换字符串中的不良内容"><a href="#例子3：替换字符串中的不良内容" class="headerlink" title="例子3：替换字符串中的不良内容"></a>例子3：替换字符串中的不良内容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    sentence = <span class="hljs-string">&#x27;你丫是傻叉吗? 我操你大爷的. Fuck you.&#x27;</span><br>    purified = re.sub(<span class="hljs-string">&#x27;[操肏艹]|fuck|shit|傻[比屄逼叉缺吊屌]|煞笔&#x27;</span>,<br>                      <span class="hljs-string">&#x27;*&#x27;</span>, sentence, flags=re.IGNORECASE)<br>    <span class="hljs-built_in">print</span>(purified)  <span class="hljs-comment"># 你丫是*吗? 我*你大爷的. * you.</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> re模块的正则表达式相关函数中都有一个flags参数，它代表了正则表达式的匹配标记，可以通过该标记来指定匹配时是否忽略大小写、是否进行多行匹配、是否显示调试信息等。如果需要为flags参数指定多个值，可以使用<a href="http://www.runoob.com/python/python-operators.html#ysf5">按位或运算符</a>进行叠加，如<code>flags=re.I | re.M</code>。</p></blockquote><h4 id="例子4：拆分长字符串"><a href="#例子4：拆分长字符串" class="headerlink" title="例子4：拆分长字符串"></a>例子4：拆分长字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    poem = <span class="hljs-string">&#x27;窗前明月光，疑是地上霜。举头望明月，低头思故乡。&#x27;</span><br>    sentence_list = re.split(<span class="hljs-string">r&#x27;[，。, .]&#x27;</span>, poem)<br>    <span class="hljs-keyword">while</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">in</span> sentence_list:<br>        sentence_list.remove(<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(sentence_list)  <span class="hljs-comment"># [&#x27;窗前明月光&#x27;, &#x27;疑是地上霜&#x27;, &#x27;举头望明月&#x27;, &#x27;低头思故乡&#x27;]</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h3><p>如果要从事爬虫类应用的开发，那么正则表达式一定是一个非常好的助手，因为它可以帮助我们迅速的从网页代码中发现某种我们指定的模式并提取出我们需要的信息，当然对于初学者来收，要编写一个正确的适当的正则表达式可能并不是一件容易的事情（当然有些常用的正则表达式可以直接在网上找找），所以实际开发爬虫应用的时候，有很多人会选择<a href="https://www.crummy.com/software/BeautifulSoup/">Beautiful Soup</a>或<a href="http://lxml.de/">Lxml</a>来进行匹配和信息的提取，前者简单方便但是性能较差，后者既好用性能也好，但是安装稍嫌麻烦，这些内容我们会在后期的爬虫专题中为大家介绍。</p>]]></content>
    
    
    <categories>
      
      <category>python100day</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>资金流入榜</title>
    <link href="/2022/08/02/20220802%E6%8A%95%E8%B5%84%E6%97%A5%E5%8E%86/"/>
    <url>/2022/08/02/20220802%E6%8A%95%E8%B5%84%E6%97%A5%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="20220815"><a href="#20220815" class="headerlink" title="20220815"></a>20220815</h1><p><img src="/images/pasted-87.png" alt="upload successful"></p><table><thead><tr><th>序号</th><th>板块名称</th><th>涨幅（%）</th><th>主力净量</th><th>主力金额（亿）</th><th>涨停数</th></tr></thead><tbody><tr><td>1</td><td>电力设备</td><td>2.84</td><td>0.91</td><td>64.44</td><td>10</td></tr><tr><td>2</td><td>光伏概念</td><td>2.59</td><td>0.50</td><td>55.77</td><td>23</td></tr><tr><td>3</td><td>储能</td><td>2.35</td><td>0.52</td><td>50.20</td><td>8</td></tr><tr><td>4</td><td>新能源汽车</td><td>1.26</td><td>-0.40</td><td>28.85</td><td>17</td></tr><tr><td>5</td><td>锂电池</td><td>2.72</td><td>-0.35</td><td>27.46</td><td>7</td></tr><tr><td>6</td><td>硅能源</td><td>4.38</td><td>1.36</td><td>24.84</td><td>1</td></tr><tr><td>7</td><td>动力电池回收</td><td>1.63</td><td>0.15</td><td>21.74</td><td>0</td></tr><tr><td>8</td><td>盐湖提锂</td><td>2.18</td><td>-0.25</td><td>20.31</td><td>1</td></tr><tr><td>9</td><td>风电</td><td>2.04</td><td>0.32</td><td>20.05</td><td>4</td></tr><tr><td>10</td><td>充电桩</td><td></td><td>0.50</td><td>17.66</td><td>5</td></tr></tbody></table><h1 id="20220816"><a href="#20220816" class="headerlink" title="20220816"></a>20220816</h1><p><img src="/images/pasted-89.png" alt="upload successful"></p><table><thead><tr><th>序号</th><th>板块名称</th><th>涨幅（%）</th><th>主力净量</th><th>主力金额（亿）</th><th>涨停数</th></tr></thead><tbody><tr><td>1</td><td>储能</td><td>2.01</td><td>0.25</td><td>19.39</td><td>9</td></tr><tr><td>2</td><td>电力设备</td><td>2.07</td><td>0.58</td><td>14.13</td><td>14</td></tr><tr><td>3</td><td>光伏概念</td><td>2.22</td><td>0.05</td><td>13.30</td><td>20</td></tr><tr><td>4</td><td>风电</td><td>2.44</td><td>0.18</td><td>13.15</td><td>11</td></tr><tr><td>5</td><td>工业4.0</td><td>1.22</td><td>0.45</td><td>12.63</td><td>6</td></tr><tr><td>6</td><td>汽车整车</td><td>1.89</td><td>0.48</td><td>10.21</td><td>2</td></tr><tr><td>7</td><td>房地产开发</td><td>2.01</td><td>0.86</td><td>8.77</td><td>4</td></tr><tr><td>8</td><td>高端装备</td><td>1.37</td><td>0.36</td><td>7.69</td><td>3</td></tr><tr><td>9</td><td>光伏建筑一体化</td><td>2.48</td><td>1.16</td><td>7.49</td><td>8</td></tr><tr><td>10</td><td>TOCPCON电池</td><td>3.26</td><td>-0.16</td><td>7.32</td><td>2</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>投资</category>
      
    </categories>
    
    
    <tags>
      
      <tag>股票</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python100day-11</title>
    <link href="/2022/08/01/python100day-11/"/>
    <url>/2022/08/01/python100day-11/</url>
    
    <content type="html"><![CDATA[<h2 id="文件和异常"><a href="#文件和异常" class="headerlink" title="文件和异常"></a>文件和异常</h2><p>实际开发中常常会遇到对数据进行<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96">持久化</a>操作的场景，而实现数据持久化最直接简单的方式就是将数据保存到文件中。说到“文件”这个词，可能需要先科普一下关于<a href="https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F">文件系统</a>的知识，但是这里我们并不浪费笔墨介绍这个概念，请大家自行通过维基百科进行了解。</p><p>在Python中实现文件的读写操作其实非常简单，通过Python内置的<code>open</code>函数，我们可以指定文件名、操作模式、编码信息等来获得操作文件的对象，接下来就可以对文件进行读写操作了。这里所说的操作模式是指要打开什么样的文件（字符文件还是二进制文件）以及做什么样的操作（读、写还是追加），具体的如下表所示。</p><table><thead><tr><th>操作模式</th><th>具体含义</th></tr></thead><tbody><tr><td><code>&#39;r&#39;</code></td><td>读取 （默认）</td></tr><tr><td><code>&#39;w&#39;</code></td><td>写入（会先截断之前的内容）</td></tr><tr><td><code>&#39;x&#39;</code></td><td>写入，如果文件已经存在会产生异常</td></tr><tr><td><code>&#39;a&#39;</code></td><td>追加，将内容写入到已有文件的末尾</td></tr><tr><td><code>&#39;b&#39;</code></td><td>二进制模式</td></tr><tr><td><code>&#39;t&#39;</code></td><td>文本模式（默认）</td></tr><tr><td><code>&#39;+&#39;</code></td><td>更新（既可以读又可以写）</td></tr></tbody></table><p>下面这张图来自于<a href="http://www.runoob.com/">菜鸟教程</a>网站，它展示了如果根据应用程序的需要来设置操作模式。</p><p><img src="/images/pasted-71.png" alt="upload successful"></p><h3 id="读写文本文件"><a href="#读写文本文件" class="headerlink" title="读写文本文件"></a>读写文本文件</h3><p>读取文本文件时，需要在使用<code>open</code>函数时指定好带路径的文件名（可以使用相对路径或绝对路径）并将文件模式设置为<code>&#39;r&#39;</code>（如果不指定，默认值也是<code>&#39;r&#39;</code>），然后通过<code>encoding</code>参数指定编码（如果不指定，默认值是None，那么在读取文件时使用的是操作系统默认的编码），如果不能保证保存文件时使用的编码方式与encoding参数指定的编码方式是一致的，那么就可能因无法解码字符而导致读取失败。下面的例子演示了如何读取一个纯文本文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;致橡树.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(f.read())<br>    f.close()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>请注意上面的代码，如果<code>open</code>函数指定的文件并不存在或者无法打开，那么将引发异常状况导致程序崩溃。为了让代码有一定的健壮性和容错性，我们可以使用Python的异常机制对可能在运行时发生状况的代码进行适当的处理，如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    f = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">try</span>:<br>        f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;致橡树.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(f.read())<br>    <span class="hljs-keyword">except</span> FileNotFoundError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;无法打开指定的文件!&#x27;</span>)<br>    <span class="hljs-keyword">except</span> LookupError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;指定了未知的编码!&#x27;</span>)<br>    <span class="hljs-keyword">except</span> UnicodeDecodeError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;读取文件时解码错误!&#x27;</span>)<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-keyword">if</span> f:<br>            f.close()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>在Python中，我们可以将那些在运行时可能会出现状况的代码放在<code>try</code>代码块中，在<code>try</code>代码块的后面可以跟上一个或多个<code>except</code>来捕获可能出现的异常状况。例如在上面读取文件的过程中，文件找不到会引发<code>FileNotFoundError</code>，指定了未知的编码会引发<code>LookupError</code>，而如果读取文件时无法按指定方式解码会引发<code>UnicodeDecodeError</code>，我们在<code>try</code>后面跟上了三个<code>except</code>分别处理这三种不同的异常状况。最后我们使用<code>finally</code>代码块来关闭打开的文件，释放掉程序中获取的外部资源，由于<code>finally</code>块的代码不论程序正常还是异常都会执行到（甚至是调用了<code>sys</code>模块的<code>exit</code>函数退出Python环境，<code>finally</code>块都会被执行，因为<code>exit</code>函数实质上是引发了<code>SystemExit</code>异常），因此我们通常把<code>finally</code>块称为“总是执行代码块”，它最适合用来做释放外部资源的操作。如果不愿意在<code>finally</code>代码块中关闭文件对象释放资源，也可以使用上下文语法，通过<code>with</code>关键字指定文件对象的上下文环境并在离开上下文环境时自动释放文件资源，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;致橡树.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            <span class="hljs-built_in">print</span>(f.read())<br>    <span class="hljs-keyword">except</span> FileNotFoundError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;无法打开指定的文件!&#x27;</span>)<br>    <span class="hljs-keyword">except</span> LookupError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;指定了未知的编码!&#x27;</span>)<br>    <span class="hljs-keyword">except</span> UnicodeDecodeError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;读取文件时解码错误!&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>除了使用文件对象的<code>read</code>方法读取文件之外，还可以使用<code>for-in</code>循环逐行读取或者用<code>readlines</code>方法将文件按行读取到一个列表容器中，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 一次性读取整个文件内容</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;致橡树.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-built_in">print</span>(f.read())<br><br>    <span class="hljs-comment"># 通过for-in循环逐行读取</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;致橡树.txt&#x27;</span>, mode=<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>            <span class="hljs-built_in">print</span>(line, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>            time.sleep(<span class="hljs-number">0.5</span>)<br>    <span class="hljs-built_in">print</span>()<br><br>    <span class="hljs-comment"># 读取文件按行读取到列表中</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;致橡树.txt&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        lines = f.readlines()<br>    <span class="hljs-built_in">print</span>(lines)<br>    <br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>要将文本信息写入文件文件也非常简单，在使用<code>open</code>函数时指定好文件名并将文件模式设置为<code>&#39;w&#39;</code>即可。注意如果需要对文件内容进行追加式写入，应该将模式设置为<code>&#39;a&#39;</code>。如果要写入的文件不存在会自动创建文件而不是引发异常。下面的例子演示了如何将1-9999之间的素数分别写入三个文件中（1-99之间的素数保存在a.txt中，100-999之间的素数保存在b.txt中，1000-9999之间的素数保存在c.txt中）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_prime</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;判断素数的函数&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> n &gt; <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">int</span>(sqrt(n)) + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> n % factor == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> n != <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    filenames = (<span class="hljs-string">&#x27;a.txt&#x27;</span>, <span class="hljs-string">&#x27;b.txt&#x27;</span>, <span class="hljs-string">&#x27;c.txt&#x27;</span>)<br>    fs_list = []<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> filenames:<br>            fs_list.append(<span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>        <span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10000</span>):<br>            <span class="hljs-keyword">if</span> is_prime(number):<br>                <span class="hljs-keyword">if</span> number &lt; <span class="hljs-number">100</span>:<br>                    fs_list[<span class="hljs-number">0</span>].write(<span class="hljs-built_in">str</span>(number) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>                <span class="hljs-keyword">elif</span> number &lt; <span class="hljs-number">1000</span>:<br>                    fs_list[<span class="hljs-number">1</span>].write(<span class="hljs-built_in">str</span>(number) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    fs_list[<span class="hljs-number">2</span>].write(<span class="hljs-built_in">str</span>(number) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> ex:<br>        <span class="hljs-built_in">print</span>(ex)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;写文件时发生错误!&#x27;</span>)<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-keyword">for</span> fs <span class="hljs-keyword">in</span> fs_list:<br>            fs.close()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;操作完成!&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="读写二进制文件"><a href="#读写二进制文件" class="headerlink" title="读写二进制文件"></a>读写二进制文件</h3><p>知道了如何读写文本文件要读写二进制文件也就很简单了，下面的代码实现了复制图片文件的功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;guido.jpg&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> fs1:<br>            data = fs1.read()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(data))  <span class="hljs-comment"># &lt;class &#x27;bytes&#x27;&gt;</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;吉多.jpg&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fs2:<br>            fs2.write(data)<br>    <span class="hljs-keyword">except</span> FileNotFoundError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;指定的文件无法打开.&#x27;</span>)<br>    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;读写文件时出现错误.&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;程序执行结束.&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="读写JSON文件"><a href="#读写JSON文件" class="headerlink" title="读写JSON文件"></a>读写JSON文件</h3><p>通过上面的讲解，我们已经知道如何将文本数据和二进制数据保存到文件中，那么这里还有一个问题，如果希望把一个列表或者一个字典中的数据保存到文件中又该怎么做呢？答案是将数据以JSON格式进行保存。JSON是“JavaScript Object Notation”的缩写，它本来是JavaScript语言中创建对象的一种字面量语法，现在已经被广泛的应用于跨平台跨语言的数据交换，原因很简单，因为JSON也是纯文本，任何系统任何编程语言处理纯文本都是没有问题的。目前JSON基本上已经取代了XML作为异构系统间交换数据的事实标准。关于JSON的知识，更多的可以参考<a href="http://json.org/">JSON的官方网站</a>，从这个网站也可以了解到每种语言处理JSON数据格式可以使用的工具或三方库，下面是一个JSON的简单例子。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;骆昊&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">38</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;qq&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">957658</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;friends&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;王大锤&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;白元芳&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cars&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BYD&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;max_speed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">180</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Audi&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;max_speed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">280</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Benz&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;max_speed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">320</span><span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>可能大家已经注意到了，上面的JSON跟Python中的字典其实是一样一样的，事实上JSON的数据类型和Python的数据类型是很容易找到对应关系的，如下面两张表所示。</p><table><thead><tr><th>JSON</th><th>Python</th></tr></thead><tbody><tr><td>object</td><td>dict</td></tr><tr><td>array</td><td>list</td></tr><tr><td>string</td><td>str</td></tr><tr><td>number (int &#x2F; real)</td><td>int &#x2F; float</td></tr><tr><td>true &#x2F; false</td><td>True &#x2F; False</td></tr><tr><td>null</td><td>None</td></tr></tbody></table><table><thead><tr><th>Python</th><th>JSON</th></tr></thead><tbody><tr><td>dict</td><td>object</td></tr><tr><td>list, tuple</td><td>array</td></tr><tr><td>str</td><td>string</td></tr><tr><td>int, float, int- &amp; float-derived Enums</td><td>number</td></tr><tr><td>True &#x2F; False</td><td>true &#x2F; false</td></tr><tr><td>None</td><td>null</td></tr></tbody></table><p>我们使用Python中的json模块就可以将字典或列表以JSON格式保存到文件中，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> json<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    mydict = &#123;<br>        <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;骆昊&#x27;</span>,<br>        <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">38</span>,<br>        <span class="hljs-string">&#x27;qq&#x27;</span>: <span class="hljs-number">957658</span>,<br>        <span class="hljs-string">&#x27;friends&#x27;</span>: [<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-string">&#x27;白元芳&#x27;</span>],<br>        <span class="hljs-string">&#x27;cars&#x27;</span>: [<br>            &#123;<span class="hljs-string">&#x27;brand&#x27;</span>: <span class="hljs-string">&#x27;BYD&#x27;</span>, <span class="hljs-string">&#x27;max_speed&#x27;</span>: <span class="hljs-number">180</span>&#125;,<br>            &#123;<span class="hljs-string">&#x27;brand&#x27;</span>: <span class="hljs-string">&#x27;Audi&#x27;</span>, <span class="hljs-string">&#x27;max_speed&#x27;</span>: <span class="hljs-number">280</span>&#125;,<br>            &#123;<span class="hljs-string">&#x27;brand&#x27;</span>: <span class="hljs-string">&#x27;Benz&#x27;</span>, <span class="hljs-string">&#x27;max_speed&#x27;</span>: <span class="hljs-number">320</span>&#125;<br>        ]<br>    &#125;<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data.json&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> fs:<br>            json.dump(mydict, fs)<br>    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;保存数据完成!&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>json模块主要有四个比较重要的函数，分别是：</p><ul><li><code>dump</code> - 将Python对象按照JSON格式序列化到文件中</li><li><code>dumps</code> - 将Python对象处理成JSON格式的字符串</li><li><code>load</code> - 将文件中的JSON数据反序列化成对象</li><li><code>loads</code> - 将字符串的内容反序列化成Python对象</li></ul><p>这里出现了两个概念，一个叫序列化，一个叫反序列化。自由的百科全书<a href="https://zh.wikipedia.org/">维基百科</a>上对这两个概念是这样解释的：“序列化（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换为可以存储或传输的形式，这样在需要的时候能够恢复到原先的状态，而且通过序列化的数据重新获取字节时，可以利用这些字节来产生原始对象的副本（拷贝）。与这个过程相反的动作，即从一系列字节中提取数据结构的操作，就是反序列化（deserialization）”。</p><p>目前绝大多数网络数据服务（或称之为网络API）都是基于<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE">HTTP协议</a>提供JSON格式的数据，关于HTTP协议的相关知识，可以看看阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2016/08/http.html">《HTTP协议入门》</a>，如果想了解国内的网络数据服务，可以看看<a href="https://www.juhe.cn/">聚合数据</a>和<a href="http://www.avatardata.cn/">阿凡达数据</a>等网站，国外的可以看看<a href="http://apis.io/">{API}Search</a>网站。下面的例子演示了如何使用<a href="http://docs.python-requests.org/zh_CN/latest/">requests</a>模块（封装得足够好的第三方网络访问模块）访问网络API获取国内新闻，如何通过json模块解析JSON数据并显示新闻标题，这个例子使用了<a href="https://www.tianapi.com/">天行数据</a>提供的国内新闻数据接口，其中的APIKey需要自己到该网站申请。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    resp = requests.get(<span class="hljs-string">&#x27;http://api.tianapi.com/guonei/?key=APIKey&amp;num=10&#x27;</span>)<br>    data_model = json.loads(resp.text)<br>    <span class="hljs-keyword">for</span> news <span class="hljs-keyword">in</span> data_model[<span class="hljs-string">&#x27;newslist&#x27;</span>]:<br>        <span class="hljs-built_in">print</span>(news[<span class="hljs-string">&#x27;title&#x27;</span>])<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>在Python中要实现序列化和反序列化除了使用json模块之外，还可以使用pickle和shelve模块，但是这两个模块是使用特有的序列化协议来序列化数据，因此序列化后的数据只能被Python识别。关于这两个模块的相关知识可以自己看看网络上的资料。另外，如果要了解更多的关于Python异常机制的知识，可以看看segmentfault上面的文章<a href="https://segmentfault.com/a/1190000007736783">《总结：Python中的异常处理》</a>，这篇文章不仅介绍了Python中异常机制的使用，还总结了一系列的最佳实践，很值得一读。</p>]]></content>
    
    
    <categories>
      
      <category>python100day</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python100day-10</title>
    <link href="/2022/07/28/python100day-10/"/>
    <url>/2022/07/28/python100day-10/</url>
    
    <content type="html"><![CDATA[<h2 id="图形用户界面和游戏开发"><a href="#图形用户界面和游戏开发" class="headerlink" title="图形用户界面和游戏开发"></a>图形用户界面和游戏开发</h2><h3 id="基于tkinter模块的GUI"><a href="#基于tkinter模块的GUI" class="headerlink" title="基于tkinter模块的GUI"></a>基于tkinter模块的GUI</h3><p>GUI是图形用户界面的缩写，图形化的用户界面对使用过计算机的人来说应该都不陌生，在此也无需进行赘述。Python默认的GUI开发模块是tkinter（在Python 3以前的版本中名为Tkinter），从这个名字就可以看出它是基于Tk的，Tk是一个工具包，最初是为Tcl设计的，后来被移植到很多其他的脚本语言中，它提供了跨平台的GUI控件。当然Tk并不是最新和最好的选择，也没有功能特别强大的GUI控件，事实上，开发GUI应用并不是Python最擅长的工作，如果真的需要使用Python开发GUI应用，wxPython、PyQt、PyGTK等模块都是不错的选择。</p><p>基本上使用tkinter来开发GUI应用需要以下5个步骤：</p><ol><li>导入tkinter模块中我们需要的东西。</li><li>创建一个顶层窗口对象并用它来承载整个GUI应用。</li><li>在顶层窗口对象上添加GUI组件。</li><li>通过代码将这些GUI组件的功能组织起来。</li><li>进入主事件循环(main loop)。</li></ol><p>下面的代码演示了如何使用tkinter做一个简单的GUI应用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> tkinter<br><span class="hljs-keyword">import</span> tkinter.messagebox<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    flag = <span class="hljs-literal">True</span><br><br>    <span class="hljs-comment"># 修改标签上的文字</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">change_label_text</span>():<br>        <span class="hljs-keyword">nonlocal</span> flag<br>        flag = <span class="hljs-keyword">not</span> flag<br>        color, msg = (<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;Hello, world!&#x27;</span>)\<br>            <span class="hljs-keyword">if</span> flag <span class="hljs-keyword">else</span> (<span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;Goodbye, world!&#x27;</span>)<br>        label.config(text=msg, fg=color)<br><br>    <span class="hljs-comment"># 确认退出</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">confirm_to_quit</span>():<br>        <span class="hljs-keyword">if</span> tkinter.messagebox.askokcancel(<span class="hljs-string">&#x27;温馨提示&#x27;</span>, <span class="hljs-string">&#x27;确定要退出吗?&#x27;</span>):<br>            top.quit()<br><br>    <span class="hljs-comment"># 创建顶层窗口</span><br>    top = tkinter.Tk()<br>    <span class="hljs-comment"># 设置窗口大小</span><br>    top.geometry(<span class="hljs-string">&#x27;240x160&#x27;</span>)<br>    <span class="hljs-comment"># 设置窗口标题</span><br>    top.title(<span class="hljs-string">&#x27;小游戏&#x27;</span>)<br>    <span class="hljs-comment"># 创建标签对象并添加到顶层窗口</span><br>    label = tkinter.Label(top, text=<span class="hljs-string">&#x27;Hello, world!&#x27;</span>, font=<span class="hljs-string">&#x27;Arial -32&#x27;</span>, fg=<span class="hljs-string">&#x27;red&#x27;</span>)<br>    label.pack(expand=<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 创建一个装按钮的容器</span><br>    panel = tkinter.Frame(top)<br>    <span class="hljs-comment"># 创建按钮对象 指定添加到哪个容器中 通过command参数绑定事件回调函数</span><br>    button1 = tkinter.Button(panel, text=<span class="hljs-string">&#x27;修改&#x27;</span>, command=change_label_text)<br>    button1.pack(side=<span class="hljs-string">&#x27;left&#x27;</span>)<br>    button2 = tkinter.Button(panel, text=<span class="hljs-string">&#x27;退出&#x27;</span>, command=confirm_to_quit)<br>    button2.pack(side=<span class="hljs-string">&#x27;right&#x27;</span>)<br>    panel.pack(side=<span class="hljs-string">&#x27;bottom&#x27;</span>)<br>    <span class="hljs-comment"># 开启主事件循环</span><br>    tkinter.mainloop()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>需要说明的是，GUI应用通常是事件驱动式的，之所以要进入主事件循环就是要监听鼠标、键盘等各种事件的发生并执行对应的代码对事件进行处理，因为事件会持续的发生，所以需要这样的一个循环一直运行着等待下一个事件的发生。另一方面，Tk为控件的摆放提供了三种布局管理器，通过布局管理器可以对控件进行定位，这三种布局管理器分别是：Placer（开发者提供控件的大小和摆放位置）、Packer（自动将控件填充到合适的位置）和Grid（基于网格坐标来摆放控件），此处不进行赘述。</p><h3 id="使用Pygame进行游戏开发"><a href="#使用Pygame进行游戏开发" class="headerlink" title="使用Pygame进行游戏开发"></a>使用Pygame进行游戏开发</h3><p>Pygame是一个开源的Python模块，专门用于多媒体应用（如电子游戏）的开发，其中包含对图像、声音、视频、事件、碰撞等的支持。Pygame建立在<a href="https://zh.wikipedia.org/wiki/SDL">SDL</a>的基础上，SDL是一套跨平台的多媒体开发库，用C语言实现，被广泛的应用于游戏、模拟器、播放器等的开发。而Pygame让游戏开发者不再被底层语言束缚，可以更多的关注游戏的功能和逻辑。</p><p>下面我们来完成一个简单的小游戏，游戏的名字叫“大球吃小球”，当然完成这个游戏并不是重点，学会使用Pygame也不是重点，最重要的我们要在这个过程中体会如何使用前面讲解的面向对象程序设计，学会用这种编程思想去解决现实中的问题。</p><h4 id="制作游戏窗口"><a href="#制作游戏窗口" class="headerlink" title="制作游戏窗口"></a>制作游戏窗口</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pygame<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 初始化导入的pygame中的模块</span><br>    pygame.init()<br>    <span class="hljs-comment"># 初始化用于显示的窗口并设置窗口尺寸</span><br>    screen = pygame.display.set_mode((<span class="hljs-number">800</span>, <span class="hljs-number">600</span>))<br>    <span class="hljs-comment"># 设置当前窗口的标题</span><br>    pygame.display.set_caption(<span class="hljs-string">&#x27;大球吃小球&#x27;</span>)<br>    running = <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># 开启一个事件循环处理发生的事件</span><br>    <span class="hljs-keyword">while</span> running:<br>        <span class="hljs-comment"># 从消息队列中获取事件并对事件进行处理</span><br>        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                running = <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h4 id="在窗口中绘图"><a href="#在窗口中绘图" class="headerlink" title="在窗口中绘图"></a>在窗口中绘图</h4><p>可以通过pygame中draw模块的函数在窗口上绘图，可以绘制的图形包括：线条、矩形、多边形、圆、椭圆、圆弧等。需要说明的是，屏幕坐标系是将屏幕左上角设置为坐标原点<code>(0, 0)</code>，向右是x轴的正向，向下是y轴的正向，在表示位置或者设置尺寸的时候，我们默认的单位都是<a href="https://zh.wikipedia.org/wiki/%E5%83%8F%E7%B4%A0">像素</a>。所谓像素就是屏幕上的一个点，你可以用浏览图片的软件试着将一张图片放大若干倍，就可以看到这些点。pygame中表示颜色用的是色光<a href="https://zh.wikipedia.org/wiki/%E5%8E%9F%E8%89%B2">三原色</a>表示法，即通过一个元组或列表来指定颜色的RGB值，每个值都在0~255之间，因为是每种原色都用一个8位（bit）的值来表示，三种颜色相当于一共由24位构成，这也就是常说的“24位颜色表示法”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pygame<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 初始化导入的pygame中的模块</span><br>    pygame.init()<br>    <span class="hljs-comment"># 初始化用于显示的窗口并设置窗口尺寸</span><br>    screen = pygame.display.set_mode((<span class="hljs-number">800</span>, <span class="hljs-number">600</span>))<br>    <span class="hljs-comment"># 设置当前窗口的标题</span><br>    pygame.display.set_caption(<span class="hljs-string">&#x27;大球吃小球&#x27;</span>)<br>    <span class="hljs-comment"># 设置窗口的背景色(颜色是由红绿蓝三原色构成的元组)</span><br>    screen.fill((<span class="hljs-number">242</span>, <span class="hljs-number">242</span>, <span class="hljs-number">242</span>))<br>    <span class="hljs-comment"># 绘制一个圆(参数分别是: 屏幕, 颜色, 圆心位置, 半径, 0表示填充圆)</span><br>    pygame.draw.circle(screen, (<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,), (<span class="hljs-number">100</span>, <span class="hljs-number">100</span>), <span class="hljs-number">30</span>, <span class="hljs-number">0</span>)<br>    <span class="hljs-comment"># 刷新当前窗口(渲染窗口将绘制的图像呈现出来)</span><br>    pygame.display.flip()<br>    running = <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># 开启一个事件循环处理发生的事件</span><br>    <span class="hljs-keyword">while</span> running:<br>        <span class="hljs-comment"># 从消息队列中获取事件并对事件进行处理</span><br>        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                running = <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h4 id="加载图像"><a href="#加载图像" class="headerlink" title="加载图像"></a>加载图像</h4><p>如果需要直接加载图像到窗口上，可以使用pygame中image模块的函数来加载图像，再通过之前获得的窗口对象的<code>blit</code>方法渲染图像，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pygame<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 初始化导入的pygame中的模块</span><br>    pygame.init()<br>    <span class="hljs-comment"># 初始化用于显示的窗口并设置窗口尺寸</span><br>    screen = pygame.display.set_mode((<span class="hljs-number">800</span>, <span class="hljs-number">600</span>))<br>    <span class="hljs-comment"># 设置当前窗口的标题</span><br>    pygame.display.set_caption(<span class="hljs-string">&#x27;大球吃小球&#x27;</span>)<br>    <span class="hljs-comment"># 设置窗口的背景色(颜色是由红绿蓝三原色构成的元组)</span><br>    screen.fill((<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>))<br>    <span class="hljs-comment"># 通过指定的文件名加载图像</span><br>    ball_image = pygame.image.load(<span class="hljs-string">&#x27;./res/ball.png&#x27;</span>)<br>    <span class="hljs-comment"># 在窗口上渲染图像</span><br>    screen.blit(ball_image, (<span class="hljs-number">50</span>, <span class="hljs-number">50</span>))<br>    <span class="hljs-comment"># 刷新当前窗口(渲染窗口将绘制的图像呈现出来)</span><br>    pygame.display.flip()<br>    running = <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># 开启一个事件循环处理发生的事件</span><br>    <span class="hljs-keyword">while</span> running:<br>        <span class="hljs-comment"># 从消息队列中获取事件并对事件进行处理</span><br>        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                running = <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h4 id="实现动画效果"><a href="#实现动画效果" class="headerlink" title="实现动画效果"></a>实现动画效果</h4><p>说到<a href="https://zh.wikipedia.org/wiki/%E5%8A%A8%E7%94%BB">动画</a>这个词大家都不会陌生，事实上要实现动画效果，本身的原理也非常简单，就是将不连续的图片连续的播放，只要每秒钟达到了一定的帧数，那么就可以做出比较流畅的动画效果。如果要让上面代码中的小球动起来，可以将小球的位置用变量来表示，并在循环中修改小球的位置再刷新整个窗口即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pygame<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 初始化导入的pygame中的模块</span><br>    pygame.init()<br>    <span class="hljs-comment"># 初始化用于显示的窗口并设置窗口尺寸</span><br>    screen = pygame.display.set_mode((<span class="hljs-number">800</span>, <span class="hljs-number">600</span>))<br>    <span class="hljs-comment"># 设置当前窗口的标题</span><br>    pygame.display.set_caption(<span class="hljs-string">&#x27;大球吃小球&#x27;</span>)<br>    <span class="hljs-comment"># 定义变量来表示小球在屏幕上的位置</span><br>    x, y = <span class="hljs-number">50</span>, <span class="hljs-number">50</span><br>    running = <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># 开启一个事件循环处理发生的事件</span><br>    <span class="hljs-keyword">while</span> running:<br>        <span class="hljs-comment"># 从消息队列中获取事件并对事件进行处理</span><br>        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                running = <span class="hljs-literal">False</span><br>        screen.fill((<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>))<br>        pygame.draw.circle(screen, (<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,), (x, y), <span class="hljs-number">30</span>, <span class="hljs-number">0</span>)<br>        pygame.display.flip()<br>        <span class="hljs-comment"># 每隔50毫秒就改变小球的位置再刷新窗口</span><br>        pygame.time.delay(<span class="hljs-number">50</span>)<br>        x, y = x + <span class="hljs-number">5</span>, y + <span class="hljs-number">5</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h4 id="碰撞检测"><a href="#碰撞检测" class="headerlink" title="碰撞检测"></a>碰撞检测</h4><p>通常一个游戏中会有很多对象出现，而这些对象之间的“碰撞”在所难免，比如炮弹击中了飞机、箱子撞到了地面等。碰撞检测在绝大多数的游戏中都是一个必须得处理的至关重要的问题，pygame的sprite（动画精灵）模块就提供了对碰撞检测的支持，这里我们暂时不介绍sprite模块提供的功能，因为要检测两个小球有没有碰撞其实非常简单，只需要检查球心的距离有没有小于两个球的半径之和。为了制造出更多的小球，我们可以通过对鼠标事件的处理，在点击鼠标的位置创建颜色、大小和移动速度都随机的小球，当然要做到这一点，我们可以把之前学习到的面向对象的知识应用起来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum, unique<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><br><span class="hljs-keyword">import</span> pygame<br><br><br><span class="hljs-meta">@unique</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Color</span>(<span class="hljs-title class_ inherited__">Enum</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;颜色&quot;&quot;&quot;</span><br><br>    RED = (<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>    GREEN = (<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>)<br>    BLUE = (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br>    BLACK = (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>    WHITE = (<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>)<br>    GRAY = (<span class="hljs-number">242</span>, <span class="hljs-number">242</span>, <span class="hljs-number">242</span>)<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">random_color</span>():<br>        <span class="hljs-string">&quot;&quot;&quot;获得随机颜色&quot;&quot;&quot;</span><br>        r = randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br>        g = randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br>        b = randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br>        <span class="hljs-keyword">return</span> (r, g, b)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ball</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;球&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x, y, radius, sx, sy, color=Color.RED</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化方法&quot;&quot;&quot;</span><br>        self.x = x<br>        self.y = y<br>        self.radius = radius<br>        self.sx = sx<br>        self.sy = sy<br>        self.color = color<br>        self.alive = <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">move</span>(<span class="hljs-params">self, screen</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;移动&quot;&quot;&quot;</span><br>        self.x += self.sx<br>        self.y += self.sy<br>        <span class="hljs-keyword">if</span> self.x - self.radius &lt;= <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> \<br>                self.x + self.radius &gt;= screen.get_width():<br>            self.sx = -self.sx<br>        <span class="hljs-keyword">if</span> self.y - self.radius &lt;= <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> \<br>                self.y + self.radius &gt;= screen.get_height():<br>            self.sy = -self.sy<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;吃其他球&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> self.alive <span class="hljs-keyword">and</span> other.alive <span class="hljs-keyword">and</span> self != other:<br>            dx, dy = self.x - other.x, self.y - other.y<br>            distance = sqrt(dx ** <span class="hljs-number">2</span> + dy ** <span class="hljs-number">2</span>)<br>            <span class="hljs-keyword">if</span> distance &lt; self.radius + other.radius \<br>                    <span class="hljs-keyword">and</span> self.radius &gt; other.radius:<br>                other.alive = <span class="hljs-literal">False</span><br>                self.radius = self.radius + <span class="hljs-built_in">int</span>(other.radius * <span class="hljs-number">0.146</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">draw</span>(<span class="hljs-params">self, screen</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;在窗口上绘制球&quot;&quot;&quot;</span><br>        pygame.draw.circle(screen, self.color,<br>                           (self.x, self.y), self.radius, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><p>可以在事件循环中对鼠标事件进行处理，通过事件对象的<code>type</code>属性可以判定事件类型，再通过<code>pos</code>属性就可以获得鼠标点击的位置。如果要处理键盘事件也是在这个地方，做法与处理鼠标事件类似。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 定义用来装所有球的容器</span><br>    balls = []<br>    <span class="hljs-comment"># 初始化导入的pygame中的模块</span><br>    pygame.init()<br>    <span class="hljs-comment"># 初始化用于显示的窗口并设置窗口尺寸</span><br>    screen = pygame.display.set_mode((<span class="hljs-number">800</span>, <span class="hljs-number">600</span>))<br>    <span class="hljs-comment"># 设置当前窗口的标题</span><br>    pygame.display.set_caption(<span class="hljs-string">&#x27;大球吃小球&#x27;</span>)<br>    running = <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># 开启一个事件循环处理发生的事件</span><br>    <span class="hljs-keyword">while</span> running:<br>        <span class="hljs-comment"># 从消息队列中获取事件并对事件进行处理</span><br>        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                running = <span class="hljs-literal">False</span><br>            <span class="hljs-comment"># 处理鼠标事件的代码</span><br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.MOUSEBUTTONDOWN <span class="hljs-keyword">and</span> event.button == <span class="hljs-number">1</span>:<br>                <span class="hljs-comment"># 获得点击鼠标的位置</span><br>                x, y = event.pos<br>                radius = randint(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>)<br>                sx, sy = randint(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>), randint(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>)<br>                color = Color.random_color()<br>                <span class="hljs-comment"># 在点击鼠标的位置创建一个球(大小、速度和颜色随机)</span><br>                ball = Ball(x, y, radius, sx, sy, color)<br>                <span class="hljs-comment"># 将球添加到列表容器中</span><br>                balls.append(ball)<br>        screen.fill((<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>))<br>        <span class="hljs-comment"># 取出容器中的球 如果没被吃掉就绘制 被吃掉了就移除</span><br>        <span class="hljs-keyword">for</span> ball <span class="hljs-keyword">in</span> balls:<br>            <span class="hljs-keyword">if</span> ball.alive:<br>                ball.draw(screen)<br>            <span class="hljs-keyword">else</span>:<br>                balls.remove(ball)<br>        pygame.display.flip()<br>        <span class="hljs-comment"># 每隔50毫秒就改变球的位置再刷新窗口</span><br>        pygame.time.delay(<span class="hljs-number">50</span>)<br>        <span class="hljs-keyword">for</span> ball <span class="hljs-keyword">in</span> balls:<br>            ball.move(screen)<br>            <span class="hljs-comment"># 检查球有没有吃到其他的球</span><br>            <span class="hljs-keyword">for</span> other <span class="hljs-keyword">in</span> balls:<br>                ball.eat(other)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>上面的两段代码合在一起，我们就完成了“大球吃小球”的游戏（如下图所示），准确的说它算不上一个游戏，但是做一个小游戏的基本知识我们已经通过这个例子告诉大家了，有了这些知识已经可以开始你的小游戏开发之旅了。其实上面的代码中还有很多值得改进的地方，比如刷新窗口以及让球移动起来的代码并不应该放在事件循环中，等学习了多线程的知识后，用一个后台线程来处理这些事可能是更好的选择。如果希望获得更好的用户体验，我们还可以在游戏中加入背景音乐以及在球与球发生碰撞时播放音效，利用pygame的mixer和music模块，我们可以很容易的做到这一点，大家可以自行了解这方面的知识。事实上，想了解更多的关于pygame的知识，最好的教程是<a href="https://www.pygame.org/news">pygame的官方网站</a>，如果英语没毛病就可以赶紧去看看啦。 如果想开发<a href="https://zh.wikipedia.org/wiki/3D%E6%B8%B8%E6%88%8F">3D游戏</a>，pygame就显得力不从心了，对3D游戏开发如果有兴趣的读者不妨看看<a href="https://www.panda3d.org/">Panda3D</a>。</p>]]></content>
    
    
    <categories>
      
      <category>python100day</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python自动化运维脚本分享</title>
    <link href="/2022/07/27/Python%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E8%84%9A%E6%9C%AC%E5%88%86%E4%BA%AB/"/>
    <url>/2022/07/27/Python%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E8%84%9A%E6%9C%AC%E5%88%86%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="Python自动化运维——打包部署Java项目为docker镜像"><a href="#Python自动化运维——打包部署Java项目为docker镜像" class="headerlink" title="Python自动化运维——打包部署Java项目为docker镜像"></a>Python自动化运维——打包部署Java项目为docker镜像</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> paramiko<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">contnet_shell</span>:<br><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        构造函数：创建对象时执行</span><br><span class="hljs-string">        hostname：IP地址</span><br><span class="hljs-string">        username：用户名</span><br><span class="hljs-string">        password：密码</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,hostname,username,password,port=<span class="hljs-number">22</span></span>):<br>        self.hostname = hostname<br>        self.username = username<br>        self.password = password<br>        self.port = port <br>        self._ssh_fd = paramiko.SSHClient()<br>        self._ssh_fd.set_missing_host_key_policy(paramiko.AutoAddPolicy)<br>        logging.info(<span class="hljs-string">&quot;正在连接linux服务器&quot;</span>)<br>        self._ssh_fd.connect(hostname,username=username,password=password,port=port)<br>        <br>        self._transport = paramiko.Transport((hostname, port))<br>        self._transport.connect(username=username, password=password)<br>     <span class="hljs-comment"># 创建sftp客户端</span><br>        self.sftp = paramiko.SFTPClient.from_transport(self._transport)<br>        logging.info(<span class="hljs-string">&quot;连接Linux成功&quot;</span>)<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">close_cont</span>(<span class="hljs-params">self</span>):<br>        self._ssh_fd.close()<br>        self.sftp.close()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;关闭连接&#x27;</span>)<br><br>   <br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    上传文件到Linux远程服务器</span><br><span class="hljs-string">    local_src： 本地文件路径 </span><br><span class="hljs-string">    remote_src： 服务器上保存文件的路径 </span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">copy_file</span>(<span class="hljs-params">self, local_src, remote_src</span>):<br>        logging.info(<span class="hljs-string">&quot;正在上传文件，请等待........&quot;</span>)<br>        self.sftp.put(local_src, remote_src)<br>        logging.info(<span class="hljs-string">&quot;文件上传成功...............&quot;</span>)<br><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    执行Linux命令</span><br><span class="hljs-string">    cmd: Linux命令 例: ls /</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">exec_cmd</span>(<span class="hljs-params">self, cmd</span>):<br>        stdin, stdout, stderr = self._ssh_fd.exec_command(cmd)<br>        res = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">if</span> stdout.channel.recv_exit_status() != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> stderr.readlines():<br>                logging.info(line)<br>                res += line<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, res<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> stdout.readlines():<br>                logging.info(line)<br>                res += line<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>, res<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">yum</span>(<span class="hljs-params">self, cmd</span>):<br>        cmd = cmd + <span class="hljs-string">&#x27;\n&#x27;</span> <span class="hljs-comment"># 加一个回车键</span><br>        invoke = self._ssh_fd.invoke_shell()<br>        invoke.send(cmd)<br>        res_str = <span class="hljs-string">&#x27;&#x27;</span><br><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            time.sleep(<span class="hljs-number">0.5</span>)<br>            res = invoke.recv(<span class="hljs-number">65535</span>).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>            logging.info(res)<br>            res_str += res<br>            lines = res.split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>            last_line = lines[<span class="hljs-built_in">len</span>(lines) - <span class="hljs-number">1</span>]<br><br>            <span class="hljs-keyword">if</span> last_line.strip().count(<span class="hljs-string">&#x27;[y/d/N]&#x27;</span>) &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> last_line.strip().count(<span class="hljs-string">r&#x27;[y/N]&#x27;</span>):<br>                invoke.send(<span class="hljs-string">&#x27;y&#x27;</span> + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> last_line.count(<span class="hljs-string">&#x27;[&#x27;</span> + self.username + <span class="hljs-string">&#x27;@&#x27;</span>) &gt; <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> res_str<br><br>ip=<span class="hljs-string">&#x27;192.168.31.114&#x27;</span><br>user=<span class="hljs-string">&#x27;root&#x27;</span><br>pwd=<span class="hljs-string">&#x27;1qaz&#x27;</span><br><br><span class="hljs-comment"># 远程登录</span><br>logging.basicConfig(level=logging.INFO)<br>shell = contnet_shell(ip,user,pwd)<br><br><span class="hljs-comment"># 若服务器没有docker 安装docker</span><br>is_exists,res = shell.exec_cmd(<span class="hljs-string">&#x27;docker -v&#x27;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> is_exists:<br>shell.yum(<span class="hljs-string">&#x27;yum install -y docker&#x27;</span>)<br>shell.exec_cmd(<span class="hljs-string">&#x27;systemctl stop firewalld&#x27;</span>)<span class="hljs-comment"># 关闭防火墙</span><br><br><span class="hljs-comment"># 克隆项目到本地，然后打包上传至服务器 </span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&#x27;./java_demo&#x27;</span>):<br>os.system(<span class="hljs-string">&#x27;git clone https://gitee.com/aurora_f/java_demo&#x27;</span>)<br>os.chdir(os.getcwd()+ <span class="hljs-string">&#x27;\\java_demo\\&#x27;</span>)<br>os.system(<span class="hljs-string">&#x27;git pull&#x27;</span>)<span class="hljs-comment"># 拉取最新的代码到本地</span><br>os.system(<span class="hljs-string">&#x27;mvn install&#x27;</span>)<br>shell.copy_file(<span class="hljs-string">&#x27;./target/myDemo.jar&#x27;</span>,<span class="hljs-string">&#x27;/opt/myDemo.jar&#x27;</span>)<br><br><span class="hljs-comment"># 制作dockerfile</span><br>shell.exec_cmd(<span class="hljs-string">&#x27;touch /opt/Dockerfile&#x27;</span>)<br>shell.exec_cmd(<span class="hljs-string">&#x27;echo from java:8 &gt; /opt/Dockerfile&#x27;</span>)<br>shell.exec_cmd(<span class="hljs-string">&#x27;echo maintainer frank &gt;&gt; /opt/Dockerfile&#x27;</span>)<br>shell.exec_cmd(<span class="hljs-string">&#x27;echo add ./myDemo.jar /root &gt;&gt; /opt/Dockerfile&#x27;</span>)<br>shell.exec_cmd(<span class="hljs-string">&#x27;echo EXPOSE 8080 &gt;&gt; /opt/Dockerfile&#x27;</span>)<br>shell.exec_cmd(<span class="hljs-string">&quot;echo &#x27;ENTRYPOINT java -jar /root/myDemo.jar&#x27; &gt;&gt; /opt/Dockerfile&quot;</span>)<br><br><span class="hljs-comment"># 构建docker镜像</span><br>shell.exec_cmd(<span class="hljs-string">&#x27;cd /opt/ &amp;&amp; docker build -t spring_boot:1.0 .&#x27;</span>)<br><br>shell.exec_cmd(<span class="hljs-string">&#x27;docker rm -f demo1&#x27;</span>)<br>shell.exec_cmd(<span class="hljs-string">&#x27;docker run --name demo1 -d -p 80:8080 spring_boot:1.0&#x27;</span>)<br><br><span class="hljs-comment"># 向地址发送请求，通过状态码判断是否成功</span><br>time.sleep(<span class="hljs-number">5</span>)<br>res = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">try</span>:<br>res = requests.get(<span class="hljs-string">&#x27;http://&#x27;</span>+ip+<span class="hljs-string">&#x27;/hello&#x27;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br><span class="hljs-keyword">raise</span> e<br><span class="hljs-keyword">if</span> (res.status_code == <span class="hljs-number">200</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;成功！！！\n&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;容器启动不成功\n&#x27;</span>)<br>shell.close_cont()<br><br><br></code></pre></td></tr></table></figure><h1 id="python自动化运维脚本（仅供参考）"><a href="#python自动化运维脚本（仅供参考）" class="headerlink" title="python自动化运维脚本（仅供参考）"></a>python自动化运维脚本（仅供参考）</h1><h2 id="1-生成磁盘使用情况的日志文件"><a href="#1-生成磁盘使用情况的日志文件" class="headerlink" title="1.生成磁盘使用情况的日志文件"></a>1.生成磁盘使用情况的日志文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br>  <span class="hljs-comment">#!coding=utf-8</span><br><br>  <span class="hljs-keyword">import</span> time<br>  <span class="hljs-keyword">import</span> os<br><br>  new_time = time.strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)<br>  disk_status = os.popen(<span class="hljs-string">&#x27;df -h&#x27;</span>).readlines()<br>  str1 = <span class="hljs-string">&#x27;&#x27;</span>.join(disk_status)<br>  f = file(new_time+<span class="hljs-string">&#x27;.log&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br>  f.write(<span class="hljs-string">&#x27;%s&#x27;</span> % str1)<br>  f.flush()<br>  f.close()<br><br></code></pre></td></tr></table></figure><h2 id="2-探测Web服务质量"><a href="#2-探测Web服务质量" class="headerlink" title="2.探测Web服务质量"></a>2.探测Web服务质量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><span class="hljs-comment"># 该脚本可以定位访问web页面的服务质量</span><br><span class="hljs-comment"># 通过Python下的pycurl模块来实现定位</span><br><span class="hljs-comment"># 它可以通过调用pycurl提供的方法，来探测Web服务质量</span><br><span class="hljs-comment"># 比如了解相应的HTTP状态码、请求延时、HTTP头信息、下载速度等</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> pycurl<br><br><span class="hljs-comment"># 探测目标URL</span><br>URL = <span class="hljs-string">&quot;http://www.baidu.com&quot;</span> <br><br><span class="hljs-comment"># 创建一个Curl对象</span><br>c = pycurl.Curl()<br><span class="hljs-comment"># 定义请求的URL变量</span><br>c.setopt(pycurl.URL, URL)<br><span class="hljs-comment"># 定义请求连接的等待时间</span><br>c.setopt(pycurl.CONNECTTIMEOUT, <span class="hljs-number">5</span>)<br><span class="hljs-comment"># 定义请求超时时间</span><br>c.setopt(pycurl.TIMEOUT, <span class="hljs-number">5</span>)<br><span class="hljs-comment"># 屏蔽下载进度条</span><br>c.setopt(pycurl.FORBID_REUSE, <span class="hljs-number">1</span>)<br><span class="hljs-comment"># 指定HTTP重定向的最大数为1</span><br>c.setopt(pycurl.MAXREDIRS, <span class="hljs-number">1</span>)<br><span class="hljs-comment"># 完成交互后强制断开连接，不重用</span><br>c.setopt(pycurl.NOPROGRESS, <span class="hljs-number">1</span>)<br><span class="hljs-comment"># 设置保存DNS信息的时间为30秒</span><br>c.setopt(pycurl.DNS_CACHE_TIMEOUT,<span class="hljs-number">30</span>)<br><br><span class="hljs-comment"># 创建一个文件对象，以“wb”方式打开，用来存储返回的http头部及页面的内容</span><br>indexfile = <span class="hljs-built_in">open</span>(os.path.dirname(os.path.realpath(__file__))+<span class="hljs-string">&quot;/content.txt&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>)<br><span class="hljs-comment"># 将返回的HTTP HEADER定向到indexfile文件</span><br>c.setopt(pycurl.WRITEHEADER, indexfile)<br><span class="hljs-comment"># 将返回的HTML内容定向到indexfile文件</span><br>c.setopt(pycurl.WRITEDATA, indexfile)<br><br><span class="hljs-comment"># 捕捉Curl.perform请求的提交，如果错误直接报错退出</span><br><span class="hljs-keyword">try</span>:<br>    c.perform()<br><span class="hljs-keyword">except</span> Exception,e:<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;连接错误&quot;</span><br>    indexfile.close()<br>    c.close()<br>    sys.exit()<br><br><span class="hljs-comment"># DNS解析所消耗的时间</span><br>NAMELOOKUP_TIME = c.getinfo(c.NAMELOOKUP_TIME)<br><span class="hljs-comment"># 建立连接所消耗的时间</span><br>CONNECT_TIME = c.getinfo(c.CONNECT_TIME)<br><span class="hljs-comment"># 从建立连接到准备传输所消耗的时间</span><br>PRETRANSFER_TIME = c.getinfo(c.PRETRANSFER_TIME)<br><span class="hljs-comment"># 从建立连接到传输开始消耗的时间</span><br>STARTTRANSFER_TIME = c.getinfo(c.STARTTRANSFER_TIME)<br><span class="hljs-comment"># 传输结束所消耗的总时间</span><br>TOTAL_TIME = c.getinfo(c.TOTAL_TIME)<br><span class="hljs-comment"># 返回HTTP状态码</span><br>HTTP_CODE = c.getinfo(c.HTTP_CODE)<br><span class="hljs-comment"># 下载数据包的大小</span><br>SIZE_DOWNLOAD = c.getinfo(c.SIZE_DOWNLOAD)<br><span class="hljs-comment"># HTTP头部大小</span><br>HEADER_SIZE = c.getinfo(c.HEADER_SIZE)<br><span class="hljs-comment"># 平均下载速度</span><br>SPEED_DOWNLOAD = c.getinfo(c.SPEED_DOWNLOAD)<br><br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;HTTP状态码：%d&quot;</span> %HTTP_CODE<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;DNS解析时间：%.2f ms&quot;</span>%(NAMELOOKUP_TIME*<span class="hljs-number">1000</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;建立连接时间：%.2f ms&quot;</span> %(CONNECT_TIME*<span class="hljs-number">1000</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;准备传输时间：%.2f ms&quot;</span> %(PRETRANSFER_TIME*<span class="hljs-number">1000</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;传输开始时间：%.2f ms&quot;</span> %(STARTTRANSFER_TIME*<span class="hljs-number">1000</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;传输结束总时间：%.2f ms&quot;</span> %(TOTAL_TIME*<span class="hljs-number">1000</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;下载数据包大小：%d bytes/s&quot;</span> %(SIZE_DOWNLOAD)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;HTTP头部大小：%d byte&quot;</span> %(HEADER_SIZE)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;平均下载速度：%d bytes/s&quot;</span> %(SPEED_DOWNLOAD)<br>indexfile.close()<br>c.close()<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">HTTP状态码：%d </span><br><span class="hljs-string">DNS解析时间：%.2f ms </span><br><span class="hljs-string">建立连接时间：%.2f ms </span><br><span class="hljs-string">准备传输时间：%.2f ms </span><br><span class="hljs-string">传输开始时间：%.2f ms </span><br><span class="hljs-string">传输结束总时间：%.2f ms </span><br><span class="hljs-string">下载数据包大小：%d bytes/s </span><br><span class="hljs-string">HTTP头部大小：%d byte </span><br><span class="hljs-string">平均下载速度：%d bytes/s </span><br><span class="hljs-string">&quot;&quot;&quot;</span> %(HTTP_CODE, NAMELOOKUP_TIME*<span class="hljs-number">1000</span>, CONNECT_TIME*<span class="hljs-number">1000</span>, PRETRANSFER_TIME*<span class="hljs-number">1000</span>, STARTTRANSFER_TIME*<span class="hljs-number">1000</span>, TOTAL_TIME*<span class="hljs-number">1000</span>, SIZE_DOWNLOAD, HEADER_SIZE, SPEED_DOWNLOAD)<br></code></pre></td></tr></table></figure><h2 id="3-发送邮件告警"><a href="#3-发送邮件告警" class="headerlink" title="3.发送邮件告警"></a>3.发送邮件告警</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> smtplib<br>   <span class="hljs-keyword">from</span> email.mime.text <span class="hljs-keyword">import</span> MIMEText<br>   <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">   发送邮件函数，默认使用163smtp</span><br><span class="hljs-string">   :param mail_host: 邮箱服务器，16邮箱host: smtp.163.com</span><br><span class="hljs-string">   :param port: 端口号,163邮箱的默认端口是 25</span><br><span class="hljs-string">   :param username: 邮箱账号 xx@163.com</span><br><span class="hljs-string">   :param passwd: 邮箱密码(不是邮箱的登录密码，是邮箱的授权码)</span><br><span class="hljs-string">   :param recv: 邮箱接收人地址，多个账号以逗号隔开</span><br><span class="hljs-string">   :param title: 邮件标题</span><br><span class="hljs-string">   :param content: 邮件内容</span><br><span class="hljs-string">   :return:</span><br><span class="hljs-string">   &#x27;&#x27;&#x27;</span><br><br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">send_mail</span>(<span class="hljs-params">username, passwd, recv, title, content, mail_host=<span class="hljs-string">&#x27;smtp.163.com&#x27;</span>, port=<span class="hljs-number">25</span></span>):<br>     msg = MIMEText(content)  <span class="hljs-comment"># 邮件内容</span><br>     msg[<span class="hljs-string">&#x27;Subject&#x27;</span>] = title   <span class="hljs-comment"># 邮件主题</span><br>     msg[<span class="hljs-string">&#x27;From&#x27;</span>] = username   <span class="hljs-comment"># 发送者账号</span><br>     msg[<span class="hljs-string">&#x27;To&#x27;</span>] = recv      <span class="hljs-comment"># 接收者账号列表</span><br>     smtp = smtplib.SMTP(mail_host, port=port)   <span class="hljs-comment"># 连接邮箱，传入邮箱地址，和端口号，smtp的端口号是25</span><br>     smtp.login(username, passwd)          <span class="hljs-comment"># 登录发送者的邮箱账号，密码</span><br>     <span class="hljs-comment"># 参数分别是 发送者，接收者，第三个是把上面的发送邮件的 内容变成字符串</span><br>     smtp.sendmail(username, recv, msg.as_string())<br>     smtp.quit() <span class="hljs-comment"># 发送完毕后退出smtp</span><br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;email send success.&#x27;</span>)<br><br>   <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>     email_user = <span class="hljs-string">&#x27;xxxx@163.com&#x27;</span> <span class="hljs-comment"># 发送者账号</span><br>     email_pwd = <span class="hljs-string">&#x27;xxxxx&#x27;</span> <span class="hljs-comment"># 发送者密码,授权码</span><br>     maillist = <span class="hljs-string">&#x27;xxxx@qq.com&#x27;</span><br>     title = <span class="hljs-string">&#x27;测试邮件标题&#x27;</span><br>     content = <span class="hljs-string">&#x27;这里是邮件内容&#x27;</span><br>     send_mail(email_user, email_pwd, maillist, title, content)<br></code></pre></td></tr></table></figure><h2 id="4-收集系统信息"><a href="#4-收集系统信息" class="headerlink" title="4.收集系统信息"></a>4.收集系统信息</h2><p>采集系统信息包括了CPU，内存，磁盘，网络等。结合自身情况。</p><p>psutil模块是一个跨平台的获取进程和系统应用情况（CPU，内存，磁盘，网络，传感器）的库。该模块用于系统监控、限制进程资源和运行进程的管理等方面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">(<span class="hljs-number">1</span>) CPU信息<br>psutil.cpu_count() <span class="hljs-comment"># CPU逻辑数量</span><br>psutil.cpu_count(logical=<span class="hljs-literal">False</span>) <span class="hljs-comment"># CPU物理核心</span><br>psutil.cpu_percent() <span class="hljs-comment"># CPU当前使用率</span><br><br>(<span class="hljs-number">2</span>) 内存信息<br>mem = psutil.virtual_memory() <span class="hljs-comment"># 实例化内存对象</span><br>mem.total  <span class="hljs-comment"># 系统总计内存</span><br>mem.used  <span class="hljs-comment"># 系统已经使用内存</span><br>mem.free <span class="hljs-comment"># 系统空闲内存</span><br>psutil.swap_memory() <span class="hljs-comment"># swap内存信息</span><br><br>(<span class="hljs-number">3</span>) 硬盘信息<br>psutil.disk_usage(<span class="hljs-string">&#x27;/&#x27;</span>)<br><br>(<span class="hljs-number">4</span>) 网络信息<br>psutil.net_io_counters(pernic=<span class="hljs-literal">True</span>)<br><br></code></pre></td></tr></table></figure><h2 id="4-1-CPU利用率采集脚本"><a href="#4-1-CPU利用率采集脚本" class="headerlink" title="4.1 CPU利用率采集脚本"></a>4.1 CPU利用率采集脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/bin/python</span><br>   <span class="hljs-comment">#coding:utf-8</span><br><br>   <span class="hljs-keyword">import</span> psutil<br>   <span class="hljs-keyword">import</span> time<br><br>   <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>       time.sleep(<span class="hljs-number">1</span>)<br>       cpu_liyonglv = psutil.cpu_percent()<br>       <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;当前cpu利用率：\033[1;31;42m%s%%\033[0m&quot;</span>%cpu_liyonglv<br></code></pre></td></tr></table></figure><h2 id="4-2-内存使用率和用户采集脚本"><a href="#4-2-内存使用率和用户采集脚本" class="headerlink" title="4.2 内存使用率和用户采集脚本"></a>4.2 内存使用率和用户采集脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/bin/python</span><br>   <span class="hljs-comment">#coding:utf-8</span><br><br>   <span class="hljs-keyword">import</span> psutil<br>   <span class="hljs-keyword">import</span> datetime<br><br>   free = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">round</span>(psutil.virtual_memory().free / (<span class="hljs-number">1024.0</span> * <span class="hljs-number">1024.0</span> * <span class="hljs-number">1024.0</span>), <span class="hljs-number">2</span>))<br>   total = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">round</span>(psutil.virtual_memory().total / (<span class="hljs-number">1024.0</span> * <span class="hljs-number">1024.0</span> * <span class="hljs-number">1024.0</span>), <span class="hljs-number">2</span>))<br>   memory = <span class="hljs-built_in">int</span>(psutil.virtual_memory().total - psutil.virtual_memory().free) / <span class="hljs-built_in">float</span>(psutil.virtual_memory().total)<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">u&quot;物理内存： %s G&quot;</span> % total)<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">u&quot;剩余物理内存： %s G&quot;</span> % free)<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">u&quot;物理内存使用率： %s %%&quot;</span> % <span class="hljs-built_in">int</span>(memory * <span class="hljs-number">100</span>))<br>   <span class="hljs-comment"># 系统启动时间</span><br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">u&quot;系统启动时间: %s&quot;</span> % datetime.datetime.fromtimestamp(psutil.boot_time()).strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>))<br><br>   users_count = <span class="hljs-built_in">len</span>(psutil.users())<br><br>   users_list = <span class="hljs-string">&quot;,&quot;</span>.join([u.name <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> psutil.users()])<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">u&quot;当前有%s个用户，分别是 %s&quot;</span> % (users_count, users_list))<br></code></pre></td></tr></table></figure><h2 id="4-3-硬盘使用率采集脚本"><a href="#4-3-硬盘使用率采集脚本" class="headerlink" title="4.3 硬盘使用率采集脚本"></a>4.3 硬盘使用率采集脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/bin/python</span><br><span class="hljs-comment">#coding:utf-8</span><br><br><span class="hljs-keyword">import</span> psutil<br><br>disk = psutil.disk_partitions()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> disk:<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;磁盘：%s   分区格式:%s&quot;</span>%(i.device,i.fstype)<br>    disk_use = psutil.disk_usage(i.mountpoint)<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;使用了：%sM,空闲：%sM,总共：%sM,使用率\033[1;31;42m%s%%\033[0m,&quot;</span>%(disk_use.used/<span class="hljs-number">1024</span>/<span class="hljs-number">1024</span>,disk_use.free/<span class="hljs-number">1024</span>/<span class="hljs-number">1024</span>,disk_use.total/<span class="hljs-number">1024</span>/<span class="hljs-number">1024</span>,disk_use.percent)<br></code></pre></td></tr></table></figure><h2 id="4-4-网络流量采集脚本"><a href="#4-4-网络流量采集脚本" class="headerlink" title="4.4 网络流量采集脚本"></a>4.4 网络流量采集脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python">    <span class="hljs-comment">#!/bin/python</span><br>    <span class="hljs-comment">#coding:utf-8</span><br><br>    <span class="hljs-keyword">import</span> psutil<br>    <span class="hljs-keyword">import</span> time<br><br>    <span class="hljs-comment">#网卡，可以得到网卡属性，连接数，当前流量等信息</span><br>    net = psutil.net_io_counters()<br>    bytes_sent = <span class="hljs-string">&#x27;&#123;0:.2f&#125; Mb&#x27;</span>.<span class="hljs-built_in">format</span>(net.bytes_recv / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span>)<br>    bytes_rcvd = <span class="hljs-string">&#x27;&#123;0:.2f&#125; Mb&#x27;</span>.<span class="hljs-built_in">format</span>(net.bytes_sent / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">u&quot;网卡接收流量 %s 网卡发送流量 %s&quot;</span> % (bytes_rcvd, bytes_sent))<br><br><span class="hljs-comment">## 5.系统批量运维管理</span><br><br>paramiko是用python语言写的一个模块，遵循SSH2协议，支持以加密和认证的方式，进行远程服务器的连接。<br><br><span class="hljs-comment">### 5.1 用户名和密码连接脚本</span><br><br><span class="hljs-comment">#### 5.1.1 未封装脚本</span><br><br>```python<br>    <span class="hljs-comment">#!/bin/python</span><br>    <span class="hljs-comment">#coding:utf-8</span><br><br>    <span class="hljs-keyword">import</span> paramiko<br><br>    <span class="hljs-comment"># 创建SSH对象</span><br>    ssh = paramiko.SSHClient()<br>    <span class="hljs-comment"># 允许连接不在know_hosts文件中的主机</span><br>    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br>    <span class="hljs-comment"># 连接服务器</span><br>    ssh.connect(hostname=<span class="hljs-string">&#x27;192.168.1.22&#x27;</span>, port=<span class="hljs-number">22</span>, username=<span class="hljs-string">&#x27;root&#x27;</span>, password=<span class="hljs-string">&#x27;admin123&#x27;</span>)<br>    <span class="hljs-comment"># 执行命令</span><br>    stdin, stdout, stderr = ssh.exec_command(<span class="hljs-string">&#x27;ls&#x27;</span>)<br>    <span class="hljs-comment"># 获取命令结果</span><br>    result = stdout.read()<br><br>    <span class="hljs-comment"># 关闭连接</span><br>    ssh.close()<br></code></pre></td></tr></table></figure><h4 id="5-1-2-SSHClient-封装-Transport脚本"><a href="#5-1-2-SSHClient-封装-Transport脚本" class="headerlink" title="5.1.2 SSHClient 封装 Transport脚本"></a>5.1.2 SSHClient 封装 Transport脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/bin/python</span><br><span class="hljs-comment">#coding:utf-8</span><br><br><span class="hljs-keyword">import</span> paramiko<br><br>transport = paramiko.Transport((<span class="hljs-string">&#x27;192.168.1.22&#x27;</span>, <span class="hljs-number">22</span>))<br>transport.connect(username=<span class="hljs-string">&#x27;root&#x27;</span>, password=<span class="hljs-string">&#x27;admin123&#x27;</span>)<br>ssh = paramiko.SSHClient()<br>ssh._transport = transport<br>stdin, stdout, stderr = ssh.exec_command(<span class="hljs-string">&#x27;ifconfig&#x27;</span>)<br><span class="hljs-built_in">print</span> stdout.read()<br>transport.close()<br></code></pre></td></tr></table></figure><h3 id="5-2-公钥和私钥连接脚本"><a href="#5-2-公钥和私钥连接脚本" class="headerlink" title="5.2 公钥和私钥连接脚本"></a>5.2 公钥和私钥连接脚本</h3><h4 id="5-2-1-未封装脚本"><a href="#5-2-1-未封装脚本" class="headerlink" title="5.2.1 未封装脚本"></a>5.2.1 未封装脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/bin/python</span><br><span class="hljs-comment">#coding:utf-8</span><br><br><span class="hljs-keyword">import</span> paramiko<br><br>private_key = paramiko.RSAKey.from_private_key_file(<span class="hljs-string">&#x27;/home/auto/.ssh/id_rsa&#x27;</span>)  <br><span class="hljs-comment"># 创建SSH对象</span><br>ssh = paramiko.SSHClient()<br><span class="hljs-comment"># 允许连接不在know_hosts文件中的主机</span><br>ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br><span class="hljs-comment"># 连接服务器</span><br>ssh.connect(hostname=<span class="hljs-string">&#x27;c1.salt.com&#x27;</span>, port=<span class="hljs-number">22</span>, username=<span class="hljs-string">&#x27;wupeiqi&#x27;</span>, key=private_key)<br><br><span class="hljs-comment"># 执行命令</span><br>stdin, stdout, stderr = ssh.exec_command(<span class="hljs-string">&#x27;df&#x27;</span>)<br><span class="hljs-comment"># 获取命令结果</span><br>result = stdout.read()<br><br><span class="hljs-comment"># 关闭连接</span><br>ssh.close()<br></code></pre></td></tr></table></figure><h4 id="5-2-2-SSHClient-封装-Transport脚本"><a href="#5-2-2-SSHClient-封装-Transport脚本" class="headerlink" title="5.2.2 SSHClient 封装 Transport脚本"></a>5.2.2 SSHClient 封装 Transport脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/bin/python</span><br><span class="hljs-comment">#coding:utf-8</span><br><br><span class="hljs-keyword">import</span> paramiko<br><br>private_key = paramiko.RSAKey.from_private_key_file(<span class="hljs-string">&#x27;/root/.ssh/id_rsa&#x27;</span>)<br>transport = paramiko.Transport((<span class="hljs-string">&#x27;192.168.1.22&#x27;</span>, <span class="hljs-number">22</span>))<br>transport.connect(username=<span class="hljs-string">&#x27;root&#x27;</span>, pkey=private_key)<br>ssh = paramiko.SSHClient()<br>ssh._transport = transport<br>stdin, stdout, stderr = ssh.exec_command(<span class="hljs-string">&#x27;df&#x27;</span>)<br><span class="hljs-built_in">print</span> stdout.read()<br>transport.close()<br></code></pre></td></tr></table></figure><h3 id="5-3-sftp上传和下载脚本"><a href="#5-3-sftp上传和下载脚本" class="headerlink" title="5.3 sftp上传和下载脚本"></a>5.3 sftp上传和下载脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/bin/python</span><br><span class="hljs-keyword">import</span> os,sys<br><span class="hljs-keyword">import</span> paramiko<br><br>t = paramiko.Transport((<span class="hljs-string">&#x27;192.168.1.22&#x27;</span>,<span class="hljs-number">22</span>))<br>t.connect(username=<span class="hljs-string">&#x27;root&#x27;</span>,password=<span class="hljs-string">&#x27;admin123&#x27;</span>)<br>sftp = paramiko.SFTPClient.from_transport(t)<br>sftp.put(<span class="hljs-string">&#x27;C:\Users\yunwei\Desktop\error.jpg&#x27;</span>,<span class="hljs-string">&#x27;/home/yunwei/error.jpg&#x27;</span>)<br><span class="hljs-comment">#将error.jpg上传到服务器/home/yangmv目录</span><br>sftp.get(<span class="hljs-string">&#x27;/home/yunwei/sftp.txt&#x27;</span>,<span class="hljs-string">&#x27;C:\Users\yunwei\Desktop\sftp.txt&#x27;</span>)<br><span class="hljs-comment">#将sftp.txt下载到本机桌面</span><br>t.close()<br></code></pre></td></tr></table></figure><h3 id="5-4-批量主机命令执行脚本"><a href="#5-4-批量主机命令执行脚本" class="headerlink" title="5.4 批量主机命令执行脚本"></a>5.4 批量主机命令执行脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/bin/python</span><br><span class="hljs-comment">#coding:utf-8</span><br><br><span class="hljs-keyword">import</span> paramiko<br>port=<span class="hljs-number">22</span><br>username=<span class="hljs-string">&quot;root&quot;</span><br>file=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;ip.list&quot;</span>)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file:<br>    hostname=<span class="hljs-built_in">str</span>(line.split(<span class="hljs-string">&quot;\t&quot;</span>)[<span class="hljs-number">0</span>])<br>    password=<span class="hljs-built_in">str</span>(line.split(<span class="hljs-string">&quot;\t&quot;</span>)[<span class="hljs-number">4</span>]).strip()<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;##########################&quot;</span>,hostname,<span class="hljs-string">&quot;########################&quot;</span><br>    s=paramiko.SSHClient()<br>    s.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br>    s.connect(hostname,port,username,password)<br>    stdin,stdout,sterr=s.exec_command(<span class="hljs-string">&quot;df -Th&quot;</span>)<br>    <span class="hljs-built_in">print</span> stdout.read()<br>    s.close()<br>file.close()<br><br><br><span class="hljs-comment"># ip.list</span><br>test1   <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.22</span>    <span class="hljs-number">22</span>      root    admin123<br>test2   <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.23</span>    <span class="hljs-number">22</span>      root    Aa123456<br></code></pre></td></tr></table></figure><h3 id="5-5-判断是否是一个目录"><a href="#5-5-判断是否是一个目录" class="headerlink" title="5.5 判断是否是一个目录"></a>5.5 判断是否是一个目录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-built_in">dir</span> = <span class="hljs-string">&quot;/var/www/html/EnjoyCarApi/&quot;</span><br><span class="hljs-keyword">if</span> os.path.isdir(<span class="hljs-built_in">dir</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s is a dir&#x27;</span> % <span class="hljs-built_in">dir</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s is not a dir&#x27;</span> % <span class="hljs-built_in">dir</span>)<br><span class="hljs-number">2</span>、计算网段的IP<br><br><span class="hljs-keyword">import</span> IPy<br><br>ip = IPy.IP(<span class="hljs-string">&#x27;172.16.0.0/26&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(ip.<span class="hljs-built_in">len</span>())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ip:<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><h3 id="5-6-gitlab脚本，实现自动操作"><a href="#5-6-gitlab脚本，实现自动操作" class="headerlink" title="5.6 gitlab脚本，实现自动操作"></a>5.6 gitlab脚本，实现自动操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">from flask <span class="hljs-keyword">import</span> Flask,request,render_template,make_response,Response<br><span class="hljs-keyword">import</span> json,os,re,requests<br><span class="hljs-keyword">import</span> <span class="hljs-type">subprocess</span><br><br><span class="hljs-variable">app</span> <span class="hljs-operator">=</span> Flask(__name__)<br><span class="hljs-literal">null</span> = <span class="hljs-string">&quot;&quot;</span><br>cmd = <span class="hljs-string">&quot;/var/www/html/ladmin-devel/&quot;</span><br><span class="hljs-meta">@app</span>.route(<span class="hljs-string">&#x27;/test&#x27;</span>,methods=[<span class="hljs-string">&#x27;POST&#x27;</span>])<br>def <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>:<br>    json_dict = json.loads(request.data)<br><br>name = json_dict[<span class="hljs-string">&#x27;event_name&#x27;</span>]<br>ref = json_dict[<span class="hljs-string">&#x27;ref&#x27;</span>][<span class="hljs-number">11</span>:]<br>project = json_dict[<span class="hljs-string">&#x27;project&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]<br><br><span class="hljs-type">if</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span>= <span class="hljs-string">&#x27;push&#x27;</span> <span class="hljs-type">and</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span>= <span class="hljs-string">&#x27;master&#x27;</span>:<br>    os.chdir(cmd)<br>    s = subprocess.getoutput(<span class="hljs-string">&#x27;sudo -u nginx composer install&#x27;</span>)<br>    <span class="hljs-keyword">return</span> Response(s)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&#x27;none&#x27;</span>)<br><br><span class="hljs-type">if</span> <span class="hljs-variable">__name__</span> <span class="hljs-operator">=</span>= <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-number">8080</span>)<br></code></pre></td></tr></table></figure><h3 id="5-7-系统内存与磁盘"><a href="#5-7-系统内存与磁盘" class="headerlink" title="5.7 系统内存与磁盘"></a>5.7 系统内存与磁盘</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import psutil<br><br>def memissue():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;内存信息：&#x27;</span>)<br>    mem = psutil.virtual_memory()<br>    # 单位换算为MB<br>    memtotal = mem.total/1024/1024<br>    memused = mem.used/1024/1024<br>    membaifen = str(mem.used/mem.total<span class="hljs-number">*100</span>) + <span class="hljs-string">&#x27;%&#x27;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%.2fMB&#x27;</span> % memused)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%.2fMB&#x27;</span> % memtotal)<br><span class="hljs-built_in">print</span>(membaifen)<br><br>def cuplist():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;磁盘信息：&#x27;</span>)<br>    disk = psutil.disk_partitions()<br>    diskuse = psutil.disk_usage(<span class="hljs-string">&#x27;/&#x27;</span>)<br>    #单位换算为GB<br>    diskused = diskuse.used / 1024 / 1024 / 1024<br>    disktotal = diskuse.total / 1024 / 1024 / 1024<br>    diskbaifen = diskused / disktotal * 100<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%.2fGB&#x27;</span> % diskused)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%.2fGB&#x27;</span> % disktotal)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%.2f&#x27;</span> % diskbaifen)<br><br>memissue()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*******************&#x27;</span>)<br>cuplist()<br></code></pre></td></tr></table></figure><h3 id="5-8-解析域名的IP"><a href="#5-8-解析域名的IP" class="headerlink" title="5.8 解析域名的IP"></a>5.8 解析域名的IP</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">import</span> dns.resolver<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br>hosts = [<span class="hljs-string">&#x27;baidu.com&#x27;</span>,<span class="hljs-string">&#x27;weibo.com&#x27;</span>]<br>s = defaultdict(list)<br><span class="hljs-keyword">def</span> query(hosts):<br>    <span class="hljs-keyword">for</span> host in hosts:<br>        ip = dns.resolver.query(host,<span class="hljs-string">&quot;A&quot;</span>)<br>        <span class="hljs-keyword">for</span> i in ip:<br>            s[host].<span class="hljs-keyword">append</span>(i)<br><br><span class="hljs-keyword">return</span> s<br><br><span class="hljs-keyword">for</span> i in query(hosts):<br><br><span class="hljs-keyword">print</span>(i,s[i])<br></code></pre></td></tr></table></figure><h3 id="5-9-下载阿里云RDS二进制日志"><a href="#5-9-下载阿里云RDS二进制日志" class="headerlink" title="5.9 下载阿里云RDS二进制日志"></a>5.9 下载阿里云RDS二进制日志</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">查询阿里云rds binlog日志</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">import</span> base64,urllib.request<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> hmac<br><span class="hljs-keyword">import</span> uuid,time,json,wget<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RDS_BINLOG_RELATE</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-comment">#阿里云的id和key</span><br>    self.access_id = <span class="hljs-string">&#x27;**********************&#x27;</span><br>    self.access_key = <span class="hljs-string">&#x27;**********************&#x27;</span><br><br><span class="hljs-comment">#通过id和key来进行签名</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">signed</span>(<span class="hljs-params">self</span>):<br>    timestamp = time.strftime(<span class="hljs-string">&quot;%Y-%m-%dT%H:%M:%SZ&quot;</span>, time.gmtime())<br>    header = &#123;<br>        <span class="hljs-string">&#x27;Action&#x27;</span>: <span class="hljs-string">&#x27;DescribeBinlogFiles&#x27;</span>,<br>        <span class="hljs-string">&#x27;DBInstanceId&#x27;</span>: <span class="hljs-string">&#x27;rm-wz9azm783q621n9&#x27;</span>,<br>        <span class="hljs-string">&#x27;StartTime&#x27;</span>: <span class="hljs-string">&#x27;2018-07-11T15:00:00Z&#x27;</span>,<br>        <span class="hljs-string">&#x27;EndTime&#x27;</span>: timestamp,<br>        <span class="hljs-string">&#x27;Format&#x27;</span>: <span class="hljs-string">&#x27;JSON&#x27;</span>,<br>        <span class="hljs-string">&#x27;Version&#x27;</span>: <span class="hljs-string">&#x27;2014-08-15&#x27;</span>,<br>        <span class="hljs-string">&#x27;AccessKeyId&#x27;</span>: self.access_id,<br>        <span class="hljs-string">&#x27;SignatureVersion&#x27;</span>: <span class="hljs-string">&#x27;1.0&#x27;</span>,<br>        <span class="hljs-string">&#x27;SignatureMethod&#x27;</span>: <span class="hljs-string">&#x27;HMAC-SHA1&#x27;</span>,<br>        <span class="hljs-string">&#x27;SignatureNonce&#x27;</span>: <span class="hljs-built_in">str</span>(uuid.uuid1()),<br>        <span class="hljs-string">&#x27;TimeStamp&#x27;</span>: timestamp,<br><br>    &#125;<br><br>    <span class="hljs-comment">#对请求头进行排序</span><br>    sortedD = <span class="hljs-built_in">sorted</span>(header.items(), key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">0</span>])<br>    url = <span class="hljs-string">&#x27;https://rds.aliyuncs.com&#x27;</span><br>    canstring = <span class="hljs-string">&#x27;&#x27;</span><br><br>    <span class="hljs-comment">#将请求参数以#连接</span><br>    <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> sortedD:<br>        canstring += <span class="hljs-string">&#x27;&amp;&#x27;</span> + self.percentEncode(k) + <span class="hljs-string">&#x27;=&#x27;</span> + self.percentEncode(v)<br><br>    <span class="hljs-comment">#对请求连接进行阿里云要的编码规则进行编码</span><br>    stiingToSign = <span class="hljs-string">&#x27;GET&amp;%2F&amp;&#x27;</span> + self.percentEncode(canstring[<span class="hljs-number">1</span>:])<br><br>    bs = self.access_key + <span class="hljs-string">&#x27;&amp;&#x27;</span><br>    bs = <span class="hljs-built_in">bytes</span>(bs, encoding=<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>    stiingToSign = <span class="hljs-built_in">bytes</span>(stiingToSign, encoding=<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>    h = hmac.new(bs, stiingToSign, hashlib.sha1)<br>    stiingToSign = base64.b64encode(h.digest()).strip()<br><br>    <span class="hljs-comment">#将签名加入到请求头</span><br>    header[<span class="hljs-string">&#x27;Signature&#x27;</span>] = stiingToSign<br><br>    <span class="hljs-comment">#返回url</span><br>    url = url + <span class="hljs-string">&quot;/?&quot;</span> + urllib.parse.urlencode(header)<br>    <span class="hljs-keyword">return</span> url<br><br><span class="hljs-comment">#按照规则替换</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">percentEncode</span>(<span class="hljs-params">self,store</span>):<br>    encodeStr = store<br>    res = urllib.request.quote(encodeStr)<br>    res = res.replace(<span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27;%20&#x27;</span>)<br>    res = res.replace(<span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;%2A&#x27;</span>)<br>    res = res.replace(<span class="hljs-string">&#x27;%7E&#x27;</span>, <span class="hljs-string">&#x27;~&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(res)<br><br><span class="hljs-comment">#筛选出链接下载二进制日志文件</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getBinLog</span>(<span class="hljs-params">self</span>):<br>    binlog_url = self.signed()<br>    req = urllib.request.urlopen(binlog_url)<br>    req = req.read().decode(<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>    res = json.loads(req)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> res[<span class="hljs-string">&#x27;Items&#x27;</span>][<span class="hljs-string">&#x27;BinLogFile&#x27;</span>]:<br>        wget.download(i[<span class="hljs-string">&#x27;DownloadLink&#x27;</span>])<br><br>s = RDS_BINLOG_RELATE()<br>s.getBinLog()<br><br><br></code></pre></td></tr></table></figure><h3 id="5-10-将磁盘使用情况写入文件中，并按天保存"><a href="#5-10-将磁盘使用情况写入文件中，并按天保存" class="headerlink" title="5.10 将磁盘使用情况写入文件中，并按天保存"></a>5.10 将磁盘使用情况写入文件中，并按天保存</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs lua">import <span class="hljs-built_in">time</span>, <span class="hljs-built_in">os</span><br><br>new_time = <span class="hljs-built_in">time</span>.strftime(<span class="hljs-string">&quot;%Y-%m-%d&quot;</span>)<br>disk_status = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">popen</span>(<span class="hljs-string">&#x27;df -h&#x27;</span>).readlines()  #readlines<br>f = <span class="hljs-built_in">open</span>(new_time+<span class="hljs-string">&#x27;.log&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br>f.<span class="hljs-built_in">write</span>(<span class="hljs-string">&#x27;%s\n&#x27;</span> % disk_status)<br>f.<span class="hljs-built_in">flush</span>()<br>f.<span class="hljs-built_in">close</span>()<br><br>/*<br><span class="hljs-built_in">read</span>        读取整个文件<br><br>readline    读取下一行<br><br>readlines   读取整个文件到一个迭代器以供我们遍历（读取到一个list中，以供使用，比较方便）<br>*/<br></code></pre></td></tr></table></figure><h3 id="5-11-统计nginx每个IP访问量"><a href="#5-11-统计nginx每个IP访问量" class="headerlink" title="5.11 统计nginx每个IP访问量"></a>5.11 统计nginx每个IP访问量</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">list = <span class="hljs-selector-attr">[]</span><br> f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/var/log/httpd/access_log&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br> star = f<span class="hljs-selector-class">.readlines</span>()<br> f<span class="hljs-selector-class">.close</span>()<br> <span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> star:<br>    ip = <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.split</span>()<span class="hljs-selector-attr">[0]</span><br>     list<span class="hljs-selector-class">.append</span>(ip)<br> list_num = <span class="hljs-built_in">set</span>(list)<br> <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> list_num:<br>    num = list<span class="hljs-selector-class">.count</span>(j)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python100day-9</title>
    <link href="/2022/07/27/python100day-9/"/>
    <url>/2022/07/27/python100day-9/</url>
    
    <content type="html"><![CDATA[<h1 id="python100day-9"><a href="#python100day-9" class="headerlink" title="python100day-9"></a>python100day-9</h1><h2 id="面向对象进阶"><a href="#面向对象进阶" class="headerlink" title="面向对象进阶"></a>面向对象进阶</h2><p>在前面的章节我们已经了解了面向对象的入门知识，知道了如何定义类，如何创建对象以及如何给对象发消息。为了能够更好的使用面向对象编程思想进行程序开发，我们还需要对Python中的面向对象编程进行更为深入的了解。</p><h3 id="property装饰器"><a href="#property装饰器" class="headerlink" title="@property装饰器"></a>@property装饰器</h3><p>之前我们讨论过Python中属性和方法访问权限的问题，虽然我们不建议将属性设置为私有的，但是如果直接将属性暴露给外界也是有问题的，比如我们没有办法检查赋给属性的值是否有效。我们之前的建议是将属性命名以单下划线开头，通过这种方式来暗示属性是受保护的，不建议外界直接访问，那么如果想访问属性可以通过属性的getter（访问器）和setter（修改器）方法进行对应的操作。如果要做到这点，就可以考虑使用@property包装器来包装getter和setter方法，使得对属性的访问既安全又方便，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self._name = name<br>        self._age = age<br><br>    <span class="hljs-comment"># 访问器 - getter方法</span><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._name<br><br>    <span class="hljs-comment"># 访问器 - getter方法</span><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._age<br><br>    <span class="hljs-comment"># 修改器 - setter方法</span><br><span class="hljs-meta">    @age.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self, age</span>):<br>        self._age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">play</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self._age &lt;= <span class="hljs-number">16</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在玩飞行棋.&#x27;</span> % self._name)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在玩斗地主.&#x27;</span> % self._name)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    person = Person(<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-number">12</span>)<br>    person.play()<br>    person.age = <span class="hljs-number">22</span><br>    person.play()<br>    <span class="hljs-comment"># person.name = &#x27;白元芳&#x27;  # AttributeError: can&#x27;t set attribute</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="slots-魔法"><a href="#slots-魔法" class="headerlink" title="__slots__魔法"></a>__slots__魔法</h3><p>我们讲到这里，不知道大家是否已经意识到，Python是一门<a href="https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80">动态语言</a>。通常，动态语言允许我们在程序运行时给对象绑定新的属性或方法，当然也可以对已经绑定的属性和方法进行解绑定。但是如果我们需要限定自定义类型的对象只能绑定某些属性，可以通过在类中定义__slots__变量来进行限定。需要注意的是__slots__的限定只对当前类的对象生效，对子类并不起任何作用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-comment"># 限定Person对象只能绑定_name, _age和_gender属性</span><br>    __slots__ = (<span class="hljs-string">&#x27;_name&#x27;</span>, <span class="hljs-string">&#x27;_age&#x27;</span>, <span class="hljs-string">&#x27;_gender&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self._name = name<br>        self._age = age<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._name<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._age<br><br><span class="hljs-meta">    @age.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self, age</span>):<br>        self._age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">play</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self._age &lt;= <span class="hljs-number">16</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在玩飞行棋.&#x27;</span> % self._name)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在玩斗地主.&#x27;</span> % self._name)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    person = Person(<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-number">22</span>)<br>    person.play()<br>    person._gender = <span class="hljs-string">&#x27;男&#x27;</span><br>    <span class="hljs-comment"># AttributeError: &#x27;Person&#x27; object has no attribute &#x27;_is_gay&#x27;</span><br>    <span class="hljs-comment"># person._is_gay = True</span><br></code></pre></td></tr></table></figure><h3 id="静态方法和类方法"><a href="#静态方法和类方法" class="headerlink" title="静态方法和类方法"></a>静态方法和类方法</h3><p>之前，我们在类中定义的方法都是对象方法，也就是说这些方法都是发送给对象的消息。实际上，我们写在类中的方法并不需要都是对象方法，例如我们定义一个“三角形”类，通过传入三条边长来构造三角形，并提供计算周长和面积的方法，但是传入的三条边长未必能构造出三角形对象，因此我们可以先写一个方法来验证三条边长是否可以构成三角形，这个方法很显然就不是对象方法，因为在调用这个方法时三角形对象尚未创建出来（因为都不知道三条边能不能构成三角形），所以这个方法是属于三角形类而并不属于三角形对象的。我们可以使用静态方法来解决这类问题，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, a, b, c</span>):<br>        self._a = a<br>        self._b = b<br>        self._c = c<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_valid</span>(<span class="hljs-params">a, b, c</span>):<br>        <span class="hljs-keyword">return</span> a + b &gt; c <span class="hljs-keyword">and</span> b + c &gt; a <span class="hljs-keyword">and</span> a + c &gt; b<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">perimeter</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._a + self._b + self._c<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">area</span>(<span class="hljs-params">self</span>):<br>        half = self.perimeter() / <span class="hljs-number">2</span><br>        <span class="hljs-keyword">return</span> sqrt(half * (half - self._a) *<br>                    (half - self._b) * (half - self._c))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    a, b, c = <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span><br>    <span class="hljs-comment"># 静态方法和类方法都是通过给类发消息来调用的</span><br>    <span class="hljs-keyword">if</span> Triangle.is_valid(a, b, c):<br>        t = Triangle(a, b, c)<br>        <span class="hljs-built_in">print</span>(t.perimeter())<br>        <span class="hljs-comment"># 也可以通过给类发消息来调用对象方法但是要传入接收消息的对象作为参数</span><br>        <span class="hljs-comment"># print(Triangle.perimeter(t))</span><br>        <span class="hljs-built_in">print</span>(t.area())<br>        <span class="hljs-comment"># print(Triangle.area(t))</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;无法构成三角形.&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>和静态方法比较类似，Python还可以在类中定义类方法，类方法的第一个参数约定名为cls，它代表的是当前类相关的信息的对象（类本身也是一个对象，有的地方也称之为类的元数据对象），通过这个参数我们可以获取和类相关的信息并且可以创建出类的对象，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time, localtime, sleep<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Clock</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;数字时钟&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, hour=<span class="hljs-number">0</span>, minute=<span class="hljs-number">0</span>, second=<span class="hljs-number">0</span></span>):<br>        self._hour = hour<br>        self._minute = minute<br>        self._second = second<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">now</span>(<span class="hljs-params">cls</span>):<br>        ctime = localtime(time())<br>        <span class="hljs-keyword">return</span> cls(ctime.tm_hour, ctime.tm_min, ctime.tm_sec)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;走字&quot;&quot;&quot;</span><br>        self._second += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> self._second == <span class="hljs-number">60</span>:<br>            self._second = <span class="hljs-number">0</span><br>            self._minute += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> self._minute == <span class="hljs-number">60</span>:<br>                self._minute = <span class="hljs-number">0</span><br>                self._hour += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> self._hour == <span class="hljs-number">24</span>:<br>                    self._hour = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;显示时间&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;%02d:%02d:%02d&#x27;</span> % \<br>               (self._hour, self._minute, self._second)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 通过类方法创建对象并获取系统时间</span><br>    clock = Clock.now()<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-built_in">print</span>(clock.show())<br>        sleep(<span class="hljs-number">1</span>)<br>        clock.run()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><p>简单的说，类和类之间的关系有三种：is-a、has-a和use-a关系。</p><ul><li>is-a关系也叫继承或泛化，比如学生和人的关系、手机和电子产品的关系都属于继承关系。</li><li>has-a关系通常称之为关联，比如部门和员工的关系，汽车和引擎的关系都属于关联关系；关联关系如果是整体和部分的关联，那么我们称之为聚合关系；如果整体进一步负责了部分的生命周期（整体和部分是不可分割的，同时同在也同时消亡），那么这种就是最强的关联关系，我们称之为合成关系。</li><li>use-a关系通常称之为依赖，比如司机有一个驾驶的行为（方法），其中（的参数）使用到了汽车，那么司机和汽车的关系就是依赖关系。</li></ul><p>我们可以使用一种叫做<a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80">UML</a>（统一建模语言）的东西来进行面向对象建模，其中一项重要的工作就是把类和类之间的关系用标准化的图形符号描述出来。关于UML我们在这里不做详细的介绍，有兴趣的读者可以自行阅读<a href="https://e.jd.com/30392949.html">《UML面向对象设计基础》</a>一书。</p><p><img src="/./res/uml-components.png"></p><p><img src="/./res/uml-example.png"></p><p>利用类之间的这些关系，我们可以在已有类的基础上来完成某些操作，也可以在已有类的基础上创建新的类，这些都是实现代码复用的重要手段。复用现有的代码不仅可以减少开发的工作量，也有利于代码的管理和维护，这是我们在日常工作中都会使用到的技术手段。</p><h3 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h3><p>刚才我们提到了，可以在已有类的基础上创建新类，这其中的一种做法就是让一个类从另一个类那里将属性和方法直接继承下来，从而减少重复代码的编写。提供继承信息的我们称之为父类，也叫超类或基类；得到继承信息的我们称之为子类，也叫派生类或衍生类。子类除了继承父类提供的属性和方法，还可以定义自己特有的属性和方法，所以子类比父类拥有的更多的能力，在实际开发中，我们经常会用子类对象去替换掉一个父类对象，这是面向对象编程中一个常见的行为，对应的原则称之为<a href="https://zh.wikipedia.org/wiki/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99">里氏替换原则</a>。下面我们先看一个继承的例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;人&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self._name = name<br>        self._age = age<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._name<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._age<br><br><span class="hljs-meta">    @age.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self, age</span>):<br>        self._age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">play</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在愉快的玩耍.&#x27;</span> % self._name)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">watch_av</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self._age &gt;= <span class="hljs-number">18</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s正在观看爱情动作片.&#x27;</span> % self._name)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s只能观看《熊出没》.&#x27;</span> % self._name)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;学生&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, grade</span>):<br>        <span class="hljs-built_in">super</span>().__init__(name, age)<br>        self._grade = grade<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">grade</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._grade<br><br><span class="hljs-meta">    @grade.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">grade</span>(<span class="hljs-params">self, grade</span>):<br>        self._grade = grade<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">study</span>(<span class="hljs-params">self, course</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s的%s正在学习%s.&#x27;</span> % (self._grade, self._name, course))<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;老师&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, title</span>):<br>        <span class="hljs-built_in">super</span>().__init__(name, age)<br>        self._title = title<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">title</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._title<br><br><span class="hljs-meta">    @title.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">title</span>(<span class="hljs-params">self, title</span>):<br>        self._title = title<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">teach</span>(<span class="hljs-params">self, course</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s%s正在讲%s.&#x27;</span> % (self._name, self._title, course))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    stu = Student(<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-number">15</span>, <span class="hljs-string">&#x27;初三&#x27;</span>)<br>    stu.study(<span class="hljs-string">&#x27;数学&#x27;</span>)<br>    stu.watch_av()<br>    t = Teacher(<span class="hljs-string">&#x27;骆昊&#x27;</span>, <span class="hljs-number">38</span>, <span class="hljs-string">&#x27;砖家&#x27;</span>)<br>    t.teach(<span class="hljs-string">&#x27;Python程序设计&#x27;</span>)<br>    t.watch_av()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本，这个动作称之为方法重写（override）。通过方法重写我们可以让父类的同一个行为在子类中拥有不同的实现版本，当我们调用这个经过子类重写的方法时，不同的子类对象会表现出不同的行为，这个就是多态（poly-morphism）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> ABCMeta, abstractmethod<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pet</span>(<span class="hljs-built_in">object</span>, metaclass=ABCMeta):<br>    <span class="hljs-string">&quot;&quot;&quot;宠物&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, nickname</span>):<br>        self._nickname = nickname<br><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_voice</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;发出声音&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">Pet</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;狗&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_voice</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s: 汪汪汪...&#x27;</span> % self._nickname)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-title class_ inherited__">Pet</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;猫&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_voice</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s: 喵...喵...&#x27;</span> % self._nickname)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    pets = [Dog(<span class="hljs-string">&#x27;旺财&#x27;</span>), Cat(<span class="hljs-string">&#x27;凯蒂&#x27;</span>), Dog(<span class="hljs-string">&#x27;大黄&#x27;</span>)]<br>    <span class="hljs-keyword">for</span> pet <span class="hljs-keyword">in</span> pets:<br>        pet.make_voice()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>在上面的代码中，我们将<code>Pet</code>类处理成了一个抽象类，所谓抽象类就是不能够创建对象的类，这种类的存在就是专门为了让其他类去继承它。Python从语法层面并没有像Java或C#那样提供对抽象类的支持，但是我们可以通过<code>abc</code>模块的<code>ABCMeta</code>元类和<code>abstractmethod</code>包装器来达到抽象类的效果，如果一个类中存在抽象方法那么这个类就不能够实例化（创建对象）。上面的代码中，<code>Dog</code>和<code>Cat</code>两个子类分别对<code>Pet</code>类中的<code>make_voice</code>抽象方法进行了重写并给出了不同的实现版本，当我们在<code>main</code>函数中调用该方法时，这个方法就表现出了多态行为（同样的方法做了不同的事情）。</p><h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><h4 id="案例1：奥特曼打小怪兽。"><a href="#案例1：奥特曼打小怪兽。" class="headerlink" title="案例1：奥特曼打小怪兽。"></a>案例1：奥特曼打小怪兽。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> ABCMeta, abstractmethod<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint, randrange<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fighter</span>(<span class="hljs-built_in">object</span>, metaclass=ABCMeta):<br>    <span class="hljs-string">&quot;&quot;&quot;战斗者&quot;&quot;&quot;</span><br><br>    <span class="hljs-comment"># 通过__slots__魔法限定对象可以绑定的成员变量</span><br>    __slots__ = (<span class="hljs-string">&#x27;_name&#x27;</span>, <span class="hljs-string">&#x27;_hp&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, hp</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化方法</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param name: 名字</span><br><span class="hljs-string">        :param hp: 生命值</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self._name = name<br>        self._hp = hp<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._name<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hp</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._hp<br><br><span class="hljs-meta">    @hp.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hp</span>(<span class="hljs-params">self, hp</span>):<br>        self._hp = hp <span class="hljs-keyword">if</span> hp &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">alive</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._hp &gt; <span class="hljs-number">0</span><br><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;攻击</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param other: 被攻击的对象</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ultraman</span>(<span class="hljs-title class_ inherited__">Fighter</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;奥特曼&quot;&quot;&quot;</span><br><br>    __slots__ = (<span class="hljs-string">&#x27;_name&#x27;</span>, <span class="hljs-string">&#x27;_hp&#x27;</span>, <span class="hljs-string">&#x27;_mp&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, hp, mp</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化方法</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param name: 名字</span><br><span class="hljs-string">        :param hp: 生命值</span><br><span class="hljs-string">        :param mp: 魔法值</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-built_in">super</span>().__init__(name, hp)<br>        self._mp = mp<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">self, other</span>):<br>        other.hp -= randint(<span class="hljs-number">15</span>, <span class="hljs-number">25</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">huge_attack</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;究极必杀技(打掉对方至少50点或四分之三的血)</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param other: 被攻击的对象</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :return: 使用成功返回True否则返回False</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> self._mp &gt;= <span class="hljs-number">50</span>:<br>            self._mp -= <span class="hljs-number">50</span><br>            injury = other.hp * <span class="hljs-number">3</span> // <span class="hljs-number">4</span><br>            injury = injury <span class="hljs-keyword">if</span> injury &gt;= <span class="hljs-number">50</span> <span class="hljs-keyword">else</span> <span class="hljs-number">50</span><br>            other.hp -= injury<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            self.attack(other)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">magic_attack</span>(<span class="hljs-params">self, others</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;魔法攻击</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param others: 被攻击的群体</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :return: 使用魔法成功返回True否则返回False</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> self._mp &gt;= <span class="hljs-number">20</span>:<br>            self._mp -= <span class="hljs-number">20</span><br>            <span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> others:<br>                <span class="hljs-keyword">if</span> temp.alive:<br>                    temp.hp -= randint(<span class="hljs-number">10</span>, <span class="hljs-number">15</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">resume</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;恢复魔法值&quot;&quot;&quot;</span><br>        incr_point = randint(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)<br>        self._mp += incr_point<br>        <span class="hljs-keyword">return</span> incr_point<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;~~~%s奥特曼~~~\n&#x27;</span> % self._name + \<br>            <span class="hljs-string">&#x27;生命值: %d\n&#x27;</span> % self._hp + \<br>            <span class="hljs-string">&#x27;魔法值: %d\n&#x27;</span> % self._mp<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Monster</span>(<span class="hljs-title class_ inherited__">Fighter</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;小怪兽&quot;&quot;&quot;</span><br><br>    __slots__ = (<span class="hljs-string">&#x27;_name&#x27;</span>, <span class="hljs-string">&#x27;_hp&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">self, other</span>):<br>        other.hp -= randint(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;~~~%s小怪兽~~~\n&#x27;</span> % self._name + \<br>            <span class="hljs-string">&#x27;生命值: %d\n&#x27;</span> % self._hp<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_any_alive</span>(<span class="hljs-params">monsters</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;判断有没有小怪兽是活着的&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> monster <span class="hljs-keyword">in</span> monsters:<br>        <span class="hljs-keyword">if</span> monster.alive &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">select_alive_one</span>(<span class="hljs-params">monsters</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;选中一只活着的小怪兽&quot;&quot;&quot;</span><br>    monsters_len = <span class="hljs-built_in">len</span>(monsters)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        index = randrange(monsters_len)<br>        monster = monsters[index]<br>        <span class="hljs-keyword">if</span> monster.alive &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> monster<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">display_info</span>(<span class="hljs-params">ultraman, monsters</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;显示奥特曼和小怪兽的信息&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(ultraman)<br>    <span class="hljs-keyword">for</span> monster <span class="hljs-keyword">in</span> monsters:<br>        <span class="hljs-built_in">print</span>(monster, end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    u = Ultraman(<span class="hljs-string">&#x27;骆昊&#x27;</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">120</span>)<br>    m1 = Monster(<span class="hljs-string">&#x27;狄仁杰&#x27;</span>, <span class="hljs-number">250</span>)<br>    m2 = Monster(<span class="hljs-string">&#x27;白元芳&#x27;</span>, <span class="hljs-number">500</span>)<br>    m3 = Monster(<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-number">750</span>)<br>    ms = [m1, m2, m3]<br>    fight_round = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> u.alive <span class="hljs-keyword">and</span> is_any_alive(ms):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;========第%02d回合========&#x27;</span> % fight_round)<br>        m = select_alive_one(ms)  <span class="hljs-comment"># 选中一只小怪兽</span><br>        skill = randint(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)   <span class="hljs-comment"># 通过随机数选择使用哪种技能</span><br>        <span class="hljs-keyword">if</span> skill &lt;= <span class="hljs-number">6</span>:  <span class="hljs-comment"># 60%的概率使用普通攻击</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s使用普通攻击打了%s.&#x27;</span> % (u.name, m.name))<br>            u.attack(m)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s的魔法值恢复了%d点.&#x27;</span> % (u.name, u.resume()))<br>        <span class="hljs-keyword">elif</span> skill &lt;= <span class="hljs-number">9</span>:  <span class="hljs-comment"># 30%的概率使用魔法攻击(可能因魔法值不足而失败)</span><br>            <span class="hljs-keyword">if</span> u.magic_attack(ms):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s使用了魔法攻击.&#x27;</span> % u.name)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s使用魔法失败.&#x27;</span> % u.name)<br>        <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 10%的概率使用究极必杀技(如果魔法值不足则使用普通攻击)</span><br>            <span class="hljs-keyword">if</span> u.huge_attack(m):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s使用究极必杀技虐了%s.&#x27;</span> % (u.name, m.name))<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s使用普通攻击打了%s.&#x27;</span> % (u.name, m.name))<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s的魔法值恢复了%d点.&#x27;</span> % (u.name, u.resume()))<br>        <span class="hljs-keyword">if</span> m.alive &gt; <span class="hljs-number">0</span>:  <span class="hljs-comment"># 如果选中的小怪兽没有死就回击奥特曼</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s回击了%s.&#x27;</span> % (m.name, u.name))<br>            m.attack(u)<br>        display_info(u, ms)  <span class="hljs-comment"># 每个回合结束后显示奥特曼和小怪兽的信息</span><br>        fight_round += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n========战斗结束!========\n&#x27;</span>)<br>    <span class="hljs-keyword">if</span> u.alive &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s奥特曼胜利!&#x27;</span> % u.name)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;小怪兽胜利!&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h4 id="案例2：扑克游戏。"><a href="#案例2：扑克游戏。" class="headerlink" title="案例2：扑克游戏。"></a>案例2：扑克游戏。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> random<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Card</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;一张牌&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, suite, face</span>):<br>        self._suite = suite<br>        self._face = face<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">face</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._face<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">suite</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._suite<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self._face == <span class="hljs-number">1</span>:<br>            face_str = <span class="hljs-string">&#x27;A&#x27;</span><br>        <span class="hljs-keyword">elif</span> self._face == <span class="hljs-number">11</span>:<br>            face_str = <span class="hljs-string">&#x27;J&#x27;</span><br>        <span class="hljs-keyword">elif</span> self._face == <span class="hljs-number">12</span>:<br>            face_str = <span class="hljs-string">&#x27;Q&#x27;</span><br>        <span class="hljs-keyword">elif</span> self._face == <span class="hljs-number">13</span>:<br>            face_str = <span class="hljs-string">&#x27;K&#x27;</span><br>        <span class="hljs-keyword">else</span>:<br>            face_str = <span class="hljs-built_in">str</span>(self._face)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;%s%s&#x27;</span> % (self._suite, face_str)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.__str__()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Poker</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;一副牌&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self._cards = [Card(suite, face) <br>                       <span class="hljs-keyword">for</span> suite <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;♠♥♣♦&#x27;</span><br>                       <span class="hljs-keyword">for</span> face <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">14</span>)]<br>        self._current = <span class="hljs-number">0</span><br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cards</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._cards<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">shuffle</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;洗牌(随机乱序)&quot;&quot;&quot;</span><br>        self._current = <span class="hljs-number">0</span><br>        random.shuffle(self._cards)<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;发牌&quot;&quot;&quot;</span><br>        card = self._cards[self._current]<br>        self._current += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> card<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">has_next</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;还有没有牌&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self._current &lt; <span class="hljs-built_in">len</span>(self._cards)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Player</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;玩家&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        self._name = name<br>        self._cards_on_hand = []<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._name<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cards_on_hand</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._cards_on_hand<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, card</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;摸牌&quot;&quot;&quot;</span><br>        self._cards_on_hand.append(card)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">arrange</span>(<span class="hljs-params">self, card_key</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;玩家整理手上的牌&quot;&quot;&quot;</span><br>        self._cards_on_hand.sort(key=card_key)<br><br><br><span class="hljs-comment"># 排序规则-先根据花色再根据点数排序</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_key</span>(<span class="hljs-params">card</span>):<br>    <span class="hljs-keyword">return</span> (card.suite, card.face)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    p = Poker()<br>    p.shuffle()<br>    players = [Player(<span class="hljs-string">&#x27;东邪&#x27;</span>), Player(<span class="hljs-string">&#x27;西毒&#x27;</span>), Player(<span class="hljs-string">&#x27;南帝&#x27;</span>), Player(<span class="hljs-string">&#x27;北丐&#x27;</span>)]<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">13</span>):<br>        <span class="hljs-keyword">for</span> player <span class="hljs-keyword">in</span> players:<br>            player.get(p.<span class="hljs-built_in">next</span>)<br>    <span class="hljs-keyword">for</span> player <span class="hljs-keyword">in</span> players:<br>        <span class="hljs-built_in">print</span>(player.name + <span class="hljs-string">&#x27;:&#x27;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        player.arrange(get_key)<br>        <span class="hljs-built_in">print</span>(player.cards_on_hand)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 大家可以自己尝试在上面代码的基础上写一个简单的扑克游戏，例如21点(Black Jack)，游戏的规则可以自己在网上找一找。</p></blockquote><h4 id="案例3：工资结算系统。"><a href="#案例3：工资结算系统。" class="headerlink" title="案例3：工资结算系统。"></a>案例3：工资结算系统。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">某公司有三种类型的员工 分别是部门经理、程序员和销售员</span><br><span class="hljs-string">需要设计一个工资结算系统 根据提供的员工信息来计算月薪</span><br><span class="hljs-string">部门经理的月薪是每月固定15000元</span><br><span class="hljs-string">程序员的月薪按本月工作时间计算 每小时150元</span><br><span class="hljs-string">销售员的月薪是1200元的底薪加上销售额5%的提成</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> ABCMeta, abstractmethod<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-built_in">object</span>, metaclass=ABCMeta):<br>    <span class="hljs-string">&quot;&quot;&quot;员工&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        初始化方法</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param name: 姓名</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self._name = name<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._name<br><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_salary</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        获得月薪</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :return: 月薪</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span>(<span class="hljs-title class_ inherited__">Employee</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;部门经理&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_salary</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">15000.0</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Programmer</span>(<span class="hljs-title class_ inherited__">Employee</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;程序员&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, working_hour=<span class="hljs-number">0</span></span>):<br>        <span class="hljs-built_in">super</span>().__init__(name)<br>        self._working_hour = working_hour<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">working_hour</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._working_hour<br><br><span class="hljs-meta">    @working_hour.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">working_hour</span>(<span class="hljs-params">self, working_hour</span>):<br>        self._working_hour = working_hour <span class="hljs-keyword">if</span> working_hour &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_salary</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">150.0</span> * self._working_hour<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Salesman</span>(<span class="hljs-title class_ inherited__">Employee</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;销售员&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, sales=<span class="hljs-number">0</span></span>):<br>        <span class="hljs-built_in">super</span>().__init__(name)<br>        self._sales = sales<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sales</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._sales<br><br><span class="hljs-meta">    @sales.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sales</span>(<span class="hljs-params">self, sales</span>):<br>        self._sales = sales <span class="hljs-keyword">if</span> sales &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_salary</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1200.0</span> + self._sales * <span class="hljs-number">0.05</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    emps = [<br>        Manager(<span class="hljs-string">&#x27;刘备&#x27;</span>), Programmer(<span class="hljs-string">&#x27;诸葛亮&#x27;</span>),<br>        Manager(<span class="hljs-string">&#x27;曹操&#x27;</span>), Salesman(<span class="hljs-string">&#x27;荀彧&#x27;</span>),<br>        Salesman(<span class="hljs-string">&#x27;吕布&#x27;</span>), Programmer(<span class="hljs-string">&#x27;张辽&#x27;</span>),<br>        Programmer(<span class="hljs-string">&#x27;赵云&#x27;</span>)<br>    ]<br>    <span class="hljs-keyword">for</span> emp <span class="hljs-keyword">in</span> emps:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(emp, Programmer):<br>            emp.working_hour = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入%s本月工作时间: &#x27;</span> % emp.name))<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(emp, Salesman):<br>            emp.sales = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入%s本月销售额: &#x27;</span> % emp.name))<br>        <span class="hljs-comment"># 同样是接收get_salary这个消息但是不同的员工表现出了不同的行为(多态)</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s本月工资为: ￥%s元&#x27;</span> %<br>              (emp.name, emp.get_salary()))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python100day</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python实例100例</title>
    <link href="/2022/07/26/python%E5%AE%9E%E4%BE%8B100%E4%BE%8B/"/>
    <url>/2022/07/26/python%E5%AE%9E%E4%BE%8B100%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="python实例100例"><a href="#python实例100例" class="headerlink" title="python实例100例"></a>python实例100例</h1><h2 id="2个数之和"><a href="#2个数之和" class="headerlink" title="2个数之和"></a>2个数之和</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum_nuber</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-built_in">sum</span> = a + b<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;a&#125;</span>+<span class="hljs-subst">&#123;b&#125;</span> =&#x27;</span>, <span class="hljs-built_in">sum</span>)<br><br><br>sum_nuber(<span class="hljs-number">992</span>, <span class="hljs-number">3</span>)<br><br></code></pre></td></tr></table></figure><h2 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">jiecheng</span>(<span class="hljs-params">number</span>):<br>    resrult = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> number &gt; <span class="hljs-number">0</span>:<br>        resrult *= number<br>        number -= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> resrult<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;jiechen 2:&quot;</span>, jiecheng(<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;jiechen 4:&quot;</span>, jiecheng(<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;jiechen 7:&quot;</span>, jiecheng(<span class="hljs-number">7</span>))<br></code></pre></td></tr></table></figure><h2 id="圆面积"><a href="#圆面积" class="headerlink" title="圆面积"></a>圆面积</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_area_circle</span>(<span class="hljs-params">r</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">round</span>(math.pi * r * r, <span class="hljs-number">2</span>)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;area of 2 is: &#x27;</span>, compute_area_circle(<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;area of 3.14 is: &#x27;</span>, compute_area_circle(<span class="hljs-number">3.14</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;area of 9.5 is: &#x27;</span>, compute_area_circle(<span class="hljs-number">9.5</span>))<br></code></pre></td></tr></table></figure><h2 id="打印区间内所有素数（只能被自己与1整除的数）"><a href="#打印区间内所有素数（只能被自己与1整除的数）" class="headerlink" title="打印区间内所有素数（只能被自己与1整除的数）"></a>打印区间内所有素数（只能被自己与1整除的数）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_primes</span>(<span class="hljs-params">number</span>):<br>    <span class="hljs-keyword">if</span> number <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">for</span> idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, number):<br>        <span class="hljs-keyword">if</span> number % idx == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_primes</span>(<span class="hljs-params">begin, end</span>):<br>    <span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(begin, end):<br>        <span class="hljs-keyword">if</span> is_primes(number):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;number&#125;</span> is a prime&quot;</span>)<br>print_primes(<span class="hljs-number">5</span>, <span class="hljs-number">30</span>)<br></code></pre></td></tr></table></figure><h2 id="求n个数字的平方和"><a href="#求n个数字的平方和" class="headerlink" title="求n个数字的平方和"></a>求n个数字的平方和</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum_of_square</span>(<span class="hljs-params">n</span>):<br>    result = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        result += number * number<br><br>    <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sum of square 3 :&quot;</span>, sum_of_square(<span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sum of square 5 :&quot;</span>, sum_of_square(<span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sum of square 9 :&quot;</span>, sum_of_square(<span class="hljs-number">9</span>))<br><br></code></pre></td></tr></table></figure><h2 id="计算列表数字的和"><a href="#计算列表数字的和" class="headerlink" title="计算列表数字的和"></a>计算列表数字的和</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum_of_list</span>(<span class="hljs-params">param_list</span>):<br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> param_list:<br>        total += item<br>    <span class="hljs-keyword">return</span> total<br><br><br>list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>list2 = [<span class="hljs-number">17</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;sum of <span class="hljs-subst">&#123;list1&#125;</span>,&quot;</span>, sum_of_list(list1))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;sum of <span class="hljs-subst">&#123;list2&#125;</span>,&quot;</span>, sum_of_list(list2))<br><br><br></code></pre></td></tr></table></figure><h1 id="计算数字范围内所有的偶数"><a href="#计算数字范围内所有的偶数" class="headerlink" title="计算数字范围内所有的偶数"></a>计算数字范围内所有的偶数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输入：begin=4，end=15</span><br><span class="hljs-string"></span><br><span class="hljs-string">偶数：能被2整除的数</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_even_number</span>(<span class="hljs-params">begin, end</span>):<br>    result = []<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(begin, end):<br>        <span class="hljs-keyword">if</span> item % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>            result.append(item)<br>    <span class="hljs-keyword">return</span> result<br><br><br>begin = <span class="hljs-number">4</span><br>end = <span class="hljs-number">15</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;begin=<span class="hljs-subst">&#123;begin&#125;</span>,end=<span class="hljs-subst">&#123;end&#125;</span>:&quot;</span>, get_even_number(begin, end))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mycat 容器化部署</title>
    <link href="/2022/07/26/mycat-%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    <url>/2022/07/26/mycat-%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-部署Mycat2"><a href="#Docker-部署Mycat2" class="headerlink" title="Docker 部署Mycat2"></a>Docker 部署Mycat2</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Mycat是一个彻底开源的，面向企业应用开发的大数据库集群。从定义和分类来看，它是一个开源的分布式数据库系统，是一个实现了MySQL协议的服务器，前端用户可以把它看作是一个数据库代理，用MySQL客户端工具和命令行访问，而其后端可以用MySQL原生协议与多个MySQL服务器通信，也可以用JDBC协议与大多数主流数据库服务器通信，其核心功能是分表分库，即将一个大表水平分割为N个小表，存储在后端MySQL服务器里或者其他数据库里。</p><h2 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h2><h3 id="1-安装资源地址"><a href="#1-安装资源地址" class="headerlink" title="1. 安装资源地址"></a>1. 安装资源地址</h3>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>dl.mycat.org.cn<span class="hljs-regexp">/2.0/</span><br></code></pre></td></tr></table></figure><h3 id="2-Dockerfile文件"><a href="#2-Dockerfile文件" class="headerlink" title="2. Dockerfile文件"></a>2. Dockerfile文件</h3><p>  基础镜像openjdk:8-jre版本，其他版本apt-get会报错</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">8</span>-jre<br><br><span class="hljs-keyword">ENV</span> AUTO_RUN_DIR ./mycat2<br><span class="hljs-keyword">ENV</span> DEPENDENCE_FILE mycat2-<span class="hljs-number">1.22</span>-release-jar-with-dependencies.jar<br><span class="hljs-keyword">ENV</span> TEMPLATE_FILE mycat2-install-template-<span class="hljs-number">1.21</span>.zip<br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -i <span class="hljs-string">&quot;s@http://.*archive.ubuntu.com@http://mirrors.aliyun.com@g&quot;</span> /etc/apt/sources.list</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -i <span class="hljs-string">&quot;s@http://.*security.ubuntu.com@http://mirrors.aliyun.com@g&quot;</span> /etc/apt/sources.list</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> buildDeps=<span class="hljs-string">&#x27;procps wget unzip&#x27;</span> \</span><br><span class="language-bash">&amp;&amp; apt-get update \</span><br><span class="language-bash">&amp;&amp; apt-get install -y <span class="hljs-variable">$buildDeps</span></span><br><br><span class="hljs-comment"># 安装地址 http://dl.mycat.org.cn/2.0/</span><br><br><span class="hljs-comment"># http://dl.mycat.org.cn/2.0/1.22-release/</span><br><br><span class="hljs-comment"># http://dl.mycat.org.cn/2.0/install-template/</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> wget -P <span class="hljs-variable">$AUTO_RUN_DIR</span>/ http://dl.mycat.org.cn/2.0/1.22-release/<span class="hljs-variable">$DEPENDENCE_FILE</span> \</span><br><span class="language-bash">&amp;&amp; wget -P <span class="hljs-variable">$AUTO_RUN_DIR</span>/ http://dl.mycat.org.cn/2.0/install-template/<span class="hljs-variable">$TEMPLATE_FILE</span></span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">cd</span> <span class="hljs-variable">$AUTO_RUN_DIR</span>/ \</span><br><span class="language-bash">&amp;&amp; unzip <span class="hljs-variable">$TEMPLATE_FILE</span> \</span><br><span class="language-bash">&amp;&amp; <span class="hljs-built_in">ls</span> -al . \</span><br><span class="language-bash">&amp;&amp; <span class="hljs-built_in">mv</span> <span class="hljs-variable">$DEPENDENCE_FILE</span> mycat/lib/ \</span><br><span class="language-bash">&amp;&amp; <span class="hljs-built_in">chmod</span> +x mycat/bin/* \</span><br><span class="language-bash">&amp;&amp; <span class="hljs-built_in">chmod</span> 755 mycat/lib/* \</span><br><span class="language-bash">&amp;&amp; <span class="hljs-built_in">mv</span> mycat /usr/local</span><br><br><span class="hljs-comment">#copy mycat /usr/local/mycat/</span><br><span class="hljs-keyword">VOLUME</span><span class="language-bash"> /usr/local/mycat/conf</span><br><span class="hljs-keyword">VOLUME</span><span class="language-bash"> /usr/local/mycat/logs</span><br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8066</span> <span class="hljs-number">1984</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;/usr/local/mycat/bin/mycat&quot;</span>, <span class="hljs-string">&quot;console&quot;</span>]</span><br></code></pre></td></tr></table></figure><h3 id="3-编译镜像"><a href="#3-编译镜像" class="headerlink" title="3. 编译镜像"></a>3. 编译镜像</h3>  <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> build -t mycat2:<span class="hljs-number">1</span>.<span class="hljs-number">22</span> .<br></code></pre></td></tr></table></figure><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2>  <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d --name=mycat2 -p <span class="hljs-number">8066</span>:<span class="hljs-number">8066</span> -p <span class="hljs-number">1984</span>:<span class="hljs-number">1984</span> mycat2:<span class="hljs-number">1</span>.<span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><h3 id="1-复制配置"><a href="#1-复制配置" class="headerlink" title="1 . 复制配置"></a>1 . 复制配置</h3><p>复制容器内配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker cp mycat2:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mycat/</span>conf .<br>docker cp mycat2:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mycat/</span>logs .<br></code></pre></td></tr></table></figure><h3 id="2-创建容器"><a href="#2-创建容器" class="headerlink" title="2. 创建容器"></a>2. 创建容器</h3>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -d --name=mycat2 -p <span class="hljs-number">8066</span>:<span class="hljs-number">8066</span> -p <span class="hljs-number">1984</span>:<span class="hljs-number">1984</span> -v <span class="hljs-variable">$PWD</span><span class="hljs-regexp">/conf:/u</span>sr<span class="hljs-regexp">/local/my</span>cat<span class="hljs-regexp">/conf -v $PWD/</span>logs:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mycat/</span>logs mycat2:<span class="hljs-number">1.22</span><br></code></pre></td></tr></table></figure><p>以root用户权限进入容器</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker exec -<span class="hljs-keyword">it</span> -u root mycat2 bash<br></code></pre></td></tr></table></figure><p>查看容器启动日志</p><p>docker logs -f mycat2</p><h3 id="3-docker-compose方式安装"><a href="#3-docker-compose方式安装" class="headerlink" title="3. docker-compose方式安装"></a>3. docker-compose方式安装</h3>  <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">version: <span class="hljs-string">&#x27;3&#x27;</span><br>services:<br>  mycat-service:<br> build:<br>   context: ./<br>   dockerfile: Dockerfile<br> image: mycat2:<span class="hljs-number">1.22</span><br> container_name: mycat2<br> restart: always<br> network_mode: <span class="hljs-string">&quot;host&quot;</span><br> volumes:<br><br>   - /u01/mycat2/conf:/usr/local/mycat/conf<br>   - /u01/mycat2/logs:/usr/local/mycat/logs<br></code></pre></td></tr></table></figure><h2 id="Mycat2配置"><a href="#Mycat2配置" class="headerlink" title="Mycat2配置"></a>Mycat2配置</h2><p>  mycat配置文件夹</p><ul><li><p>&#96;&#96;&#96;</p><ul><li>clusters<ul><li>prototype.cluster.json &#x2F;&#x2F;无集群的时候自动创建</li><li>c0.cluster.json</li><li>c1.cluster.json</li></ul></li><li>datasources<ul><li>prototypeDs.datasource.json &#x2F;&#x2F;无数据源的时候自动创建</li><li>dr0.datasource.json</li><li>dw0.datasource.json</li></ul></li><li>schemas<ul><li>db1.schema.json</li><li>mysql.schema.json</li></ul></li><li>sequences<ul><li>db1_schema.sequence.json</li></ul></li></ul><ul><li>server.json &#x2F;&#x2F;服务器配置</li><li>state.json &#x2F;&#x2F;mycat运行状态,包含集群选举的主节点信息,配置时间戳 <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean">     <br>     <br>### <span class="hljs-number">1.</span> 数据源配置<br><br>  prototypeDs.datasource.json 该配置不能删除，可以设置用户、密码、数据库，该配置会在启动Mycat2时创建名为mycat的数据库，库中有mycat所需的数据表<br><br></code></pre></td></tr></table></figure></li></ul></li></ul><p>cd &#x2F;conf&#x2F;datasources<br>prototypeDs.datasource.json</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br><br><br></code></pre></td></tr></table></figure><p>{<br>        “dbType”:”mysql”,<br>        “idleTimeout”:60000,<br>        “initSqls”:[],<br>        “initSqlsGetConnection”:true,<br>        &#x2F;&#x2F; 数据库读写类型：READ、WRITE、READ_WRITE。Mycat 对数据库需要是可读可写的<br>        “instanceType”:”READ_WRITE”,<br>        “maxCon”:1000,<br>        &#x2F;&#x2F; 定时检查闲置连接，单位：ms<br>        “maxConnectTimeout”:3000,<br>        &#x2F;&#x2F; jdbc查询超时时间，单位：ms<br>        “queryTimeout”: 5000,<br>        “maxRetryCount”:5,<br>        “minCon”:1,<br>        &#x2F;&#x2F; 数据源名称，这里不要修改<br>        “name”:”prototypeDs”,<br>        &#x2F;&#x2F; 数据库root密码<br>        “password”:”123456qq”,<br>        “type”:”JDBC”,<br>        “url”:”jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test?useSSL&#x3D;false&amp;useUnicode&#x3D;true&amp;serverTimezone&#x3D;Asia&#x2F;Shanghai&amp;characterEncoding&#x3D;UTF-8”,<br>        &#x2F;&#x2F; 数据库用户（要有创建数据的权限）<br>        “user”:”root”,<br>        “weight”:0<br>}</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br><br><br>### <span class="hljs-number">2.</span> 集群配置<br><br></code></pre></td></tr></table></figure><p>  cd &#x2F;conf&#x2F;clusters&#x2F;<br>  prototype.cluster.json<br>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>  <br><br></code></pre></td></tr></table></figure><br>  {<br>          &#x2F;&#x2F; 集群类型：SINGLE_NODE（单节点）、MASTER_SLAVE（普通主从）、GARELA_CLUSTER（garela cluster&#x2F;PXC集群）等<br>          “clusterType”:”MASTER_SLAVE”,<br>          “heartbeat”:{<br>                  “heartbeatTimeout”:1000,<br>                  “maxRetry”:3,<br>                  “minSwitchTimeInterval”:300,<br>                  “slaveThreshold”:0<br>          },<br>          “masters”:[<br>                  &#x2F;&#x2F; 主节点数据源名称<br>                  “prototypeDs”,<br>                  “dr0”,<br>                  “dw0”<br>          ],<br>          &#x2F;&#x2F; 只有主节点则从节点可以不配置<br>          “replicas”:[<br>                  &#x2F;&#x2F; 从节点数据源名称<br>          ],<br>          “maxCon”:200,<br>          &#x2F;&#x2F; 集群名称。在后面配置物理库（schema）时会用到<br>          “name”:”prototype”,<br>          &#x2F;&#x2F; 查询负载均衡策略<br>          “readBalanceType”:”BALANCE_ALL”,<br>          &#x2F;&#x2F; NOT_SWITCH（不进行主从切换）、SWITCH（进行主从切换）<br>          “switchType”:”SWITCH”<br>  }<br>  <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><br>  <br><br><span class="hljs-keyword">BALANCE_ALL(默认值)</span><br><span class="hljs-keyword"></span>获取集群中所有数据源<br><span class="hljs-keyword">BALANCE_ALL_READ</span><br><span class="hljs-keyword"></span>获取集群中允许读的数据源<br><span class="hljs-keyword">BALANCE_READ_WRITE</span><br><span class="hljs-keyword"></span>获取集群中允许读写的数据源,但允许读的数据源优先<br><span class="hljs-keyword">BALANCE_NONE</span><br><span class="hljs-keyword"></span>获取集群中允许写数据源,即主节点中选择<br><br><span class="hljs-number">3</span>. <span class="hljs-comment">### 配置物理库</span><br><br></code></pre></td></tr></table></figure><br>  cd &#x2F;conf&#x2F;schemas&#x2F;<br>  {<br>   &#x2F;&#x2F; 物理库<br>   “schemaName”: “test”,<br>   “customTables”: {},<br>   “globalTables”: {},<br>   &#x2F;&#x2F; 指向集群<br>   “targetName”: “prototype”,<br>   &#x2F;&#x2F; 这里可以配置数据表相关的信息，在物理表已存在或需要启动时自动创建物理表时配置此项<br>   “normalTables”: {}<br>  }<br>  <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>  <br><br>### <span class="hljs-number">4.</span> 修改 Mycat 登录用户<br><br></code></pre></td></tr></table></figure><br>  cd &#x2F;conf&#x2F;users<br>     root.user.json</p><p>  {<br>          “dialect”:”mysql”,<br>          “ip”:null,<br>          “password”:”123456qq”,<br>          “transactionType”:”proxy”,<br>          “username”:”mycat”</p><pre><code class="hljs"></code></pre>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python100day-7</title>
    <link href="/2022/07/25/python100day-7/"/>
    <url>/2022/07/25/python100day-7/</url>
    
    <content type="html"><![CDATA[<h2 id="字符串和常用数据结构"><a href="#字符串和常用数据结构" class="headerlink" title="字符串和常用数据结构"></a>字符串和常用数据结构</h2><h3 id="使用字符串"><a href="#使用字符串" class="headerlink" title="使用字符串"></a>使用字符串</h3><p>第二次世界大战促使了现代电子计算机的诞生，最初计算机被应用于导弹弹道的计算，而在计算机诞生后的很多年时间里，计算机处理的信息基本上都是数值型的信息。世界上的第一台电子计算机叫ENIAC（电子数值积分计算机），诞生于美国的宾夕法尼亚大学，每秒钟能够完成约5000次浮点运算。随着时间的推移，虽然数值运算仍然是计算机日常工作中最为重要的事情之一，但是今天的计算机处理得更多的数据可能都是以文本的方式存在的，如果我们希望通过Python程序操作这些文本信息，就必须要先了解字符串类型以及与它相关的知识。</p><p>所谓<strong>字符串</strong>，就是由零个或多个字符组成的有限序列，一般记为<br><img src="/images/pasted-68.png" alt="upload successful">。在Python程序中，如果我们把单个或多个字符用单引号或者双引号包围起来，就可以表示一个字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python">s1 = <span class="hljs-string">&#x27;hello, world!&#x27;</span><br>s2 = <span class="hljs-string">&quot;hello, world!&quot;</span><br><span class="hljs-comment"># 以三个双引号或单引号开头的字符串可以折行</span><br>s3 = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">hello, </span><br><span class="hljs-string">world!</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(s1, s2, s3, end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>可以在字符串中使用<code>\</code>（反斜杠）来表示转义，也就是说<code>\</code>后面的字符不再是它原来的意义，例如：<code>\n</code>不是代表反斜杠和字符n，而是表示换行；而<code>\t</code>也不是代表反斜杠和字符t，而是表示制表符。所以如果想在字符串中表示<code>&#39;</code>要写成<code>\&#39;</code>，同理想表示<code>\</code>要写成<code>\\</code>。可以运行下面的代码看看会输出什么。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python">s1 = <span class="hljs-string">&#x27;\&#x27;hello, world!\&#x27;&#x27;</span><br>s2 = <span class="hljs-string">&#x27;\n\\hello, world!\\\n&#x27;</span><br><span class="hljs-built_in">print</span>(s1, s2, end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>在<code>\</code>后面还可以跟一个八进制或者十六进制数来表示字符，例如<code>\141</code>和<code>\x61</code>都代表小写字母<code>a</code>，前者是八进制的表示法，后者是十六进制的表示法。也可以在<code>\</code>后面跟Unicode字符编码来表示字符，例如<code>\u9a86\u660a</code>代表的是中文“骆昊”。运行下面的代码，看看输出了什么。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python">s1 = <span class="hljs-string">&#x27;\141\142\143\x61\x62\x63&#x27;</span><br>s2 = <span class="hljs-string">&#x27;\u9a86\u660a&#x27;</span><br><span class="hljs-built_in">print</span>(s1, s2)<br></code></pre></td></tr></table></figure><p>如果不希望字符串中的<code>\</code>表示转义，我们可以通过在字符串的最前面加上字母<code>r</code>来加以说明，再看看下面的代码又会输出什么。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python">s1 = <span class="hljs-string">r&#x27;\&#x27;hello, world!\&#x27;&#x27;</span><br>s2 = <span class="hljs-string">r&#x27;\n\\hello, world!\\\n&#x27;</span><br><span class="hljs-built_in">print</span>(s1, s2, end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>Python为字符串类型提供了非常丰富的运算符，我们可以使用<code>+</code>运算符来实现字符串的拼接，可以使用<code>*</code>运算符来重复一个字符串的内容，可以使用<code>in</code>和<code>not in</code>来判断一个字符串是否包含另外一个字符串（成员运算），我们也可以用<code>[]</code>和<code>[:]</code>运算符从字符串取出某个字符或某些字符（切片运算），代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python">s1 = <span class="hljs-string">&#x27;hello &#x27;</span> * <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(s1) <span class="hljs-comment"># hello hello hello </span><br>s2 = <span class="hljs-string">&#x27;world&#x27;</span><br>s1 += s2<br><span class="hljs-built_in">print</span>(s1) <span class="hljs-comment"># hello hello hello world</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ll&#x27;</span> <span class="hljs-keyword">in</span> s1) <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;good&#x27;</span> <span class="hljs-keyword">in</span> s1) <span class="hljs-comment"># False</span><br>str2 = <span class="hljs-string">&#x27;abc123456&#x27;</span><br><span class="hljs-comment"># 从字符串中取出指定位置的字符(下标运算)</span><br><span class="hljs-built_in">print</span>(str2[<span class="hljs-number">2</span>]) <span class="hljs-comment"># c</span><br><span class="hljs-comment"># 字符串切片(从指定的开始索引到指定的结束索引)</span><br><span class="hljs-built_in">print</span>(str2[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]) <span class="hljs-comment"># c12</span><br><span class="hljs-built_in">print</span>(str2[<span class="hljs-number">2</span>:]) <span class="hljs-comment"># c123456</span><br><span class="hljs-built_in">print</span>(str2[<span class="hljs-number">2</span>::<span class="hljs-number">2</span>]) <span class="hljs-comment"># c246</span><br><span class="hljs-built_in">print</span>(str2[::<span class="hljs-number">2</span>]) <span class="hljs-comment"># ac246</span><br><span class="hljs-built_in">print</span>(str2[::-<span class="hljs-number">1</span>]) <span class="hljs-comment"># 654321cba</span><br><span class="hljs-built_in">print</span>(str2[-<span class="hljs-number">3</span>:-<span class="hljs-number">1</span>]) <span class="hljs-comment"># 45</span><br></code></pre></td></tr></table></figure><p>在Python中，我们还可以通过一系列的方法来完成对字符串的处理，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Python">str1 = <span class="hljs-string">&#x27;hello, world!&#x27;</span><br><span class="hljs-comment"># 通过内置函数len计算字符串的长度</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(str1)) <span class="hljs-comment"># 13</span><br><span class="hljs-comment"># 获得字符串首字母大写的拷贝</span><br><span class="hljs-built_in">print</span>(str1.capitalize()) <span class="hljs-comment"># Hello, world!</span><br><span class="hljs-comment"># 获得字符串每个单词首字母大写的拷贝</span><br><span class="hljs-built_in">print</span>(str1.title()) <span class="hljs-comment"># Hello, World!</span><br><span class="hljs-comment"># 获得字符串变大写后的拷贝</span><br><span class="hljs-built_in">print</span>(str1.upper()) <span class="hljs-comment"># HELLO, WORLD!</span><br><span class="hljs-comment"># 从字符串中查找子串所在位置</span><br><span class="hljs-built_in">print</span>(str1.find(<span class="hljs-string">&#x27;or&#x27;</span>)) <span class="hljs-comment"># 8</span><br><span class="hljs-built_in">print</span>(str1.find(<span class="hljs-string">&#x27;shit&#x27;</span>)) <span class="hljs-comment"># -1</span><br><span class="hljs-comment"># 与find类似但找不到子串时会引发异常</span><br><span class="hljs-comment"># print(str1.index(&#x27;or&#x27;))</span><br><span class="hljs-comment"># print(str1.index(&#x27;shit&#x27;))</span><br><span class="hljs-comment"># 检查字符串是否以指定的字符串开头</span><br><span class="hljs-built_in">print</span>(str1.startswith(<span class="hljs-string">&#x27;He&#x27;</span>)) <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(str1.startswith(<span class="hljs-string">&#x27;hel&#x27;</span>)) <span class="hljs-comment"># True</span><br><span class="hljs-comment"># 检查字符串是否以指定的字符串结尾</span><br><span class="hljs-built_in">print</span>(str1.endswith(<span class="hljs-string">&#x27;!&#x27;</span>)) <span class="hljs-comment"># True</span><br><span class="hljs-comment"># 将字符串以指定的宽度居中并在两侧填充指定的字符</span><br><span class="hljs-built_in">print</span>(str1.center(<span class="hljs-number">50</span>, <span class="hljs-string">&#x27;*&#x27;</span>))<br><span class="hljs-comment"># 将字符串以指定的宽度靠右放置左侧填充指定的字符</span><br><span class="hljs-built_in">print</span>(str1.rjust(<span class="hljs-number">50</span>, <span class="hljs-string">&#x27; &#x27;</span>))<br>str2 = <span class="hljs-string">&#x27;abc123456&#x27;</span><br><span class="hljs-comment"># 检查字符串是否由数字构成</span><br><span class="hljs-built_in">print</span>(str2.isdigit())  <span class="hljs-comment"># False</span><br><span class="hljs-comment"># 检查字符串是否以字母构成</span><br><span class="hljs-built_in">print</span>(str2.isalpha())  <span class="hljs-comment"># False</span><br><span class="hljs-comment"># 检查字符串是否以数字和字母构成</span><br><span class="hljs-built_in">print</span>(str2.isalnum())  <span class="hljs-comment"># True</span><br>str3 = <span class="hljs-string">&#x27;  jackfrued@126.com &#x27;</span><br><span class="hljs-built_in">print</span>(str3)<br><span class="hljs-comment"># 获得字符串修剪左右两侧空格之后的拷贝</span><br><span class="hljs-built_in">print</span>(str3.strip())<br></code></pre></td></tr></table></figure><p>我们之前讲过，可以用下面的方式来格式化输出字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python">a, b = <span class="hljs-number">5</span>, <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d * %d = %d&#x27;</span> % (a, b, a * b))<br></code></pre></td></tr></table></figure><p>当然，我们也可以用字符串提供的方法来完成字符串的格式，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python">a, b = <span class="hljs-number">5</span>, <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0&#125; * &#123;1&#125; = &#123;2&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(a, b, a * b))<br></code></pre></td></tr></table></figure><p>Python 3.6以后，格式化字符串还有更为简洁的书写方式，就是在字符串前加上字母<code>f</code>，我们可以使用下面的语法糖来简化上面的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python">a, b = <span class="hljs-number">5</span>, <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;a&#125;</span> * <span class="hljs-subst">&#123;b&#125;</span> = <span class="hljs-subst">&#123;a * b&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>除了字符串，Python还内置了多种类型的数据结构，如果要在程序中保存和操作数据，绝大多数时候可以利用现有的数据结构来实现，最常用的包括列表、元组、集合和字典。</p><h3 id="使用列表"><a href="#使用列表" class="headerlink" title="使用列表"></a>使用列表</h3><p>不知道大家是否注意到，刚才我们讲到的字符串类型（<code>str</code>）和之前我们讲到的数值类型（<code>int</code>和<code>float</code>）有一些区别。数值类型是标量类型，也就是说这种类型的对象没有可以访问的内部结构；而字符串类型是一种结构化的、非标量类型，所以才会有一系列的属性和方法。接下来我们要介绍的列表（<code>list</code>），也是一种结构化的、非标量类型，它是值的有序序列，每个值都可以通过索引进行标识，定义列表可以将列表的元素放在<code>[]</code>中，多个元素用<code>,</code>进行分隔，可以使用<code>for</code>循环对列表元素进行遍历，也可以使用<code>[]</code>或<code>[:]</code>运算符取出列表中的一个或多个元素。</p><p>下面的代码演示了如何定义列表、如何遍历列表以及列表的下标运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Python">list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">100</span>]<br><span class="hljs-built_in">print</span>(list1) <span class="hljs-comment"># [1, 3, 5, 7, 100]</span><br><span class="hljs-comment"># 乘号表示列表元素的重复</span><br>list2 = [<span class="hljs-string">&#x27;hello&#x27;</span>] * <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(list2) <span class="hljs-comment"># [&#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;]</span><br><span class="hljs-comment"># 计算列表长度(元素个数)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(list1)) <span class="hljs-comment"># 5</span><br><span class="hljs-comment"># 下标(索引)运算</span><br><span class="hljs-built_in">print</span>(list1[<span class="hljs-number">0</span>]) <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(list1[<span class="hljs-number">4</span>]) <span class="hljs-comment"># 100</span><br><span class="hljs-comment"># print(list1[5])  # IndexError: list index out of range</span><br><span class="hljs-built_in">print</span>(list1[-<span class="hljs-number">1</span>]) <span class="hljs-comment"># 100</span><br><span class="hljs-built_in">print</span>(list1[-<span class="hljs-number">3</span>]) <span class="hljs-comment"># 5</span><br>list1[<span class="hljs-number">2</span>] = <span class="hljs-number">300</span><br><span class="hljs-built_in">print</span>(list1) <span class="hljs-comment"># [1, 3, 300, 7, 100]</span><br><span class="hljs-comment"># 通过循环用下标遍历列表元素</span><br><span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(list1)):<br>    <span class="hljs-built_in">print</span>(list1[index])<br><span class="hljs-comment"># 通过for循环遍历列表元素</span><br><span class="hljs-keyword">for</span> elem <span class="hljs-keyword">in</span> list1:<br>    <span class="hljs-built_in">print</span>(elem)<br><span class="hljs-comment"># 通过enumerate函数处理列表之后再遍历可以同时获得元素索引和值</span><br><span class="hljs-keyword">for</span> index, elem <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(list1):<br>    <span class="hljs-built_in">print</span>(index, elem)<br></code></pre></td></tr></table></figure><p>下面的代码演示了如何向列表中添加元素以及如何从列表中移除元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python">list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">100</span>]<br><span class="hljs-comment"># 添加元素</span><br>list1.append(<span class="hljs-number">200</span>)<br>list1.insert(<span class="hljs-number">1</span>, <span class="hljs-number">400</span>)<br><span class="hljs-comment"># 合并两个列表</span><br><span class="hljs-comment"># list1.extend([1000, 2000])</span><br>list1 += [<span class="hljs-number">1000</span>, <span class="hljs-number">2000</span>]<br><span class="hljs-built_in">print</span>(list1) <span class="hljs-comment"># [1, 400, 3, 5, 7, 100, 200, 1000, 2000]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(list1)) <span class="hljs-comment"># 9</span><br><span class="hljs-comment"># 先通过成员运算判断元素是否在列表中，如果存在就删除该元素</span><br><span class="hljs-keyword">if</span> <span class="hljs-number">3</span> <span class="hljs-keyword">in</span> list1:<br>list1.remove(<span class="hljs-number">3</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-number">1234</span> <span class="hljs-keyword">in</span> list1:<br>    list1.remove(<span class="hljs-number">1234</span>)<br><span class="hljs-built_in">print</span>(list1) <span class="hljs-comment"># [1, 400, 5, 7, 100, 200, 1000, 2000]</span><br><span class="hljs-comment"># 从指定的位置删除元素</span><br>list1.pop(<span class="hljs-number">0</span>)<br>list1.pop(<span class="hljs-built_in">len</span>(list1) - <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(list1) <span class="hljs-comment"># [400, 5, 7, 100, 200, 1000]</span><br><span class="hljs-comment"># 清空列表元素</span><br>list1.clear()<br><span class="hljs-built_in">print</span>(list1) <span class="hljs-comment"># []</span><br></code></pre></td></tr></table></figure><p>和字符串一样，列表也可以做切片操作，通过切片操作我们可以实现对列表的复制或者将列表中的一部分取出来创建出新的列表，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python">fruits = [<span class="hljs-string">&#x27;grape&#x27;</span>, <span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;strawberry&#x27;</span>, <span class="hljs-string">&#x27;waxberry&#x27;</span>]<br>fruits += [<span class="hljs-string">&#x27;pitaya&#x27;</span>, <span class="hljs-string">&#x27;pear&#x27;</span>, <span class="hljs-string">&#x27;mango&#x27;</span>]<br><span class="hljs-comment"># 列表切片</span><br>fruits2 = fruits[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>]<br><span class="hljs-built_in">print</span>(fruits2) <span class="hljs-comment"># apple strawberry waxberry</span><br><span class="hljs-comment"># 可以通过完整切片操作来复制列表</span><br>fruits3 = fruits[:]<br><span class="hljs-built_in">print</span>(fruits3) <span class="hljs-comment"># [&#x27;grape&#x27;, &#x27;apple&#x27;, &#x27;strawberry&#x27;, &#x27;waxberry&#x27;, &#x27;pitaya&#x27;, &#x27;pear&#x27;, &#x27;mango&#x27;]</span><br>fruits4 = fruits[-<span class="hljs-number">3</span>:-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(fruits4) <span class="hljs-comment"># [&#x27;pitaya&#x27;, &#x27;pear&#x27;]</span><br><span class="hljs-comment"># 可以通过反向切片操作来获得倒转后的列表的拷贝</span><br>fruits5 = fruits[::-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(fruits5) <span class="hljs-comment"># [&#x27;mango&#x27;, &#x27;pear&#x27;, &#x27;pitaya&#x27;, &#x27;waxberry&#x27;, &#x27;strawberry&#x27;, &#x27;apple&#x27;, &#x27;grape&#x27;]</span><br></code></pre></td></tr></table></figure><p>下面的代码实现了对列表的排序操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python">list1 = [<span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;zoo&#x27;</span>, <span class="hljs-string">&#x27;internationalization&#x27;</span>, <span class="hljs-string">&#x27;blueberry&#x27;</span>]<br>list2 = <span class="hljs-built_in">sorted</span>(list1)<br><span class="hljs-comment"># sorted函数返回列表排序后的拷贝不会修改传入的列表</span><br><span class="hljs-comment"># 函数的设计就应该像sorted函数一样尽可能不产生副作用</span><br>list3 = <span class="hljs-built_in">sorted</span>(list1, reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 通过key关键字参数指定根据字符串长度进行排序而不是默认的字母表顺序</span><br>list4 = <span class="hljs-built_in">sorted</span>(list1, key=<span class="hljs-built_in">len</span>)<br><span class="hljs-built_in">print</span>(list1)<br><span class="hljs-built_in">print</span>(list2)<br><span class="hljs-built_in">print</span>(list3)<br><span class="hljs-built_in">print</span>(list4)<br><span class="hljs-comment"># 给列表对象发出排序消息直接在列表对象上进行排序</span><br>list1.sort(reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(list1)<br></code></pre></td></tr></table></figure><h3 id="生成式和生成器"><a href="#生成式和生成器" class="headerlink" title="生成式和生成器"></a>生成式和生成器</h3><p>我们还可以使用列表的生成式语法来创建列表，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python">f = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)]<br><span class="hljs-built_in">print</span>(f)<br>f = [x + y <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;ABCDE&#x27;</span> <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;1234567&#x27;</span>]<br><span class="hljs-built_in">print</span>(f)<br><span class="hljs-comment"># 用列表的生成表达式语法创建列表容器</span><br><span class="hljs-comment"># 用这种语法创建列表之后元素已经准备就绪所以需要耗费较多的内存空间</span><br>f = [x ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>)]<br><span class="hljs-built_in">print</span>(sys.getsizeof(f))  <span class="hljs-comment"># 查看对象占用内存的字节数</span><br><span class="hljs-built_in">print</span>(f)<br><span class="hljs-comment"># 请注意下面的代码创建的不是一个列表而是一个生成器对象</span><br><span class="hljs-comment"># 通过生成器可以获取到数据但它不占用额外的空间存储数据</span><br><span class="hljs-comment"># 每次需要数据的时候就通过内部的运算得到数据(需要花费额外的时间)</span><br>f = (x ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>))<br><span class="hljs-built_in">print</span>(sys.getsizeof(f))  <span class="hljs-comment"># 相比生成式生成器不占用存储数据的空间</span><br><span class="hljs-built_in">print</span>(f)<br><span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> f:<br>    <span class="hljs-built_in">print</span>(val)<br></code></pre></td></tr></table></figure><p>除了上面提到的生成器语法，Python中还有另外一种定义生成器的方式，就是通过<code>yield</code>关键字将一个普通函数改造成生成器函数。下面的代码演示了如何实现一个生成<a href="https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97">斐波拉切数列</a>的生成器。所谓斐波拉切数列可以通过下面<a href="https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92">递归</a>的方法来进行定义：</p><p><img src="/./res/formula_6.png" alt="$${\displaystyle F_{0}=0}$$"></p><p><img src="/./res/formula_7.png" alt="$${\displaystyle F_{1}=1}$$"></p><p><img src="/./res/formula_8.png" alt="$${\displaystyle F_{n}=F_{n-1}+F_{n-2}}({n}\geq{2})$$"></p><p><img src="/./res/fibonacci-blocks.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>):<br>    a, b = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        a, b = b, a + b<br>        <span class="hljs-keyword">yield</span> a<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> fib(<span class="hljs-number">20</span>):<br>        <span class="hljs-built_in">print</span>(val)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="使用元组"><a href="#使用元组" class="headerlink" title="使用元组"></a>使用元组</h3><p>Python中的元组与列表类似也是一种容器数据类型，可以用一个变量（对象）来存储多个数据，不同之处在于元组的元素不能修改，在前面的代码中我们已经不止一次使用过元组了。顾名思义，我们把多个元素组合到一起就形成了一个元组，所以它和列表一样可以保存多条数据。下面的代码演示了如何定义和使用元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 定义元组</span><br>t = (<span class="hljs-string">&#x27;骆昊&#x27;</span>, <span class="hljs-number">38</span>, <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;四川成都&#x27;</span>)<br><span class="hljs-built_in">print</span>(t)<br><span class="hljs-comment"># 获取元组中的元素</span><br><span class="hljs-built_in">print</span>(t[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(t[<span class="hljs-number">3</span>])<br><span class="hljs-comment"># 遍历元组中的值</span><br><span class="hljs-keyword">for</span> member <span class="hljs-keyword">in</span> t:<br>    <span class="hljs-built_in">print</span>(member)<br><span class="hljs-comment"># 重新给元组赋值</span><br><span class="hljs-comment"># t[0] = &#x27;王大锤&#x27;  # TypeError</span><br><span class="hljs-comment"># 变量t重新引用了新的元组原来的元组将被垃圾回收</span><br>t = (<span class="hljs-string">&#x27;王大锤&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;云南昆明&#x27;</span>)<br><span class="hljs-built_in">print</span>(t)<br><span class="hljs-comment"># 将元组转换成列表</span><br>person = <span class="hljs-built_in">list</span>(t)<br><span class="hljs-built_in">print</span>(person)<br><span class="hljs-comment"># 列表是可以修改它的元素的</span><br>person[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;李小龙&#x27;</span><br>person[<span class="hljs-number">1</span>] = <span class="hljs-number">25</span><br><span class="hljs-built_in">print</span>(person)<br><span class="hljs-comment"># 将列表转换成元组</span><br>fruits_list = [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>]<br>fruits_tuple = <span class="hljs-built_in">tuple</span>(fruits_list)<br><span class="hljs-built_in">print</span>(fruits_tuple)<br></code></pre></td></tr></table></figure><p>这里有一个非常值得探讨的问题，我们已经有了列表这种数据结构，为什么还需要元组这样的类型呢？</p><ol><li>元组中的元素是无法修改的，事实上我们在项目中尤其是<a href="https://zh.wikipedia.org/zh-hans/%E5%A4%9A%E7%BA%BF%E7%A8%8B">多线程</a>环境（后面会讲到）中可能更喜欢使用的是那些不变对象（一方面因为对象状态不能修改，所以可以避免由此引起的不必要的程序错误，简单的说就是一个不变的对象要比可变的对象更加容易维护；另一方面因为没有任何一个线程能够修改不变对象的内部状态，一个不变对象自动就是线程安全的，这样就可以省掉处理同步化的开销。一个不变对象可以方便的被共享访问）。所以结论就是：如果不需要对元素进行添加、删除、修改的时候，可以考虑使用元组，当然如果一个方法要返回多个值，使用元组也是不错的选择。</li><li>元组在创建时间和占用的空间上面都优于列表。我们可以使用sys模块的getsizeof函数来检查存储同样的元素的元组和列表各自占用了多少内存空间，这个很容易做到。我们也可以在ipython中使用魔法指令%timeit来分析创建同样内容的元组和列表所花费的时间，下图是我的macOS系统上测试的结果。</li></ol><p><img src="/./res/ipython-timeit.png"></p><h3 id="使用集合"><a href="#使用集合" class="headerlink" title="使用集合"></a>使用集合</h3><p>Python中的集合跟数学上的集合是一致的，不允许有重复元素，而且可以进行交集、并集、差集等运算。</p><p><img src="/./res/python-set.png"></p><p>可以按照下面代码所示的方式来创建和使用集合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 创建集合的字面量语法</span><br>set1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>&#125;<br><span class="hljs-built_in">print</span>(set1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Length =&#x27;</span>, <span class="hljs-built_in">len</span>(set1))<br><span class="hljs-comment"># 创建集合的构造器语法(面向对象部分会进行详细讲解)</span><br>set2 = <span class="hljs-built_in">set</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>))<br>set3 = <span class="hljs-built_in">set</span>((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(set2, set3)<br><span class="hljs-comment"># 创建集合的推导式语法(推导式也可以用于推导集合)</span><br>set4 = &#123;num <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>) <span class="hljs-keyword">if</span> num % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> num % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>&#125;<br><span class="hljs-built_in">print</span>(set4)<br></code></pre></td></tr></table></figure><p>向集合添加元素和从集合删除元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">set1.add(<span class="hljs-number">4</span>)<br>set1.add(<span class="hljs-number">5</span>)<br>set2.update([<span class="hljs-number">11</span>, <span class="hljs-number">12</span>])<br>set2.discard(<span class="hljs-number">5</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-number">4</span> <span class="hljs-keyword">in</span> set2:<br>    set2.remove(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(set1, set2)<br><span class="hljs-built_in">print</span>(set3.pop())<br><span class="hljs-built_in">print</span>(set3)<br></code></pre></td></tr></table></figure><p>集合的成员、交集、并集、差集等运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 集合的交集、并集、差集、对称差运算</span><br><span class="hljs-built_in">print</span>(set1 &amp; set2)<br><span class="hljs-comment"># print(set1.intersection(set2))</span><br><span class="hljs-built_in">print</span>(set1 | set2)<br><span class="hljs-comment"># print(set1.union(set2))</span><br><span class="hljs-built_in">print</span>(set1 - set2)<br><span class="hljs-comment"># print(set1.difference(set2))</span><br><span class="hljs-built_in">print</span>(set1 ^ set2)<br><span class="hljs-comment"># print(set1.symmetric_difference(set2))</span><br><span class="hljs-comment"># 判断子集和超集</span><br><span class="hljs-built_in">print</span>(set2 &lt;= set1)<br><span class="hljs-comment"># print(set2.issubset(set1))</span><br><span class="hljs-built_in">print</span>(set3 &lt;= set1)<br><span class="hljs-comment"># print(set3.issubset(set1))</span><br><span class="hljs-built_in">print</span>(set1 &gt;= set2)<br><span class="hljs-comment"># print(set1.issuperset(set2))</span><br><span class="hljs-built_in">print</span>(set1 &gt;= set3)<br><span class="hljs-comment"># print(set1.issuperset(set3))</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> Python中允许通过一些特殊的方法来为某种类型或数据结构自定义运算符（后面的章节中会讲到），上面的代码中我们对集合进行运算的时候可以调用集合对象的方法，也可以直接使用对应的运算符，例如<code>&amp;</code>运算符跟intersection方法的作用就是一样的，但是使用运算符让代码更加直观。</p></blockquote><h3 id="使用字典"><a href="#使用字典" class="headerlink" title="使用字典"></a>使用字典</h3><p>字典是另一种可变容器模型，Python中的字典跟我们生活中使用的字典是一样一样的，它可以存储任意类型对象，与列表、集合不同的是，字典的每个元素都是由一个键和一个值组成的“键值对”，键和值通过冒号分开。下面的代码演示了如何定义和使用字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 创建字典的字面量语法</span><br>scores = &#123;<span class="hljs-string">&#x27;骆昊&#x27;</span>: <span class="hljs-number">95</span>, <span class="hljs-string">&#x27;白元芳&#x27;</span>: <span class="hljs-number">78</span>, <span class="hljs-string">&#x27;狄仁杰&#x27;</span>: <span class="hljs-number">82</span>&#125;<br><span class="hljs-built_in">print</span>(scores)<br><span class="hljs-comment"># 创建字典的构造器语法</span><br>items1 = <span class="hljs-built_in">dict</span>(one=<span class="hljs-number">1</span>, two=<span class="hljs-number">2</span>, three=<span class="hljs-number">3</span>, four=<span class="hljs-number">4</span>)<br><span class="hljs-comment"># 通过zip函数将两个序列压成字典</span><br>items2 = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>], <span class="hljs-string">&#x27;123&#x27;</span>))<br><span class="hljs-comment"># 创建字典的推导式语法</span><br>items3 = &#123;num: num ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)&#125;<br><span class="hljs-built_in">print</span>(items1, items2, items3)<br><span class="hljs-comment"># 通过键可以获取字典中对应的值</span><br><span class="hljs-built_in">print</span>(scores[<span class="hljs-string">&#x27;骆昊&#x27;</span>])<br><span class="hljs-built_in">print</span>(scores[<span class="hljs-string">&#x27;狄仁杰&#x27;</span>])<br><span class="hljs-comment"># 对字典中所有键值对进行遍历</span><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> scores:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;key&#125;</span>: <span class="hljs-subst">&#123;scores[key]&#125;</span>&#x27;</span>)<br><span class="hljs-comment"># 更新字典中的元素</span><br>scores[<span class="hljs-string">&#x27;白元芳&#x27;</span>] = <span class="hljs-number">65</span><br>scores[<span class="hljs-string">&#x27;诸葛王朗&#x27;</span>] = <span class="hljs-number">71</span><br>scores.update(冷面=<span class="hljs-number">67</span>, 方启鹤=<span class="hljs-number">85</span>)<br><span class="hljs-built_in">print</span>(scores)<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;武则天&#x27;</span> <span class="hljs-keyword">in</span> scores:<br>    <span class="hljs-built_in">print</span>(scores[<span class="hljs-string">&#x27;武则天&#x27;</span>])<br><span class="hljs-built_in">print</span>(scores.get(<span class="hljs-string">&#x27;武则天&#x27;</span>))<br><span class="hljs-comment"># get方法也是通过键获取对应的值但是可以设置默认值</span><br><span class="hljs-built_in">print</span>(scores.get(<span class="hljs-string">&#x27;武则天&#x27;</span>, <span class="hljs-number">60</span>))<br><span class="hljs-comment"># 删除字典中的元素</span><br><span class="hljs-built_in">print</span>(scores.popitem())<br><span class="hljs-built_in">print</span>(scores.popitem())<br><span class="hljs-built_in">print</span>(scores.pop(<span class="hljs-string">&#x27;骆昊&#x27;</span>, <span class="hljs-number">100</span>))<br><span class="hljs-comment"># 清空字典</span><br>scores.clear()<br><span class="hljs-built_in">print</span>(scores)<br></code></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：在屏幕上显示跑马灯文字。"><a href="#练习1：在屏幕上显示跑马灯文字。" class="headerlink" title="练习1：在屏幕上显示跑马灯文字。"></a>练习1：在屏幕上显示跑马灯文字。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    content = <span class="hljs-string">&#x27;北京欢迎你为你开天辟地…………&#x27;</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment"># 清理屏幕上的输出</span><br>        os.system(<span class="hljs-string">&#x27;cls&#x27;</span>)  <span class="hljs-comment"># os.system(&#x27;clear&#x27;)</span><br>        <span class="hljs-built_in">print</span>(content)<br>        <span class="hljs-comment"># 休眠200毫秒</span><br>        time.sleep(<span class="hljs-number">0.2</span>)<br>        content = content[<span class="hljs-number">1</span>:] + content[<span class="hljs-number">0</span>]<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h4 id="练习2：设计一个函数产生指定长度的验证码，验证码由大小写字母和数字构成。"><a href="#练习2：设计一个函数产生指定长度的验证码，验证码由大小写字母和数字构成。" class="headerlink" title="练习2：设计一个函数产生指定长度的验证码，验证码由大小写字母和数字构成。"></a>练习2：设计一个函数产生指定长度的验证码，验证码由大小写字母和数字构成。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> random<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_code</span>(<span class="hljs-params">code_len=<span class="hljs-number">4</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    生成指定长度的验证码</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param code_len: 验证码的长度(默认4个字符)</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :return: 由大小写英文字母和数字构成的随机验证码</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    all_chars = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span><br>    last_pos = <span class="hljs-built_in">len</span>(all_chars) - <span class="hljs-number">1</span><br>    code = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(code_len):<br>        index = random.randint(<span class="hljs-number">0</span>, last_pos)<br>        code += all_chars[index]<br>    <span class="hljs-keyword">return</span> code<br></code></pre></td></tr></table></figure><h4 id="练习3：设计一个函数返回给定文件名的后缀名。"><a href="#练习3：设计一个函数返回给定文件名的后缀名。" class="headerlink" title="练习3：设计一个函数返回给定文件名的后缀名。"></a>练习3：设计一个函数返回给定文件名的后缀名。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_suffix</span>(<span class="hljs-params">filename, has_dot=<span class="hljs-literal">False</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    获取文件名的后缀名</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param filename: 文件名</span><br><span class="hljs-string">    :param has_dot: 返回的后缀名是否需要带点</span><br><span class="hljs-string">    :return: 文件的后缀名</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    pos = filename.rfind(<span class="hljs-string">&#x27;.&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt; pos &lt; <span class="hljs-built_in">len</span>(filename) - <span class="hljs-number">1</span>:<br>        index = pos <span class="hljs-keyword">if</span> has_dot <span class="hljs-keyword">else</span> pos + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> filename[index:]<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="练习4：设计一个函数返回传入的列表中最大和第二大的元素的值。"><a href="#练习4：设计一个函数返回传入的列表中最大和第二大的元素的值。" class="headerlink" title="练习4：设计一个函数返回传入的列表中最大和第二大的元素的值。"></a>练习4：设计一个函数返回传入的列表中最大和第二大的元素的值。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">max2</span>(<span class="hljs-params">x</span>):<br>    m1, m2 = (x[<span class="hljs-number">0</span>], x[<span class="hljs-number">1</span>]) <span class="hljs-keyword">if</span> x[<span class="hljs-number">0</span>] &gt; x[<span class="hljs-number">1</span>] <span class="hljs-keyword">else</span> (x[<span class="hljs-number">1</span>], x[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">len</span>(x)):<br>        <span class="hljs-keyword">if</span> x[index] &gt; m1:<br>            m2 = m1<br>            m1 = x[index]<br>        <span class="hljs-keyword">elif</span> x[index] &gt; m2:<br>            m2 = x[index]<br>    <span class="hljs-keyword">return</span> m1, m2<br></code></pre></td></tr></table></figure><h4 id="练习5：计算指定的年月日是这一年的第几天。"><a href="#练习5：计算指定的年月日是这一年的第几天。" class="headerlink" title="练习5：计算指定的年月日是这一年的第几天。"></a>练习5：计算指定的年月日是这一年的第几天。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_leap_year</span>(<span class="hljs-params">year</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    判断指定的年份是不是闰年</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param year: 年份</span><br><span class="hljs-string">    :return: 闰年返回True平年返回False</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">which_day</span>(<span class="hljs-params">year, month, date</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    计算传入的日期是这一年的第几天</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param year: 年</span><br><span class="hljs-string">    :param month: 月</span><br><span class="hljs-string">    :param date: 日</span><br><span class="hljs-string">    :return: 第几天</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    days_of_month = [<br>        [<span class="hljs-number">31</span>, <span class="hljs-number">28</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>],<br>        [<span class="hljs-number">31</span>, <span class="hljs-number">29</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>]<br>    ][is_leap_year(year)]<br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(month - <span class="hljs-number">1</span>):<br>        total += days_of_month[index]<br>    <span class="hljs-keyword">return</span> total + date<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-built_in">print</span>(which_day(<span class="hljs-number">1980</span>, <span class="hljs-number">11</span>, <span class="hljs-number">28</span>))<br>    <span class="hljs-built_in">print</span>(which_day(<span class="hljs-number">1981</span>, <span class="hljs-number">12</span>, <span class="hljs-number">31</span>))<br>    <span class="hljs-built_in">print</span>(which_day(<span class="hljs-number">2018</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br>    <span class="hljs-built_in">print</span>(which_day(<span class="hljs-number">2016</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h4 id="练习6：打印杨辉三角。"><a href="#练习6：打印杨辉三角。" class="headerlink" title="练习6：打印杨辉三角。"></a>练习6：打印<a href="https://zh.wikipedia.org/wiki/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%E5%BD%A2">杨辉三角</a>。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Number of rows: &#x27;</span>))<br>    yh = [[]] * num<br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(yh)):<br>        yh[row] = [<span class="hljs-literal">None</span>] * (row + <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(yh[row])):<br>            <span class="hljs-keyword">if</span> col == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> col == row:<br>                yh[row][col] = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                yh[row][col] = yh[row - <span class="hljs-number">1</span>][col] + yh[row - <span class="hljs-number">1</span>][col - <span class="hljs-number">1</span>]<br>            <span class="hljs-built_in">print</span>(yh[row][col], end=<span class="hljs-string">&#x27;\t&#x27;</span>)<br>        <span class="hljs-built_in">print</span>()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><h4 id="案例1：双色球选号。"><a href="#案例1：双色球选号。" class="headerlink" title="案例1：双色球选号。"></a>案例1：双色球选号。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randrange, randint, sample<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">display</span>(<span class="hljs-params">balls</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    输出列表中的双色球号码</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> index, ball <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(balls):<br>        <span class="hljs-keyword">if</span> index == <span class="hljs-built_in">len</span>(balls) - <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;|&#x27;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%02d&#x27;</span> % ball, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">random_select</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    随机选择一组号码</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    red_balls = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">34</span>)]<br>    selected_balls = []<br>    selected_balls = sample(red_balls, <span class="hljs-number">6</span>)<br>    selected_balls.sort()<br>    selected_balls.append(randint(<span class="hljs-number">1</span>, <span class="hljs-number">16</span>))<br>    <span class="hljs-keyword">return</span> selected_balls<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;机选几注: &#x27;</span>))<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        display(random_select())<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 上面使用random模块的sample函数来实现从列表中选择不重复的n个元素。</p></blockquote><h4 id="综合案例2：约瑟夫环问题。"><a href="#综合案例2：约瑟夫环问题。" class="headerlink" title="综合案例2：约瑟夫环问题。"></a>综合案例2：<a href="https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%91%9F%E5%A4%AB%E6%96%AF%E9%97%AE%E9%A2%98">约瑟夫环问题</a>。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">《幸运的基督徒》</span><br><span class="hljs-string">有15个基督徒和15个非基督徒在海上遇险，为了能让一部分人活下来不得不将其中15个人扔到海里面去，有个人想了个办法就是大家围成一个圈，由某个人开始从1报数，报到9的人就扔到海里面，他后面的人接着从1开始报数，报到9的人继续扔到海里面，直到扔掉15个人。由于上帝的保佑，15个基督徒都幸免于难，问这些人最开始是怎么站的，哪些位置是基督徒哪些位置是非基督徒。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    persons = [<span class="hljs-literal">True</span>] * <span class="hljs-number">30</span><br>    counter, index, number = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> counter &lt; <span class="hljs-number">15</span>:<br>        <span class="hljs-keyword">if</span> persons[index]:<br>            number += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> number == <span class="hljs-number">9</span>:<br>                persons[index] = <span class="hljs-literal">False</span><br>                counter += <span class="hljs-number">1</span><br>                number = <span class="hljs-number">0</span><br>        index += <span class="hljs-number">1</span><br>        index %= <span class="hljs-number">30</span><br>    <span class="hljs-keyword">for</span> person <span class="hljs-keyword">in</span> persons:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;基&#x27;</span> <span class="hljs-keyword">if</span> person <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;非&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><h4 id="综合案例3：井字棋游戏。"><a href="#综合案例3：井字棋游戏。" class="headerlink" title="综合案例3：井字棋游戏。"></a>综合案例3：<a href="https://zh.wikipedia.org/wiki/%E4%BA%95%E5%AD%97%E6%A3%8B">井字棋</a>游戏。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_board</span>(<span class="hljs-params">board</span>):<br>    <span class="hljs-built_in">print</span>(board[<span class="hljs-string">&#x27;TL&#x27;</span>] + <span class="hljs-string">&#x27;|&#x27;</span> + board[<span class="hljs-string">&#x27;TM&#x27;</span>] + <span class="hljs-string">&#x27;|&#x27;</span> + board[<span class="hljs-string">&#x27;TR&#x27;</span>])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-+-+-&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(board[<span class="hljs-string">&#x27;ML&#x27;</span>] + <span class="hljs-string">&#x27;|&#x27;</span> + board[<span class="hljs-string">&#x27;MM&#x27;</span>] + <span class="hljs-string">&#x27;|&#x27;</span> + board[<span class="hljs-string">&#x27;MR&#x27;</span>])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-+-+-&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(board[<span class="hljs-string">&#x27;BL&#x27;</span>] + <span class="hljs-string">&#x27;|&#x27;</span> + board[<span class="hljs-string">&#x27;BM&#x27;</span>] + <span class="hljs-string">&#x27;|&#x27;</span> + board[<span class="hljs-string">&#x27;BR&#x27;</span>])<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    init_board = &#123;<br>        <span class="hljs-string">&#x27;TL&#x27;</span>: <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;TM&#x27;</span>: <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;TR&#x27;</span>: <span class="hljs-string">&#x27; &#x27;</span>,<br>        <span class="hljs-string">&#x27;ML&#x27;</span>: <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;MM&#x27;</span>: <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;MR&#x27;</span>: <span class="hljs-string">&#x27; &#x27;</span>,<br>        <span class="hljs-string">&#x27;BL&#x27;</span>: <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;BM&#x27;</span>: <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;BR&#x27;</span>: <span class="hljs-string">&#x27; &#x27;</span><br>    &#125;<br>    begin = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">while</span> begin:<br>        curr_board = init_board.copy()<br>        begin = <span class="hljs-literal">False</span><br>        turn = <span class="hljs-string">&#x27;x&#x27;</span><br>        counter = <span class="hljs-number">0</span><br>        os.system(<span class="hljs-string">&#x27;clear&#x27;</span>)<br>        print_board(curr_board)<br>        <span class="hljs-keyword">while</span> counter &lt; <span class="hljs-number">9</span>:<br>            move = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;轮到%s走棋, 请输入位置: &#x27;</span> % turn)<br>            <span class="hljs-keyword">if</span> curr_board[move] == <span class="hljs-string">&#x27; &#x27;</span>:<br>                counter += <span class="hljs-number">1</span><br>                curr_board[move] = turn<br>                <span class="hljs-keyword">if</span> turn == <span class="hljs-string">&#x27;x&#x27;</span>:<br>                    turn = <span class="hljs-string">&#x27;o&#x27;</span><br>                <span class="hljs-keyword">else</span>:<br>                    turn = <span class="hljs-string">&#x27;x&#x27;</span><br>            os.system(<span class="hljs-string">&#x27;clear&#x27;</span>)<br>            print_board(curr_board)<br>        choice = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;再玩一局?(yes|no)&#x27;</span>)<br>        begin = choice == <span class="hljs-string">&#x27;yes&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 最后这个案例来自<a href="https://item.jd.com/11943853.html">《Python编程快速上手:让繁琐工作自动化》</a>一书（这本书对有编程基础想迅速使用Python将日常工作自动化的人来说还是不错的选择），对代码做了一点点的调整。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>python100day</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python100day-6</title>
    <link href="/2022/07/23/python100day-6/"/>
    <url>/2022/07/23/python100day-6/</url>
    
    <content type="html"><![CDATA[<h2 id="函数和模块的使用"><a href="#函数和模块的使用" class="headerlink" title="函数和模块的使用"></a>函数和模块的使用</h2><p>在讲解本章节的内容之前，我们先来研究一道数学题，请说出下面的方程有多少组正整数解。</p><p><img src="/images/pasted-66.png" alt="upload successful"></p><p>事实上，上面的问题等同于将8个苹果分成四组每组至少一个苹果有多少种方案。想到这一点问题的答案就呼之欲出了。</p><p><img src="/images/pasted-67.png" alt="upload successful"></p><p>可以用Python的程序来计算出这个值，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输入M和N计算C(M,N)</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper Liu</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>m = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;m = &#x27;</span>))<br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;n = &#x27;</span>))<br>fm = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>):<br>    fm *= num<br>fn = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    fn *= num<br>fm_n = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m - n + <span class="hljs-number">1</span>):<br>    fm_n *= num<br><span class="hljs-built_in">print</span>(fm // fn // fm_n)<br></code></pre></td></tr></table></figure><h3 id="函数的作用"><a href="#函数的作用" class="headerlink" title="函数的作用"></a>函数的作用</h3><p>不知道大家是否注意到，在上面的代码中，我们做了3次求阶乘，这样的代码实际上就是重复代码。编程大师<em>Martin Fowler</em>先生曾经说过：“<strong>代码有很多种坏味道，重复是最坏的一种！</strong>”，要写出高质量的代码首先要解决的就是重复代码的问题。对于上面的代码来说，我们可以将计算阶乘的功能封装到一个称之为“函数”的功能模块中，在需要计算阶乘的地方，我们只需要“调用”这个“函数”就可以了。</p><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>在Python中可以使用<code>def</code>关键字来定义函数，和变量一样每个函数也有一个响亮的名字，而且命名规则跟变量的命名规则是一致的。在函数名后面的圆括号中可以放置传递给函数的参数，这一点和数学上的函数非常相似，程序中函数的参数就相当于是数学上说的函数的自变量，而函数执行完成后我们可以通过<code>return</code>关键字来返回一个值，这相当于数学上说的函数的因变量。</p><p>在了解了如何定义函数后，我们可以对上面的代码进行重构，所谓重构就是在不影响代码执行结果的前提下对代码的结构进行调整，重构之后的代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输入M和N计算C(M,N)</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper Liu</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fac</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;求阶乘&quot;&quot;&quot;</span><br>    result = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, num + <span class="hljs-number">1</span>):<br>        result *= n<br>    <span class="hljs-keyword">return</span> result<br><br><br>m = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;m = &#x27;</span>))<br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;n = &#x27;</span>))<br><span class="hljs-comment"># 当需要计算阶乘的时候不用再写循环求阶乘而是直接调用已经定义好的函数</span><br><span class="hljs-built_in">print</span>(fac(m) // fac(n) // fac(m - n))<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> Python的<code>math</code>模块中其实已经有一个名为<code>factorial</code>函数实现了阶乘运算，事实上求阶乘并不用自己定义函数。下面的例子中，我们讲的函数在Python标准库已经实现过了，我们这里是为了讲解函数的定义和使用才把它们又实现了一遍，<strong>实际开发中并不建议做这种低级的重复劳动</strong>。</p></blockquote><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><p>函数是绝大多数编程语言中都支持的一个代码的&quot;构建块&quot;，但是Python中的函数与其他语言中的函数还是有很多不太相同的地方，其中一个显著的区别就是Python对函数参数的处理。在Python中，函数的参数可以有默认值，也支持使用可变参数，所以Python并不需要像其他语言一样支持<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD">函数的重载</a>，因为我们在定义一个函数的时候可以让它有多种不同的使用方式，下面是两个小例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">roll_dice</span>(<span class="hljs-params">n=<span class="hljs-number">2</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;摇色子&quot;&quot;&quot;</span><br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        total += randint(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)<br>    <span class="hljs-keyword">return</span> total<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a=<span class="hljs-number">0</span>, b=<span class="hljs-number">0</span>, c=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;三个数相加&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> a + b + c<br><br><br><span class="hljs-comment"># 如果没有指定参数那么使用默认值摇两颗色子</span><br><span class="hljs-built_in">print</span>(roll_dice())<br><span class="hljs-comment"># 摇三颗色子</span><br><span class="hljs-built_in">print</span>(roll_dice(<span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(add())<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-comment"># 传递参数时可以不按照设定的顺序进行传递</span><br><span class="hljs-built_in">print</span>(add(c=<span class="hljs-number">50</span>, a=<span class="hljs-number">100</span>, b=<span class="hljs-number">200</span>))<br></code></pre></td></tr></table></figure><p>我们给上面两个函数的参数都设定了默认值，这也就意味着如果在调用函数的时候如果没有传入对应参数的值时将使用该参数的默认值，所以在上面的代码中我们可以用各种不同的方式去调用<code>add</code>函数，这跟其他很多语言中函数重载的效果是一致的。</p><p>其实上面的<code>add</code>函数还有更好的实现方案，因为我们可能会对0个或多个参数进行加法运算，而具体有多少个参数是由调用者来决定，我们作为函数的设计者对这一点是一无所知的，因此在不确定参数个数的时候，我们可以使用可变参数，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 在参数名前面的*表示args是一个可变参数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">*args</span>):<br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> args:<br>        total += val<br>    <span class="hljs-keyword">return</span> total<br><br><br><span class="hljs-comment"># 在调用add函数时可以传入0个或多个参数</span><br><span class="hljs-built_in">print</span>(add())<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>))<br></code></pre></td></tr></table></figure><h3 id="用模块管理函数"><a href="#用模块管理函数" class="headerlink" title="用模块管理函数"></a>用模块管理函数</h3><p>对于任何一种编程语言来说，给变量、函数这样的标识符起名字都是一个让人头疼的问题，因为我们会遇到命名冲突这种尴尬的情况。最简单的场景就是在同一个.py文件中定义了两个同名函数，由于Python没有函数重载的概念，那么后面的定义会覆盖之前的定义，也就意味着两个函数同名函数实际上只有一个是存在的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello, world!&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;goodbye, world!&#x27;</span>)<br><br><br><span class="hljs-comment"># 下面的代码会输出什么呢？</span><br>foo()<br></code></pre></td></tr></table></figure><p>当然上面的这种情况我们很容易就能避免，但是如果项目是由多人协作进行团队开发的时候，团队中可能有多个程序员都定义了名为<code>foo</code>的函数，那么怎么解决这种命名冲突呢？答案其实很简单，Python中每个文件就代表了一个模块（module），我们在不同的模块中可以有同名的函数，在使用函数的时候我们通过<code>import</code>关键字导入指定的模块就可以区分到底要使用的是哪个模块中的<code>foo</code>函数，代码如下所示。</p><p><code>module1.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello, world!&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>module2.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;goodbye, world!&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> module1 <span class="hljs-keyword">import</span> foo<br><br><span class="hljs-comment"># 输出hello, world!</span><br>foo()<br><br><span class="hljs-keyword">from</span> module2 <span class="hljs-keyword">import</span> foo<br><br><span class="hljs-comment"># 输出goodbye, world!</span><br>foo()<br></code></pre></td></tr></table></figure><p>也可以按照如下所示的方式来区分到底要使用哪一个<code>foo</code>函数。</p><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> module1 <span class="hljs-keyword">as</span> m1<br><span class="hljs-keyword">import</span> module2 <span class="hljs-keyword">as</span> m2<br><br>m1.foo()<br>m2.foo()<br></code></pre></td></tr></table></figure><p>但是如果将代码写成了下面的样子，那么程序中调用的是最后导入的那个<code>foo</code>，因为后导入的foo覆盖了之前导入的<code>foo</code>。</p><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> module1 <span class="hljs-keyword">import</span> foo<br><span class="hljs-keyword">from</span> module2 <span class="hljs-keyword">import</span> foo<br><br><span class="hljs-comment"># 输出goodbye, world!</span><br>foo()<br></code></pre></td></tr></table></figure><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> module2 <span class="hljs-keyword">import</span> foo<br><span class="hljs-keyword">from</span> module1 <span class="hljs-keyword">import</span> foo<br><br><span class="hljs-comment"># 输出hello, world!</span><br>foo()<br></code></pre></td></tr></table></figure><p>需要说明的是，如果我们导入的模块除了定义函数之外还有可以执行代码，那么Python解释器在导入这个模块时就会执行这些代码，事实上我们可能并不希望如此，因此如果我们在模块中编写了执行代码，最好是将这些执行代码放入如下所示的条件中，这样的话除非直接运行该模块，if条件下的这些代码是不会执行的，因为只有直接执行的模块的名字才是&quot;__main__&quot;。</p><p><code>module3.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bar</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-comment"># __name__是Python中一个隐含的变量它代表了模块的名字</span><br><span class="hljs-comment"># 只有被Python解释器直接执行的模块的名字才是__main__</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;call foo()&#x27;</span>)<br>    foo()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;call bar()&#x27;</span>)<br>    bar()<br></code></pre></td></tr></table></figure><p><code>test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> module3<br><br><span class="hljs-comment"># 导入module3时 不会执行模块中if条件成立时的代码 因为模块的名字是module3而不是__main__</span><br></code></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：实现计算求最大公约数和最小公倍数的函数。"><a href="#练习1：实现计算求最大公约数和最小公倍数的函数。" class="headerlink" title="练习1：实现计算求最大公约数和最小公倍数的函数。"></a>练习1：实现计算求最大公约数和最小公倍数的函数。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">gcd</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;求最大公约数&quot;&quot;&quot;</span><br>    (x, y) = (y, x) <span class="hljs-keyword">if</span> x &gt; y <span class="hljs-keyword">else</span> (x, y)<br>    <span class="hljs-keyword">for</span> factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(x, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> x % factor == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> y % factor == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> factor<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lcm</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;求最小公倍数&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> x * y // gcd(x, y)<br></code></pre></td></tr></table></figure><h4 id="练习2：实现判断一个数是不是回文数的函数。"><a href="#练习2：实现判断一个数是不是回文数的函数。" class="headerlink" title="练习2：实现判断一个数是不是回文数的函数。"></a>练习2：实现判断一个数是不是回文数的函数。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_palindrome</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;判断一个数是不是回文数&quot;&quot;&quot;</span><br>    temp = num<br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> temp &gt; <span class="hljs-number">0</span>:<br>        total = total * <span class="hljs-number">10</span> + temp % <span class="hljs-number">10</span><br>        temp //= <span class="hljs-number">10</span><br>    <span class="hljs-keyword">return</span> total == num<br></code></pre></td></tr></table></figure><h4 id="练习3：实现判断一个数是不是素数的函数。"><a href="#练习3：实现判断一个数是不是素数的函数。" class="headerlink" title="练习3：实现判断一个数是不是素数的函数。"></a>练习3：实现判断一个数是不是素数的函数。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_prime</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;判断一个数是不是素数&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">int</span>(num ** <span class="hljs-number">0.5</span>) + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> num % factor == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> num != <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h4 id="练习4：写一个程序判断输入的正整数是不是回文素数。"><a href="#练习4：写一个程序判断输入的正整数是不是回文素数。" class="headerlink" title="练习4：写一个程序判断输入的正整数是不是回文素数。"></a>练习4：写一个程序判断输入的正整数是不是回文素数。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入正整数: &#x27;</span>))<br>    <span class="hljs-keyword">if</span> is_palindrome(num) <span class="hljs-keyword">and</span> is_prime(num):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d是回文素数&#x27;</span> % num)<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：通过上面的程序可以看出，当我们<strong>将代码中重复出现的和相对独立的功能抽取成函数</strong>后，我们可以<strong>组合使用这些函数</strong>来解决更为复杂的问题，这也是我们为什么要定义和使用函数的一个非常重要的原因。</p></blockquote><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>最后，我们来讨论一下Python中有关变量作用域的问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>    b = <span class="hljs-string">&#x27;hello&#x27;</span><br><br>    <span class="hljs-comment"># Python中可以在函数内部再定义函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bar</span>():<br>        c = <span class="hljs-literal">True</span><br>        <span class="hljs-built_in">print</span>(a)<br>        <span class="hljs-built_in">print</span>(b)<br>        <span class="hljs-built_in">print</span>(c)<br><br>    bar()<br>    <span class="hljs-comment"># print(c)  # NameError: name &#x27;c&#x27; is not defined</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    a = <span class="hljs-number">100</span><br>    <span class="hljs-comment"># print(b)  # NameError: name &#x27;b&#x27; is not defined</span><br>    foo()<br></code></pre></td></tr></table></figure><p>上面的代码能够顺利的执行并且打印出100、hello和True，但我们注意到了，在<code>bar</code>函数的内部并没有定义<code>a</code>和<code>b</code>两个变量，那么<code>a</code>和<code>b</code>是从哪里来的。我们在上面代码的<code>if</code>分支中定义了一个变量<code>a</code>，这是一个全局变量（global variable），属于全局作用域，因为它没有定义在任何一个函数中。在上面的<code>foo</code>函数中我们定义了变量<code>b</code>，这是一个定义在函数中的局部变量（local variable），属于局部作用域，在<code>foo</code>函数的外部并不能访问到它；但对于<code>foo</code>函数内部的<code>bar</code>函数来说，变量<code>b</code>属于嵌套作用域，在<code>bar</code>函数中我们是可以访问到它的。<code>bar</code>函数中的变量<code>c</code>属于局部作用域，在<code>bar</code>函数之外是无法访问的。事实上，Python查找一个变量时会按照“局部作用域”、“嵌套作用域”、“全局作用域”和“内置作用域”的顺序进行搜索，前三者我们在上面的代码中已经看到了，所谓的“内置作用域”就是Python内置的那些标识符，我们之前用过的<code>input</code>、<code>print</code>、<code>int</code>等都属于内置作用域。</p><p>再看看下面这段代码，我们希望通过函数调用修改全局变量<code>a</code>的值，但实际上下面的代码是做不到的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>    a = <span class="hljs-number">200</span><br>    <span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 200</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    a = <span class="hljs-number">100</span><br>    foo()<br>    <span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 100</span><br></code></pre></td></tr></table></figure><p>在调用<code>foo</code>函数后，我们发现<code>a</code>的值仍然是100，这是因为当我们在函数<code>foo</code>中写<code>a = 200</code>的时候，是重新定义了一个名字为<code>a</code>的局部变量，它跟全局作用域的<code>a</code>并不是同一个变量，因为局部作用域中有了自己的变量<code>a</code>，因此<code>foo</code>函数不再搜索全局作用域中的<code>a</code>。如果我们希望在<code>foo</code>函数中修改全局作用域中的<code>a</code>，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>    <span class="hljs-keyword">global</span> a<br>    a = <span class="hljs-number">200</span><br>    <span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 200</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    a = <span class="hljs-number">100</span><br>    foo()<br>    <span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 200</span><br></code></pre></td></tr></table></figure><p>我们可以使用<code>global</code>关键字来指示<code>foo</code>函数中的变量<code>a</code>来自于全局作用域，如果全局作用域中没有<code>a</code>，那么下面一行的代码就会定义变量<code>a</code>并将其置于全局作用域。同理，如果我们希望函数内部的函数能够修改嵌套作用域中的变量，可以使用<code>nonlocal</code>关键字来指示变量来自于嵌套作用域，请大家自行试验。</p><p>在实际开发中，我们应该尽量减少对全局变量的使用，因为全局变量的作用域和影响过于广泛，可能会发生意料之外的修改和使用，除此之外全局变量比局部变量拥有更长的生命周期，可能导致对象占用的内存长时间无法被<a href="https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)">垃圾回收</a>。事实上，减少对全局变量的使用，也是降低代码之间耦合度的一个重要举措，同时也是对<a href="https://zh.wikipedia.org/zh-hans/%E5%BE%97%E5%A2%A8%E5%BF%92%E8%80%B3%E5%AE%9A%E5%BE%8B">迪米特法则</a>的践行。减少全局变量的使用就意味着我们应该尽量让变量的作用域在函数的内部，但是如果我们希望将一个局部变量的生命周期延长，使其在定义它的函数调用结束后依然可以使用它的值，这时候就需要使用<a href="https://zh.wikipedia.org/wiki/%E9%97%AD%E5%8C%85_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">闭包</a>，这个我们在后续的内容中进行讲解。</p><blockquote><p><strong>说明：</strong> 很多人经常会将“闭包”和<a href="https://zh.wikipedia.org/wiki/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0">“匿名函数”</a>混为一谈，但实际上它们并不是一回事，如果想了解这个概念，可以看看<a href="https://zh.wikipedia.org/wiki/">维基百科</a>的解释或者<a href="https://www.zhihu.com/">知乎</a>上对这个概念的讨论。</p></blockquote><p>说了那么多，其实结论很简单，从现在开始我们可以将Python代码按照下面的格式进行书写，这一点点的改进其实就是在我们理解了函数和作用域的基础上跨出的巨大的一步。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># Todo: Add your code here</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python100day</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python100day-5</title>
    <link href="/2022/07/22/python100day-5/"/>
    <url>/2022/07/22/python100day-5/</url>
    
    <content type="html"><![CDATA[<h2 id="构造程序逻辑"><a href="#构造程序逻辑" class="headerlink" title="构造程序逻辑"></a>构造程序逻辑</h2><p>学完前面的几个章节后，我觉得有必要在这里带大家做一些练习来巩固之前所学的知识，虽然迄今为止我们学习的内容只是Python的冰山一角，但是这些内容已经足够我们来构建程序中的逻辑。对于编程语言的初学者来说，在学习了Python的核心语言元素（变量、类型、运算符、表达式、分支结构、循环结构等）之后，必须做的一件事情就是尝试用所学知识去解决现实中的问题，换句话说就是锻炼自己把用人类自然语言描述的算法（解决问题的方法和步骤）翻译成Python代码的能力，而这件事情必须通过大量的练习才能达成。</p><p>我们在本章为大家整理了一些经典的案例和习题，希望通过这些例子，一方面帮助大家巩固之前所学的Python知识，另一方面帮助大家了解如何建立程序中的逻辑以及如何运用一些简单的算法解决现实中的问题。</p><h3 id="经典的例子"><a href="#经典的例子" class="headerlink" title="经典的例子"></a>经典的例子</h3><ol><li><p>寻找<strong>水仙花数</strong>。</p><blockquote><p><strong>说明</strong>：水仙花数也被称为超完全数字不变数、自恋数、自幂数、阿姆斯特朗数，它是一个3位数，该数字每个位上数字的立方之和正好等于它本身，例如：$1^3 + 5^3+ 3^3&#x3D;153$。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">找出所有水仙花数</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper Liu</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>, <span class="hljs-number">1000</span>):<br>    low = num % <span class="hljs-number">10</span><br>    mid = num // <span class="hljs-number">10</span> % <span class="hljs-number">10</span><br>    high = num // <span class="hljs-number">100</span><br>    <span class="hljs-keyword">if</span> num == low ** <span class="hljs-number">3</span> + mid ** <span class="hljs-number">3</span> + high ** <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><p>在上面的代码中，我们通过整除和求模运算分别找出了一个三位数的个位、十位和百位，这种小技巧在实际开发中还是常用的。用类似的方法，我们还可以实现将一个正整数反转，例如：将12345变成54321，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">正整数的反转</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper Liu</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;num = &#x27;</span>))<br>reversed_num = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> num &gt; <span class="hljs-number">0</span>:<br>    reversed_num = reversed_num * <span class="hljs-number">10</span> + num % <span class="hljs-number">10</span><br>    num //= <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(reversed_num)<br></code></pre></td></tr></table></figure></li><li><p><strong>百钱百鸡</strong>问题。</p><blockquote><p><strong>说明</strong>：百钱百鸡是我国古代数学家<a href="https://baike.baidu.com/item/%E5%BC%A0%E4%B8%98%E5%BB%BA/10246238">张丘建</a>在《算经》一书中提出的数学问题：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？翻译成现代文是：公鸡5元一只，母鸡3元一只，小鸡1元三只，用100块钱买一百只鸡，问公鸡、母鸡、小鸡各有多少只？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">《百钱百鸡》问题</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper Liu</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">20</span>):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">33</span>):<br>        z = <span class="hljs-number">100</span> - x - y<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">5</span> * x + <span class="hljs-number">3</span> * y + z / <span class="hljs-number">3</span> == <span class="hljs-number">100</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;公鸡: %d只, 母鸡: %d只, 小鸡: %d只&#x27;</span> % (x, y, z))<br></code></pre></td></tr></table></figure><p>上面使用的方法叫做<strong>穷举法</strong>，也称为<strong>暴力搜索法</strong>，这种方法通过一项一项的列举备选解决方案中所有可能的候选项并检查每个候选项是否符合问题的描述，最终得到问题的解。这种方法看起来比较笨拙，但对于运算能力非常强大的计算机来说，通常都是一个可行的甚至是不错的选择，而且问题的解如果存在，这种方法一定能够找到它。</p></li><li><p><strong>CRAPS赌博游戏</strong>。</p><blockquote><p><strong>说明</strong>：CRAPS又称花旗骰，是美国拉斯维加斯非常受欢迎的一种的桌上赌博游戏。该游戏使用两粒骰子，玩家通过摇两粒骰子获得点数进行游戏。简单的规则是：玩家第一次摇骰子如果摇出了7点或11点，玩家胜；玩家第一次如果摇出2点、3点或12点，庄家胜；其他点数玩家继续摇骰子，如果玩家摇出了7点，庄家胜；如果玩家摇出了第一次摇的点数，玩家胜；其他点数，玩家继续要骰子，直到分出胜负。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Craps赌博游戏</span><br><span class="hljs-string">我们设定玩家开始游戏时有1000元的赌注</span><br><span class="hljs-string">游戏结束的条件是玩家输光所有的赌注</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper Liu</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><br>money = <span class="hljs-number">1000</span><br><span class="hljs-keyword">while</span> money &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你的总资产为:&#x27;</span>, money)<br>    needs_go_on = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        debt = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请下注: &#x27;</span>))<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt; debt &lt;= money:<br>            <span class="hljs-keyword">break</span><br>    first = randint(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>) + randint(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;玩家摇出了%d点&#x27;</span> % first)<br>    <span class="hljs-keyword">if</span> first == <span class="hljs-number">7</span> <span class="hljs-keyword">or</span> first == <span class="hljs-number">11</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;玩家胜!&#x27;</span>)<br>        money += debt<br>    <span class="hljs-keyword">elif</span> first == <span class="hljs-number">2</span> <span class="hljs-keyword">or</span> first == <span class="hljs-number">3</span> <span class="hljs-keyword">or</span> first == <span class="hljs-number">12</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;庄家胜!&#x27;</span>)<br>        money -= debt<br>    <span class="hljs-keyword">else</span>:<br>        needs_go_on = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">while</span> needs_go_on:<br>        needs_go_on = <span class="hljs-literal">False</span><br>        current = randint(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>) + randint(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;玩家摇出了%d点&#x27;</span> % current)<br>        <span class="hljs-keyword">if</span> current == <span class="hljs-number">7</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;庄家胜&#x27;</span>)<br>            money -= debt<br>        <span class="hljs-keyword">elif</span> current == first:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;玩家胜&#x27;</span>)<br>            money += debt<br>        <span class="hljs-keyword">else</span>:<br>            needs_go_on = <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你破产了, 游戏结束!&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ol><p>###有用的练习 </p><ol><li><p>生成<strong>斐波那契数列</strong>的前20个数。</p><blockquote><p><strong>说明</strong>：斐波那契数列（Fibonacci sequence），又称黄金分割数列，是意大利数学家莱昂纳多·斐波那契（Leonardoda Fibonacci）在《计算之书》中提出一个在理想假设条件下兔子成长率的问题而引入的数列，所以这个数列也被戏称为&quot;兔子数列&quot;。斐波那契数列的特点是数列的前两个数都是1，从第三个数开始，每个数都是它前面两个数的和，形如：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, …。斐波那契数列在现代物理、准晶体结构、化学等领域都有直接的应用。</p></blockquote></li><li><p>找出10000以内的<strong>完美数</strong>。</p><blockquote><p><strong>说明</strong>：完美数又称为完全数或完备数，它的所有的真因子（即除了自身以外的因子）的和（即因子函数）恰好等于它本身。例如：6（$6&#x3D;1+2+3$）和28（$28&#x3D;1+2+4+7+14$）就是完美数。完美数有很多神奇的特性，有兴趣的可以自行了解。</p></blockquote></li><li><p>输出<strong>100以内所有的素数</strong>。</p><blockquote><p><strong>说明</strong>：素数指的是只能被1和自身整除的正整数（不包括1）。</p></blockquote></li></ol><p>上面练习的参考答案在本章对应的代码目录中，如果需要帮助请读者自行查看参考答案。</p>]]></content>
    
    
    <categories>
      
      <category>python100day</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python100day-4</title>
    <link href="/2022/07/21/python100day-4/"/>
    <url>/2022/07/21/python100day-4/</url>
    
    <content type="html"><![CDATA[<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>我们在写程序的时候，一定会遇到需要重复执行某条或某些指令的场景。例如用程序控制机器人踢足球，如果机器人持球而且还没有进入射门范围，那么我们就要一直发出让机器人向球门方向移动的指令。在这个场景中，让机器人向球门方向移动就是一个需要重复的动作，当然这里还会用到上一课讲的分支结构来判断机器人是否持球以及是否进入射门范围。再举一个简单的例子，如果要实现每隔1秒中在屏幕上打印一次“hello, world”并持续打印一个小时，我们肯定不能够直接把<code>print(&#39;hello, world&#39;)</code>这句代码写3600遍，这里同样需要循环结构。</p><p>循环结构就是程序中控制某条或某些指令重复执行的结构。在Python中构造循环结构有两种做法，一种是<code>for-in</code>循环，一种是<code>while</code>循环。</p><h3 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h3><p>如果明确的知道循环执行的次数或者要对一个容器进行迭代（后面会讲到），那么我们推荐使用<code>for-in</code>循环，例如下面代码中计算1~100求和的结果（$\displaystyle \sum \limits_{n&#x3D;1}^{100}n$）。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">用for循环实现1~100求和</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper liu</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">101</span>):<br>    <span class="hljs-built_in">sum</span> += x<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>)<br></code></pre></td></tr></table></figure><p>需要说明的是上面代码中的<code>range(1, 101)</code>可以用来构造一个从1到100的范围，当我们把这样一个范围放到<code>for-in</code>循环中，就可以通过前面的循环变量<code>x</code>依次取出从1到100的整数。当然，<code>range</code>的用法非常灵活，下面给出了一个例子：</p><ul><li><code>range(101)</code>：可以用来产生0到100范围的整数，需要注意的是取不到101。</li><li><code>range(1, 101)</code>：可以用来产生1到100范围的整数，相当于前面是闭区间后面是开区间。</li><li><code>range(1, 101, 2)</code>：可以用来产生1到100的奇数，其中2是步长，即每次数值递增的值。</li><li><code>range(100, 0, -2)</code>：可以用来产生100到1的偶数，其中-2是步长，即每次数字递减的值。</li></ul><p>知道了这一点，我们可以用下面的代码来实现1~100之间的偶数求和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">用for循环实现1~100之间的偶数求和</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper liu</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">101</span>, <span class="hljs-number">2</span>):<br>    <span class="hljs-built_in">sum</span> += x<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>)<br></code></pre></td></tr></table></figure><p>当然，也可以通过在循环中使用分支结构的方式来实现相同的功能，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">用for循环实现1~100之间的偶数求和</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper liu</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>):<br>    <span class="hljs-keyword">if</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">sum</span> += x<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：相较于上面直接跳过奇数的做法，下面这种做法很明显并不是很好的选择。</p></blockquote><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>如果要构造不知道具体循环次数的循环结构，我们推荐使用<code>while</code>循环。<code>while</code>循环通过一个能够产生或转换出<code>bool</code>值的表达式来控制循环，表达式的值为<code>True</code>则继续循环；表达式的值为<code>False</code>则结束循环。</p><p>下面我们通过一个“猜数字”的小游戏来看看如何使用<code>while</code>循环。猜数字游戏的规则是：计算机出一个1到100之间的随机数，玩家输入自己猜的数字，计算机给出对应的提示信息（大一点、小一点或猜对了），如果玩家猜中了数字，计算机提示用户一共猜了多少次，游戏结束，否则游戏继续。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">猜数字游戏</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper liu</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> random<br><br>answer = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>counter = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    counter += <span class="hljs-number">1</span><br>    number = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入: &#x27;</span>))<br>    <span class="hljs-keyword">if</span> number &lt; answer:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;大一点&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> number &gt; answer:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;小一点&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;恭喜你猜对了!&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你总共猜了%d次&#x27;</span> % counter)<br><span class="hljs-keyword">if</span> counter &gt; <span class="hljs-number">7</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你的智商余额明显不足&#x27;</span>)<br></code></pre></td></tr></table></figure><p>上面的代码中使用了<code>break</code>关键字来提前终止循环，需要注意的是<code>break</code>只能终止它所在的那个循环，这一点在使用嵌套的循环结构（下面会讲到）需要引起注意。除了<code>break</code>之外，还有另一个关键字是<code>continue</code>，它可以用来放弃本次循环后续的代码直接让循环进入下一轮。</p><p>和分支结构一样，循环结构也是可以嵌套的，也就是说在循环中还可以构造循环结构。下面的例子演示了如何通过嵌套的循环来输出一个九九乘法表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输出乘法口诀表(九九表)</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper liu</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d*%d=%d&#x27;</span> % (i, j, i * j), end=<span class="hljs-string">&#x27;\t&#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：输入一个正整数判断是不是素数。"><a href="#练习1：输入一个正整数判断是不是素数。" class="headerlink" title="练习1：输入一个正整数判断是不是素数。"></a>练习1：输入一个正整数判断是不是素数。</h4><blockquote><p><strong>提示</strong>：素数指的是只能被1和自身整除的大于1的整数。</p></blockquote><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输入一个正整数判断它是不是素数</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper liu</span><br><span class="hljs-string">Date: 2018-03-01</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt<br><br>num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入一个正整数: &#x27;</span>))<br>end = <span class="hljs-built_in">int</span>(sqrt(num))<br>is_prime = <span class="hljs-literal">True</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, end + <span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> num % x == <span class="hljs-number">0</span>:<br>        is_prime = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">if</span> is_prime <span class="hljs-keyword">and</span> num != <span class="hljs-number">1</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d是素数&#x27;</span> % num)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d不是素数&#x27;</span> % num)<br></code></pre></td></tr></table></figure><h4 id="练习2：输入两个正整数，计算它们的最大公约数和最小公倍数。"><a href="#练习2：输入两个正整数，计算它们的最大公约数和最小公倍数。" class="headerlink" title="练习2：输入两个正整数，计算它们的最大公约数和最小公倍数。"></a>练习2：输入两个正整数，计算它们的最大公约数和最小公倍数。</h4><blockquote><p><strong>提示</strong>：两个数的最大公约数是两个数的公共因子中最大的那个数；两个数的最小公倍数则是能够同时被两个数整除的最小的那个数。</p></blockquote><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输入两个正整数计算它们的最大公约数和最小公倍数</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper liu</span><br><span class="hljs-string">Date: 2018-03-01</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>x = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;x = &#x27;</span>))<br>y = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;y = &#x27;</span>))<br><span class="hljs-comment"># 如果x大于y就交换x和y的值</span><br><span class="hljs-keyword">if</span> x &gt; y:<br>    <span class="hljs-comment"># 通过下面的操作将y的值赋给x, 将x的值赋给y</span><br>    x, y = y, x<br><span class="hljs-comment"># 从两个数中较小的数开始做递减的循环</span><br><span class="hljs-keyword">for</span> factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(x, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> x % factor == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> y % factor == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d和%d的最大公约数是%d&#x27;</span> % (x, y, factor))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d和%d的最小公倍数是%d&#x27;</span> % (x, y, x * y // factor))<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h4 id="练习3：打印如下所示的三角形图案。"><a href="#练习3：打印如下所示的三角形图案。" class="headerlink" title="练习3：打印如下所示的三角形图案。"></a>练习3：打印如下所示的三角形图案。</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span><br><span class="hljs-strong">**</span><br><span class="hljs-strong">**</span><span class="hljs-emphasis">*</span><br><span class="hljs-emphasis"><span class="hljs-strong">****</span></span><br><span class="hljs-emphasis"><span class="hljs-strong">****</span>*</span><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">    *</span><br>   <span class="hljs-strong">**</span><br><span class="hljs-strong">  **</span><span class="hljs-emphasis">*</span><br><span class="hljs-emphasis"> <span class="hljs-strong">****</span></span><br><span class="hljs-emphasis"><span class="hljs-strong">****</span>*</span><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">    *</span><br>   <span class="hljs-strong">**<span class="hljs-emphasis">*</span></span><br><span class="hljs-emphasis"><span class="hljs-strong">  *</span>**</span><span class="hljs-strong">**</span><br><span class="hljs-strong"> **</span><span class="hljs-strong">****</span><span class="hljs-emphasis">*</span><br><span class="hljs-emphasis"><span class="hljs-strong">****</span><span class="hljs-strong">****</span>*</span><br></code></pre></td></tr></table></figure><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">打印三角形图案</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper liu</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>row = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入行数: &#x27;</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row):<br>        <span class="hljs-keyword">if</span> j &lt; row - i - <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; &#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row - i - <span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; &#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python100day</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu18.04 更换国内源</title>
    <link href="/2022/07/21/Ubuntu18-04-%E6%9B%B4%E6%8D%A2%E5%9B%BD%E5%86%85%E6%BA%90/"/>
    <url>/2022/07/21/Ubuntu18-04-%E6%9B%B4%E6%8D%A2%E5%9B%BD%E5%86%85%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h2 id="1-备份原来的源"><a href="#1-备份原来的源" class="headerlink" title="1.备份原来的源"></a>1.备份原来的源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bk<br></code></pre></td></tr></table></figure><p>将以前的源备份一下，以防以后可以用的。</p><h2 id="2-更换源"><a href="#2-更换源" class="headerlink" title="2.更换源"></a>2.更换源</h2><p>sudo gedit &#x2F;etc&#x2F;apt&#x2F;sources.list<br>使用gedit打开文档，清空文档，将下边的阿里源复制进去，然后点击保存关闭。或者也可以根据目录找到该文件，用文档编辑器打开编辑，然后保存。<br>阿里源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span>&lt;&lt;<span class="hljs-string">EOF&gt;/etc/apt/sources.list</span><br><span class="hljs-string">deb http://mirrors.aliyun.com/ubuntu/ xenial main</span><br><span class="hljs-string">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main</span><br><span class="hljs-string"></span><br><span class="hljs-string">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span><br><span class="hljs-string">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span><br><span class="hljs-string"></span><br><span class="hljs-string">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="hljs-string">deb-src http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="hljs-string">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="hljs-string">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="hljs-string"></span><br><span class="hljs-string">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main</span><br><span class="hljs-string">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main</span><br><span class="hljs-string">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class="hljs-string">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>其他源<br>清华源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span>&lt;&lt;<span class="hljs-string">EOF&gt;/etc/apt/sources.list</span><br><span class="hljs-string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class="hljs-string"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class="hljs-string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="hljs-string"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="hljs-string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="hljs-string"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="hljs-string">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="hljs-string"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>网易源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span>&lt;&lt;<span class="hljs-string">EOF&gt;/etc/apt/sources.list</span><br><span class="hljs-string">deb http://mirrors.163.com/ubuntu/ wily main restricted universe multiverse</span><br><span class="hljs-string">deb http://mirrors.163.com/ubuntu/ wily-security main restricted universe multiverse</span><br><span class="hljs-string">deb http://mirrors.163.com/ubuntu/ wily-updates main restricted universe multiverse</span><br><span class="hljs-string">deb http://mirrors.163.com/ubuntu/ wily-proposed main restricted universe multiverse</span><br><span class="hljs-string">deb http://mirrors.163.com/ubuntu/ wily-backports main restricted universe multiverse</span><br><span class="hljs-string">deb-src http://mirrors.163.com/ubuntu/ wily main restricted universe multiverse</span><br><span class="hljs-string">deb-src http://mirrors.163.com/ubuntu/ wily-security main restricted universe multiverse</span><br><span class="hljs-string">deb-src http://mirrors.163.com/ubuntu/ wily-updates main restricted universe multiverse</span><br><span class="hljs-string">deb-src http://mirrors.163.com/ubuntu/ wily-proposed main restricted universe multiverse</span><br><span class="hljs-string">deb-src http://mirrors.163.com/ubuntu/ wily-backports main restricted universe multiverse</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>中科大源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span>&lt;&lt;<span class="hljs-string">EOF&gt;/etc/apt/sources.list</span><br><span class="hljs-string">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="hljs-string">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="hljs-string">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="hljs-string">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="hljs-string">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="hljs-string">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="hljs-string">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="hljs-string">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="hljs-string">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="hljs-string">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派烧录指南</title>
    <link href="/2022/07/20/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%83%A7%E5%BD%95%E6%8C%87%E5%8D%97/"/>
    <url>/2022/07/20/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%83%A7%E5%BD%95%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="树莓派烧录指南"><a href="#树莓派烧录指南" class="headerlink" title="树莓派烧录指南"></a>树莓派烧录指南</h1><h2 id="镜像下载"><a href="#镜像下载" class="headerlink" title="镜像下载"></a>镜像下载</h2><p>镜像下载地址为: <a href="https://cdimage.ubuntu.com/releases">https://cdimage.ubuntu.com/releases</a></p><p>清华mirrors: <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-cdimage/releases">https://mirrors.tuna.tsinghua.edu.cn/ubuntu-cdimage/releases</a></p><p>在此目录内选择需要的版本进行下载，树莓派镜像一半名称内带有 raspi 字样，ubuntu 18 区分树莓派2、3、4使用不同镜像，ubuntu 20树莓派2、3、4均使用同一个镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">ubuntu 20.04: https://cdimage.ubuntu.com/releases/focal/release/ubuntu-20.04.1-preinstalled-server-arm64+raspi.img.xz<br>ubuntu 20.04（公司内网）: http://192.168.12.244/operatingSystem/ubuntu/raspberry/ubuntu-20.04.1-preinstalled-server-arm64+raspi.img.xz<br>ubuntu 18.04 树莓派4: http://cdimage.ubuntu.com/releases/18.04.4/release/ubuntu-18.04.5-preinstalled-server-arm64+raspi4.img.xz<br>ubuntu 18.04 树莓派4（公司内网）: http://192.168.12.244/operatingSystem/ubuntu/raspberry/ubuntu-18.04.5-preinstalled-server-arm64+raspi4.img.xz<br>ubuntu 18.04 树莓派3: http://cdimage.ubuntu.com/releases/18.04.4/release/ubuntu-18.04.5-preinstalled-server-arm64+raspi3.img.xz<br></code></pre></td></tr></table></figure><h2 id="系统镜像制作及安装"><a href="#系统镜像制作及安装" class="headerlink" title="系统镜像制作及安装"></a>系统镜像制作及安装</h2><p>推荐使用树莓派imager官方烧录工具： <a href="https://downloads.raspberrypi.org/imager">https://downloads.raspberrypi.org/imager</a></p><p>或者手动烧录：</p><h3 id="镜像下载-1"><a href="#镜像下载-1" class="headerlink" title="镜像下载"></a>镜像下载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">% wget http://cdimage.ubuntu.com/releases/18.04.4/release/ubuntu-18.04.4-preinstalled-server-arm64+raspi3.img.xz<br></code></pre></td></tr></table></figure><h3 id="格式化SD卡为-MS-DOS-（FAT32）格式，非必须要求"><a href="#格式化SD卡为-MS-DOS-（FAT32）格式，非必须要求" class="headerlink" title="格式化SD卡为 MS-DOS （FAT32）格式，非必须要求"></a>格式化SD卡为 MS-DOS （FAT32）格式，非必须要求</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">% sudo diskutil eraseDisk FAT32 <span class="hljs-string">&quot;UBUNTU&quot;</span> MBRFormat  /dev/disk2<br>% sudo diskutil unmountDisk /dev/disk2<br></code></pre></td></tr></table></figure><h3 id="烧写启动数据"><a href="#烧写启动数据" class="headerlink" title="烧写启动数据"></a>烧写启动数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">% sudo sh -c <span class="hljs-string">&#x27;gunzip -c ~/Downloads/ubuntu-18.04.4-preinstalled-server-arm64+raspi3.img.xz | sudo dd of=/dev/disk2  bs=32m&#x27;</span><br>0+40048 records <span class="hljs-keyword">in</span><br>0+40048 records out<br>2624517120 bytes transferred <span class="hljs-keyword">in</span> 913.454427 secs (2873178 bytes/sec)<br></code></pre></td></tr></table></figure><h3 id="cloudinit-配置"><a href="#cloudinit-配置" class="headerlink" title="cloudinit 配置"></a>cloudinit 配置</h3><p>ubuntu server 提供了 cloud-init 进行服务器配置，可以预先进行配置服务器初始状态，例如ip设置，ssh配置等。而无需在树莓派启动后再进行设置。</p><p>使用树莓派烧录工具烧录完成后，重新插拔SD卡后，电脑能识别到一个名称为system-boot 的FAT分区。 打开可以看到许多文件。</p><p>查看README文件以了解cloud-init的配置内容与初始化流程的执行方式。</p><p>其中 meta-data 用于配置 配置 cloudinit 数据源，目前无需对该文件进行更改。<br>其中 user-meta 用于配置 ssh file 等,我们主要用它来配置ssh初始密码,hostname等。<br>其中 network-config 用于配置服务器网络。<br>可参考下文进行配置：</p><p>设置主机名称<br>设置密码永不过期<br>创建账户ubuntu,密码password<br>设置账户root,密码password<br>设置允许root ssh登录<br>设置静态网络配置<br>user-dat:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#cloud-config</span><br><br><span class="hljs-comment"># Enable password authentication with the SSH daemon</span><br><span class="hljs-attr">ssh_pwauth:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># Hostname</span><br><span class="hljs-attr">hostname:</span> <span class="hljs-string">ubuntu-001</span><br><br><span class="hljs-comment"># On first boot, set the (default) ubuntu user&#x27;s password to &quot;ubuntu&quot; and</span><br><span class="hljs-comment"># expire user passwords</span><br><span class="hljs-attr">chpasswd:</span><br>  <span class="hljs-attr">expire:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">list:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ubuntu:password</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">root:password</span><br><span class="hljs-attr">runcmd:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">sed</span> <span class="hljs-string">-i</span> <span class="hljs-string">&#x27;s/#PermitRootLogin prohibit-password/PermitRootLogin yes/g&#x27;</span> <span class="hljs-string">/etc/ssh/sshd_config</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">service</span> <span class="hljs-string">ssh</span> <span class="hljs-string">restart</span><br></code></pre></td></tr></table></figure><p>network-config:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># This file contains a netplan-compatible configuration which cloud-init</span><br><span class="hljs-comment"># will apply on first-boot. Please refer to the cloud-init documentation and</span><br><span class="hljs-comment"># the netplan reference for full details:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># https://cloudinit.readthedocs.io/</span><br><span class="hljs-comment"># https://netplan.io/reference</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-attr">version:</span> <span class="hljs-number">2</span><br><span class="hljs-attr">ethernets:</span><br>  <span class="hljs-attr">eth0:</span><br>    <span class="hljs-attr">optional:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">addresses:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.2</span><span class="hljs-number">.31</span><span class="hljs-string">/16</span><br>    <span class="hljs-attr">gateway4:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>    <span class="hljs-attr">nameservers:</span><br>      <span class="hljs-attr">addresses:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">61.139</span><span class="hljs-number">.2</span><span class="hljs-number">.69</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">223.5</span><span class="hljs-number">.5</span><span class="hljs-number">.5</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell脚本详解-3</title>
    <link href="/2022/07/20/Shell%E8%84%9A%E6%9C%AC%E8%AF%A6%E8%A7%A3-3/"/>
    <url>/2022/07/20/Shell%E8%84%9A%E6%9C%AC%E8%AF%A6%E8%A7%A3-3/</url>
    
    <content type="html"><![CDATA[<p>通过echo name的方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">name=Alex<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;#name&#125;</span><br></code></pre></td></tr></table></figure><p>3.1.3.4 提取子字符串<br>如下方式：<br>代码 意义<br>${varible##<em>string} 从左向右截取最后一个string后的字符串<br>${varible#<em>string} 从左向右截取第一个string后的字符串<br>${varible%%string</em>} 从右向左截取最后一个string后的字符串<br>${varible%string</em>} 从右向左截取第一个string后的字符串<br>例，如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">MYVAR=foodforthought.jpg<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;MYVAR##*fo&#125;</span><br></code></pre></td></tr></table></figure><p>运行结果为rthought.jpg</p><p>使用${varible:n1:n2}<br>截取变量varible从n1到n2之间的字符串，可以根据特定字符偏移和长度，来选择特定子字符串，如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">EXCLAIM=cowabunga<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;EXCLAIM:0:3&#125;</span><br></code></pre></td></tr></table></figure><p>运行结果最终显示<br>cow</p><h4 id="3-1-4-数组"><a href="#3-1-4-数组" class="headerlink" title="3.1.4 数组"></a>3.1.4 数组</h4><p>如果说变量是存储单个变量的内存空间，那么数组就是多个变量的集合，它存储多个元素在一片连续的内存空间中。在bash中，只支持一维数组，不支持多维数组。</p><h5 id="3-1-4-1-数组定义与引用"><a href="#3-1-4-1-数组定义与引用" class="headerlink" title="3.1.4.1 数组定义与引用"></a>3.1.4.1 数组定义与引用</h5><p>定义一个数组方式如下：</p><p>数组名&#x3D;(元素1 元素2 元素3 … 元素n)</p><p>指定数组对应下标的元素进行赋值：</p><p>数组名[下标]&#x3D;值</p><p>同时指定多个数组元素进行赋值：</p><p>数组名&#x3D;([下标1]&#x3D;值1 [下标2]&#x3D;值2 … [下标n]&#x3D;值n)</p><p>引用数组对应下标的元素：</p><p> ${数组名[下标]}</p><h5 id="3-1-4-2-遍历数组元素"><a href="#3-1-4-2-遍历数组元素" class="headerlink" title="3.1.4.2 遍历数组元素"></a>3.1.4.2 遍历数组元素</h5><p>使用for（或while循环）循环遍历数组元素：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>a=(1 2 3 4 5 6)<br><span class="hljs-keyword">for</span>((i=0; i&lt;10; i++))<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a[<span class="hljs-variable">$i</span>]=<span class="hljs-variable">$&#123;a[$i]&#125;</span>&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>除此以外我们还可以使用${a[*]}或者${a[@]}来遍历数组元素，具体代码如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>a=(1 2 3 4 5 6)<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;a[*]&#125;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;a[@]&#125;</span><br></code></pre></td></tr></table></figure><h5 id="3-1-4-3-获取数组长度"><a href="#3-1-4-3-获取数组长度" class="headerlink" title="3.1.4.3 获取数组长度"></a>3.1.4.3 获取数组长度</h5><p>我们可以使用#来获取数组长度，需要注意的是在shell脚本中我们越界访问数组时是不会报错的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>a=(1 2 3 4 5 6)<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;a[*]&#125;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a len: <span class="hljs-variable">$&#123;#a[*]&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><p>我们先使用其获取数组中的元素后使用#获取元素个数即可。</p><p>我们先使用其获取数组中的元素后使用#获取元素个数即可。</p><h5 id="3-1-4-4-合并数组"><a href="#3-1-4-4-合并数组" class="headerlink" title="3.1.4.4 合并数组"></a>3.1.4.4 合并数组</h5><p>我们可以如下进行拼接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>a=(1 2 3 4 5 6)<br>b=(<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-string">&quot;zhaixue.cc&quot;</span>)<br>c=(<span class="hljs-variable">$&#123;a[*]&#125;</span> <span class="hljs-variable">$&#123;b[*]&#125;</span>)<br></code></pre></td></tr></table></figure><p>这样我们就将两个数组拼接起来了。</p><p>这样我们就将两个数组拼接起来了。</p><h5 id="3-1-4-5-删除数组元素"><a href="#3-1-4-5-删除数组元素" class="headerlink" title="3.1.4.5 删除数组元素"></a>3.1.4.5 删除数组元素</h5><p>如果我们想要删除某个数组元素，具体代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>a=(1 2 3 4 5 6)<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;a[*]&#125;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a len: <span class="hljs-variable">$&#123;#a[*]&#125;</span>&quot;</span><br><span class="hljs-built_in">unset</span> a[5]<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;a[*]&#125;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a len: <span class="hljs-variable">$&#123;#a[*]&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><p>执行结果如下：</p><p>执行结果如下：</p><p>我们如果要删除整个数组，可以执行unset a，举例代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>a=(1 2 3 4 5 6)<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;a[*]&#125;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a len: <span class="hljs-variable">$&#123;#a[*]&#125;</span>&quot;</span><br><span class="hljs-built_in">unset</span> a<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;a[*]&#125;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a len: <span class="hljs-variable">$&#123;#a[*]&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><h4 id="3-1-5-变量传参"><a href="#3-1-5-变量传参" class="headerlink" title="3.1.5 变量传参"></a>3.1.5 变量传参</h4><p>相关的变量含义为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br> 变量 含义<br><span class="hljs-variable">$0</span> 代表执行的文件名<br><span class="hljs-variable">$1</span> 代表传入的第1个参数<br><span class="hljs-variable">$n</span> 代表传入的第n个参数<br><span class="hljs-variable">$#</span> 参数个数<br>$* 以一个单字符串显示所有向脚本传递的参数。<br><span class="hljs-variable">$@</span> 与$*相同，但是使用时加引号，并在引号中返回每个参数<br>$$ 脚本运行的当前进程号<br>$！ 后台运行的最后一个进程的ID<br>$? 显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。<br></code></pre></td></tr></table></figure><h3 id="3-2-运算符"><a href="#3-2-运算符" class="headerlink" title="3.2 运算符"></a>3.2 运算符</h3><p>原生的bash并不支持简单的数学运算，通常要通过其它命令来实现。</p><h4 id="3-2-1-算数运算符"><a href="#3-2-1-算数运算符" class="headerlink" title="3.2.1 算数运算符"></a>3.2.1 算数运算符</h4><p>以下表格中的a和b都是变量。</p><p>运算 shell中格式<br>加法 expr $a + $b<br>减法 expr $a - $b<br>乘法 expr $a * $b<br>除法 expr $b &#x2F; $a<br>取余 expr $b % $a<br>赋值 a&#x3D;$b<br>相等 [ $a &#x3D;&#x3D; $b ]<br>不相等 [ $a !&#x3D; $b ]<br>需注意：</p><p>条件表法式需要放在方括号之间，并且要有空格。<br>使用expr进行计算时需要使用反引号，为了让读者更容易理解，给出下列示例代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#！/bin/bash</span><br>a=10<br>b=20<br><br>val=`<span class="hljs-built_in">expr</span> <span class="hljs-variable">$a</span> + <span class="hljs-variable">$b</span>`<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a + b : <span class="hljs-variable">$val</span>&quot;</span><br><br></code></pre></td></tr></table></figure><h4 id="3-2-2-关系运算符"><a href="#3-2-2-关系运算符" class="headerlink" title="3.2.2 关系运算符"></a>3.2.2 关系运算符</h4><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p><p>运算 shell中的实现 主要符号<br>检测两个数是否相等 [ $a -eq $b ] -eq<br>检测两个数是否不相等 [ $a -ne $b ] -ne<br>检测左边的数是否大于右边的 [ $a -gt $b ] -gt<br>检测左边的数是否小于右边的 [ $a -lt $b ] -lt<br>检测左边的数是否大于等于右边的 [ $a -ge $b ] -ge<br>检测左边的数是否小于等于右边的 [ $a -le $b ] -le<br>举例代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>a=1<br>b=2<br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span> ]<br><span class="hljs-keyword">then</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span> : a 不等于 b&quot;</span><br><span class="hljs-keyword">else</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$a</span> == <span class="hljs-variable">$b</span>: a 等于 b&quot;</span><br></code></pre></td></tr></table></figure><p>执行结果如下：</p><h4 id="3-2-3-布尔运算符"><a href="#3-2-3-布尔运算符" class="headerlink" title="3.2.3 布尔运算符"></a>3.2.3 布尔运算符</h4><p>具体如下：</p><p>运算 shell中的实现 主要符号<br>非运算 [ ! false ] !<br>或运算 [ $a -lt 20 -o $b -gt 100 ] -o<br>与运算 [ $a -lt 20 -a $b -gt 100 ] -a</p><h4 id="3-2-4-逻辑运算符"><a href="#3-2-4-逻辑运算符" class="headerlink" title="3.2.4 逻辑运算符"></a>3.2.4 逻辑运算符</h4><p>具体如下：</p><p>运算 shell中的实现 主要符号<br>逻辑的 AND [[ $a -lt 100 &amp;&amp; $b -gt 100 ]] &amp;&amp;<br>逻辑的 OR [[ $a -lt 100 || $b -gt 100 ]] ||<br>布尔运算符和逻辑运算符的区别：</p><p>语法上，逻辑运算需要双括弧，布尔运算只需要单大括弧<br>功能上，逻辑运算具有特殊的短路功能，即是在AND运算中第一个表达式为false时则不执行第二个表达式，在OR运算中第一个表达式为true时不执行第二个表达式。</p><h4 id="3-2-5-字符串运算符"><a href="#3-2-5-字符串运算符" class="headerlink" title="3.2.5 字符串运算符"></a>3.2.5 字符串运算符</h4><p>下表列出了常用的字符串运算符：</p><p>运算 shell中的实现 主要符号<br>检测两个字符串是否相等 [ $a &#x3D; $b ] &#x3D;<br>检测两个字符串是否不相等 [ $a !&#x3D; $b ] !&#x3D;<br>检测字符串长度是否为0 [ -z $a ] -z<br>检测字符串长度是否不为 0 [ -n “$a” ] -n<br>检测字符串是否为空 [ $a ] $</p><h4 id="3-2-6-文件测试运算符"><a href="#3-2-6-文件测试运算符" class="headerlink" title="3.2.6 文件测试运算符"></a>3.2.6 文件测试运算符</h4><p>主要用于检测unix文件的各种属性：</p><p>运算 shell中的实现 主要符号<br>检测文件是否是块设备文件 [ -b $file ] -b file<br>检测文件是否是字符设备文件 [ -c $file ] -c file<br>检测文件是否是目录 [ -d $file ] -d file<br>检测文件是否是普通文件（既不是目录，也不是设备文件） [ -f $file ] 返回 true -f file<br>检测文件是否设置了 SGID 位 [ -g $file ] -g file<br>检测文件是否设置了粘着位(Sticky Bit) [ -k $file ] -k file<br>检测文件是否是有名管道 [ -p $file ] -p file<br>检测文件是否设置了 SUID 位 [ -u $file ] -u file<br>检测文件是否可读 [ -r $file ] -r file<br>检测文件是否可写 [ -w $file ] -w file<br>检测文件是否可执行 [ -x $file ] -x file<br>检测文件是否为空（文件大小是否大于0） [ -s $file ] -s file<br>检测文件（包括目录）是否存在 [ -e $file ] -e file<br>举例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>file=<span class="hljs-string">&quot;/home/westos/Desktop/textcpp/test.sh&quot;</span><br><span class="hljs-keyword">if</span> [ -r <span class="hljs-variable">$file</span> ]<br><span class="hljs-keyword">then</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;文件可读&quot;</span><br><span class="hljs-keyword">else</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;文件不可读&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>执行结果为：</p><h4 id="3-2-7-运算指令"><a href="#3-2-7-运算指令" class="headerlink" title="3.2.7 运算指令"></a>3.2.7 运算指令</h4><p>(( ))<br>我们可以直接使用双圆括弧计算其中的内容，如((var&#x3D;a+b))，该指令经常在if&#x2F;while等条件判断中需要计算时使用。<br>let<br>在计算表达式的时候我们可以直接使用let，如let var&#x3D;a+b。<br>expr<br>在前面的内容中我们也提到了它，是非常常用的计算指令，使用时需要在外部增反引号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">var=`<span class="hljs-built_in">expr</span> a+b`<br></code></pre></td></tr></table></figure><p>bc计算器<br>bc计算器支持shell中的小数进行运算，并且可以交互式或者非交互式的使用。基本使用方式为var&#x3D;$(echo “(1.1+2.1)”|bc)；</p><p>$[]<br>我们可以直接使用这种方式计算中括弧中的内容，如echo $[1+2]</p><h3 id="3-3-控制语句"><a href="#3-3-控制语句" class="headerlink" title="3.3 控制语句"></a>3.3 控制语句</h3><p>和其他语句不同，shell的流传呢个控制不可为空。接下来我们为大家介绍sehll中常用的语法。</p><h4 id="3-3-1-if语句结构"><a href="#3-3-1-if语句结构" class="headerlink" title="3.3.1 if语句结构"></a>3.3.1 if语句结构</h4><h5 id="3-3-1-1-if-fi"><a href="#3-3-1-1-if-fi" class="headerlink" title="3.3.1.1 if-fi"></a>3.3.1.1 if-fi</h5><p>就类似于c中的if条件判断，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> condition<br><span class="hljs-keyword">then</span><br>    command1 <br>    command2<br>    ...<br>    commandN <br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h5 id="3-3-1-2-if-else-fi"><a href="#3-3-1-2-if-else-fi" class="headerlink" title="3.3.1.2 if-else-fi"></a>3.3.1.2 if-else-fi</h5><p>代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> condition<br><span class="hljs-keyword">then</span><br>    command1 <br><span class="hljs-keyword">else</span><br>    command2<br><span class="hljs-keyword">fi</span><br><br></code></pre></td></tr></table></figure><p>若condition成立则执行command1，否则执行command2。</p><h5 id="3-3-1-3-if-else-if-else"><a href="#3-3-1-3-if-else-if-else" class="headerlink" title="3.3.1.3 if else-if else"></a>3.3.1.3 if else-if else</h5><p>代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> condition1<br><span class="hljs-keyword">then</span><br>    command1<br><span class="hljs-keyword">elif</span> condition2 <br><span class="hljs-keyword">then</span> <br>    command2<br><span class="hljs-keyword">else</span><br>    command3<br><span class="hljs-keyword">fi</span><br><br></code></pre></td></tr></table></figure><p>若condition1成立，执行command1，若condition1不成立，condition2成立执行command2，若两个condition都不成立就执行command3。</p><h4 id="3-3-2-循环结构"><a href="#3-3-2-循环结构" class="headerlink" title="3.3.2 循环结构"></a>3.3.2 循环结构</h4><h5 id="3-3-2-1-for循环"><a href="#3-3-2-1-for循环" class="headerlink" title="3.3.2.1 for循环"></a>3.3.2.1 for循环</h5><p>格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> item1 item2 ... itemN<br><span class="hljs-keyword">do</span><br>    command1<br>    command2<br>    ...<br>    commandN<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>以上也可以写做一行，若变量var在列表中，则for循环执行一次所有命令。以以下代码作为测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#！/bin/bash</span><br><span class="hljs-keyword">for</span> loop <span class="hljs-keyword">in</span> 1 2 3 4 5<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;The value is: <span class="hljs-variable">$loop</span>&quot;</span><br><span class="hljs-keyword">done</span><br><br></code></pre></td></tr></table></figure><p>执行结果为：</p><h5 id="3-3-2-2-while循环"><a href="#3-3-2-2-while循环" class="headerlink" title="3.3.2.2 while循环"></a>3.3.2.2 while循环</h5><p>格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> condition<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">command</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>我们运行如下代码：</p><p>我们运行如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>int=1<br><span class="hljs-keyword">while</span>(( <span class="hljs-variable">$int</span>&lt;=5 ))<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$int</span><br>    <span class="hljs-built_in">let</span> <span class="hljs-string">&quot;int++&quot;</span><br><span class="hljs-keyword">done</span><br><br></code></pre></td></tr></table></figure><p>执行的最终结果为：</p><h5 id="3-3-2-3-无限循环"><a href="#3-3-2-3-无限循环" class="headerlink" title="3.3.2.3 无限循环"></a>3.3.2.3 无限循环</h5><p>我们可以以上两种语句给出无限循环的实现，首先看一下for循环如何实现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> (( ; ; ))<br></code></pre></td></tr></table></figure><p>除此以外我们也可以使用while循环实现如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> :<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">command</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>或者直接将while中的判断语句置为真</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">command</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h5 id="3-3-2-4-until循环"><a href="#3-3-2-4-until循环" class="headerlink" title="3.3.2.4 until循环"></a>3.3.2.4 until循环</h5><p>until 循环执行一系列命令直至条件为 true 时停止。语法格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">until condition<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">command</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h5 id="3-3-2-5-跳出循环"><a href="#3-3-2-5-跳出循环" class="headerlink" title="3.3.2.5 跳出循环"></a>3.3.2.5 跳出循环</h5><p>在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，Shell使用两个命令来实现该功能：break和continue。</p><p>break跳出循环<br>当我们需要跳出当前循环，或者终止死循环时，我们就可以使用break来跳出循环。接下来我们运行如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>var=1<br><span class="hljs-keyword">while</span>(( <span class="hljs-variable">$var</span> &lt; 5 ))<br><span class="hljs-keyword">do</span><br>        <span class="hljs-keyword">if</span>(( <span class="hljs-variable">$var</span>&gt;3 ))<br>        <span class="hljs-keyword">then</span><br>             <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;跳出循环&quot;</span><br>             <span class="hljs-built_in">break</span><br>        <span class="hljs-keyword">fi</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$var</span>&quot;</span><br>        var=`<span class="hljs-built_in">expr</span> <span class="hljs-variable">$var</span> + 1`<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>执行结果为：</p><p>在该循环中var&gt;3时break，而是直接跳出循环。</p><p>continue跳出循环<br>continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。 接下来我们运行如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>var=1<br><span class="hljs-keyword">while</span>(( <span class="hljs-variable">$var</span> &lt; 5 ))<br><span class="hljs-keyword">do</span><br>        <span class="hljs-keyword">if</span>(( <span class="hljs-variable">$var</span>&gt;3 ))<br>        <span class="hljs-keyword">then</span><br>             <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;跳出循环&quot;</span><br>             <span class="hljs-built_in">continue</span><br>        <span class="hljs-keyword">fi</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$var</span>&quot;</span><br>        var=`<span class="hljs-built_in">expr</span> <span class="hljs-variable">$var</span> + 1`<br><span class="hljs-keyword">done</span><br><br></code></pre></td></tr></table></figure><p>执行结果为：</p><p>使用continue跳出的循环只是当前循环，无法跳出整个循环，由于在该代码中我们每次执行到continue就会跳出当前循环，无法执行 var&#x3D;expr $var + 1，所以循环条件一直成立，就成了死循环。</p><h4 id="3-3-3-case-esac多选择语句"><a href="#3-3-3-case-esac多选择语句" class="headerlink" title="3.3.3 case-esac多选择语句"></a>3.3.3 case-esac多选择语句</h4><p>case … esac 为多选择语句，与其他语言中的switch … case 语句类似，是一种多分支选择结构，每个 case 分支用右圆括号开始，用两个分号 ;;表示 break，即执行结束，跳出整个 case … esac 语句，esac（就是 case 反过来）作为结束标记。</p><p>case 要求取值后面必须为单词 in，每一模式必须以右括号结束。取值可以为变量或常数，匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;。</p><p>若检测匹配时无一匹配，使用*捕获该值，再执行后续命令。</p><p>语法格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">case</span> 值 <span class="hljs-keyword">in</span><br>模式1)<br>    command1<br>    command2<br>    ...<br>    commandN<br>    ;;<br>模式2)<br>    command1<br>    command2<br>    ...<br>    commandN<br>    ;;<br>   *）<br>    command1<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><h4 id="3-3-4-select-in语句"><a href="#3-3-4-select-in语句" class="headerlink" title="3.3.4 select-in语句"></a>3.3.4 select-in语句</h4><p>select in是shell中独有的一种循环，非常适合终端的交互场景，它可以显示出带编号的菜单，用户出入不同编号就可以选择不同的菜单，并执行不同的功能。</p><p>语法格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">select var  <span class="hljs-keyword">in</span> <span class="hljs-built_in">seq</span><br><span class="hljs-keyword">do</span><br>    action<br><span class="hljs-keyword">done</span><br><br></code></pre></td></tr></table></figure><p>我们执行如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;What is your favourite OS?&quot;</span><br>select var <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;Linux&quot;</span> <span class="hljs-string">&quot;Gnu Hurd&quot;</span> <span class="hljs-string">&quot;Free BSD&quot;</span> <span class="hljs-string">&quot;Other&quot;</span>; <span class="hljs-keyword">do</span><br>  <span class="hljs-built_in">break</span>;<br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;You have selected <span class="hljs-variable">$var</span>&quot;</span><br><br><br></code></pre></td></tr></table></figure><p>执行结果为：</p><h2 id="四、函数"><a href="#四、函数" class="headerlink" title="四、函数"></a>四、函数</h2><p>函数其实就是将一段代码组合封装在一起实现某个特定的功能或返回某个特定的值。我们在定义函数时需要先起一个函数名，在使用的时候直接调用函数名即可。</p><h3 id="4-1-定义函数"><a href="#4-1-定义函数" class="headerlink" title="4.1 定义函数"></a>4.1 定义函数</h3><p>shell中定义函数格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ <span class="hljs-keyword">function</span> ] funname [()]<br>&#123;<br>    action;<br>    [<span class="hljs-built_in">return</span> int;]<br>&#125;<br><br></code></pre></td></tr></table></figure><p>注意：</p><p>以上的[ function ]也可以省略<br>当函数没有return时，默认返回最后一个命令的运行结果作为返回值。</p><h3 id="4-2-函数参数"><a href="#4-2-函数参数" class="headerlink" title="4.2 函数参数"></a>4.2 函数参数</h3><p>在shell中，调用函数时可以向其传递参数。在函数内部直接通过$n获取参数的值。我们给出示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-function"><span class="hljs-title">funWithParam</span></span>()&#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第一个参数为 <span class="hljs-variable">$1</span> !&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第十个参数为 <span class="hljs-variable">$&#123;10&#125;</span> !&quot;</span><br>&#125;<br>funWithParam 1 2 3 4 5 6 7 8 9 34 73<br></code></pre></td></tr></table></figure><p>需要注意$10不能返回第十个参数，当n&gt;10的时候，需要使用$(n)来获取参数。</p><h3 id="4-3-函数作用域"><a href="#4-3-函数作用域" class="headerlink" title="4.3 函数作用域"></a>4.3 函数作用域</h3><p>Shell脚本中执行函数时并不会开启子进程，默认在函数外部或函数内部定义和使用变量的效果相同。函数外部的变量在函数内部可以直接调用，反之函数内部的变量也可以在函数外部直接调用。但是这样会导致变量混淆、数据可能被错误地修改等等问题，那么如何解决这些问题呢？</p><p>系统为我们提供了一个local语句，该语句可以使在函数内部定义的变量仅在函数内部有效。定义时直接在变量前加local即可。</p><h2 id="五、重定向"><a href="#五、重定向" class="headerlink" title="五、重定向"></a>五、重定向</h2><p>一个命令通常从一个叫标准输入的地方读取输入，默认情况下，这恰好是你的终端。同样，一个命令通常将其输出写入到标准输出，默认情况下，这也是你的终端。</p><p>一般情况下，每个 Unix&#x2F;Linux 命令运行时都会打开三个文件：</p><p>标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。<br>标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。<br>标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。<br>但有些时候我们可能需要将数据从其它文件读入或读出，这就需要我们重定向。</p><h3 id="5-1-输入重定向"><a href="#5-1-输入重定向" class="headerlink" title="5.1 输入重定向"></a>5.1 输入重定向</h3><p>我们可以让命令从文件中获取，这样本来的命令需要从标准输入stdin中获取，转换为从我们的指定文件中获取。这样本来需要从键盘输入的命令就会转移到文件读取内容。语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">command1 &lt; file<br><br></code></pre></td></tr></table></figure><h3 id="5-2-输出重定向"><a href="#5-2-输出重定向" class="headerlink" title="5.2 输出重定向"></a>5.2 输出重定向</h3><p>同输入重定向很相似，输出重定向也是将本来需要输出标准输出文件stdout中转化为我们的指定文件中。语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">command1 &gt; file<br><br></code></pre></td></tr></table></figure><h3 id="5-3-标准错误文件重定向"><a href="#5-3-标准错误文件重定向" class="headerlink" title="5.3 标准错误文件重定向"></a>5.3 标准错误文件重定向</h3><p>我们可以直接借助标准错误文件的文件描述符来重定向stderr，语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">command</span> 2&gt;file<br><br></code></pre></td></tr></table></figure><p>扩充一点，如果我们想将stdout标准输出文件和stderr标准错误文件合并重定向到一个指定文件中，语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">command</span> &gt; file 2&gt;&amp;1<br><br></code></pre></td></tr></table></figure><h3 id="5-4-Here-Document"><a href="#5-4-Here-Document" class="headerlink" title="5.4 Here Document"></a>5.4 Here Document</h3><p>Here Document 是 Shell 中的一种特殊的重定向方式，用来将输入重定向到一个交互式 Shell 脚本或程序。它的作用是将两个 delimiter 之间的内容(document) 作为输入传递给 command。基本语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">command</span> &lt;&lt; <span class="hljs-string">delimiter</span><br><span class="hljs-string">    document</span><br><span class="hljs-string">delimiter</span><br></code></pre></td></tr></table></figure><p>注意：</p><p>注意：</p><p>结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。<br>开始的delimiter前后的空格会被忽略掉。</p><h3 id="5-5-x2F-dev-x2F-null-文件"><a href="#5-5-x2F-dev-x2F-null-文件" class="headerlink" title="5.5 &#x2F;dev&#x2F;null 文件"></a>5.5 &#x2F;dev&#x2F;null 文件</h3><p>如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 &#x2F;dev&#x2F;null中，&#x2F;dev&#x2F;null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 &#x2F;dev&#x2F;null 文件非常有用，将命令的输出重定向到它，会起到”禁止输出”的效果。语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">command</span> &gt; /dev/null<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python100day-3</title>
    <link href="/2022/07/20/python100day-3/"/>
    <url>/2022/07/20/python100day-3/</url>
    
    <content type="html"><![CDATA[<h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>迄今为止，我们写的Python代码都是一条一条语句顺序执行，这种代码结构通常称之为顺序结构。然而仅有顺序结构并不能解决所有的问题，比如我们设计一个游戏，游戏第一关的通关条件是玩家获得1000分，那么在完成本局游戏后，我们要根据玩家得到分数来决定究竟是进入第二关，还是告诉玩家“Game Over”，这里就会产生两个分支，而且这两个分支只有一个会被执行。类似的场景还有很多，我们将这种结构称之为“分支结构”或“选择结构”。给大家一分钟的时间，你应该可以想到至少5个以上这样的例子，赶紧试一试。</p><h3 id="if语句的使用"><a href="#if语句的使用" class="headerlink" title="if语句的使用"></a>if语句的使用</h3><p>在Python中，要构造分支结构可以使用<code>if</code>、<code>elif</code>和<code>else</code>关键字。所谓<strong>关键字</strong>就是有特殊含义的单词，像<code>if</code>和<code>else</code>就是专门用于构造分支结构的关键字，很显然你不能够使用它作为变量名（事实上，用作其他的标识符也是不可以）。下面的例子中演示了如何构造一个分支结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">用户身份验证</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper Liu</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>username = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入用户名: &#x27;</span>)<br>password = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入口令: &#x27;</span>)<br><span class="hljs-comment"># 用户名是admin且密码是123456则身份验证成功否则身份验证失败</span><br><span class="hljs-keyword">if</span> username == <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">and</span> password == <span class="hljs-string">&#x27;123456&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;身份验证成功!&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;身份验证失败!&#x27;</span>)<br></code></pre></td></tr></table></figure><p>需要说明的是和C&#x2F;C++、Java等语言不同，Python中没有用花括号来构造代码块而是<strong>使用了缩进的方式来表示代码的层次结构</strong>，如果<code>if</code>条件成立的情况下需要执行多条语句，只要保持多条语句具有相同的缩进就可以了。换句话说<strong>连续的代码如果又保持了相同的缩进那么它们属于同一个代码块</strong>，相当于是一个执行的整体。<strong>缩进</strong>可以使用任意数量的空格，但<strong>通常使用4个空格</strong>，建议大家<strong>不要使用制表键</strong>或者<strong>设置你的代码编辑工具自动将制表键变成4个空格</strong>。</p><p>当然如果要构造出更多的分支，可以使用<code>if...elif...else...</code>结构或者嵌套的<code>if...else...</code>结构，下面的代码演示了如何利用多分支结构实现分段函数求值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">分段函数求值</span><br><span class="hljs-string"></span><br><span class="hljs-string">        3x - 5  (x &gt; 1)</span><br><span class="hljs-string">f(x) =  x + 2   (-1 &lt;= x &lt;= 1)</span><br><span class="hljs-string">        5x + 3  (x &lt; -1)</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper Liu</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>x = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;x = &#x27;</span>))<br><span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">1</span>:<br>    y = <span class="hljs-number">3</span> * x - <span class="hljs-number">5</span><br><span class="hljs-keyword">elif</span> x &gt;= -<span class="hljs-number">1</span>:<br>    y = x + <span class="hljs-number">2</span><br><span class="hljs-keyword">else</span>:<br>    y = <span class="hljs-number">5</span> * x + <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f(%.2f) = %.2f&#x27;</span> % (x, y))<br></code></pre></td></tr></table></figure><p>当然根据实际开发的需要，分支结构是可以嵌套的，例如判断是否通关以后还要根据你获得的宝物或者道具的数量对你的表现给出等级（比如点亮两颗或三颗星星），那么我们就需要在<code>if</code>的内部构造出一个新的分支结构，同理<code>elif</code>和<code>else</code>中也可以再构造新的分支，我们称之为嵌套的分支结构，也就是说上面的代码也可以写成下面的样子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">分段函数求值</span><br><span class="hljs-string">3x - 5(x &gt; 1)</span><br><span class="hljs-string">f(x) =x + 2(-1 &lt;= x &lt;= 1)</span><br><span class="hljs-string">5x + 3(x &lt; -1)</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper Liu</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>x = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;x = &#x27;</span>))<br><span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">1</span>:<br>    y = <span class="hljs-number">3</span> * x - <span class="hljs-number">5</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">if</span> x &gt;= -<span class="hljs-number">1</span>:<br>        y = x + <span class="hljs-number">2</span><br>    <span class="hljs-keyword">else</span>:<br>        y = <span class="hljs-number">5</span> * x + <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f(%.2f) = %.2f&#x27;</span> % (x, y))<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 大家可以自己感受一下这两种写法到底是哪一种更好。在之前我们提到的Python之禅中有这么一句话“Flat is better than nested.”，之所以提倡代码“扁平化”是因为嵌套结构的嵌套层次多了之后会严重的影响代码的可读性，所以能使用扁平化的结构时就不要使用嵌套。</p></blockquote><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：英制单位英寸与公制单位厘米互换。"><a href="#练习1：英制单位英寸与公制单位厘米互换。" class="headerlink" title="练习1：英制单位英寸与公制单位厘米互换。"></a>练习1：英制单位英寸与公制单位厘米互换。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">英制单位英寸和公制单位厘米互换</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper Liu</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>value = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入长度: &#x27;</span>))<br>unit = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入单位: &#x27;</span>)<br><span class="hljs-keyword">if</span> unit == <span class="hljs-string">&#x27;in&#x27;</span> <span class="hljs-keyword">or</span> unit == <span class="hljs-string">&#x27;英寸&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%f英寸 = %f厘米&#x27;</span> % (value, value * <span class="hljs-number">2.54</span>))<br><span class="hljs-keyword">elif</span> unit == <span class="hljs-string">&#x27;cm&#x27;</span> <span class="hljs-keyword">or</span> unit == <span class="hljs-string">&#x27;厘米&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%f厘米 = %f英寸&#x27;</span> % (value, value / <span class="hljs-number">2.54</span>))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请输入有效的单位&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="练习2：百分制成绩转换为等级制成绩。"><a href="#练习2：百分制成绩转换为等级制成绩。" class="headerlink" title="练习2：百分制成绩转换为等级制成绩。"></a>练习2：百分制成绩转换为等级制成绩。</h4><blockquote><p><strong>要求</strong>：如果输入的成绩在90分以上（含90分）输出A；80分-90分（不含90分）输出B；70分-80分（不含80分）输出C；60分-70分（不含70分）输出D；60分以下输出E。</p></blockquote><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">百分制成绩转换为等级制成绩</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper Liu</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>score = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入成绩: &#x27;</span>))<br><span class="hljs-keyword">if</span> score &gt;= <span class="hljs-number">90</span>:<br>    grade = <span class="hljs-string">&#x27;A&#x27;</span><br><span class="hljs-keyword">elif</span> score &gt;= <span class="hljs-number">80</span>:<br>    grade = <span class="hljs-string">&#x27;B&#x27;</span><br><span class="hljs-keyword">elif</span> score &gt;= <span class="hljs-number">70</span>:<br>    grade = <span class="hljs-string">&#x27;C&#x27;</span><br><span class="hljs-keyword">elif</span> score &gt;= <span class="hljs-number">60</span>:<br>    grade = <span class="hljs-string">&#x27;D&#x27;</span><br><span class="hljs-keyword">else</span>:<br>    grade = <span class="hljs-string">&#x27;E&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;对应的等级是:&#x27;</span>, grade)<br></code></pre></td></tr></table></figure><h4 id="练习3：输入三条边长，如果能构成三角形就计算周长和面积。"><a href="#练习3：输入三条边长，如果能构成三角形就计算周长和面积。" class="headerlink" title="练习3：输入三条边长，如果能构成三角形就计算周长和面积。"></a>练习3：输入三条边长，如果能构成三角形就计算周长和面积。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">判断输入的边长能否构成三角形，如果能则计算出三角形的周长和面积</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper Liu</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>a = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;a = &#x27;</span>))<br>b = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;b = &#x27;</span>))<br>c = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;c = &#x27;</span>))<br><span class="hljs-keyword">if</span> a + b &gt; c <span class="hljs-keyword">and</span> a + c &gt; b <span class="hljs-keyword">and</span> b + c &gt; a:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;周长: %f&#x27;</span> % (a + b + c))<br>    p = (a + b + c) / <span class="hljs-number">2</span><br>    area = (p * (p - a) * (p - b) * (p - c)) ** <span class="hljs-number">0.5</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;面积: %f&#x27;</span> % (area))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;不能构成三角形&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 上面使用的通过边长计算三角形面积的公式叫做<a href="https://zh.wikipedia.org/zh-hans/%E6%B5%B7%E4%BC%A6%E5%85%AC%E5%BC%8F">海伦公式</a>。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>python100day</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell脚本详解-2</title>
    <link href="/2022/07/19/Shell%E8%84%9A%E6%9C%AC%E8%AF%A6%E8%A7%A3-2/"/>
    <url>/2022/07/19/Shell%E8%84%9A%E6%9C%AC%E8%AF%A6%E8%A7%A3-2/</url>
    
    <content type="html"><![CDATA[<h2 id="三、基本语法"><a href="#三、基本语法" class="headerlink" title="三、基本语法"></a>三、基本语法</h2><h3 id="3-1-变量"><a href="#3-1-变量" class="headerlink" title="3.1 变量"></a>3.1 变量</h3><p>变量名其实就是一片内存区域的地址或者可以说是寻址符号，有了变量我们就可以使用一串固定的字符来表示不固定的目标。</p><h4 id="3-1-1-变量类型"><a href="#3-1-1-变量类型" class="headerlink" title="3.1.1 变量类型"></a>3.1.1 变量类型</h4><p>在shell中会同时存在三种类型变量。</p><p>局部变量：局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。<br>环境变量：所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。<br>shell变量：shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行</p><h4 id="3-1-2-变量操作"><a href="#3-1-2-变量操作" class="headerlink" title="3.1.2 变量操作"></a>3.1.2 变量操作</h4><p>创建普通变量：name&#x3D;“test”，组要注意的是等号两边不能有空格。<br>创建局部变量：local name&#x3D;“test”，使用local修饰的变量在函数体外无法访问，只能在函数体中使用。<br>创建只读变量：name&#x3D;“only_read” -&gt; readonly name，这种变量不可以被修改。<br>使用变量：echo $name或者echo ${name}<br>删除变量：unset name，删除之后的变量无法被访问，需要注意无法删除只读变量。</p><h4 id="3-1-3-字符串变量"><a href="#3-1-3-字符串变量" class="headerlink" title="3.1.3 字符串变量"></a>3.1.3 字符串变量</h4><h5 id="3-1-3-1-字符串变量的创建"><a href="#3-1-3-1-字符串变量的创建" class="headerlink" title="3.1.3.1 字符串变量的创建"></a>3.1.3.1 字符串变量的创建</h5><p>使用单引号创建：var&#x3D;’test’。<br>这种方式创建的变量只能原样输出，变量无效，我们可以借用c中的“字符串常量”的定义理解这种特性。除此以外，单引号中不能出现单独的单引号，转义也是不可以的。<br>使用双引号创建：var&#x3D;”my name is ${name}”，这种方式创建的字符串变量有效，也可以出现转义符。</p><h5 id="3-1-3-2-拼接字符串"><a href="#3-1-3-2-拼接字符串" class="headerlink" title="3.1.3.2 拼接字符串"></a>3.1.3.2 拼接字符串</h5><p>字面量拼接<br>str01&#x3D;”1””2”或者str01&#x3D;”1”‘2’，这样就将1和2两个字符拼接在了一起。需要注意的是两个串之间不可以有空格。<br>变量拼接<br>str03&#x3D;${part01}${part02}或str04&#x3D;${part01}”end”或str05&#x3D;”${part01} ${part02}”这三种方式都可以拼接字符串变量。<br>命令拼接<br>str02&#x3D; date“end”，这里的date是一个shell命令，需要使用引用，具体如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">str02=`<span class="hljs-built_in">date</span>`<span class="hljs-string">&quot;end&quot;</span><br></code></pre></td></tr></table></figure><h5 id="3-1-3-3-获取字符串长度"><a href="#3-1-3-3-获取字符串长度" class="headerlink" title="3.1.3.3 获取字符串长度"></a>3.1.3.3 获取字符串长度</h5><p>使用wc -L命令<br>wc -L可以获取到当前行的长度，因此对于单独行的字符串可以用这个简单的方法获取，另外wc -l则是获取当前字符串内容的行数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;abc&quot;</span> |<span class="hljs-built_in">wc</span> -L<br></code></pre></td></tr></table></figure><p>使用expr length可以获取string的长度.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">expr</span> length <span class="hljs-variable">$&#123;str&#125;</span><br></code></pre></td></tr></table></figure><p>1awk获取域的个数<br>但是如果大于10个字符的长度时是否存在问题需要后面确认</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;abc&quot;</span> |awk -F <span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">&#x27;&#123;print NF&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>通过awk+length的方式获取字符串长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> “Alex”|awk <span class="hljs-string">&#x27;&#123;print length($0)&#125;&#x27;</span><br><br></code></pre></td></tr></table></figure><p>通过echo name的方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">name=Alex<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;#name&#125;</span><br></code></pre></td></tr></table></figure><h5 id="3-1-3-4-提取子字符串"><a href="#3-1-3-4-提取子字符串" class="headerlink" title="3.1.3.4 提取子字符串"></a>3.1.3.4 提取子字符串</h5><p>如下方式：<br>代码 意义<br>${varible##<em>string} 从左向右截取最后一个string后的字符串<br>${varible#<em>string} 从左向右截取第一个string后的字符串<br>${varible%%string</em>} 从右向左截取最后一个string后的字符串<br>${varible%string</em>} 从右向左截取第一个string后的字符串<br>例，如下代码：</p><p>使用expr length可以获取string的长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">expr</span> length <span class="hljs-variable">$&#123;str&#125;</span><br></code></pre></td></tr></table></figure><p>awk获取域的个数<br>但是如果大于10个字符的长度时是否存在问题需要后面确认</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;abc&quot;</span> |awk -F <span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">&#x27;&#123;print NF&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>通过awk+length的方式获取字符串长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> “Alex”|awk <span class="hljs-string">&#x27;&#123;print length($0)&#125;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell脚本详解-1</title>
    <link href="/2022/07/19/shell-%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/07/19/shell-%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="Shell脚本详解"><a href="#Shell脚本详解" class="headerlink" title="Shell脚本详解"></a>Shell脚本详解</h2><h2 id="一、Shell脚本基础概念"><a href="#一、Shell脚本基础概念" class="headerlink" title="一、Shell脚本基础概念"></a>一、Shell脚本基础概念</h2><h3 id="1-1-什么是shell"><a href="#1-1-什么是shell" class="headerlink" title="1.1 什么是shell?"></a>1.1 什么是shell?</h3><p>shell英文翻译过来是外壳的意思，作为计算机语言来理解可以认为它是操作系统的外壳。我们可以通过shell命令来操作和控制操作系统，比如Linux中的shell命令就包括ls、cd、pwd等等。</p><p>shell是站在内核的基础上编写的一个应用程序，它连接了用户和Linux内核，从而让用户能够更加便捷、高效、安全的使用linux内核，这其实就是shell的本质。</p><p>使用专业术语的说法来解释，Shell其实是一个命令解释器，它通过接受用户输入的Shell命令来启动、暂停、停止程序的运行或对计算机进行控制。</p><h3 id="1-2-什么是shell脚本"><a href="#1-2-什么是shell脚本" class="headerlink" title="1.2 什么是shell脚本"></a>1.2 什么是shell脚本</h3><p>shell脚本就是由Shell命令组成的执行文件，将一些命令整合到一个文件中，进行处理业务逻辑，脚本不用编译即可运行。它通过解释器解释运行，所以速度相对来说比较慢。</p><h3 id="1-3-shell脚本的意义"><a href="#1-3-shell脚本的意义" class="headerlink" title="1.3 shell脚本的意义"></a>1.3 shell脚本的意义</h3><p>我们在1.2中也解释道shell脚本其实就是shell命令组成的文件，shell脚本可以记录命令执行的过程和执行逻辑，以便以后重复执行，还可以批量、定时处理主机，方便管理员进行设置或者管理。</p><h2 id="二、创建一个简单的Shell脚本"><a href="#二、创建一个简单的Shell脚本" class="headerlink" title="二、创建一个简单的Shell脚本"></a>二、创建一个简单的Shell脚本</h2><h3 id="2-1-创建一个shell脚本文件"><a href="#2-1-创建一个shell脚本文件" class="headerlink" title="2.1 创建一个shell脚本文件"></a>2.1 创建一个shell脚本文件</h3><p>在创建shell脚本时，我们默认新建一个以.sh&#x2F;.script结尾的文件，主要是为了让程序员更加快捷的辨认出该文件是一个shell脚本文件。</p><p>我们创建一个test.sh的shell脚本文件，其中具体内容为下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> hello<br><br><br><span class="hljs-string">&quot; # ”开头的就是注释，单行注释</span><br><span class="hljs-string">&lt;&lt;EOF … EOF 或 :&lt;&lt;! … ! ：多行注释</span><br><span class="hljs-string"># !/bin/bash ： 主要用于指定解释器</span><br></code></pre></td></tr></table></figure><p>Linux中提供的shell解释器有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/sh<br>/bin/bash<br>/usr/bin/sh<br>/usr/bin/bash<br></code></pre></td></tr></table></figure><h3 id="2-2-运行一个Shell脚本"><a href="#2-2-运行一个Shell脚本" class="headerlink" title="2.2 运行一个Shell脚本"></a>2.2 运行一个Shell脚本</h3><p>我们根据脚本文件是否具有可执行权限，将运行一个shell脚本的方法分为两大类。</p><p>2.2 运行一个Shell脚本<br>我们根据脚本文件是否具有可执行权限，将运行一个shell脚本的方法分为两大类。</p><h4 id="2-2-1-脚本文件无执行权限"><a href="#2-2-1-脚本文件无执行权限" class="headerlink" title="2.2.1 脚本文件无执行权限"></a>2.2.1 脚本文件无执行权限</h4><p>这种情况下我们有三种方式来运行脚本：</p><p>手动在环境中开启指定解释器：sh test.sh</p><p>直接在当前环境中运行的shell中运行脚本:. test.sh</p><p>直接在当前环境中运行的shell中运行脚本:source test.sh</p><h4 id="2-2-2-脚本文件有执行权限"><a href="#2-2-2-脚本文件有执行权限" class="headerlink" title="2.2.2 脚本文件有执行权限"></a>2.2.2 脚本文件有执行权限</h4><p>在这一部分由于我们假设脚本文件有可执行器权限，所以我们使用chmod +x test.sh为我们的test.sh文件增加了可执行权限。</p><p>我们知道当一个文件具有可执行权限时我们可以使用该文件的路径名直接运行该文件，有两种方式可以运行脚本：</p><p>绝对路径名运行脚本文件<br>绝对路径就是从根目录下开始记录文件路径名，是文件在计算机上真正存在的路径。（如果不知道你的文件路径名，可以在当前位置的shell中使用pwd查询当前所在位置）</p><p>.&#x2F;相对路径名的格式运行脚本文件<br>相对路径是指以当前的文件作为起点，相较于当前目录的位置而被指向并且加以引用的文件资源。<br>比如我们知道test.sh文件的绝对路径为&#x2F;home&#x2F;westos&#x2F;Desktop&#x2F;textcpp&#x2F;test.sh，那么当我们在testcpp文件夹中时，test.sh文件的相对路径为test.sh。<br>又因为.代表当前所在位置，故而为其实.&#x2F;test.sh其实就是该文件的绝对路径，只是表示的方式不同。</p>]]></content>
    
    
    <categories>
      
      <category>shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos8 离线安装docker-ce</title>
    <link href="/2022/07/19/centos8-%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85docker-ce/"/>
    <url>/2022/07/19/centos8-%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85docker-ce/</url>
    
    <content type="html"><![CDATA[<h1 id="centos8-离线安装docker-ce"><a href="#centos8-离线安装docker-ce" class="headerlink" title="centos8 离线安装docker-ce"></a>centos8 离线安装docker-ce</h1><h2 id="更换国内源"><a href="#更换国内源" class="headerlink" title="更换国内源"></a>更换国内源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br>wget -O /etc/yum.repos.d/openEulerOS.repo https://repo.huaweicloud.com/repository/conf/openeuler_aarch64.repo<br></code></pre></td></tr></table></figure><h2 id="创建离线repo源"><a href="#创建离线repo源" class="headerlink" title="创建离线repo源"></a>创建离线repo源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y docker-ce --downloadonly --downloaderdir=repo/<br></code></pre></td></tr></table></figure><p>centos8除了需要创建repodata 还需要创建modular metadata，如果只有repodata就会报错：No available modular metadata for modular package</p><h3 id="安装modular-metadata生成工具"><a href="#安装modular-metadata生成工具" class="headerlink" title="安装modular metadata生成工具"></a>安装modular metadata生成工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>yum install createrepo <br>yum install python3-devel python3 gcc<br>yum install python3-createrepo_c libmodulemd<br><br>git <span class="hljs-built_in">clone</span> https://github.com/rpm-software-management/modulemd-tools.git<br><span class="hljs-built_in">cd</span> modulemd-tools/repo2module/<br>python3 setup.py install --user<br></code></pre></td></tr></table></figure><h3 id="创建repodata-和-modular-metadata"><a href="#创建repodata-和-modular-metadata" class="headerlink" title="创建repodata 和 modular metadata"></a>创建repodata 和 modular metadata</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-built_in">cd</span> /opt/package/repo/<br>createrepo_c ./<br>/root/.local/bin/repo2module  -s stable -d . modules.yaml<br>modifyrepo_c --mdtype=modules modules.yaml repodata/<br></code></pre></td></tr></table></figure><h3 id="启动http服务"><a href="#启动http服务" class="headerlink" title="启动http服务"></a>启动http服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 -m http.server 80<br></code></pre></td></tr></table></figure><h3 id="配置repo文件"><a href="#配置repo文件" class="headerlink" title="配置repo文件"></a>配置repo文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/yum.repos.d/docker-ce.repo <br>[docker-ce-stable]<br>name=Docker CE Stable - <span class="hljs-variable">$basearch</span><br>baseurl=http://172.16.3.132<br>enabled=1<br>gpgcheck=0<br>gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg<br><br></code></pre></td></tr></table></figure><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install docker-ce -y<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>centos8</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python100day-2</title>
    <link href="/2022/07/19/python100day-2/"/>
    <url>/2022/07/19/python100day-2/</url>
    
    <content type="html"><![CDATA[<h1 id="python100day-2"><a href="#python100day-2" class="headerlink" title="python100day-2"></a>python100day-2</h1><h2 id="语言元素"><a href="#语言元素" class="headerlink" title="语言元素"></a>语言元素</h2><h4 id="指令和程序"><a href="#指令和程序" class="headerlink" title="指令和程序"></a>指令和程序</h4><p>计算机的硬件系统通常由五大部件构成，包括：运算器、控制器、存储器、输入设备和输出设备。其中，运算器和控制器放在一起就是我们通常所说的中央处理器，它的功能是执行各种运算和控制指令以及处理计算机软件中的数据。我们通常所说的程序实际上就是指令的集合，我们程序就是将一系列的指令按照某种方式组织到一起，然后通过这些指令去控制计算机做我们想让它做的事情。今天我们大多数时候使用的计算机，虽然它们的元器件做工越来越精密，处理能力越来越强大，但究其本质来说仍然属于<a href="https://zh.wikipedia.org/wiki/%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC%E7%BB%93%E6%9E%84">“冯·诺依曼结构”</a>的计算机。“冯·诺依曼结构”有两个关键点，一是指出要将存储设备与中央处理器分开，二是提出了将数据以二进制方式编码。二进制是一种“逢二进一”的计数法，跟我们人类使用的“逢十进一”的计数法没有实质性的区别，人类因为有十根手指所以使用了十进制（因为在数数时十根手指用完之后就只能进位了，当然凡事都有例外，玛雅人可能是因为长年光着脚的原因把脚趾头也算上了，于是他们使用了二十进制的计数法，在这种计数法的指导下玛雅人的历法就与我们平常使用的历法不一样，而按照玛雅人的历法，2012年是上一个所谓的“太阳纪”的最后一年，而2013年则是新的“太阳纪”的开始，后来这件事情被以讹传讹的方式误传为”2012年是玛雅人预言的世界末日“这种荒诞的说法，今天我们可以大胆的猜测，玛雅文明之所以发展缓慢估计也与使用了二十进制有关）。对于计算机来说，二进制在物理器件上来说是最容易实现的（高电压表示1，低电压表示0），于是在“冯·诺依曼结构”的计算机都使用了二进制。虽然我们并不需要每个程序员都能够使用二进制的思维方式来工作，但是了解二进制以及它与我们生活中的十进制之间的转换关系，以及二进制与八进制和十六进制的转换关系还是有必要的。如果你对这一点不熟悉，可以自行使用<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E8%BF%9B%E5%88%B6">维基百科</a>或者<a href="https://baike.baidu.com/">百度百科</a>科普一下。</p><blockquote><p><strong>说明</strong>：近期关于<strong>量子计算机</strong>的研究已经被推倒了风口浪尖，量子计算机基于量子力学进行运算，使用量子瞬移的方式来传递信息。2018年6月，Intel宣布开发出新款量子芯片并通过了在接近绝对零度环境下的测试；2019年，IBM和Google都推出了自己的量子计算机。</p></blockquote><h3 id="变量和类型"><a href="#变量和类型" class="headerlink" title="变量和类型"></a>变量和类型</h3><p>在程序设计中，变量是一种存储数据的载体。计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。计算机能处理的数据有很多种类型，除了数值之外还可以处理文本、图形、音频、视频等各种各样的数据，那么不同的数据就需要定义不同的存储类型。Python中的数据类型很多，而且也允许我们自定义新的数据类型（这一点在后面会讲到），我们先介绍几种常用的数据类型。</p><ul><li>整型：Python中可以处理任意大小的整数（Python 2.x中有<code>int</code>和<code>long</code>两种类型的整数，但这种区分对Python来说意义不大，因此在Python 3.x中整数只有int这一种了），而且支持二进制（如<code>0b100</code>，换算成十进制是4）、八进制（如<code>0o100</code>，换算成十进制是64）、十进制（<code>100</code>）和十六进制（<code>0x100</code>，换算成十进制是256）的表示法。</li><li>浮点型：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如<code>123.456</code>）之外还支持科学计数法（如<code>1.23456e2</code>）。</li><li>字符串型：字符串是以单引号或双引号括起来的任意文本，比如<code>&#39;hello&#39;</code>和<code>&quot;hello&quot;</code>,字符串还有原始字符串表示法、字节字符串表示法、Unicode字符串表示法，而且可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）。</li><li>布尔型：布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>，在Python中，可以直接用<code>True</code>、<code>False</code>表示布尔值（请注意大小写），也可以通过布尔运算计算出来（例如<code>3 &lt; 5</code>会产生布尔值<code>True</code>，而<code>2 == 1</code>会产生布尔值<code>False</code>）。</li><li>复数型：形如<code>3+5j</code>，跟数学上的复数表示一样，唯一不同的是虚部的<code>i</code>换成了<code>j</code>。实际上，这个类型并不常用，大家了解一下就可以了。</li></ul><h4 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h4><p>对于每个变量我们需要给它取一个名字，就如同我们每个人都有属于自己的响亮的名字一样。在Python中，变量命名需要遵循以下这些必须遵守硬性规则和强烈建议遵守的非硬性规则。</p><ul><li>硬性规则：<ul><li>变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头。</li><li>大小写敏感（大写的<code>a</code>和小写的<code>A</code>是两个不同的变量）。</li><li>不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。</li></ul></li><li>PEP 8要求：<ul><li>用小写字母拼写，多个单词用下划线连接。</li><li>受保护的实例属性用单个下划线开头（后面会讲到）。</li><li>私有的实例属性用两个下划线开头（后面会讲到）。</li></ul></li></ul><p>当然，作为一个专业的程序员，给变量（事实上应该是所有的标识符）命名时做到见名知意也是非常重要的。</p><h4 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h4><p>下面通过几个例子来说明变量的类型和变量使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">使用变量保存数据并进行加减乘除运算</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper Liu</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>a = <span class="hljs-number">321</span><br>b = <span class="hljs-number">12</span><br><span class="hljs-built_in">print</span>(a + b)    <span class="hljs-comment"># 333</span><br><span class="hljs-built_in">print</span>(a - b)    <span class="hljs-comment"># 309</span><br><span class="hljs-built_in">print</span>(a * b)    <span class="hljs-comment"># 3852</span><br><span class="hljs-built_in">print</span>(a / b)    <span class="hljs-comment"># 26.75</span><br></code></pre></td></tr></table></figure><p>在Python中可以使用<code>type</code>函数对变量的类型进行检查。程序设计中函数的概念跟数学上函数的概念是一致的，数学上的函数相信大家并不陌生，它包括了函数名、自变量和因变量。如果暂时不理解这个概念也不要紧，我们会在后续的章节中专门讲解函数的定义和使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">使用type()检查变量的类型</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper Liu</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>a = <span class="hljs-number">100</span><br>b = <span class="hljs-number">12.345</span><br>c = <span class="hljs-number">1</span> + <span class="hljs-number">5j</span><br>d = <span class="hljs-string">&#x27;hello, world&#x27;</span><br>e = <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))    <span class="hljs-comment"># &lt;class &#x27;int&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(b))    <span class="hljs-comment"># &lt;class &#x27;float&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(c))    <span class="hljs-comment"># &lt;class &#x27;complex&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(d))    <span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(e))    <span class="hljs-comment"># &lt;class &#x27;bool&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p>可以使用Python中内置的函数对变量类型进行转换。</p><ul><li><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</li><li><code>float()</code>：将一个字符串转换成浮点数。</li><li><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码。</li><li><code>chr()</code>：将整数转换成该编码对应的字符串（一个字符）。</li><li><code>ord()</code>：将字符串（一个字符）转换成对应的编码（整数）。</li></ul><p>下面的代码通过键盘输入两个整数来实现对两个整数的算术运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">使用input()函数获取键盘输入(字符串)</span><br><span class="hljs-string">使用int()函数将输入的字符串转换成整数</span><br><span class="hljs-string">使用print()函数输出带占位符的字符串</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper Liu</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>a = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;a = &#x27;</span>))<br>b = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;b = &#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d + %d = %d&#x27;</span> % (a, b, a + b))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d - %d = %d&#x27;</span> % (a, b, a - b))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d * %d = %d&#x27;</span> % (a, b, a * b))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d / %d = %f&#x27;</span> % (a, b, a / b))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d // %d = %d&#x27;</span> % (a, b, a // b))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d %% %d = %d&#x27;</span> % (a, b, a % b))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d ** %d = %d&#x27;</span> % (a, b, a ** b))<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面的print函数中输出的字符串使用了占位符语法，其中<code>%d</code>是整数的占位符，<code>%f</code>是小数的占位符，<code>%%</code>表示百分号（因为百分号代表了占位符，所以带占位符的字符串中要表示百分号必须写成<code>%%</code>），字符串之后的<code>%</code>后面跟的变量值会替换掉占位符然后输出到终端中，运行上面的程序，看看程序执行结果就明白啦。</p></blockquote><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>Python支持多种运算符，下表大致按照优先级从高到低的顺序列出了所有的运算符，运算符的优先级指的是多个运算符同时出现时，先做什么运算然后再做什么运算。除了我们之前已经用过的赋值运算符和算术运算符，我们稍后会陆续讲到其他运算符的使用。</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>[]</code> <code>[:]</code></td><td>下标，切片</td></tr><tr><td><code>**</code></td><td>指数</td></tr><tr><td><code>~</code> <code>+</code> <code>-</code></td><td>按位取反, 正负号</td></tr><tr><td><code>*</code> <code>/</code> <code>%</code> <code>//</code></td><td>乘，除，模，整除</td></tr><tr><td><code>+</code> <code>-</code></td><td>加，减</td></tr><tr><td><code>&gt;&gt;</code> <code>&lt;&lt;</code></td><td>右移，左移</td></tr><tr><td><code>&amp;</code></td><td>按位与</td></tr><tr><td><code>^</code> <code>|</code></td><td>按位异或，按位或</td></tr><tr><td><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td><td>小于等于，小于，大于，大于等于</td></tr><tr><td><code>==</code> <code>!=</code></td><td>等于，不等于</td></tr><tr><td><code>is</code>  <code>is not</code></td><td>身份运算符</td></tr><tr><td><code>in</code> <code>not in</code></td><td>成员运算符</td></tr><tr><td><code>not</code> <code>or</code> <code>and</code></td><td>逻辑运算符</td></tr><tr><td><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>//=</code> <code>**=</code> <code>&amp;=</code> &#96;</td><td>&#x3D;<code> </code>^&#x3D;<code> </code>&gt;&gt;&#x3D;<code> </code>&lt;&lt;&#x3D;&#96;</td></tr></tbody></table><blockquote><p><strong>说明：</strong> 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。</p></blockquote><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p>赋值运算符应该是最为常见的运算符，它的作用是将右边的值赋给左边的变量。下面的例子演示了赋值运算符和复合赋值运算符的使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">赋值运算符和复合赋值运算符</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper Liu</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">3</span><br>a += b        <span class="hljs-comment"># 相当于：a = a + b</span><br>a *= a + <span class="hljs-number">2</span>    <span class="hljs-comment"># 相当于：a = a * (a + 2)</span><br><span class="hljs-built_in">print</span>(a)      <span class="hljs-comment"># 算一下这里会输出什么</span><br></code></pre></td></tr></table></figure><h3 id="比较运算符和逻辑运算符"><a href="#比较运算符和逻辑运算符" class="headerlink" title="比较运算符和逻辑运算符"></a>比较运算符和逻辑运算符</h3><p>比较运算符有的地方也称为关系运算符，包括<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>，我相信没有什么好解释的，大家一看就能懂，唯一需要提醒的是比较相等用的是<code>==</code>，请注意这个地方是两个等号，因为<code>=</code>是赋值运算符，我们在上面刚刚讲到过，<code>==</code>才是比较相等的比较运算符。比较运算符会产生布尔值，要么是<code>True</code>要么是<code>False</code>。</p><p>逻辑运算符有三个，分别是<code>and</code>、<code>or</code>和<code>not</code>。<code>and</code>字面意思是“而且”，所以<code>and</code>运算符会连接两个布尔值，如果两个布尔值都是<code>True</code>，那么运算的结果就是<code>True</code>；左右两边的布尔值有一个是<code>False</code>，最终的运算结果就是<code>False</code>。相信大家已经想到了，如果<code>and</code>左边的布尔值是<code>False</code>，不管右边的布尔值是什么，最终的结果都是<code>False</code>，所以在做运算的时候右边的值会被跳过（短路处理），这也就意味着在<code>and</code>运算符左边为<code>False</code>的情况下，右边的表达式根本不会执行。<code>or</code>字面意思是“或者”，所以<code>or</code>运算符也会连接两个布尔值，如果两个布尔值有任意一个是<code>True</code>，那么最终的结果就是<code>True</code>。当然，<code>or</code>运算符也是有短路功能的，在它左边的布尔值为<code>True</code>的情况下，右边的表达式根本不会执行。<code>not</code>运算符的后面会跟上一个布尔值，它的作用是得到与该布尔值相反的值，也就是说，后面的布尔值如果是<code>True</code>运算结果就是<code>False</code>，而后面的布尔值如果是<code>False</code>则运算结果就是<code>True</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">比较运算符和逻辑运算符的使用</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper Liu</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>flag0 = <span class="hljs-number">1</span> == <span class="hljs-number">1</span><br>flag1 = <span class="hljs-number">3</span> &gt; <span class="hljs-number">2</span><br>flag2 = <span class="hljs-number">2</span> &lt; <span class="hljs-number">1</span><br>flag3 = flag1 <span class="hljs-keyword">and</span> flag2<br>flag4 = flag1 <span class="hljs-keyword">or</span> flag2<br>flag5 = <span class="hljs-keyword">not</span> (<span class="hljs-number">1</span> != <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag0 =&#x27;</span>, flag0)    <span class="hljs-comment"># flag0 = True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag1 =&#x27;</span>, flag1)    <span class="hljs-comment"># flag1 = True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag2 =&#x27;</span>, flag2)    <span class="hljs-comment"># flag2 = False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag3 =&#x27;</span>, flag3)    <span class="hljs-comment"># flag3 = False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag4 =&#x27;</span>, flag4)    <span class="hljs-comment"># flag4 = True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag5 =&#x27;</span>, flag5)    <span class="hljs-comment"># flag5 = False</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：比较运算符的优先级高于赋值运算符，所以<code>flag0 = 1 == 1</code>先做<code>1 == 1</code>产生布尔值<code>True</code>，再将这个值赋值给变量<code>flag0</code>。<code>print</code>函数可以输出多个值，多个值之间可以用<code>,</code>进行分隔，输出的内容之间默认以空格分开。</p></blockquote><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="练习1：华氏温度转换为摄氏温度"><a href="#练习1：华氏温度转换为摄氏温度" class="headerlink" title="练习1：华氏温度转换为摄氏温度"></a>练习1：华氏温度转换为摄氏温度</h4><blockquote><p>提示：华氏温度到摄氏温度的转换公式为：$C&#x3D;(F - 32) \div 1.8$。</p></blockquote><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">将华氏温度转换为摄氏温度</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper Liu</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>f = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入华氏温度: &#x27;</span>))<br>c = (f - <span class="hljs-number">32</span>) / <span class="hljs-number">1.8</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%.1f华氏度 = %.1f摄氏度&#x27;</span> % (f, c))<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：在使用<code>print</code>函数输出时，也可以对字符串内容进行格式化处理，上面<code>print</code>函数中的字符串<code>%.1f</code>是一个占位符，稍后会由一个<code>float</code>类型的变量值替换掉它。同理，如果字符串中有<code>%d</code>，后面可以用一个<code>int</code>类型的变量值替换掉它，而<code>%s</code>会被字符串的值替换掉。除了这种格式化字符串的方式外，还可以用下面的方式来格式化字符串，其中<code>&#123;f:.1f&#125;</code>和<code>&#123;c:.1f&#125;</code>可以先看成是<code>&#123;f&#125;</code>和<code>&#123;c&#125;</code>，表示输出时会用变量<code>f</code>和变量<code>c</code>的值替换掉这两个占位符，后面的<code>:.1f</code>表示这是一个浮点数，小数点后保留1位有效数字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;f:<span class="hljs-number">.1</span>f&#125;</span>华氏度 = <span class="hljs-subst">&#123;c:<span class="hljs-number">.1</span>f&#125;</span>摄氏度&#x27;</span>)<br></code></pre></td></tr></table></figure></blockquote><h4 id="练习2：输入圆的半径计算计算周长和面积"><a href="#练习2：输入圆的半径计算计算周长和面积" class="headerlink" title="练习2：输入圆的半径计算计算周长和面积"></a>练习2：输入圆的半径计算计算周长和面积</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输入半径计算圆的周长和面积</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper Liu</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>radius = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入圆的半径: &#x27;</span>))<br>perimeter = <span class="hljs-number">2</span> * <span class="hljs-number">3.1416</span> * radius<br>area = <span class="hljs-number">3.1416</span> * radius * radius<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;周长: %.2f&#x27;</span> % perimeter)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;面积: %.2f&#x27;</span> % area)<br></code></pre></td></tr></table></figure><h4 id="练习3：输入年份判断是不是闰年"><a href="#练习3：输入年份判断是不是闰年" class="headerlink" title="练习3：输入年份判断是不是闰年"></a>练习3：输入年份判断是不是闰年</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输入年份 如果是闰年输出True 否则输出False</span><br><span class="hljs-string"></span><br><span class="hljs-string">Version: 0.1</span><br><span class="hljs-string">Author: Cper Liu</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>year = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入年份: &#x27;</span>))<br><span class="hljs-comment"># 如果代码太长写成一行不便于阅读 可以使用\对代码进行折行</span><br>is_leap = year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> \<br>          year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(is_leap)<br></code></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：比较运算符会产生布尔值，而逻辑运算符<code>and</code>和<code>or</code>会对这些布尔值进行组合，最终也是得到一个布尔值，闰年输出<code>True</code>，平年输出<code>False</code>。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>python100day</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python100day-1</title>
    <link href="/2022/07/18/python100day-1/"/>
    <url>/2022/07/18/python100day-1/</url>
    
    <content type="html"><![CDATA[<h1 id="python1day"><a href="#python1day" class="headerlink" title="python1day"></a>python1day</h1><h2 id="初识Python"><a href="#初识Python" class="headerlink" title="初识Python"></a>初识Python</h2><p>Python简介<br>Python的历史<br>1989年圣诞节：Guido von Rossum开始写Python语言的编译器。<br>1991年2月：第一个Python编译器（同时也是解释器）诞生，它是用C语言实现的（后面），可以调用C语言的库函数。在最早的版本中，Python已经提供了对“类”，“函数”，“异常处理”等构造块的支持，还有对列表、字典等核心数据类型，同时支持以模块为基础来构造应用程序。<br>1994年1月：Python 1.0正式发布。<br>2000年10月16日：Python 2.0发布，增加了完整的<a href="https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)">垃圾回收</a>，提供了对<a href="https://zh.wikipedia.org/wiki/Unicode">Unicode</a>的支持。与此同时，Python的整个开发过程更加透明，社区对开发进度的影响逐渐扩大，生态圈开始慢慢形成。<br>2008年12月3日：Python 3.0发布，它并不完全兼容之前的Python代码，不过因为目前还有不少公司在项目和运维中使用Python 2.x版本，所以Python 3.x的很多新特性后来也被移植到Python 2.6&#x2F;2.7版本中。<br>目前我使用的Python 3.7.x的版本是在2018年发布的，Python的版本号分为三段，形如A.B.C。其中A表示大版本号，一般当整体重写，或出现不向后兼容的改变时，增加A；B表示功能更新，出现新功能时增加B；C表示小的改动（例如：修复了某个Bug），只要有修改就增加C。如果对Python的历史感兴趣，可以阅读名为<a href="http://www.cnblogs.com/vamei/archive/2013/02/06/2892628.html">《Python简史》</a>的网络文章。</p><h2 id="Python的优缺点"><a href="#Python的优缺点" class="headerlink" title="Python的优缺点"></a>Python的优缺点</h2><p>Python的优点很多，简单的可以总结为以下几点。</p><p>简单明了，学习曲线低，比很多编程语言都容易上手。<br>开放源代码，拥有强大的社区和生态圈，尤其是在数据分析和机器学习领域。<br>解释型语言，天生具有平台可移植性，代码可以工作于不同的操作系统。<br>对两种主流的编程范式（面向对象编程和函数式编程）都提供了支持。<br>代码规范程度高，可读性强，适合有代码洁癖和强迫症的人群。<br>Python的缺点主要集中在以下几点。</p><p>执行效率稍低，对执行效率要求高的部分可以由其他语言（如：C、C++）编写。<br>代码无法加密，但是现在很多公司都不销售卖软件而是销售服务，这个问题会被弱化。<br>在开发时可以选择的框架太多（如Web框架就有100多个），有选择的地方就有错误。<br>Python的应用领域<br>目前Python在Web应用后端开发、云基础设施建设、DevOps、网络数据采集（爬虫）、自动化测试、数据分析、机器学习等领域都有着广泛的应用。</p><h2 id="安装Python解释器"><a href="#安装Python解释器" class="headerlink" title="安装Python解释器"></a>安装Python解释器</h2><p>想要开始Python编程之旅，首先得在自己使用的计算机上安装Python解释器环境，下面将以安装官方的Python解释器为例，讲解如何在不同的操作系统上安装Python环境。官方的Python解释器是用C语言实现的，也是使用最为广泛的Python解释器，通常称之为CPython。除此之外，Python解释器还有Java语言实现的Jython、C#语言实现的IronPython以及PyPy、Brython、Pyston等版本，有兴趣的读者可以自行了解。</p><h3 id="Windows环境"><a href="#Windows环境" class="headerlink" title="Windows环境"></a>Windows环境</h3><p>可以在Python官方网站下载到Python的Windows安装程序（exe文件），需要注意的是如果在Windows 7环境下安装Python 3.x，需要先安装Service Pack 1补丁包（可以通过一些工具软件自动安装系统补丁的功能来安装），安装过程建议勾选“Add Python 3.x to PATH”（将Python 3.x添加到PATH环境变量）并选择自定义安装，在设置“Optional Features”界面最好将“pip”、“tcl&#x2F;tk”、“Python test suite”等项全部勾选上。强烈建议选择自定义的安装路径并保证路径中没有中文。安装完成会看到“Setup was successful”的提示。如果稍后运行Python程序时，出现因为缺失一些动态链接库文件而导致Python解释器无法工作的问题，可以按照下面的方法加以解决。</p><p>如果系统显示api-ms-win-crt*.dll文件缺失，可以参照《api-ms-win-crt*.dll缺失原因分析和解决方法》一文讲解的方法进行处理或者直接在<a href="https://www.microsoft.com/zh-cn/download/details.aspx?id=48145">微软官网</a>下载Visual C++ Redistributable for Visual Studio 2015文件进行修复；如果是因为更新Windows的DirectX之后导致某些动态链接库文件缺失问题，可以下载一个DirectX修复工具进行修复。</p><h3 id="Linux环境"><a href="#Linux环境" class="headerlink" title="Linux环境"></a>Linux环境</h3><p>Linux环境自带了Python 2.x版本，但是如果要更新到3.x的版本，可以在Python的官方网站下载Python的源代码并通过源代码构建安装的方式进行安装，具体的步骤如下所示（以CentOS为例）。</p><p>安装依赖库（因为没有这些依赖库可能在源代码构件安装时因为缺失底层依赖库而失败）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install wget gcc zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel<br></code></pre></td></tr></table></figure><p>下载Python源代码并解压缩到指定目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://www.python.org/ftp/python/3.7.6/Python-3.7.6.tar.xz<br>xz -d Python-3.7.6.tar.xz<br>tar -xvf Python-3.7.6.tar<br></code></pre></td></tr></table></figure><p>切换至Python源代码目录并执行下面的命令进行配置和安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> Python-3.7.6<br>./configure --prefix=/usr/local/python37 --enable-optimizations<br>make &amp;&amp; make install<br>修改用户主目录下名为.bash_profile的文件，配置PATH环境变量并使其生效。<br><span class="hljs-built_in">cd</span> ~<br>vim .bash_profile<br><span class="hljs-comment"># ... 此处省略上面的代码 ...</span><br><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/usr/local/python37/bin<br><br><span class="hljs-comment"># ... 此处省略下面的代码 ...</span><br></code></pre></td></tr></table></figure><p>激活环境变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> .bash_profile<br></code></pre></td></tr></table></figure><h3 id="macOS环境"><a href="#macOS环境" class="headerlink" title="macOS环境"></a>macOS环境</h3><p>macOS也自带了Python 2.x版本，可以通过Python的官方网站提供的安装文件（pkg文件）安装Python 3.x的版本。默认安装完成后，可以通过在终端执行python命令来启动2.x版本的Python解释器，启动3.x版本的Python解释器需要执行python3命令。</p><h2 id="运行Python程序"><a href="#运行Python程序" class="headerlink" title="运行Python程序"></a>运行Python程序</h2><p>确认Python的版本<br>可以Windows的命令行提示符中键入下面的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python --version<br></code></pre></td></tr></table></figure><p>在Linux或macOS系统的终端中键入下面的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 --version<br></code></pre></td></tr></table></figure><p>当然也可以先输入python或python3进入交互式环境，再执行以下的代码检查Python的版本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-built_in">print</span>(sys.version_info)<br><span class="hljs-built_in">print</span>(sys.version)<br></code></pre></td></tr></table></figure><h2 id="编写Python源代码"><a href="#编写Python源代码" class="headerlink" title="编写Python源代码"></a>编写Python源代码</h2><p>可以用文本编辑工具（推荐使用Sublime、Visual Studio Code等高级文本编辑工具）编写Python源代码并用py作为后缀名保存该文件，代码内容如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello, world!&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h3><p>切换到源代码所在的目录并执行下面的命令，看看屏幕上是否输出了”hello, world!”。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python hello.py<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 hello.py<br></code></pre></td></tr></table></figure><h3 id="代码中的注释"><a href="#代码中的注释" class="headerlink" title="代码中的注释"></a>代码中的注释</h3><p>注释是编程语言的一个重要组成部分，用于在源代码中解释代码的作用从而增强程序的可读性和可维护性，当然也可以将源代码中不需要参与运行的代码段通过注释来去掉，这一点在调试程序的时候经常用到。注释在随源代码进入预处理器或编译时会被移除，不会在目标代码中保留也不会影响程序的执行结果。</p><p>单行注释 - 以#和空格开头的部分<br>多行注释 - 三个引号开头，三个引号结尾<br>“””<br>第一个Python程序 - hello, world!<br>向伟大的Dennis M. Ritchie先生致敬</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">Version: <span class="hljs-number">0.1</span><br>Author: Cper Liu<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">print(&#x27;hello, world!&#x27;)</span><br><span class="hljs-string"># print(&quot;你好, 世界！&quot;)</span><br></code></pre></td></tr></table></figure><h2 id="Python开发工具"><a href="#Python开发工具" class="headerlink" title="Python开发工具"></a>Python开发工具</h2><h3 id="IDLE-自带的集成开发工具"><a href="#IDLE-自带的集成开发工具" class="headerlink" title="IDLE - 自带的集成开发工具"></a>IDLE - 自带的集成开发工具</h3><p>IDLE是安装Python环境时自带的集成开发工具，如下图所示。但是由于IDLE的用户体验并不是那么好所以很少在实际开发中被采用。</p><h3 id="IPython-更好的交互式编程工具"><a href="#IPython-更好的交互式编程工具" class="headerlink" title="IPython - 更好的交互式编程工具"></a>IPython - 更好的交互式编程工具</h3><p>IPython是一种基于Python的交互式解释器。相较于原生的Python交互式环境，IPython提供了更为强大的编辑和交互功能。可以通过Python的包管理工具pip安装IPython，具体的操作如下所示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install ipython<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install ipython<br></code></pre></td></tr></table></figure><p>安装成功后，可以通过下面的ipython命令启动IPython，如下图所示。</p><p>Sublime Text - 高级文本编辑器</p><p>首先可以通过<a href="https://www.sublimetext.com/">官方网站</a>下载安装程序安装Sublime Text 3或Sublime Text 2。</p><h3 id="安装包管理工具"><a href="#安装包管理工具" class="headerlink" title="安装包管理工具"></a>安装包管理工具</h3><p>通过快捷键Ctrl+&#96;或者在View菜单中选择Show Console打开控制台，输入下面的代码。<br>Sublime 3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  urllib.request,os;pf=<span class="hljs-string">&#x27;Package Control.sublime-package&#x27;</span>;ipp=sublime.installed_packages_path();urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler()));<span class="hljs-built_in">open</span>(os.path.join(ipp,pf),<span class="hljs-string">&#x27;wb&#x27;</span>).write(urllib.request.urlopen(<span class="hljs-string">&#x27;http://sublime.wbond.net/&#x27;</span>+pf.replace(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;%20&#x27;</span>)).read())<br></code></pre></td></tr></table></figure><p>Sublime 2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  urllib2,os;pf=<span class="hljs-string">&#x27;Package Control.sublime-package&#x27;</span>;ipp=sublime.installed_packages_path();os.makedirs(ipp)ifnotos.path.exists(ipp)elseNone;urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler()));<span class="hljs-built_in">open</span>(os.path.join(ipp,pf),<span class="hljs-string">&#x27;wb&#x27;</span>).write(urllib2.urlopen(<span class="hljs-string">&#x27;http://sublime.wbond.net/&#x27;</span>+pf.replace(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;%20&#x27;</span>)).read());<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Please restart Sublime Text to finish installation&#x27;</span>)<br></code></pre></td></tr></table></figure><p>在浏览器中输入 <a href="https://sublime.wbond.net/Package%20Control.sublime-package">https://sublime.wbond.net/Package%20Control.sublime-package</a> 下载包管理工具的安装包，并找到安装Sublime目录下名为”Installed Packages”的目录，把刚才下载的文件放到这个文件加下，然后重启Sublime Text就搞定了。<br>安装插件。通过Preference菜单的Package Control或快捷键Ctrl+Shift+P打开命令面板，在面板中输入Install Package就可以找到安装插件的工具，然后再查找需要的插件。我们推荐大家安装以下几个插件：</p><p>SublimeCodeIntel - 代码自动补全工具插件。<br>Emmet - 前端开发代码模板插件。<br>Git - 版本控制工具插件。<br>Python PEP8 Autoformat - PEP8规范自动格式化插件。<br>ConvertToUTF8 - 将本地编码转换为UTF-8。<br>说明：事实上Visual Studio Code可能是更好的选择，它不用花钱并提供了更为完整和强大的功能，有兴趣的读者可以自行研究。</p><p>PyCharm - Python开发神器<br>PyCharm的安装、配置和使用在《玩转PyCharm》进行了介绍，有兴趣的读者可以选择阅读。</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>在Python交互式环境中输入下面的代码并查看结果，请尝试将看到的内容翻译成中文。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> this<br></code></pre></td></tr></table></figure><p>说明：输入上面的代码，在Python的交互式环境中可以看到Tim Peter撰写的“Python之禅”，里面讲述的道理不仅仅适用于Python，也适用于其他编程语言。</p><p>学习使用turtle在屏幕上绘制图形。</p><p>说明：turtle是Python内置的一个非常有趣的模块，特别适合对计算机程序设计进行初体验的小伙伴，它最早是Logo语言的一部分，Logo语言是Wally Feurzig和Seymour Papert在1966发明的编程语言。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> turtle<br><br>turtle.pensize(<span class="hljs-number">4</span>)<br>turtle.pencolor(<span class="hljs-string">&#x27;red&#x27;</span>)<br><br>turtle.forward(<span class="hljs-number">100</span>)<br>turtle.right(<span class="hljs-number">90</span>)<br>turtle.forward(<span class="hljs-number">100</span>)<br>turtle.right(<span class="hljs-number">90</span>)<br>turtle.forward(<span class="hljs-number">100</span>)<br>turtle.right(<span class="hljs-number">90</span>)<br>turtle.forward(<span class="hljs-number">100</span>)<br><br>turtle.mainloop()<br></code></pre></td></tr></table></figure><p>提示：本章提供的代码中还有画国旗和画小猪佩奇的代码，有兴趣的读者请自行研究。</p>]]></content>
    
    
    <categories>
      
      <category>python100day</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>欧拉操作系统安装docker-ce</title>
    <link href="/2022/07/18/%E6%AC%A7%E6%8B%89%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85docker-ce/"/>
    <url>/2022/07/18/%E6%AC%A7%E6%8B%89%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85docker-ce/</url>
    
    <content type="html"><![CDATA[<h1 id="欧拉操作系统安装docker-ce"><a href="#欧拉操作系统安装docker-ce" class="headerlink" title="欧拉操作系统安装docker-ce"></a>欧拉操作系统安装docker-ce</h1><h2 id="增加docker-ce-repo"><a href="#增加docker-ce-repo" class="headerlink" title="增加docker-ce repo"></a>增加docker-ce repo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">dnf config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br><br></code></pre></td></tr></table></figure><h2 id="增加centos8-repo"><a href="#增加centos8-repo" class="headerlink" title="增加centos8 repo"></a>增加centos8 repo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -O /etc/yum.repos.d/CentOS-Base.repo https://repo.huaweicloud.com/repository/conf/CentOS-8-reg.repo<br></code></pre></td></tr></table></figure><h2 id="刷新缓存"><a href="#刷新缓存" class="headerlink" title="刷新缓存"></a>刷新缓存</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">yum macache <span class="hljs-attribute">--release</span>=8<br></code></pre></td></tr></table></figure><h2 id="安装docker-ce"><a href="#安装docker-ce" class="headerlink" title="安装docker-ce"></a>安装docker-ce</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install docker-ce --release=8<br><br></code></pre></td></tr></table></figure><p><img src="/images/pasted-65.png" alt="upload successful"></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>openEuler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title> openEuler 22.03-LTS网络管理</title>
    <link href="/2022/07/18/%20openEuler22.03-LTS%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/"/>
    <url>/2022/07/18/%20openEuler22.03-LTS%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="openEuler-22-03-LTS-网络管理"><a href="#openEuler-22-03-LTS-网络管理" class="headerlink" title="openEuler 22.03-LTS 网络管理"></a>openEuler 22.03-LTS 网络管理</h1><h2 id="配置-IP"><a href="#配置-IP" class="headerlink" title="配置 IP"></a>配置 IP</h2><p>使用nmcli命令<br> 说明：<br>使用nmcli命令配置的网络配置可以立即生效且系统重启后配置也不会丢失。</p><p>nmcli介绍<br>nmcli是NetworkManager的一个命令行工具，它提供了使用命令行配置由NetworkManager管理网络连接的方法。nmcli命令的基本格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmcli [OPTIONS] OBJECT &#123; COMMAND | <span class="hljs-built_in">help</span> &#125;<br></code></pre></td></tr></table></figure><p>其中，OBJECT选项可以是general、networking、radio、connection或device等。在日常使用中，最常使用的是-t, –terse（用于脚本）、-p, –pretty选项（用于用户）及-h, –help选项，用户可以使用“ nmcli help”获取更多参数及使用信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmcli <span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><p>常用命令使用举例如下：</p><p>显示NetworkManager状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmcli general status<br></code></pre></td></tr></table></figure><p>显示所有连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmcli connection show<br></code></pre></td></tr></table></figure><p>只显示当前活动连接，如下所示添加 -a, –active：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmcli connection show --active<br></code></pre></td></tr></table></figure><p>显示由NetworkManager识别到设备及其状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmcli device status<br></code></pre></td></tr></table></figure><p>使用nmcli工具启动和停止网络接口，在root权限下执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># nmcli connection up id enp3s0</span><br><span class="hljs-comment"># nmcli device disconnect enp3s0</span><br></code></pre></td></tr></table></figure><h2 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h2><p>连接到设备<br>使用如下命令，NetworkManager将连接到对应网络设备，尝试找到合适的连接配置，并激活配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$nmcli</span> device connect <span class="hljs-string">&quot;<span class="hljs-variable">$IFNAME</span>&quot;</span>  <br></code></pre></td></tr></table></figure><p>如果不存在相应的配置连接，NetworkManager将创建并激活具有默认设置的新配置文件。</p><p>断开设备连接<br>使用如下命令，NetworkManager将断开设备连接，并防止设备自动激活。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$nmcli</span> device disconnect <span class="hljs-string">&quot;<span class="hljs-variable">$IFNAME</span>&quot;</span>  <br></code></pre></td></tr></table></figure><h2 id="设置网络连接"><a href="#设置网络连接" class="headerlink" title="设置网络连接"></a>设置网络连接</h2><h3 id="列出目前可用的网络连接"><a href="#列出目前可用的网络连接" class="headerlink" title="列出目前可用的网络连接"></a>列出目前可用的网络连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nmcli con show<br><br><br>NAME    UUID                                  TYPE      DEVICE<br>enp4s0  5afce939-400e-42fd-91ee-55ff5b65deab  ethernet  enp4s0<br>enp3s0  c88d7b69-f529-35ca-81ab-aa729ac542fd  ethernet  enp3s0<br>virbr0  ba552da6-f014-49e3-91fa-ec9c388864fa  bridge    virbr0<br></code></pre></td></tr></table></figure><p> 说明：<br>输出结果中的NAME字段代表连接ID（名称）。</p><p>添加一个网络连接会生成相应的配置文件，并与相应的设备关联。检查可用的设备，方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nmcli dev status<br><br>DEVICE      TYPE      STATE      CONNECTION<br>enp3s0      ethernet  connected  enp3s0<br>enp4s0      ethernet  connected  enp4s0<br>virbr0      bridge    connected  virbr0<br>lo          loopback  unmanaged  --<br>virbr0-nic  tun       unmanaged  --<br></code></pre></td></tr></table></figure><h3 id="配置动态IP连接"><a href="#配置动态IP连接" class="headerlink" title="配置动态IP连接"></a>配置动态IP连接</h3><p>配置IP<br>要使用 DHCP 分配网络时，可以使用动态IP配置添加网络配置文件，命令格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmcli connection add <span class="hljs-built_in">type</span> ethernet con-name connection-name ifname interface-name<br></code></pre></td></tr></table></figure><p>例如创建名为net-test的动态连接配置文件，在root权限下使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># nmcli connection add type ethernet con-name net-test ifname enp3s0</span><br>Connection <span class="hljs-string">&#x27;net-test&#x27;</span> (a771baa0-5064-4296-ac40-5dc8973967ab) successfully added.<br></code></pre></td></tr></table></figure><p>NetworkManager 会将参数 connection.autoconnect 设定为 yes，并将设置保存到 “&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-net-test”文件中，在该文件中会将 ONBOOT 设置为 yes。</p><p>激活连接并检查状态<br>在root权限下使用以下命令激活网络连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># nmcli con up net-test </span><br><br>Connection successfully activated (D-Bus active path:/org/freedesktop/NetworkManager/ActiveConnection/5)<br></code></pre></td></tr></table></figure><p>检查这些设备及连接的状态，使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nmcli device status<br><br>DEVICE      TYPE      STATE      CONNECTION<br>enp4s0      ethernet  connected  enp4s0<br>enp3s0      ethernet  connected  net-test<br>virbr0      bridge    connected  virbr0<br>lo          loopback  unmanaged  --<br>virbr0-nic  tun       unmanaged  --<br></code></pre></td></tr></table></figure><h3 id="配置静态IP连接"><a href="#配置静态IP连接" class="headerlink" title="配置静态IP连接"></a>配置静态IP连接</h3><p>配置IP<br>添加静态 IPv4 配置的网络连接，可使用以下命令：</p><p>nmcli connection add type ethernet con-name connection-name ifname interface-name ip4 address gw4 address<br> 说明：<br>如果要添加 IPv6 地址和网关信息，使用 ip6 和 gw6 选项。</p><p>例如创建名为 net-static的静态连接配置文件，在root权限下使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># nmcli con add type ethernet con-name net-static ifname enp3s0 ip4 192.168.0.10/24 gw4 192.168.0.254</span><br></code></pre></td></tr></table></figure><p>还可为该设备同时指定 IPv6 地址和网关，示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># nmcli con add type ethernet con-name test-lab ifname enp3s0 ip4 192.168.0.10/24 gw4 192.168.0.254 ip6 abbe::**** gw6 2001:***::*</span><br>Connection <span class="hljs-string">&#x27;net-static&#x27;</span> (63aa2036-8665-f54d-9a92-c3035bad03f7) successfully added.<br></code></pre></td></tr></table></figure><p>NetworkManager 会将其内部参数 ipv4.method 设定为 manual，将 connection.autoconnect 设定为yes，并将设置写入 &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-my-office 文件，其中会将对应 BOOTPROTO 设定为 none，将 ONBOOT 设定为 yes。</p><p>设定两个 IPv4 DNS 服务器地址，在root权限下使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># nmcli con mod net-static ipv4.dns &quot;*.*.*.* *.*.*.*&quot;</span><br></code></pre></td></tr></table></figure><p>设置两个 IPv6 DNS 服务器地址，在root权限下使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># nmcli con mod net-static ipv6.dns &quot;2001:4860:4860::**** 2001:4860:4860::****&quot;</span><br></code></pre></td></tr></table></figure><h3 id="激活连接并检查状态"><a href="#激活连接并检查状态" class="headerlink" title="激活连接并检查状态"></a>激活连接并检查状态</h3><p>激活新的网络连接，在root权限下使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># nmcli con up net-static ifname enp3s0</span><br>Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/6)<br></code></pre></td></tr></table></figure><p>检查这些设备及连接的状态，使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nmcli device status<br><br>DEVICE      TYPE      STATE      CONNECTION<br>enp4s0      ethernet  connected  enp4s0<br>enp3s0      ethernet  connected  net-static<br>virbr0      bridge    connected  virbr0<br>lo          loopback  unmanaged  --<br>virbr0-nic  tun       unmanaged  --<br></code></pre></td></tr></table></figure><p>查看配置的连接详情，使用以下命令（使用 -p, –pretty 选项在输出结果中添加标题和分段）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nmcli -p con show net-static <br>===============================================================================<br>Connection profile details (net-static )<br>===============================================================================<br>connection.id:                          net-static<br>connection.uuid:                        b9f18801-6084-4aee-af28-c8f0598ff5e1<br>connection.stable-id:                   --<br>connection.type:                        802-3-ethernet<br>connection.interface-name:              enp3s0<br>connection.autoconnect:                 <span class="hljs-built_in">yes</span><br>connection.autoconnect-priority:        0<br>connection.autoconnect-retries:         -1 (default)<br>connection.multi-connect:               0 (default)<br>connection.auth-retries:                -1<br>connection.timestamp:                   1578988781<br>connection.read-only:                   no<br>connection.permissions:                 --<br>connection.zone:                        --<br>connection.master:                      --<br>connection.slave-type:                  --<br>connection.autoconnect-slaves:          -1 (default)<br>connection.secondaries:                 --<br>connection.gateway-ping-timeout:        0<br>connection.metered:                     unknown<br>connection.lldp:                        default<br>connection.mdns:                        -1 (default)<br>connection.llmnr:                       -1 (default)<br></code></pre></td></tr></table></figure><h3 id="添加-Wi-Fi-连接"><a href="#添加-Wi-Fi-连接" class="headerlink" title="添加 Wi-Fi 连接"></a>添加 Wi-Fi 连接</h3><p>有两种方式添加Wi-Fi 连接。</p><h4 id="方法1，通过网络接口连接wifi"><a href="#方法1，通过网络接口连接wifi" class="headerlink" title="方法1，通过网络接口连接wifi"></a>方法1，通过网络接口连接wifi</h4><p>连接到由SSID或BSSID指定的wifi网络。命令如下，该命令找到匹配的连接或创建一个连接，然后在设备上激活它。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmcli device wifi connect <span class="hljs-string">&quot;<span class="hljs-variable">$SSID</span>&quot;</span> password <span class="hljs-string">&quot;<span class="hljs-variable">$PASSWORD</span>&quot;</span> ifname <span class="hljs-string">&quot;<span class="hljs-variable">$IFNAME</span>&quot;</span>  <br>nmcli --ask device wifi connect <span class="hljs-string">&quot;<span class="hljs-variable">$SSID</span>&quot;</span> <br></code></pre></td></tr></table></figure><h4 id="方法2，通过配置文件连接Wi-Fi"><a href="#方法2，通过配置文件连接Wi-Fi" class="headerlink" title="方法2，通过配置文件连接Wi-Fi"></a>方法2，通过配置文件连接Wi-Fi</h4><p>1，使用以下命令查看可用 Wi-Fi 访问点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmcli dev wifi list<br></code></pre></td></tr></table></figure><p>2，使用以下命令生成使用的静态 IP 配置，但允许自动 DNS 地址分配的 Wi-Fi 连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmcli con add con-name Wifi ifname wlan0 <span class="hljs-built_in">type</span> wifi ssid MyWifi ip4 192.168.100.101/24 gw4 192.168.100.1<br></code></pre></td></tr></table></figure><p>3，请使用以下命令设定 WPA2 密码，例如 “answer”：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmcli con modify Wifi wifi-sec.key-mgmt wpa-psk<br>nmcli con modify Wifi wifi-sec.psk answer<br></code></pre></td></tr></table></figure><p>4，使用以下命令更改 Wi-Fi 状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmcli radio wifi [ on | off ]<br></code></pre></td></tr></table></figure><p>更改属性<br>请使用以下命令检查具体属性，比如 mtu：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nmcli connection show <span class="hljs-built_in">id</span> <span class="hljs-string">&#x27;Wifi &#x27;</span> | grep mtu<br>802-11-wireless.mtu: auto<br></code></pre></td></tr></table></figure><p>使用如下命令更改设置的属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmcli connection modify <span class="hljs-built_in">id</span> <span class="hljs-string">&#x27;Wifi &#x27;</span> 802-11-wireless.mtu 1350<br></code></pre></td></tr></table></figure><p>使用如下命令确认更改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nmcli connection show <span class="hljs-built_in">id</span> <span class="hljs-string">&#x27;Wifi &#x27;</span> | grep mtu<br>802-11-wireless.mtu: 1350<br></code></pre></td></tr></table></figure><h3 id="配置静态路由"><a href="#配置静态路由" class="headerlink" title="配置静态路由"></a>配置静态路由</h3><p>使用nmcli命令为网络连接配置静态路由，使用命令如下：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">nmcli connection modify enp3s0 +ipv4.routes &quot;<span class="hljs-number">192.168.122.0</span>/<span class="hljs-number">24 10.10.10</span>.<span class="hljs-number">1</span>&quot;<br></code></pre></td></tr></table></figure><p>使用编辑器配置静态路由，使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nmcli con edit <span class="hljs-built_in">type</span> ethernet con-name enp3s0<br>===| nmcli interactive connection editor |===<br>Adding a new <span class="hljs-string">&#x27;802-3-ethernet&#x27;</span> connection<br>Type <span class="hljs-string">&#x27;help&#x27;</span> or <span class="hljs-string">&#x27;?&#x27;</span> <span class="hljs-keyword">for</span> available commands.<br>Type <span class="hljs-string">&#x27;describe [&lt;setting&gt;.&lt;prop&gt;]&#x27;</span> <span class="hljs-keyword">for</span> detailed property description.<br>You may edit the following settings: connection, 802-3-ethernet (ethernet), 802-1x, ipv4, ipv6, dcb<br>nmcli&gt; <span class="hljs-built_in">set</span> ipv4.routes 192.168.122.0/24 10.10.10.1<br>nmcli&gt;<br>nmcli&gt; save persistent<br>Saving the connection with <span class="hljs-string">&#x27;autoconnect=yes&#x27;</span>. That might result <span class="hljs-keyword">in</span> an immediate activation of the connection.<br>Do you still want to save? [<span class="hljs-built_in">yes</span>] <span class="hljs-built_in">yes</span><br>Connection <span class="hljs-string">&#x27;enp3s0&#x27;</span> (1464ddb4-102a-4e79-874a-0a42e15cc3c0) successfully saved.<br>nmcli&gt; quit<br></code></pre></td></tr></table></figure><h2 id="使用ip命令"><a href="#使用ip命令" class="headerlink" title="使用ip命令"></a>使用ip命令</h2><p> 说明：<br>使用ip命令配置的网络配置可以立即生效但系统重启后配置会丢失。</p><p>配置IP地址<br>使用ip命令为接口配置地址，命令格式如下，其中 interface-name 为网卡名称。</p><p>ip addr [ add | del ] address dev interface-name</p><h3 id="配置静态地址"><a href="#配置静态地址" class="headerlink" title="配置静态地址"></a>配置静态地址</h3><p>在root权限下，配置设置IP地址，使用示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ip address add 192.168.0.10/24 dev enp3s0</span><br></code></pre></td></tr></table></figure><p>查看配置结果，在root权限使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ip addr show dev enp3s0</span><br><br>2: enp3s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000<br>    <span class="hljs-built_in">link</span>/ether 52:54:00:aa:ad:4a brd ff:ff:ff:ff:ff:ff<br>    inet 192.168.202.248/16 brd 192.168.255.255 scope global dynamic noprefixroute enp3s0<br>       valid_lft 9547sec preferred_lft 9547sec<br>    inet 192.168.0.10/24 scope global enp3s0<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::32e8:cc22:9db2:f4d4/64 scope <span class="hljs-built_in">link</span> noprefixroute<br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure><h3 id="配置多个地址"><a href="#配置多个地址" class="headerlink" title="配置多个地址"></a>配置多个地址</h3><p>ip 命令支持为同一接口分配多个地址，可在root权限下重复多次使用 ip 命令实现分配多个地址。使用示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ip address add 192.168.2.223/24 dev enp4s0</span><br><br><span class="hljs-comment"># ip address add 192.168.4.223/24 dev enp4s0</span><br><br><span class="hljs-comment"># ip addr</span><br><br>3: enp4s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000<br>    <span class="hljs-built_in">link</span>/ether 52:54:00:aa:da:e2 brd ff:ff:ff:ff:ff:ff<br>    inet 192.168.203.12/16 brd 192.168.255.255 scope global dynamic noprefixroute enp4s0<br>       valid_lft 8389sec preferred_lft 8389sec<br>    inet 192.168.2.223/24 scope global enp4s0<br>       valid_lft forever preferred_lft forever<br>    inet 192.168.4.223/24 scope global enp4s0<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::1eef:5e24:4b67:f07f/64 scope <span class="hljs-built_in">link</span> noprefixroute<br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure><h3 id="配置静态路由-1"><a href="#配置静态路由-1" class="headerlink" title="配置静态路由"></a>配置静态路由</h3><p>如果需要静态路由，可使用 ip route add 命令在路由表中添加，使用 ip route del 命令删除。最常使用的 ip route 命令格式如下：</p><p>ip route [ add | del | change | append | replace ] destination-address<br>在root权限下使用 ip route 命令显示当前的 IP 路由表。示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ip route</span><br><br>default via 192.168.0.1 dev enp3s0 proto dhcp metric 100<br>default via 192.168.0.1 dev enp4s0 proto dhcp metric 101<br>192.168.0.0/16 dev enp3s0 proto kernel scope <span class="hljs-built_in">link</span> src 192.168.202.248 metric 100<br>192.168.0.0/16 dev enp4s0 proto kernel scope <span class="hljs-built_in">link</span> src 192.168.203.12 metric 101<br>192.168.122.0/24 dev virbr0 proto kernel scope <span class="hljs-built_in">link</span> src 192.168.122.1 linkdown<br></code></pre></td></tr></table></figure><p>在主机地址中添加一个静态路由，在 root 权限下，使用以下命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip route add 192.168.2.1 via 10.0.0.1 [dev interface-name]<br></code></pre></td></tr></table></figure><p>其中 192.168.2.1 是用点分隔的十进制符号中的 IP 地址，10.0.0.1 是下一个跃点，interface-name 是进入下一个跃点的退出接口。</p><p>要在网络中添加一个静态路由，即代表 IP 地址范围的 IP 地址，请在root权限下运行以下命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip route add 192.168.2.0/24 via 10.0.0.1 [dev interface-name]<br></code></pre></td></tr></table></figure><p>其中 192.168.2.1 是目标网络的 IP 地址，10.0.0.1 是网络前缀，interface-name 为网卡名称。</p><h3 id="通过ifcfg文件配置网络"><a href="#通过ifcfg文件配置网络" class="headerlink" title="通过ifcfg文件配置网络"></a>通过ifcfg文件配置网络</h3><p> 说明：<br>通过ifcfg文件配置的网络配置不会立即生效，需要在root权限下执行systemctl reload NetworkManager命令以重启网络服务后才生效。</p><h4 id="配置静态网络"><a href="#配置静态网络" class="headerlink" title="配置静态网络"></a>配置静态网络</h4><p>以enp4s0网络接口进行静态网络设置为例，通过在root权限下修改ifcfg文件实现，在&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;目录中生成名为ifcfg-enp4s0的文件中，修改参数配置，示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">TYPE=Ethernet<br>PROXY_METHOD=none<br>BROWSER_ONLY=no<br>BOOTPROTO=none<br>IPADDR=192.168.0.10<br>PREFIX=24<br>DEFROUTE=<span class="hljs-built_in">yes</span><br>IPV4_FAILURE_FATAL=no<br>IPV6INIT=<span class="hljs-built_in">yes</span><br>IPV6_AUTOCONF=<span class="hljs-built_in">yes</span><br>IPV6_DEFROUTE=<span class="hljs-built_in">yes</span><br>IPV6_FAILURE_FATAL=no<br>IPV6_ADDR_GEN_MODE=stable-privacy<br>NAME=enp4s0static<br>UUID=08c3a30e-c5e2-4d7b-831f-26c3cdc29293<br>DEVICE=enp4s0<br>ONBOOT=<span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><h4 id="配置动态网络"><a href="#配置动态网络" class="headerlink" title="配置动态网络"></a>配置动态网络</h4><p>要通过ifcfg文件为em1接口配置动态网络，请按照如下操作在&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;目录中生成名为 ifcfg-em1 的文件，示例如下：</p><p>DEVICE&#x3D;em1<br>BOOTPROTO&#x3D;dhcp<br>ONBOOT&#x3D;yes<br>要配置一个向DHCP服务器发送不同的主机名的接口，请在ifcfg文件中新增一行内容，如下所示：</p><p>DHCP_HOSTNAME&#x3D;hostname<br>要配置忽略由DHCP服务器发送的路由，防止网络服务使用从DHCP服务器接收的DNS服务器更新&#x2F;etc&#x2F;resolv.conf。请在ifcfg文件中新增一行内容，如下所示：</p><p>PEERDNS&#x3D;no<br>要配置一个接口使用具体DNS服务器，请将参数PEERDNS&#x3D;no，并在ifcfg文件中添加以下行：</p><p>DNS1&#x3D;ip-address<br>DNS2&#x3D;ip-address<br>其中ip-address是DNS服务器的地址。这样就会让网络服务使用指定的DNS服务器更新&#x2F;etc&#x2F;resolv.conf。</p><h4 id="配置默认网关"><a href="#配置默认网关" class="headerlink" title="配置默认网关"></a>配置默认网关</h4><p>在确定默认网关时，首先解析 &#x2F;etc&#x2F;sysconfig&#x2F;network 文件，然后解析 ifcfg 文件 ，将最后读取的 GATEWAY 的取值作为路由表中的默认路由。</p><p>在动态网络环境中，使用 NetworkManager 管理主机时，建议设置为由 DHCP 来分配。</p><h4 id="配置主机名"><a href="#配置主机名" class="headerlink" title="配置主机名"></a>配置主机名</h4><p>简介<br>hostname有三种类型：static、transient和pretty。</p><p>static：静态主机名，可由用户自行设置，并保存在&#x2F;etc&#x2F;hostname 文件中。<br>transient：动态主机名，由内核维护，初始是 static 主机名，默认值为“localhost”。可由DHCP或mDNS在运行时更改。<br>pretty：灵活主机名，允许使用自由形式（包括特殊&#x2F;空白字符）进行设置。静态&#x2F;动态主机名遵从域名的通用限制。<br> 说明：<br>static和transient主机名只能包含a-z、A-Z、0-9、“-”、“_”和“.”，不能在开头或结尾处使用句点，不允许使用两个相连的句点，大小限制为 64 个字符。</p><p>使用hostnamectl配置主机名<br>查看所有主机名<br>查看当前的主机名，使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hostnamectl status<br></code></pre></td></tr></table></figure><p> 说明：<br>如果命令未指定任何选项，则默认使用status选项。</p><p>设定所有主机名<br>在root权限下，设定系统中的所有主机名，使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># hostnamectl set-hostname name</span><br></code></pre></td></tr></table></figure><p>设定特定主机名<br>在root权限下，通过不同的参数来设定特定主机名，使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment"># hostnamectl set-hostname name [option...]</span><br></code></pre></td></tr></table></figure><p>其中option可以是–pretty、–static、–transient中的一个或多个选项。</p><p>如果–static或–transient与–pretty选项一同使用时，则会将static和transient主机名简化为pretty主机名格式，使用“-”替换空格，并删除特殊字符。</p><p>当设定pretty主机名时，如果主机名中包含空格或单引号，需要使用引号。命令示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># hostnamectl set-hostname &quot;Stephen&#x27;s notebook&quot; --pretty</span><br></code></pre></td></tr></table></figure><p>清除特定主机名<br>要清除特定主机名，并将其还原为默认形式，在root权限下，使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># hostnamectl set-hostname &quot;&quot; [option...]</span><br></code></pre></td></tr></table></figure><p>其中 “” 是空白字符串，option是–pretty、–static和–transient中的一个或多个选项。</p><p>远程更改主机名<br>在远程系统中运行hostnamectl命令时，要使用-H，–host 选项，在root权限下使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># hostnamectl set-hostname -H [username]@hostname new_hostname</span><br></code></pre></td></tr></table></figure><p>其中hostname是要配置的远程主机，username为自选项，new_hostname为新主机名。hostnamectl会通过SSH连接到远程系统。</p><p>使用nmcli配置主机名<br>查询static主机名，使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmcli general hostname<br></code></pre></td></tr></table></figure><p>在root权限下，将static主机名设定为host-server，使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># nmcli general hostname host-server</span><br></code></pre></td></tr></table></figure><p>要让系统hostnamectl感知到static主机名的更改，在root权限下，重启hostnamed服务，使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># systemctl restart systemd-hostnamed</span><br></code></pre></td></tr></table></figure><p>配置网络绑定<br>使用nmcli<br>创建名为mybond0的绑定，使用示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmcli con add <span class="hljs-built_in">type</span> bond con-name mybond0 ifname mybond0 mode active-backup<br></code></pre></td></tr></table></figure><p>添加从属接口，使用示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmcli con add <span class="hljs-built_in">type</span> bond-slave ifname enp3s0 master mybond0<br></code></pre></td></tr></table></figure><p>要添加其他从属接口，重复上一个命令，并在命令中使用新的接口，使用示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nmcli con add <span class="hljs-built_in">type</span> bond-slave ifname enp4s0 master mybond0<br>Connection <span class="hljs-string">&#x27;bond-slave-enp4s0&#x27;</span> (05e56afc-b953-41a9-b3f9-0791eb49f7d3) successfully added.<br></code></pre></td></tr></table></figure><p>要启动绑定，则必须首先启动从属接口，使用示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nmcli con up bond-slave-enp3s0<br>Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/14)<br>$ nmcli con up bond-slave-enp4s0<br>Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/15)<br></code></pre></td></tr></table></figure><p>现在可以启动绑定，使用示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ nmcli con up mybond0<br>Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/16)<br></code></pre></td></tr></table></figure><p>使用命令行<br>检查是否已安装Bonding内核模块<br>在系统中默认已加载相应模块。要载入绑定模块，可在root权限下使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># modprobe --first-time bonding</span><br></code></pre></td></tr></table></figure><p>显示该模块的信息，可在root权限下使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># modinfo bonding</span><br></code></pre></td></tr></table></figure><p>更多命令请在root权限下使用modprobe –help查看。</p><p>创建频道绑定接口<br>要创建绑定接口，可在root权限下通过在 &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F; 目录中创建名为 ifcfg-bondN 的文件（使用接口号码替换 N，比如 0）。</p><p>根据要绑定接口类型的配置文件来编写相应的内容，比如网络接口。接口配置文件示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">DEVICE=bond0<br>NAME=bond0<br>TYPE=Bond<br>BONDING_MASTER=<span class="hljs-built_in">yes</span><br>IPADDR=192.168.1.1<br>PREFIX=24<br>ONBOOT=<span class="hljs-built_in">yes</span><br>BOOTPROTO=none<br>BONDING_OPTS=<span class="hljs-string">&quot;bonding parameters separated by spaces&quot;</span><br></code></pre></td></tr></table></figure><p>创建从属接口<br>创建频道绑定接口后，必须在从属接口的配置文件中添加 MASTER 和 SLAVE 指令。</p><p>例如将两个网络接口enp3s0 和 enp4s0 以频道方式绑定，其配置文件示例分别如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">TYPE=Ethernet<br>NAME=bond-slave-enp3s0<br>UUID=3b7601d1-b373-4fdf-a996-9d267d1cac40<br>DEVICE=enp3s0<br>ONBOOT=<span class="hljs-built_in">yes</span><br>MASTER=bond0<br>SLAVE=<span class="hljs-built_in">yes</span><br>TYPE=Ethernet<br>NAME=bond-slave-enp4s0<br>UUID=00f0482c-824f-478f-9479-abf947f01c4a<br>DEVICE=enp4s0<br>ONBOOT=<span class="hljs-built_in">yes</span><br>MASTER=bond0<br>SLAVE=<span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><p>激活频道绑定<br>要激活绑定，则需要启动所有从属接口。请在root权限下，运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ifup enp3s0</span><br><br>Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/7)<br><br><span class="hljs-comment"># ifup enp4s0</span><br><br>Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/8)<br></code></pre></td></tr></table></figure><p> 说明：<br>对于已经处于“up”状态的接口，请首先使用“ifdown enp3s0 ”命令修改状态为down，其中 enp3s0 为实际网卡名称。</p><p>完成后，启动所有从属接口以便启动绑定（不将其设定为 “down”）。</p><p>要让 NetworkManager 感知到系统所做的修改，在每次修改后，请在root权限下，运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># nmcli con load /etc/sysconfig/network-scripts/ifcfg-device</span><br></code></pre></td></tr></table></figure><p>查看绑定接口的状态，请在root权限下运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ip link show</span><br><br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000<br>    <span class="hljs-built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>2: enp3s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000<br>    <span class="hljs-built_in">link</span>/ether 52:54:00:aa:ad:4a brd ff:ff:ff:ff:ff:ff<br>3: enp4s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000<br>    <span class="hljs-built_in">link</span>/ether 52:54:00:aa:da:e2 brd ff:ff:ff:ff:ff:ff<br>4: virbr0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default qlen 1000<br>    <span class="hljs-built_in">link</span>/ether 86:a1:10:fb:ef:07 brd ff:ff:ff:ff:ff:ff<br>5: virbr0-nic: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc fq_codel master virbr0 state DOWN mode DEFAULT group default qlen 1000<br>    <span class="hljs-built_in">link</span>/ether 52:54:00:29:35:4c brd ff:ff:ff:ff:ff:ff<br></code></pre></td></tr></table></figure><p>创建多个绑定<br>系统会为每个绑定创建一个频道绑定接口，包括 BONDING_OPTS 指令。使用这个配置方法可让多个绑定设备使用不同的配置。请按照以下操作创建多个频道绑定接口：</p><p>创建多个 ifcfg-bondN 文件，文件中包含 BONDING_OPTS 指令，让网络脚本根据需要创建绑定接口。<br>创建或编辑要绑定的现有接口配置文件，添加 SLAVE 指令。<br>使用 MASTER 指令工具在频道绑定接口中分配要绑定的接口，即从属接口。<br>以下是频道绑定接口配置文件示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">DEVICE=bondN<br>NAME=bondN<br>TYPE=Bond<br>BONDING_MASTER=<span class="hljs-built_in">yes</span><br>IPADDR=192.168.1.1<br>PREFIX=24<br>ONBOOT=<span class="hljs-built_in">yes</span><br>BOOTPROTO=none<br>BONDING_OPTS=<span class="hljs-string">&quot;bonding parameters separated by spaces&quot;</span><br></code></pre></td></tr></table></figure><p>在这个示例中，使用绑定接口的号码替换 N。例如要创建两个接口，则需要使用正确的 IP 地址创建两个配置文件 ifcfg-bond0 和 ifcfg-bond1。</p><p>IPv6使用差异说明（vs IPv4）<br>约束限制<br>chrony支持全局地址（global address），不支持链路本地地址（link-local address）。<br>Firefox支持通过http&#x2F;https协议访问全局地址（global address），不支持链路本地地址（link-local address）。<br>配置说明<br>设置接口设备MTU值<br>概述<br>IPv6场景中会发现整个路由路径中的最小mtu的值作为当前链接的PMTU的值，源端根据PMTU的值确定是否进行分片发送，而在整个路径中的其它设备将不再需要进行分片处理，从而可以降低中间路由设备的负载大小。其中IPv6 PMTU设置的最小值为1280。</p><p>设置接口设备的mtu<br>如果在配置了IPv6地址的接口上设置mtu的值小于1280（IPv6 PMTU设置的最小值），则会导致该接口的IPv6地址被删除。并且无法再次添加IPv6地址。所以在IPv6场景中，对接口设备的mtu的配置一定要大于等于1280。 请在root权限下运行如下命令查看具体现象：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ip addr show enp3s0</span><br><br>3: enp3s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000<br>    <span class="hljs-built_in">link</span>/ether 52:54:00:62:xx:xx brd ff:ff:ff:ff:xx:xx<br>    inet 10.41.125.236/16 brd 10.41.255.255 scope global noprefixroute dynamic enp3s0<br>       valid_lft 38663sec preferred_lft 38663sec<br>    inet6 2001:222::2/64 scope global<br>       valid_lft forever preferred_lft forever<br><br><span class="hljs-comment"># ip link set dev enp3s0 mtu 1200</span><br><br><span class="hljs-comment"># ip addr show enp3s0</span><br><br>3: enp3s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1200 qdisc pfifo_fast state UP group default qlen 1000<br>    <span class="hljs-built_in">link</span>/ether 52:54:00:62:xx:xx brd ff:ff:ff:ff:xx:xx<br>    inet 10.41.125.236/16 brd 10.41.255.255 scope global noprefixroute dynamic enp3s0<br>       valid_lft 38642sec preferred_lft 38642sec<br><br><span class="hljs-comment"># ip addr add 2001:222::2/64 dev enp3s0</span><br><br>RTNETLINK answers: No buffer space available<br><br><span class="hljs-comment"># ip link set dev enp3s0 mtu 1500</span><br><br><span class="hljs-comment"># ip addr show enp3s0</span><br><br>3: enp3s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000<br>    <span class="hljs-built_in">link</span>/ether 52:54:00:62:xx:xx brd ff:ff:ff:ff:xx:xx<br>    inet 10.41.125.236/16 brd 10.41.255.255 scope global noprefixroute dynamic enp3s0<br>       valid_lft 38538sec preferred_lft 38538sec<br><br><span class="hljs-comment"># ip addr add 2001:222::2/64 dev enp3s0</span><br><br><span class="hljs-comment"># ip addr show enp3s0</span><br><br>3: enp3s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000<br>    <span class="hljs-built_in">link</span>/ether 52:54:00:62:xx:xx brd ff:ff:ff:ff:xx:xx<br>    inet 10.41.125.236/16 brd 10.41.255.255 scope global noprefixroute dynamic enp3s0<br>       valid_lft 38531sec preferred_lft 38531sec<br>    inet6 2001:222::2/64 scope global<br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure><p>有状态自动配置IPv6地址<br>概述<br>IPv6与IPv4都可以在root权限下通过DHCP的方式获得IP地址。IPv6地址有两种配置方式：无状态自动配置和有状态自动配置。</p><p>无状态自动配置</p><p>不需要DHCP服务进行管理，设备根据网络RA（路由公告）获得网络前缀，或者link-local地址为固定fe80::。而接口ID则根据ifcfg配置IPV6_ADDR_GEN_MODE的具体设置来进行自动获得：</p><p>IPv6_ADDR_GEN_MODE&#x3D;“stable-privacy” 则根据设备及网络环境来确定一个随机接口ID。<br>IPv6_ADDR_GEN_MODE&#x3D;“EUI64” 则根据设备MAC地址来确定接口ID。<br>有状态自动配置：需要DHCP服务器进行管理分配，服从DHCPv6协议来从DHCPv6服务器端租赁IPv6地址。</p><p>在有状态自动配置IPv6地址时，DHCPv6服务端可以通过客户端设置的vendor class将客户端进行分类，不同类别分配不同地址段的IPv6地址。在IPv4场景中，客户端可以直接用dhclient的-V选项来设置vendor-class-identifier，DHCP服务端在配置文件中根据vendor-class-identifier来对客户端进行分类处理。而IPv6场景中，如果使用同样的方法对客户端分类，则分类并不会生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dhclient -6 &lt;interface&gt; -V &lt;vendor-class-identifier string&gt; &lt;interface&gt;<br></code></pre></td></tr></table></figure><p>这是由于DHCPv6和DHCP协议存在较大差异，DHCPv6的可选项中使用vendor-class-option替代了DHCP中的vendor-class-identifier。而dhclient的-V选项并不能设置vendor-class-option。</p><p>有状态自动配置IPv6地址时dhclient设置vendor class方法<br>在客户端使用配置文件方式添加对vendor class的设置，使用方法如下：</p><p>客户端配置文件（&#x2F;etc&#x2F;dhcp&#x2F;dhclient6.conf），文件位置可以自定义，在使用时需要通过dhclient -cf选项来指定配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">option dhcp6.vendor-class code 16 = &#123;<span class="hljs-built_in">integer</span> 32, <span class="hljs-built_in">integer</span> 16, string&#125;;<br>interface <span class="hljs-string">&quot;enp3s0&quot;</span> &#123;<br>        send dhcp6.vendor-class &lt;Enterprise-ID number&gt; &lt;vendor class string length&gt; &lt;vendor class string&gt;;<br>&#125;<br></code></pre></td></tr></table></figure><p> 说明：</p><p><Enterprise-ID number>，32位整型数字，企业标识号，企业通过IANA注册。<br><vendor class string length>，16位整型数字，vendor class字符串长度。<br><vendor class string>，要设置的vendor class字符串，例如：“HWHW”。<br>客户端使用方法：</p><p>dhclient -6 <interface> -cf &#x2F;etc&#x2F;dhcp&#x2F;dhclient6.conf<br>DHCPv6服务端配置文件（&#x2F;etc&#x2F;dhcp&#x2F;dhcpd6.conf），需要dhcpd -cf选项来指定该配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">option dhcp6.vendor-class code 16 = &#123;<span class="hljs-built_in">integer</span> 32, <span class="hljs-built_in">integer</span> 16, string&#125;;<br>subnet6 fc00:4:12:ffff::/64 &#123;<br>        class <span class="hljs-string">&quot;hw&quot;</span> &#123;<br>                match <span class="hljs-keyword">if</span> substring ( option dhcp6.vendor-class, 6, 10 ) = <span class="hljs-string">&quot;HWHW&quot;</span>;<br>        &#125;<br>        pool6 &#123;<br>                allow members of <span class="hljs-string">&quot;hw&quot;</span>;<br>                range6 fc00:4:12:ffff::ff10 fc00:4:12:ffff::ff20;<br>        &#125;<br>        pool6 &#123;<br>                allow unknown clients;<br>                range6 fc00:4:12:ffff::100 fc00:4:12:ffff::120;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 说明：<br>substring ( option dhcp6.vendor-class, 6, 10 ) 其中子字符串的开始位置为6，因为前面包含4个字节的<Enterprise-ID number>和2个字节的<string length>。而子字符串的结束位置位：6+<vendor class string length>。这里vendor class string为“HWHW”，字符串的长度为4，所以子字符串的结束位置为6+4&#x3D;10。用户可以根据实际需要来确定<vendor class string>及相应的<vendor class string length>。</p><p>服务端使用方法：</p><p>dhcpd -6 -cf &#x2F;etc&#x2F;dhcp&#x2F;dhcpd6.conf <interface><br>内核支持socket相关系统调用<br>概述<br>IPv6地址长度扩展到128比特，所以有足够的IPv6地址可供分配使用。同时IPv6头相比IPv4头进行了简化，并增强了IPv6的自动配置功能。IPv6地址分为单播地址，组播地址和任意播地址。常用的单播地址又包含：链路本地地址（link-local address），唯一本地地址（Unique local address）和全局地址（global address）。由于IPv6的全局地址十分充足，唯一本地地址一般不被使用（其前身为站点本地地址（site-local address），已于2004年被废弃）。当前主要使用的单播地址为：链路本地地址（link-local address）和全局地址（global address）。当前内核支持socket系统调用，在使用单播地址的链路本地地址和全局地址时存在差异。</p><p>link-local地址和global地址在socket调用时的差异<br>RFC 2553： Basic Socket Interface Extensions for IPv6 定义sockaddr_in6的数据结构如下；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">struct sockaddr_in6 &#123;<br>    uint8_t         sin6_len;       /*length of this struct*/<br>    sa_family_t     sin6_family;    /*AF_INET6*/<br>    in_port_t       sin6_port;      /*transport layer port <span class="hljs-comment">#*/</span><br>    uint32_t        sin6_flowinfo;  /*IPv6 flow information*/<br>    struct in6_addr sin6_addr;      /*IPv6 address*/<br>    uint32_t        sin6_scope_id;  /*<span class="hljs-built_in">set</span> of interfaces <span class="hljs-keyword">for</span> a scope*/<br>&#125;;<br></code></pre></td></tr></table></figure><p> 说明：<br>sin6_scope_id： 32位整型，对于链路本地地址（link-local address），对于链路范围的sin6_addr，它可以用来标识指定的接口索引号。如果是站点范围的sin6_addr，则用来作为站点的标识符（站点本地地址已被抛弃）。</p><p>在使用link-local地址进行socket通信时，在构造目的地址时，需要制定该地址所对应的接口索引号。一般可以通过if_nametoindex函数将接口名转化为接口索引号。具体方式如下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">int port = 1234;<br>int sk_fd;<br>int iff_index = 0;<br>char iff_name[100] = <span class="hljs-string">&quot;enp3s0&quot;</span>;<br>char * ll_addr[100] = <span class="hljs-string">&quot;fe80::123:456:789&quot;</span>;<br>struct sockaddr_in6 server_addr;<br><br>memset(&amp;server_addr,0,sizeof(structsockaddr_in6));<br>iff_index=if_nametoindex(iff_name);<br><br>server_addr.sin6_family=AF_INET6;<br>server_addr.sin6_port=htons(port);<br>server_addr.sin6_scope_id=iff_index;<br>inet_pton(AF_INET6, ll_addr, &amp;(server_addr.sin6_addr));<br><br>sk_fd=socket(AF_INET6, SOCK_STREAM, IPPROTO_TCP);<br>connect(sk_fd, (struct sockaddr *)&amp;server_addr, sizeof(struct sockaddr_in6));<br></code></pre></td></tr></table></figure><p>Pv4的dhclient守护进程持久化配置<br>概述<br>通过NetworkManager服务来管理网络服务时，如果接口ifcfg-<interface-name>配置文件中配置了DHCP方式获得IP地址，则相应地NetworkManager服务会拉起dhclient守护进程来通过DHCP协议方式来从DHCP服务器获取IP地址。</p><p>dhclient提供了”-1”选项来决定dhclient进程在未获得DHCP服务响应时，是会不断持久化尝试请求地址还是会尝试时间超时后退出。针对IPv4的dhclient守护进程，可以在ifcfg-<interface-name>配置文件中设置PERSISTENT_DHCLIENT来决定是否设置IPv4的dhclient进程的持久化。</p><p>约束限制<br>当dhclient进程在运行中被杀死，network服务无法自动将其拉起，可靠性需要用户自己保障。<br>配置了持久化选项PERSISTENT_DHCLIENT，需要确保有相应的DHCP服务器。如果在拉起network时无可用DHCP服务器，dhclient进程不断尝试发送请求包但无回应，则会导致network服务卡死直到network服务超时失败。由于network服务在拉起多个网卡的IPv4 dhclient进程时，是通过串行的方式来拉起的。如果有网卡配置了持久化而DHCP服务器没有准备好，则会导致network服务在给该网卡获取IPv4地址超时卡死，进而导致后续网卡无法获得IPv4&#x2F;IPv6地址。<br>以上两种约束限制是特殊的应用场景，需要用户自己进行可靠性保障。</p><p>IPv4 DHCP和IPv6 DHCPv6方式获取地址的配置差异<br>可以通过配置接口ifcfg-<interface-name>参数来分别实现IPv4和IPv6通过DHCP&#x2F;DHCPv6协议来动态获取IP地址，具体配置说明如下；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">BOOTPROTO=none|bootp|dhcp<br>DHCPV6C=<span class="hljs-built_in">yes</span>|no<br>PERSISTENT_DHCLIENT=<span class="hljs-built_in">yes</span>|no|1|0<br><br>BOOTPROTO： none表示静态配置IPv4地址，bootp|dhcp则会拉起DHCP dhclient来动态获取IPv4地址。<br><br>DHCPV6C： no表示静态配置IPv6地址，<span class="hljs-built_in">yes</span>则会拉起DHCPv6 dhclient来动态获取IPv6地址。<br><br>PERSISTENT_DHCLIENT：no|0表示IPv4的dhclient进程配置为“非持久化”，当dhclient向DHCP服务器发送一次请求报文而无响应，则会间隔一段时间后退出，退出值为2。<span class="hljs-built_in">yes</span>|1则表示IPv4的dhclient进程配置为“持久化”，dhclient会向DHCP服务器反复发送请求报文。如果没有配置PERSISTENT_DHCLIENT项，则IPv4的dhclient会默认设置为“持久化”。<br></code></pre></td></tr></table></figure><p> 说明：<br>PERSISTENT_DHCLIENT配置只针对IPv4生效，对IPv6相关dhclient -6进程不生效，IPv6默认不进行持久化配置。</p><p>iproute相关命令配置IPv4与IPv6时的差异说明<br>概述<br>由于IPv4和IPv6是两个不同的协议标准，iproute相关命令在使用方法上存在一定的差异。本章节主要梳理iproute包中用户经常使用到命令在IPv4和IPv6使用方面的差异，从而可以更好地指导用户使用iproute包中相关命令。</p><p>iproute相关命令均需要在root权限下运行。</p><p>IPv6地址的生命周期</p><p>IPv6状态</p><p>解释</p><p>tentative</p><p>临时状态：刚添加地址还处于地址重复检测DAD过程</p><p>preferred</p><p>首选状态：完成DAD过程，没有收到相应的NA报文，表示该地址没有冲突。</p><p>deprecated</p><p>弃用状态：地址有一定的使用时限（valid_lft和preferred_lft），preferred_lft到期后地址会变化deprecated状态。</p><p>该状态下的地址不能用于创建新的连接，但是原有的连接可以继续使用。</p><p>invalid</p><p>无效状态：使用时限超过preferred_lft一段时间后仍然没有成功进行租约续约，则valid_lft时间到后地址状态会被设置为invalid，表示该地址不可以再被使用。</p><p>其它说明：</p><p>preferred_lft：preferred lifetime，地址为首选状态的寿命，preferred_lft没有到期的地址可以用于正常通信使用，若有多个preferred地址则按照内核具体机制选择地址。<br>valid_lft： valid lifetime，地址有效的寿命，在[preferred_lft, valid_lft]时间段内该地址不能被用于新建连接，已经创建的连接继续有效。<br>ip link 命令<br>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> IFNAME mtu MTU<br></code></pre></td></tr></table></figure><p>IPv6中PMTU的最小值为1280，如果mtu值设置小于1280则会导致IPv6地址丢失。其它设备无法ping通该IPv6地址。</p><p>ip addr命令<br>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip [-6] addr add IFADDR dev IFNAME<br></code></pre></td></tr></table></figure><p>添加IPv6地址可以选择添加-6选项也可以不添加，ip addr命令会根据具体地址类型来判断是ipv4地址还是IPv6地址。</p><p>如果指定“-6”选项，但是IFADDR 是ipv4地址则会有错误返回。</p><p>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip [-6] addr add IFADDR  dev IFNAME [home|nodad]<br></code></pre></td></tr></table></figure><p>[home|nodad] 选项只针对IPv6地址有效。</p><p>home：将该地址指定为RFC 6275中定义的家庭地址。（这是移动节点从家庭链路获取的地址， 是移动节点的永久地址，如果移动节点保持在相同的归属链路中，则各种实体之间的通信照常进行。）<br>nodad：配置该项（仅限IPv6）添加此地址时不执行重复地址检测DAD（RFC 4862）。如果一台设备上多个接口通过nodad配置了多个相同的IPv6地址，则会按照接口顺序使用该IPv6地址。同一个接口上不能添加一个nodad一个非nodad的相同IPv6地址。因为两个地址是一样的，所以会报“RTNETLINK answers: File exists”。<br>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip [-6] addr del IFADDR dev IFNAME<br></code></pre></td></tr></table></figure><p>删除IPv6地址可以选择添加-6选项也可以不添加，ip addr del命令会根据具体地址类型来判断是ipv4地址还是IPv6地址。</p><p>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip [-6] addr show dev IFNAME [tentative|-tentative|deprecated|-deprecated|dadfailed|-dadfailed|temporary]<br></code></pre></td></tr></table></figure><p>不指定-6选项，则会同时打印IPv4和IPv6地址。指定-6选项则只打印IPv6地址。<br>[tentative|-tentative|deprecated|-deprecated|dadfailed|-dadfailed|temporary]，这些选项只针对IPv6，可以根据IPv6地址状态对地址进行筛选查看。<br>tentative：（仅限IPv6）仅列出尚未通过重复地址检测的地址。<br>-tentative：（仅限IPv6）仅列出当前未处于重复地址检测过程中的地址。<br>deprecated：（仅限IPv6）仅列出已弃用的地址。<br>-deprecated：（仅限IPv6）仅列出未弃用的地址。<br>dadfailed：（仅限IPv6）仅列出重复地址检测失败的地址。<br>-dadfailed：（仅限IPv6）仅列出未重复地址检测失败的地址。<br>temporary：（仅限IPv6）仅列出临时地址<br>ip route命令<br>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip [-6] route add ROUTE [mtu lock MTU]<br></code></pre></td></tr></table></figure><p>-6选项：添加IPv6路由可以选择添加-6选项也可以不添加，ip route命令会根据具体地址类型来判断是IPv4地址还是IPv6地址。</p><p>mtu lock MTU：锁定路由的MTU值。如果不锁定MTU，则MTU的值则可能在PMTUD过程中被内核改变。如果锁定MTU，则不会尝试PMTUD，所有IPv4包都将不设置DF位发出，IPv6包则会按照MTU进行分段处理。</p><p>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip [-6] route del ROUTE<br></code></pre></td></tr></table></figure><p>删除IPv6路由可以选择添加-6选项也可以不添加，ip route命令会根据具体地址类型来判断是IPv4地址还是IPv6地址。</p><p>ip rule命令<br>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>ip [-6] rule list<br></code></pre></td></tr></table></figure><p>-6选项：设置-6选项打印IPv6的策略路由，不设置-6选项打印IPv4的策略路由。所以需要根据具体协议类型来配置-6选项。</p><p>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip [-6] rule [add|del] [from|to] ADDR table TABLE pref PREF<br></code></pre></td></tr></table></figure><p>-6选项：IPv6相关的策略路由表项需要设置-6选项，否则会报错：“Error: Invalid source address.”。相应地，IPv4相关的策略路由表项不可以设置-6选项，否则会报错：“Error: Invalid source address.”。</p><p>NetworkManager服务配置差异说明<br>概述<br>NetworkManager服务使用ifup&#x2F;ifdown的逻辑接口定义进行高级网络设置。其参数大多数都是在&#x2F;etc&#x2F;sysconfig&#x2F;network和&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-<interface-name>两个配置文件设置。前者为全局设置，后者为指定网卡的设置，当两者有冲突时，后者生效。</p><p>配置差异说明<br>其中在&#x2F;etc&#x2F;sysconfig&#x2F;network下的配置差异有：</p><p>IPv4</p><p>IPv6</p><p>含义说明</p><p>NA</p><p>IPV6FORWARDING&#x3D;yes|no</p><p>IPv6转发，默认不转发。</p><p>NA</p><p>IPV6_AUTOCONF&#x3D;yes|no</p><p>IPv6转发打开是no，否则是yes。</p><p>NA</p><p>IPV6_ROUTER&#x3D;yes|no</p><p>IPv6转发打开是yes，否则是no。</p><p>NA</p><p>IPV6_AUTOTUNNEL&#x3D;yes|no</p><p>指定Tunnel为自动隧道模式，默认是no。</p><p>GATEWAY</p><p>IPV6_DEFAULTGW&#x3D;&lt;IPv6 address[%interface]&gt; (optional)</p><p>在IPv6中设置默认网关。</p><p>NA</p><p>IPV6_DEFAULTDEV&#x3D;<interface> (optional)</p><p>指定默认转发的网卡。</p><p>NA</p><p>IPV6_RADVD_PIDFILE&#x3D;<pid-file> (optional)</p><p>默认ipv6_radvd_pid路径：&#x2F;var&#x2F;run&#x2F;radvd&#x2F;radvd.pid。</p><p>NA</p><p>IPV6_RADVD_TRIGGER_ACTION&#x3D;startstop|reload|restart|SIGHUP (optional)</p><p>radvd默认触发动作。</p><p>而在&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-<interface-name>下的差异主要有：</p><p>IPv4</p><p>IPv6</p><p>含义说明</p><p>IPADDRn</p><p>IPV6ADDR&#x3D;<IPv6 address>[&#x2F;<prefix length>]</p><p>ip地址。</p><p>PREFIXn</p><p>NA</p><p>网络前缀，网络别名和ppp无效，优先级高于NETMASK。</p><p>NETMASKn</p><p>NA</p><p>子网掩码，仅用于别名和ppp。</p><p>GATEWAY</p><p>IPV6_DEFAULTGW&#x3D;&lt;IPv6 address[%interface]&gt; (optional)</p><p>默认网关。</p><p>MTU</p><p>IPV6_MTU&#x3D;<MTU of link> (optional)</p><p>默认MTU。</p><p>IPV4_FAILURE_FATAL&#x3D;yes|no</p><p>IPV6_FAILURE_FATAL</p><p>默认值是no。若设置为yes，dhclient失败ifup-eth会直接退出。</p><p>NA</p><p>IPV6_PRIVACY&#x3D;rfc3041</p><p>默认禁用。</p><p>NA</p><p>IPV6INIT&#x3D;yes|no</p><p>默认开启IPv6。</p><p>NA</p><p>IPV6FORWARDING&#x3D;yes|no</p><p>默认关闭，已废弃。</p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="iscsi-initiator-utils不支持登录fe80-IPv6地址"><a href="#iscsi-initiator-utils不支持登录fe80-IPv6地址" class="headerlink" title="iscsi-initiator-utils不支持登录fe80 IPv6地址"></a>iscsi-initiator-utils不支持登录fe80 IPv6地址</h3><p>问题现象<br>客户端通过IPv6登录iscsi服务端时，使用如“iscsiadm -m node -p ipv6address -l”的命令格式登录，如果是全局地址（global address），直接替换将命令范例中的“ipv6address”替换为全局地址即可；但如果是链路本地地址（link-local address，fe80开头的IPv6地址）则无法使用，因为iscsi-initiator-utils目前机制还不支持用链路本地地址（link-local address）地址登录iscsi服务端。</p><p>原因分析<br>如果使用格式如“iscsiadm -m node -p fe80::xxxx -l”登录，会登录超时返回，这是因为使用链路本地地址必须指定接口，否则使用iscsi_io_tcp_connect函数调用connect函数会失败，并且产生标准错误码22。</p><p>如果使用格式如“iscsiadm -m node -p fe80::xxxx%enp3s0 -l”登录时，iscsi_addr_match函数会将地址“fe80::xxxx%enp3s0”与服务端返回的node信息中的地址“fe80::xxxx”对比，对比结果不匹配，导致登录失败。</p><p>因此，iscsi-initiator-utils目前机制还不支持用链路本地地址（link-local address）登录iscsi服务端。</p><h3 id="网卡down掉之后，IPv6地址丢失"><a href="#网卡down掉之后，IPv6地址丢失" class="headerlink" title="网卡down掉之后，IPv6地址丢失"></a>网卡down掉之后，IPv6地址丢失</h3><p>问题现象<br>通过ip link down+up网卡或ifconfig down+up网卡命令，将网卡down掉之后再上线，查看网卡上配置的ip地址，发现ipv4地址不丢失，而配置的IPv6地址丢失。</p><p>原因分析<br>内核中的处理逻辑为如果网卡设置为down状态，会清空所有IPv4及IPv6地址，将网卡重新up之后，ipv4地址自动恢复，网卡上自动配置的IPv6链路本地地址也会恢复，但是其他IPv6地址默认会丢失。如果需要保留这些IPv6地址，可以通过“sysctl -w net.ipv6.conf.&lt;网卡名&gt;.keep_addr_on_down&#x3D;1”来实现。</p><h3 id="bond口已具有多个IPv6地址时，添加或删除IPv6地址耗时过久"><a href="#bond口已具有多个IPv6地址时，添加或删除IPv6地址耗时过久" class="headerlink" title="bond口已具有多个IPv6地址时，添加或删除IPv6地址耗时过久"></a>bond口已具有多个IPv6地址时，添加或删除IPv6地址耗时过久</h3><p>问题现象<br>下列方式配置或删除（包括flush）IPv6地址方式，X为动态变化的低16位，并且配置在bond口时，耗时会随已配置的IPv6地址数量成数倍增加。例如由4个物理网卡组成的bond口添加IPv6地址时，单线程添加删除3000 IPv6地址均需大概5分钟，而普通物理网卡耗时在10秒内。</p><p>ip a add&#x2F;del 192:168::18:X&#x2F;64 dev DEVICE<br>原因分析<br>bond口在添加IPv6地址时，会生成IPv6组播地址，并进行同步到所有的物理网卡上，此耗时会随IPv6数量增加而增加，导致耗时过长。</p><p>解决方法<br>IPv6的组播地址是由IPv6地址的低24位与33-33-ff组合生成，组播地址过多会导致添加删除耗时增加，如果生成的组播地址为少量，耗时不会受此影响。</p><p>建议添加IPv6地址时，可保持低24位一致，保持高位变动，单网卡中仅需一个网段的一个地址即可与外部正常通信，此配置更符合常规使用。</p><h3 id="Rsyslog在IPv4和IPv6混合使用场景中日志传输延迟"><a href="#Rsyslog在IPv4和IPv6混合使用场景中日志传输延迟" class="headerlink" title="Rsyslog在IPv4和IPv6混合使用场景中日志传输延迟"></a>Rsyslog在IPv4和IPv6混合使用场景中日志传输延迟</h3><p>问题现象<br>rsyslog客户端配置文件同时配置IPv4和IPv6地址，且端口配置相同的情况下，服务端收集log时会概率性出现日志打印延迟。</p><p>原因分析<br>延迟是因为rsyslog内部存在缓冲队列机制，默认情况下需要缓冲区队列达到一定数量才会写入文件。</p><p>解决方法<br>可在root权限下通过配置Direct模式，关闭缓冲队列机制解决该问题。在rsyslog远程传输服务端的&#x2F;etc&#x2F;rsyslog.d目录下新增的远程传输配置文件中，最开头增加如下配置：</p><p>$ActionQueueType Direct<br>$MainMsgQueueType Direct<br> 说明：</p><p>Direct模式减少队列大小为1，所以在队列中会保留1条日志到下次日志打印；<br>Direct模式会降低服务器端的rsyslog性能。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag> openeuler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>taskfile 构建工具</title>
    <link href="/2022/07/18/taskfile%20%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    <url>/2022/07/18/taskfile%20%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Taskfile-是什么"><a href="#1-Taskfile-是什么" class="headerlink" title="1. Taskfile 是什么"></a>1. Taskfile 是什么</h2><p>Taskfile 通过 yaml 来描述各种执行任务, 其核心采用 go 编写; 相较于 Makefile 的 tab 分割和 bash 结合语法  Taskfile 显得更加现代化和易于使用(虽然会变成 yaml 工程师). Taskfile  内置了动态变量、操作系统等环境变量识别等高级功能都更贴合现代化的 Coding 方式。</p><p>总体来说如果你是一个对 Makefile 不太熟悉的人, 又期望通过类似 Makefile 的工具完成一些批量任务, 那么相对于 Makefile 来说 Taskfile 会更加便于入门, 学习曲线更低且速度也足够快。</p><h2 id="2-安装及使用"><a href="#2-安装及使用" class="headerlink" title="2. 安装及使用"></a>2. 安装及使用</h2><h3 id="安装-go-task"><a href="#安装-go-task" class="headerlink" title="安装 go-task"></a>安装 go-task</h3><p>对于 mac 用户来说官方提供了 brew 安装方式:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install go-task/tap/go-task<br></code></pre></td></tr></table></figure><p>对于 Linux 用户, 官方提供了部分 Linux 发行版的安装包, 但由于其只有一个二进制文件, 所以官方也提供了快速安装脚本:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># For Default Installation to ./bin with debug logging</span><br>sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl --location https://taskfile.dev/install.sh)</span>&quot;</span> -- -d<br><br><span class="hljs-comment"># For Installation To /usr/local/bin for userwide access with debug logging</span><br><span class="hljs-comment"># May require sudo sh</span><br>sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl --location https://taskfile.dev/install.sh)</span>&quot;</span> -- -d -b /usr/local/bin<br><br></code></pre></td></tr></table></figure><p>如果本地已经有了 Go 语言开发环境也可以直接通过 go 命令安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">go install github.com/go-task/task/v3/cmd/task@latest<br><br></code></pre></td></tr></table></figure><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><p>安装完成后, 只需要编写一个 Taskfile.yml 的 yaml 文件, 然后就可以通过 task 命令运行相应的任务:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;执行 build 任务&quot;</span><br>      <br>  <span class="hljs-attr">docker:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;打包 docker 镜像&quot;</span><br><br></code></pre></td></tr></table></figure><p><img src="/images/pasted-55.png" alt="upload successful"><br>如果需要设置默认执行任务, 只需要创建一个名字为 default 的任务即可:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">default:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;这是默认任务&quot;</span><br><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;执行 build 任务&quot;</span><br><br>  <span class="hljs-attr">docker:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;打包 docker 镜像&quot;</span><br><br></code></pre></td></tr></table></figure><p><img src="/images/pasted-56.png" alt="upload successful"></p><h2 id="3-进阶使用"><a href="#3-进阶使用" class="headerlink" title="3. 进阶使用"></a>3. 进阶使用</h2><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>Taskfile 支持引用三种环境变量:</p><p>Shell 环境变量<br>Taskfile 内定义的环境变量<br>变量文件内定义的环境变量<br>如果需要引用 Shell 内的环境变量只需要使用 变量名 方式直接引用即可:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">default:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;$ABCD&quot;</span><br><br></code></pre></td></tr></table></figure><p><img src="/images/pasted-57.png" alt="upload successful"><br>同样在 Taskfile 内也可以定义环境变量:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">env:</span><br>  <span class="hljs-attr">TENV2:</span> <span class="hljs-string">&quot;t2&quot;</span> <span class="hljs-comment"># 全局环境变量</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">default:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;$TENV1&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;$TENV2&quot;</span><br>    <span class="hljs-attr">env:</span><br>      <span class="hljs-attr">TENV1:</span> <span class="hljs-string">&quot;t1&quot;</span> <span class="hljs-comment"># 单个 task 环境变量</span><br>      <br></code></pre></td></tr></table></figure><p><img src="/images/pasted-58.png" alt="upload successful"><br>除了这种直接引用变量的方式, Taskfile 也支持类似 docker-compose 一样读取 env 文件来加载环境变量; Taskfile 会默认加载同级目录下的 .env 文件, 也可以在 Taskfile 内通过 dotenv 命令来配置特定文件:</p><p>version: ‘3’</p><p>dotenv: [“.env”, “.testenv”]</p><p>tasks:<br>  default:<br>    cmds:<br>      - echo “$ABCD”<br>      - echo “$TESTENV”</p><p><img src="/images/pasted-59.png" alt="upload successful"></p><h3 id="增强变量"><a href="#增强变量" class="headerlink" title="增强变量"></a>增强变量</h3><p>除了标准的环境变量以外, 在 Taskfile 中还内置了一种使用更加广泛的增强变量 vars; 该变量模式可以通过 go 的模版引擎进行读取(插值引用), 且具有环境变量不具备的特殊特性. 以下为 vars 变量的示例:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-comment"># 全局 var 变量</span><br><span class="hljs-attr">vars:</span><br>  <span class="hljs-attr">GLOBAL_VAR:</span> <span class="hljs-string">&quot;global var&quot;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">testvar:</span><br>    <span class="hljs-comment"># task var 变量</span><br>    <span class="hljs-attr">vars:</span><br>      <span class="hljs-attr">TASK_VAR:</span> <span class="hljs-string">&quot;task var&quot;</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;echo <span class="hljs-template-variable">&#123;&#123;.GLOBAL_VAR&#125;&#125;</span>&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;echo <span class="hljs-template-variable">&#123;&#123;.TASK_VAR&#125;&#125;</span>&quot;</span><br><br></code></pre></td></tr></table></figure><p>除了上面与环境变量类似的使用以外, vars 增强变量还支持动态定义; 常见的场景, 比如我们想每次 task 执行时都获取当前的 git commit id, 此时可以使用 vars 的动态定义特性:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">go</span> <span class="hljs-string">build</span> <span class="hljs-string">-ldflags=&quot;-X</span> <span class="hljs-string">main.Version=&#123;&#123;.GIT_COMMIT&#125;&#125;&quot;</span> <span class="hljs-string">main.go</span><br>    <span class="hljs-attr">vars:</span><br>      <span class="hljs-comment"># 每次任务执行时, GIT_COMMIT 都会调用 shell 命令来生成这个变量</span><br>      <span class="hljs-attr">GIT_COMMIT:</span><br>        <span class="hljs-attr">sh:</span> <span class="hljs-string">git</span> <span class="hljs-string">log</span> <span class="hljs-string">-n</span> <span class="hljs-number">1</span> <span class="hljs-string">--format=%h</span><br><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"></span><br><span class="language-xml">vars 变量还内置了一些特殊的预定义变量,例如 </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">.TASK</span>&#125;&#125;</span><span class="language-xml"> 变量永远表示当前的任务名称</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">.CLI_ARGS</span>&#125;&#125;</span><span class="language-xml"> 可以引用命令行输入等.</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">yarn:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">yarn</span> &#123;&#123;<span class="hljs-string">.CLI_ARGS</span>&#125;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">此时如果执行 task yarn --<span class="hljs-keyword">install</span>, 那么 &#123;&#123;.CLI_ARGS&#125;&#125; 值将会变成 <span class="hljs-keyword">install</span> 从而执行 yarn <span class="hljs-keyword">install</span> 命令.<br></code></pre></td></tr></table></figure><p>除此之外, vars 变量还具备一些其他特性, 比如跨任务引用时可进行覆盖传递等, 这些特性将会在后面介绍.</p><h3 id="执行目录"><a href="#执行目录" class="headerlink" title="执行目录"></a>执行目录</h3><p>Taskfile 内定义的 task 默认在当前目录下执行, 如果期望在其他目录执行, 无需手动编写 cd 等命令, 可以直接通过配置 dir 参数来设置执行目录:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">test1:</span><br>    <span class="hljs-attr">dir:</span> <span class="hljs-string">/tmp</span> <span class="hljs-comment"># 在指定目录执行</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;ls&quot;</span><br></code></pre></td></tr></table></figure><h3 id="任务依赖"><a href="#任务依赖" class="headerlink" title="任务依赖"></a>任务依赖</h3><p>在 CI 等环境的使用中, 我们常常需要定义任务的执行顺序和依赖关系; Taskfile 中通过 deps 配置来提供任务依赖关系的支持:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">build-jar:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;编译 jar 包...&quot;</span><br>  <span class="hljs-attr">build-static:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;编译前端 UI...&quot;</span><br>  <span class="hljs-attr">build-docker:</span><br>    <span class="hljs-attr">deps:</span> [<span class="hljs-string">build-jar</span>, <span class="hljs-string">build-static</span>]<br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;打包 docker 镜像...&quot;</span><br></code></pre></td></tr></table></figure><h3 id="任务调用"><a href="#任务调用" class="headerlink" title="任务调用"></a>任务调用</h3><p>当我们在 Taskfile 中定义了多个任务时, 很可能一些任务具有一定的相似性, 此时我们可以通过任务互相调用和 vars 变量动态覆盖的方式来定义模版 Task:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">docker:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-comment">#- docker build -t &#123;&#123;.IMAGE_NAME&#125;&#125; &#123;&#123;.BUILD_CONTEXT&#125;&#125;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> &#123;&#123;<span class="hljs-string">.IMAGE_NAME</span>&#125;&#125; &#123;&#123;<span class="hljs-string">.BUILD_CONTEXT</span>&#125;&#125;<br><br>  <span class="hljs-attr">build-backend:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">task:</span> <span class="hljs-string">docker</span> <span class="hljs-comment"># 引用其他 task</span><br>        <span class="hljs-attr">vars:</span> &#123; <span class="hljs-comment"># 动态传入变量</span><br>          <span class="hljs-attr">IMAGE_NAME:</span> <span class="hljs-string">&quot;backend&quot;</span>,<br>          <span class="hljs-attr">BUILD_CONTEXT:</span> <span class="hljs-string">&quot;maven/target&quot;</span><br>        &#125;<br><br>  <span class="hljs-attr">build-frontend:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">task:</span> <span class="hljs-string">docker</span><br>        <span class="hljs-attr">vars:</span> &#123;<br>          <span class="hljs-attr">IMAGE_NAME:</span> <span class="hljs-string">&quot;frontend&quot;</span>,<br>          <span class="hljs-attr">BUILD_CONTEXT:</span> <span class="hljs-string">&quot;public&quot;</span><br>        &#125;<br>  <span class="hljs-attr">default:</span> <span class="hljs-comment"># default 用于在命令行不显示输入任何 task 名称时调用</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">task:</span> <span class="hljs-string">build-backend</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">task:</span> <span class="hljs-string">build-frontend</span><br></code></pre></td></tr></table></figure><p><img src="/images/pasted-60.png" alt="upload successful"></p><h3 id="引入其他文件"><a href="#引入其他文件" class="headerlink" title="引入其他文件"></a>引入其他文件</h3><p>Taskfile 支持通过 includes 关键字来引入其他 Taskfile, 从而方便 Taskfile 的结构化处理.</p><p>需要注意的是, 由于引入的文件中可能会包含多特 task, 所以在使用时需要对引入的文件进行命名, 且通过命名引用目标 task:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">includes:</span><br>  <span class="hljs-attr">file1:</span> <span class="hljs-string">./file1.yaml</span> <span class="hljs-comment"># 直接引用 yaml 文件</span><br>  <span class="hljs-attr">dir2:</span> <span class="hljs-string">./dir2</span> <span class="hljs-comment"># 引用目录时默认引用该目录下的 Taskfile.yaml</span><br></code></pre></td></tr></table></figure><p><img src="/images/pasted-61.png" alt="upload successful"><br>在引入其他 Taskfile 时, 默认情况下会在当前主 Taskfile 目录下执行命令, 我们同样可以通过 dir 参数来控制引入的 Taskfile 内的 task 在特定目录下执行:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">includes:</span><br>  <span class="hljs-attr">dir1:</span> <span class="hljs-string">./dirtest.yaml</span> <span class="hljs-comment"># 直接在当前目录执行</span><br>  <span class="hljs-attr">dir2:</span><br>    <span class="hljs-attr">taskfile:</span> <span class="hljs-string">./dirtest.yaml</span><br>    <span class="hljs-attr">dir:</span> <span class="hljs-string">/tmp</span> <span class="hljs-comment"># 在指定目录执行</span><br></code></pre></td></tr></table></figure><p><img src="/images/pasted-62.png" alt="upload successful"></p><h3 id="defer-处理"><a href="#defer-处理" class="headerlink" title="defer 处理"></a>defer 处理</h3><p>熟悉 go 语言的同学应该知道, go 里面有个很方便的关键字 defer; 该指令用于定义在最终代码收尾时要执行的动作, 常见的比如资源清理等. Taskfile 中同样支持了该指令, 可以方便我们在任务执行期间完成一些清理操作:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">default:</span> <span class="hljs-comment"># default 用于在命令行不显示输入任何 task 名称时调用</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">wget</span> <span class="hljs-string">-q</span> <span class="hljs-string">https://github.com/containerd/nerdctl/releases/download/v0.19.0/nerdctl-full-0.19.0-linux-amd64.tar.gz</span><br>      <span class="hljs-comment"># 定义清理动作</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">defer:</span> <span class="hljs-string">rm</span> <span class="hljs-string">-f</span> <span class="hljs-string">nerdctl-full-0.19.0-linux-amd64.tar.gz</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">tar</span> <span class="hljs-string">-zxf</span> <span class="hljs-string">nerdctl-full-0.19.0-linux-amd64.tar.gz</span><br></code></pre></td></tr></table></figure><p><img src="/images/pasted-63.png" alt="upload successful"><br>当然, defer 指令除了直接写命令以外, 还可以引用其他 task 完成清理:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">cleanup:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">rm</span> <span class="hljs-string">-f</span> &#123;&#123;<span class="hljs-string">.FILE</span>&#125;&#125;<br>  <span class="hljs-attr">default:</span> <span class="hljs-comment"># default 用于在命令行不显示输入任何 task 名称时调用</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">wget</span> <span class="hljs-string">-q</span> <span class="hljs-string">https://github.com/containerd/nerdctl/releases/download/v0.19.0/nerdctl-full-0.19.0-linux-amd64.tar.gz</span><br>      <span class="hljs-comment"># 引用其他 task 进行清理, 同时也可以传递动态变量</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">defer:</span> &#123;<span class="hljs-attr">task:</span> <span class="hljs-string">cleanup</span>, <span class="hljs-attr">vars:</span> &#123;<span class="hljs-attr">FILE:</span> <span class="hljs-string">nerdctl-full-0.19.0-linux-amd64.tar.gz</span>&#125;&#125;<br>      <span class="hljs-bullet">-</span> <span class="hljs-string">tar</span> <span class="hljs-string">-zxf</span> <span class="hljs-string">nerdctl-full-0.19.0-linux-amd64.tar.gz</span><br></code></pre></td></tr></table></figure><h2 id="4-高级应用"><a href="#4-高级应用" class="headerlink" title="4. 高级应用"></a>4. 高级应用</h2><h3 id="动态检测"><a href="#动态检测" class="headerlink" title="动态检测"></a>动态检测</h3><h4 id="输出检测"><a href="#输出检测" class="headerlink" title="输出检测"></a>输出检测</h4><p>在某些时候, 一些任务我们可能期望进行缓存处理, 比如说已经下载好了文件就不要重复运行下载; 针对于这种需求, Taskfile 允许我们定义源文件和生成的文件, 通过这组文件的 hash 值来确定是否需要执行该任务:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">default:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">wget</span> <span class="hljs-string">-q</span> <span class="hljs-string">https://github.com/containerd/nerdctl/releases/download/v0.19.0/nerdctl-full-0.19.0-linux-amd64.tar.gz</span><br>    <span class="hljs-attr">sources:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">testfile</span><br>    <span class="hljs-attr">generates:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">nerdctl-full-0.19.0-linux-amd64.tar.gz</span><br></code></pre></td></tr></table></figure><p><img src="/images/pasted-64.png" alt="upload successful"></p><p>从上图中可以看到, 当首次执行任务时会生成 .task 目录, 该目录包含文件的 hash 值; 当重复执行任务时, 如果 hash 值不改变则真实任务不会真正执行. Taskfile 默认有两种文件检测的方式: checksum、timestamp, checksum 执行文件的 hash 检测(默认), 该模式只需要定义 sources 配置; timestamp 执行文件的时间戳检测, 该模式需要同时定义 sources 和 generates 配置.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">go</span> <span class="hljs-string">build</span> <span class="hljs-string">.</span><br>    <span class="hljs-attr">sources:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./*.go</span><br>    <span class="hljs-attr">generates:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">app&#123;&#123;exeExt&#125;&#125;</span><br>    <span class="hljs-attr">method:</span> <span class="hljs-string">checksum</span> <span class="hljs-comment"># 指定检测方式</span><br></code></pre></td></tr></table></figure><p>除了内置的两种检测模式外, 我们还可以通过 status 配置来定义自己的检测命令, 如果命令执行结果为 0, 则认为文件是最新的, 不需要执行任务:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">generate-files:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">mkdir</span> <span class="hljs-string">directory</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">touch</span> <span class="hljs-string">directory/file1.txt</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">touch</span> <span class="hljs-string">directory/file2.txt</span><br>    <span class="hljs-comment"># test existence of files</span><br>    <span class="hljs-attr">status:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">test</span> <span class="hljs-string">-d</span> <span class="hljs-string">directory</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">test</span> <span class="hljs-string">-f</span> <span class="hljs-string">directory/file1.txt</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">test</span> <span class="hljs-string">-f</span> <span class="hljs-string">directory/file2.txt</span><br></code></pre></td></tr></table></figure><h4 id="输入检测"><a href="#输入检测" class="headerlink" title="输入检测"></a>输入检测</h4><p>上面的输出检测用于检测任务生成的文件结果等, 在某些情况下我们可能期望在运行任务之前来判断某个条件, 在完全不执行的情况下确定任务是否需要运行; 此时我们可以使用 preconditions 配置指令:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">generate-files:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">mkdir</span> <span class="hljs-string">directory</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">touch</span> <span class="hljs-string">directory/file1.txt</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">touch</span> <span class="hljs-string">directory/file2.txt</span><br>    <span class="hljs-comment"># test existence of files</span><br>    <span class="hljs-attr">preconditions:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">test</span> <span class="hljs-string">-f</span> <span class="hljs-string">.env</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">sh:</span> <span class="hljs-string">&quot;[ 1 = 0 ]&quot;</span><br>        <span class="hljs-attr">msg:</span> <span class="hljs-string">&quot;One doesn&#x27;t equal Zero, Halting&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Go-模版引擎"><a href="#Go-模版引擎" class="headerlink" title="Go 模版引擎"></a>Go 模版引擎</h3><p>在上面变量环节中已经展示了一部分模版引擎的使用, 实际上 Taskfile 内集成了 slim-sprig[1] 库, 该库中提供了一些比较便利的方法, 这些方法都可以在模版引擎内使用:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">print-date:</span><br>    <span class="hljs-attr">cmds:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> &#123;&#123;<span class="hljs-string">now</span> <span class="hljs-string">|</span> <span class="hljs-string">date</span> <span class="hljs-string">&quot;2006-01-02&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p>关于这些方法和模版引擎的使用具体请参考 Go Template 相关文档以及 slim-sprig[2] 文档.</p><h3 id="交互式终端"><a href="#交互式终端" class="headerlink" title="交互式终端"></a>交互式终端</h3><p>有些任务命令可能需要交互式终端来执行, 此时可以为 task 设置 interactive 选项; 当 interactive 设置为 true 时, task 在运行时可以打开交互式终端：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">tasks:</span><br>  <span class="hljs-attr">cmds:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">vim</span> <span class="hljs-string">my-file.txt</span><br>  <span class="hljs-attr">interactive:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>更多关于 Taskfile 的细节使用请阅读其官方文档[3], 本文限于篇幅不在过多阐述。</p><h3 id="引用链接"><a href="#引用链接" class="headerlink" title="引用链接"></a>引用链接</h3><p>slim-sprig: <a href="https://go-task.github.io/slim-sprig/">https://go-task.github.io/slim-sprig/</a></p><p>slim-sprig: <a href="https://go-task.github.io/slim-sprig/">https://go-task.github.io/slim-sprig/</a></p><p>官方文档: <a href="https://taskfile.dev/">https://taskfile.dev/</a></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用lsof恢复rm -rf删除后的文件</title>
    <link href="/2022/07/16/%E4%BD%BF%E7%94%A8lsof%E6%81%A2%E5%A4%8Drm%20-rf%E5%88%A0%E9%99%A4%E5%90%8E%E7%9A%84%E6%96%87%E4%BB%B6/"/>
    <url>/2022/07/16/%E4%BD%BF%E7%94%A8lsof%E6%81%A2%E5%A4%8Drm%20-rf%E5%88%A0%E9%99%A4%E5%90%8E%E7%9A%84%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="使用lsof恢复rm-rf删除后的文件"><a href="#使用lsof恢复rm-rf删除后的文件" class="headerlink" title="使用lsof恢复rm -rf删除后的文件"></a>使用lsof恢复rm -rf删除后的文件</h1><p>简介：</p><p>  在Linux系统中使用rm -rf删除文件后，其实文件只是从磁盘中移除，文件内容还是在系统后台等待回收，此时可以使用系统进程号将文件考贝出来，内容不会有更改。</p><p>1.删除一个文件</p><p>[root@iZ62f427er8Z logs]# ll access.log<br>-rw-r–r– 1 root root 11723908 Jun 14 16:02 access.log<br>[root@iZ62f427er8Z logs]# rm -rf access.log </p><p>2.查看文件在后台的进程<br>[root@iZ62f427er8Z logs]# lsof | grep delete | grep access<br>nginx   1212  root  9u  REG 202,1  11723908  274125 &#x2F;usr&#x2F;local&#x2F;nginx-1.4.7&#x2F;logs&#x2F;access.log (deleted)<br>nginx   12953   www  9w  REG 202,1  11723908  274125 &#x2F;usr&#x2F;local&#x2F;nginx-1.4.7&#x2F;logs&#x2F;access.log (deleted)<br>nginx   12954  www 9w  REG   202,1  11723908   274125 &#x2F;usr&#x2F;local&#x2F;nginx-1.4.7&#x2F;logs&#x2F;access.log (deleted)<br>[root@iZ62f427er8Z logs]# </p><p>3.将文件从进程中复制到磁盘上</p><p>[root@iZ62f427er8Z logs]# cp &#x2F;proc&#x2F;12953&#x2F;fd&#x2F;9 .   #12953是进程号,9是文件描述符<br>[root@iZ62f427er8Z logs]# du -sh 9<br>12M   9<br>[root@iZ62f427er8Z logs]# cat 9    #文件内容看到了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>openebs 安装</title>
    <link href="/2022/07/14/openebs%20%E5%AE%89%E8%A3%85/"/>
    <url>/2022/07/14/openebs%20%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="openebs-安装"><a href="#openebs-安装" class="headerlink" title="openebs 安装"></a>openebs 安装</h1><h2 id="helm安装"><a href="#helm安装" class="headerlink" title="helm安装"></a>helm安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">helm install --name openebs -f  /etc/kubernetes/addons/helm/openebs-helm-value.yml  --namespace kube-system  /etc/ecos/charts/stableopenebs/<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs yaml"> <span class="hljs-string">cat</span>  <span class="hljs-string">/etc/kubernetes/addons/helm/openebs-helm-value.yml</span><br><span class="hljs-comment"># Default values for openebs.</span><br><span class="hljs-comment"># This is a YAML-formatted file.</span><br><span class="hljs-comment"># Declare variables to be passed into your templates.</span><br><br><span class="hljs-attr">rbac:</span><br>  <span class="hljs-comment"># Specifies whether RBAC resources should be created</span><br>  <span class="hljs-attr">create:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">pspEnabled:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">serviceAccount:</span><br>  <span class="hljs-attr">create:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">name:</span><br><br><span class="hljs-attr">release:</span><br>  <span class="hljs-comment"># &quot;openebs.io/version&quot; label for control plane components</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-string">&quot;1.9.0&quot;</span><br><br><span class="hljs-attr">image:</span><br>  <span class="hljs-attr">pullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br><br><span class="hljs-attr">apiserver:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;registry.cluster.local:30443/openebs/m-apiserver-amd64&quot;</span><br>  <span class="hljs-attr">imageTag:</span> <span class="hljs-string">&quot;1.9.0&quot;</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-attr">externalPort:</span> <span class="hljs-number">5656</span><br>    <span class="hljs-attr">internalPort:</span> <span class="hljs-number">5656</span><br>  <span class="hljs-attr">sparse:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-string">&quot;false&quot;</span><br>  <span class="hljs-attr">nodeSelector:</span> &#123;&#125;<br>  <span class="hljs-attr">tolerations:</span> []<br>  <span class="hljs-attr">affinity:</span> &#123;&#125;<br>  <span class="hljs-attr">healthCheck:</span><br>    <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">30</span><br>    <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">60</span><br><br><span class="hljs-attr">defaultStorageConfig:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-string">&quot;true&quot;</span><br><br><span class="hljs-comment"># Directory used by the OpenEBS to store debug information and so forth</span><br><span class="hljs-comment"># that are generated in the course of running OpenEBS containers.</span><br><span class="hljs-attr">varDirectoryPath:</span><br>  <span class="hljs-attr">baseDir:</span> <span class="hljs-string">&quot;/var/openebs&quot;</span><br><br><span class="hljs-attr">provisioner:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;registry.cluster.local:30443/openebs/openebs-k8s-provisioner-amd64&quot;</span><br>  <span class="hljs-attr">imageTag:</span> <span class="hljs-string">&quot;1.9.0&quot;</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">nodeSelector:</span> &#123;&#125;<br>  <span class="hljs-attr">tolerations:</span> []<br>  <span class="hljs-attr">affinity:</span> &#123;&#125;<br>  <span class="hljs-attr">healthCheck:</span><br>    <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">30</span><br>    <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">60</span><br><br><span class="hljs-attr">localprovisioner:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;registry.cluster.local:30443/openebs/provisioner-localpv-amd64&quot;</span><br>  <span class="hljs-attr">imageTag:</span> <span class="hljs-string">&quot;1.9.0&quot;</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">basePath:</span> <span class="hljs-string">&quot;/var/openebs/local&quot;</span><br>  <span class="hljs-attr">nodeSelector:</span> &#123;&#125;<br>  <span class="hljs-attr">tolerations:</span> []<br>  <span class="hljs-attr">affinity:</span> &#123;&#125;<br>  <span class="hljs-attr">healthCheck:</span><br>    <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">30</span><br>    <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">60</span><br><br><span class="hljs-attr">snapshotOperator:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">controller:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;registry.cluster.local:30443/openebs/snapshot-controller-amd64&quot;</span><br>    <span class="hljs-attr">imageTag:</span> <span class="hljs-string">&quot;1.9.0&quot;</span><br>  <span class="hljs-attr">provisioner:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;registry.cluster.local:30443/openebs/snapshot-provisioner-amd64&quot;</span><br>    <span class="hljs-attr">imageTag:</span> <span class="hljs-string">&quot;1.9.0&quot;</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">upgradeStrategy:</span> <span class="hljs-string">&quot;Recreate&quot;</span><br>  <span class="hljs-attr">nodeSelector:</span> &#123;&#125;<br>  <span class="hljs-attr">tolerations:</span> []<br>  <span class="hljs-attr">affinity:</span> &#123;&#125;<br>  <span class="hljs-attr">healthCheck:</span><br>    <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">30</span><br>    <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">60</span><br><br><span class="hljs-attr">ndm:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;registry.cluster.local:30443/openebs/node-disk-manager-amd64&quot;</span><br>  <span class="hljs-attr">imageTag:</span> <span class="hljs-string">&quot;v0.4.9&quot;</span><br>  <span class="hljs-attr">sparse:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">&quot;/var/openebs/sparse&quot;</span><br>    <span class="hljs-attr">size:</span> <span class="hljs-string">&quot;10737418240&quot;</span><br>    <span class="hljs-attr">count:</span> <span class="hljs-string">&quot;0&quot;</span><br>  <span class="hljs-attr">filters:</span><br>    <span class="hljs-attr">excludeVendors:</span> <span class="hljs-string">&quot;CLOUDBYT,OpenEBS&quot;</span><br>    <span class="hljs-attr">includePaths:</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-attr">excludePaths:</span> <span class="hljs-string">&quot;loop,fd0,sr0,/dev/ram,/dev/dm-,/dev/md&quot;</span><br>  <span class="hljs-attr">probes:</span><br>    <span class="hljs-attr">enableSeachest:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">nodeSelector:</span> &#123;&#125;<br>  <span class="hljs-attr">tolerations:</span> []<br>  <span class="hljs-attr">healthCheck:</span><br>    <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">30</span><br>    <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">60</span><br><br><span class="hljs-attr">ndmOperator:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;registry.cluster.local:30443/openebs/node-disk-operator-amd64&quot;</span><br>  <span class="hljs-attr">imageTag:</span> <span class="hljs-string">&quot;v0.4.9&quot;</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">upgradeStrategy:</span> <span class="hljs-string">Recreate</span><br>  <span class="hljs-attr">nodeSelector:</span> &#123;&#125;<br>  <span class="hljs-attr">tolerations:</span> []<br>  <span class="hljs-attr">healthCheck:</span><br>    <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">30</span><br>    <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">readinessCheck:</span><br>    <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">4</span><br>    <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span><br>    <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">1</span><br><br><span class="hljs-attr">webhook:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;registry.cluster.local:30443/openebs/admission-server-amd64&quot;</span><br>  <span class="hljs-attr">imageTag:</span> <span class="hljs-string">&quot;1.9.0&quot;</span><br>  <span class="hljs-attr">failurePolicy:</span> <span class="hljs-string">Ignore</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">healthCheck:</span><br>    <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">30</span><br>    <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">nodeSelector:</span> &#123;&#125;<br>  <span class="hljs-attr">tolerations:</span> []<br>  <span class="hljs-attr">affinity:</span> &#123;&#125;<br><br><span class="hljs-attr">jiva:</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;registry.cluster.local:30443/openebs/jiva-amd64&quot;</span><br>  <span class="hljs-attr">imageTag:</span> <span class="hljs-string">&quot;1.9.0&quot;</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">defaultStoragePath:</span> <span class="hljs-string">&quot;/var/openebs&quot;</span><br><br><span class="hljs-attr">cstor:</span><br>  <span class="hljs-attr">pool:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;registry.cluster.local:30443/openebs/cstor-pool-amd64&quot;</span><br>    <span class="hljs-attr">imageTag:</span> <span class="hljs-string">&quot;1.9.0&quot;</span><br>  <span class="hljs-attr">poolMgmt:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;registry.cluster.local:30443/openebs/cstor-pool-mgmt-amd64&quot;</span><br>    <span class="hljs-attr">imageTag:</span> <span class="hljs-string">&quot;1.9.0&quot;</span><br>  <span class="hljs-attr">target:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;registry.cluster.local:30443/openebs/cstor-istgt-amd64&quot;</span><br>    <span class="hljs-attr">imageTag:</span> <span class="hljs-string">&quot;1.9.0&quot;</span><br>  <span class="hljs-attr">volumeMgmt:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;registry.cluster.local:30443/openebs/cstor-volume-mgmt-amd64&quot;</span><br>    <span class="hljs-attr">imageTag:</span> <span class="hljs-string">&quot;1.9.0&quot;</span><br><br><span class="hljs-attr">helper:</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;registry.cluster.local:30443/openebs/linux-utils-amd64&quot;</span><br>  <span class="hljs-attr">imageTag:</span> <span class="hljs-string">&quot;1.9.0&quot;</span><br><br><span class="hljs-attr">policies:</span><br>  <span class="hljs-attr">monitoring:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;registry.cluster.local:30443/openebs/m-exporter-amd64&quot;</span><br>    <span class="hljs-attr">imageTag:</span> <span class="hljs-string">&quot;1.9.0&quot;</span><br><br><span class="hljs-attr">analytics:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># Specify in hours the duration after which a ping event needs to be sent.</span><br>  <span class="hljs-attr">pingInterval:</span> <span class="hljs-string">&quot;24h&quot;</span><br><br></code></pre></td></tr></table></figure><h2 id="设置默认存储"><a href="#设置默认存储" class="headerlink" title="设置默认存储"></a>设置默认存储</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"> kubectl patch storageclass openebs-hostpath  -p <span class="hljs-string">&#x27;&#123;&quot;metadata&quot;: &#123;&quot;annotations&quot;:&#123;&quot;storageclass.kubernetes.io/is-default-class&quot;:&quot;true&quot;&#125;&#125;&#125;&#x27;</span><br>storageclass.storage.k8s.io/openebs-hostpath patched<br></code></pre></td></tr></table></figure><h2 id="配置存储类型"><a href="#配置存储类型" class="headerlink" title="配置存储类型"></a>配置存储类型</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">kubectl label sc openebs-hostpath  ghostcloud.cn/<span class="hljs-keyword">storage</span>-<span class="hljs-keyword">type</span>=<span class="hljs-keyword">local</span> <span class="hljs-comment">--overwrite</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ansible 模块</title>
    <link href="/2022/07/14/ansible-%E6%A8%A1%E5%9D%97/"/>
    <url>/2022/07/14/ansible-%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="ansible-模块"><a href="#ansible-模块" class="headerlink" title="ansible 模块"></a>ansible 模块</h1><h2 id="lvol"><a href="#lvol" class="headerlink" title="lvol"></a>lvol</h2><p>LVOL    (&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;ansible&#x2F;modules&#x2F;system&#x2F;lvol.py)</p><p>This module creates, removes or resizes logical volumes.</p><ul><li>This module is maintained by The Ansible Community<br>OPTIONS (&#x3D; is mandatory):</li></ul><ul><li><p>active<br>  Whether the volume is activate and visible to the host.<br>  [Default: yes]<br>  type: bool<br>  version_added: 2.2</p></li><li><p>force<br>  Shrink or remove operations of volumes requires this switch. Ensures that that filesystems get never corrupted&#x2F;destroyed by<br>  mistake.<br>  [Default: no]<br>  type: bool<br>  version_added: 1.5</p></li><li><p>lv<br>  The name of the logical volume.<br>  [Default: (null)]</p></li><li><p>opts<br>  Free-form options to be passed to the lvcreate command.<br>  [Default: (null)]<br>  version_added: 2.0</p></li><li><p>pvs<br>  Comma separated list of physical volumes (e.g. &#x2F;dev&#x2F;sda,&#x2F;dev&#x2F;sdb).<br>  [Default: (null)]<br>  version_added: 2.2</p></li><li><p>resizefs<br>  Resize the underlying filesystem together with the logical volume.<br>  [Default: no]<br>  type: bool<br>  version_added: 2.5</p></li><li><p>shrink<br>  Shrink if current size is higher than size requested.<br>  [Default: yes]<br>  type: bool<br>  version_added: 2.2</p></li><li><p>size<br>  The size of the logical volume, according to lvcreate(8) –size, by default in megabytes or optionally with one of<br>  [bBsSkKmMgGtTpPeE] units; or according to lvcreate(8) –extents as a percentage of [VG|PVS|FREE]; Float values must begin<br>  with a digit. Resizing using percentage values was not supported prior to 2.1.<br>  [Default: (null)]</p></li><li><p>snapshot<br>  The name of the snapshot volume<br>  [Default: (null)]<br>  version_added: 2.1</p></li><li><p>state<br>  Control if the logical volume exists. If <code>present&#39; and the volume does not already exist then the </code>size’ option is required.<br>  (Choices: absent, present)[Default: present]</p></li><li><p>thinpool<br>  The thin pool volume name. When you want to create a thin provisioned volume, specify a thin pool volume name.<br>  [Default: (null)]<br>  version_added: 2.5</p></li><li><p>vg<br>  The volume group this logical volume is part of.<br>  [Default: (null)]</p></li></ul><p>NOTES:<br>      * You must specify lv (when managing the state of logical volumes) or thinpool (when managing a thin provisioned<br>        volume).</p><p>AUTHOR: Jeroen Hoekx (@jhoekx), Alexander Bulimov (@abulimov)<br>        METADATA:<br>          status:<br>          - preview<br>          supported_by: community</p><h3 id="EXAMPLES"><a href="#EXAMPLES" class="headerlink" title="EXAMPLES"></a>EXAMPLES</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Create</span> <span class="hljs-string">a</span> <span class="hljs-string">logical</span> <span class="hljs-string">volume</span> <span class="hljs-string">of</span> <span class="hljs-string">512m</span><br>  <span class="hljs-attr">lvol:</span><br>    <span class="hljs-attr">vg:</span> <span class="hljs-string">firefly</span><br>    <span class="hljs-attr">lv:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">size:</span> <span class="hljs-number">512</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Create</span> <span class="hljs-string">a</span> <span class="hljs-string">logical</span> <span class="hljs-string">volume</span> <span class="hljs-string">of</span> <span class="hljs-string">512m</span> <span class="hljs-string">with</span> <span class="hljs-string">disks</span> <span class="hljs-string">/dev/sda</span> <span class="hljs-string">and</span> <span class="hljs-string">/dev/sdb</span><br>  <span class="hljs-attr">lvol:</span><br>    <span class="hljs-attr">vg:</span> <span class="hljs-string">firefly</span><br>    <span class="hljs-attr">lv:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">size:</span> <span class="hljs-number">512</span><br>    <span class="hljs-attr">pvs:</span> <span class="hljs-string">/dev/sda,/dev/sdb</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Create</span> <span class="hljs-string">cache</span> <span class="hljs-string">pool</span> <span class="hljs-string">logical</span> <span class="hljs-string">volume</span><br>  <span class="hljs-attr">lvol:</span><br>    <span class="hljs-attr">vg:</span> <span class="hljs-string">firefly</span><br>    <span class="hljs-attr">lv:</span> <span class="hljs-string">lvcache</span><br>    <span class="hljs-attr">size:</span> <span class="hljs-string">512m</span><br>    <span class="hljs-attr">opts:</span> <span class="hljs-string">--type</span> <span class="hljs-string">cache-pool</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Create</span> <span class="hljs-string">a</span> <span class="hljs-string">logical</span> <span class="hljs-string">volume</span> <span class="hljs-string">of</span> <span class="hljs-string">512g.</span><br>  <span class="hljs-attr">lvol:</span><br>    <span class="hljs-attr">vg:</span> <span class="hljs-string">firefly</span><br>    <span class="hljs-attr">lv:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">size:</span> <span class="hljs-string">512g</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Create</span> <span class="hljs-string">a</span> <span class="hljs-string">logical</span> <span class="hljs-string">volume</span> <span class="hljs-string">the</span> <span class="hljs-string">size</span> <span class="hljs-string">of</span> <span class="hljs-string">all</span> <span class="hljs-string">remaining</span> <span class="hljs-string">space</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">volume</span> <span class="hljs-string">group</span><br>  <span class="hljs-attr">lvol:</span><br>    <span class="hljs-attr">vg:</span> <span class="hljs-string">firefly</span><br>    <span class="hljs-attr">lv:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">size:</span> <span class="hljs-number">100</span><span class="hljs-string">%FREE</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Create</span> <span class="hljs-string">a</span> <span class="hljs-string">logical</span> <span class="hljs-string">volume</span> <span class="hljs-string">with</span> <span class="hljs-string">special</span> <span class="hljs-string">options</span><br>  <span class="hljs-attr">lvol:</span><br>    <span class="hljs-attr">vg:</span> <span class="hljs-string">firefly</span><br>    <span class="hljs-attr">lv:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">size:</span> <span class="hljs-string">512g</span><br>    <span class="hljs-attr">opts:</span> <span class="hljs-string">-r</span> <span class="hljs-number">16</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Extend</span> <span class="hljs-string">the</span> <span class="hljs-string">logical</span> <span class="hljs-string">volume</span> <span class="hljs-string">to</span> <span class="hljs-string">1024m.</span><br>  <span class="hljs-attr">lvol:</span><br>    <span class="hljs-attr">vg:</span> <span class="hljs-string">firefly</span><br>    <span class="hljs-attr">lv:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">size:</span> <span class="hljs-number">1024</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Extend</span> <span class="hljs-string">the</span> <span class="hljs-string">logical</span> <span class="hljs-string">volume</span> <span class="hljs-string">to</span> <span class="hljs-string">consume</span> <span class="hljs-string">all</span> <span class="hljs-string">remaining</span> <span class="hljs-string">space</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">volume</span> <span class="hljs-string">group</span><br>  <span class="hljs-attr">lvol:</span><br>    <span class="hljs-attr">vg:</span> <span class="hljs-string">firefly</span><br>    <span class="hljs-attr">lv:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">size:</span> <span class="hljs-string">+100%FREE</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Extend</span> <span class="hljs-string">the</span> <span class="hljs-string">logical</span> <span class="hljs-string">volume</span> <span class="hljs-string">to</span> <span class="hljs-string">take</span> <span class="hljs-string">all</span> <span class="hljs-string">remaining</span> <span class="hljs-string">space</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">PVs</span> <span class="hljs-string">and</span> <span class="hljs-string">resize</span> <span class="hljs-string">the</span> <span class="hljs-string">underlying</span> <span class="hljs-string">filesystem</span><br>  <span class="hljs-attr">lvol:</span><br>    <span class="hljs-attr">vg:</span> <span class="hljs-string">firefly</span><br>    <span class="hljs-attr">lv:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">size:</span> <span class="hljs-number">100</span><span class="hljs-string">%PVS</span><br>    <span class="hljs-attr">resizefs:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Resize</span> <span class="hljs-string">the</span> <span class="hljs-string">logical</span> <span class="hljs-string">volume</span> <span class="hljs-string">to</span> <span class="hljs-string">%</span> <span class="hljs-string">of</span> <span class="hljs-string">VG</span><br>  <span class="hljs-attr">lvol:</span><br>    <span class="hljs-attr">vg:</span> <span class="hljs-string">firefly</span><br>    <span class="hljs-attr">lv:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">size:</span> <span class="hljs-number">80</span><span class="hljs-string">%VG</span><br>    <span class="hljs-attr">force:</span> <span class="hljs-literal">yes</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Reduce</span> <span class="hljs-string">the</span> <span class="hljs-string">logical</span> <span class="hljs-string">volume</span> <span class="hljs-string">to</span> <span class="hljs-string">512m</span><br>  <span class="hljs-attr">lvol:</span><br>    <span class="hljs-attr">vg:</span> <span class="hljs-string">firefly</span><br>    <span class="hljs-attr">lv:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">size:</span> <span class="hljs-number">512</span><br>    <span class="hljs-attr">force:</span> <span class="hljs-literal">yes</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Set</span> <span class="hljs-string">the</span> <span class="hljs-string">logical</span> <span class="hljs-string">volume</span> <span class="hljs-string">to</span> <span class="hljs-string">512m</span> <span class="hljs-string">and</span> <span class="hljs-string">do</span> <span class="hljs-string">not</span> <span class="hljs-string">try</span> <span class="hljs-string">to</span> <span class="hljs-string">shrink</span> <span class="hljs-string">if</span> <span class="hljs-string">size</span> <span class="hljs-string">is</span> <span class="hljs-string">lower</span> <span class="hljs-string">than</span> <span class="hljs-string">current</span> <span class="hljs-string">one</span><br>  <span class="hljs-attr">lvol:</span><br>    <span class="hljs-attr">vg:</span> <span class="hljs-string">firefly</span><br>    <span class="hljs-attr">lv:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">size:</span> <span class="hljs-number">512</span><br>    <span class="hljs-attr">shrink:</span> <span class="hljs-literal">no</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Remove</span> <span class="hljs-string">the</span> <span class="hljs-string">logical</span> <span class="hljs-string">volume.</span><br>  <span class="hljs-attr">lvol:</span><br>    <span class="hljs-attr">vg:</span> <span class="hljs-string">firefly</span><br>    <span class="hljs-attr">lv:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">state:</span> <span class="hljs-string">absent</span><br>    <span class="hljs-attr">force:</span> <span class="hljs-literal">yes</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Create</span> <span class="hljs-string">a</span> <span class="hljs-string">snapshot</span> <span class="hljs-string">volume</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">test</span> <span class="hljs-string">logical</span> <span class="hljs-string">volume.</span><br>  <span class="hljs-attr">lvol:</span><br>    <span class="hljs-attr">vg:</span> <span class="hljs-string">firefly</span><br>    <span class="hljs-attr">lv:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">snapshot:</span> <span class="hljs-string">snap1</span><br>    <span class="hljs-attr">size:</span> <span class="hljs-string">100m</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deactivate</span> <span class="hljs-string">a</span> <span class="hljs-string">logical</span> <span class="hljs-string">volume</span><br>  <span class="hljs-attr">lvol:</span><br>    <span class="hljs-attr">vg:</span> <span class="hljs-string">firefly</span><br>    <span class="hljs-attr">lv:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Create</span> <span class="hljs-string">a</span> <span class="hljs-string">deactivated</span> <span class="hljs-string">logical</span> <span class="hljs-string">volume</span><br>  <span class="hljs-attr">lvol:</span><br>    <span class="hljs-attr">vg:</span> <span class="hljs-string">firefly</span><br>    <span class="hljs-attr">lv:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">size:</span> <span class="hljs-string">512g</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Create</span> <span class="hljs-string">a</span> <span class="hljs-string">thin</span> <span class="hljs-string">pool</span> <span class="hljs-string">of</span> <span class="hljs-string">512g</span><br>  <span class="hljs-attr">lvol:</span><br>    <span class="hljs-attr">vg:</span> <span class="hljs-string">firefly</span><br>    <span class="hljs-attr">thinpool:</span> <span class="hljs-string">testpool</span><br>    <span class="hljs-attr">size:</span> <span class="hljs-string">512g</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Create</span> <span class="hljs-string">a</span> <span class="hljs-string">thin</span> <span class="hljs-string">volume</span> <span class="hljs-string">of</span> <span class="hljs-string">128g</span><br>  <span class="hljs-attr">lvol:</span><br>    <span class="hljs-attr">vg:</span> <span class="hljs-string">firefly</span><br>    <span class="hljs-attr">lv:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">thinpool:</span> <span class="hljs-string">testpool</span><br>    <span class="hljs-attr">size:</span> <span class="hljs-string">128g</span><br><br></code></pre></td></tr></table></figure><h2 id="linefile"><a href="#linefile" class="headerlink" title="linefile"></a>linefile</h2><p>EXAMPLES:</p><p><strong>NOTE: Before 2.3, option ‘dest’, ‘destfile’ or ‘name’ was used instead of ‘path’</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Ensure</span> <span class="hljs-string">SELinux</span> <span class="hljs-string">is</span> <span class="hljs-string">set</span> <span class="hljs-string">to</span> <span class="hljs-string">enforcing</span> <span class="hljs-string">mode</span><br>    <span class="hljs-attr">lineinfile:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/selinux/config</span><br>      <span class="hljs-attr">regexp:</span> <span class="hljs-string">&#x27;^SELINUX=&#x27;</span><br>    <span class="hljs-attr">line:</span> <span class="hljs-string">SELINUX=enforcing</span><br>  <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Make</span> <span class="hljs-string">sure</span> <span class="hljs-string">group</span> <span class="hljs-string">wheel</span> <span class="hljs-string">is</span> <span class="hljs-string">not</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">sudoers</span> <span class="hljs-string">configuration</span><br>    <span class="hljs-attr">lineinfile:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/sudoers</span><br>      <span class="hljs-attr">state:</span> <span class="hljs-string">absent</span><br>      <span class="hljs-attr">regexp:</span> <span class="hljs-string">&#x27;^%wheel&#x27;</span><br>  <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Replace</span> <span class="hljs-string">a</span> <span class="hljs-string">localhost</span> <span class="hljs-string">entry</span> <span class="hljs-string">with</span> <span class="hljs-string">our</span> <span class="hljs-string">own</span><br>    <span class="hljs-attr">lineinfile:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/hosts</span><br>      <span class="hljs-attr">regexp:</span> <span class="hljs-string">&#x27;^127\.0\.0\.1&#x27;</span><br>      <span class="hljs-attr">line:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-string">localhost</span><br>      <span class="hljs-attr">owner:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">group:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">mode:</span> <span class="hljs-string">&#x27;0644&#x27;</span><br>  <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Ensure</span> <span class="hljs-string">the</span> <span class="hljs-string">default</span> <span class="hljs-string">Apache</span> <span class="hljs-string">port</span> <span class="hljs-string">is</span> <span class="hljs-number">8080</span><br>    <span class="hljs-attr">lineinfile:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/httpd/conf/httpd.conf</span><br>      <span class="hljs-attr">regexp:</span> <span class="hljs-string">&#x27;^Listen &#x27;</span><br>      <span class="hljs-attr">insertafter:</span> <span class="hljs-string">&#x27;^#Listen &#x27;</span><br>      <span class="hljs-attr">line:</span> <span class="hljs-string">Listen</span> <span class="hljs-number">8080</span><br>  <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Ensure</span> <span class="hljs-string">we</span> <span class="hljs-string">have</span> <span class="hljs-string">our</span> <span class="hljs-string">own</span> <span class="hljs-string">comment</span> <span class="hljs-string">added</span> <span class="hljs-string">to</span> <span class="hljs-string">/etc/services</span><br>    <span class="hljs-attr">lineinfile:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/services</span><br>      <span class="hljs-attr">regexp:</span> <span class="hljs-string">&#x27;^# port for http&#x27;</span><br>      <span class="hljs-attr">insertbefore:</span> <span class="hljs-string">&#x27;^www.*80/tcp&#x27;</span><br>      <span class="hljs-attr">line:</span> <span class="hljs-string">&#x27;# port for http by default&#x27;</span><br>  <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Add</span> <span class="hljs-string">a</span> <span class="hljs-string">line</span> <span class="hljs-string">to</span> <span class="hljs-string">a</span> <span class="hljs-string">file</span> <span class="hljs-string">if</span> <span class="hljs-string">the</span> <span class="hljs-string">file</span> <span class="hljs-string">does</span> <span class="hljs-string">not</span> <span class="hljs-string">exist,</span> <span class="hljs-string">without</span> <span class="hljs-string">passing</span> <span class="hljs-string">regexp</span><br>    <span class="hljs-attr">lineinfile:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/tmp/testfile</span><br>      <span class="hljs-attr">line:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.99</span> <span class="hljs-string">foo.lab.net</span> <span class="hljs-string">foo</span><br>      <span class="hljs-attr">create:</span> <span class="hljs-literal">yes</span><br><br><br>  <br><br><span class="hljs-attr">NOTE:</span> <span class="hljs-string">Yaml</span> <span class="hljs-string">requires</span> <span class="hljs-string">escaping</span> <span class="hljs-string">backslashes</span> <span class="hljs-string">in</span> <span class="hljs-string">double</span> <span class="hljs-string">quotes</span> <span class="hljs-string">but</span> <span class="hljs-string">not</span> <span class="hljs-string">in</span> <span class="hljs-string">single</span> <span class="hljs-string">quotes</span><br><br><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">Ensure</span> <span class="hljs-string">the</span> <span class="hljs-string">JBoss</span> <span class="hljs-string">memory</span> <span class="hljs-string">settings</span> <span class="hljs-string">are</span> <span class="hljs-string">exactly</span> <span class="hljs-string">as</span> <span class="hljs-string">needed</span><br>  <span class="hljs-attr">lineinfile:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/opt/jboss-as/bin/standalone.conf</span><br>    <span class="hljs-attr">regexp:</span> <span class="hljs-string">&#x27;^(.*)Xms(\\d+)m(.*)$&#x27;</span><br>    <span class="hljs-attr">line:</span> <span class="hljs-string">&#x27;\1Xms$&#123;xms&#125;m\3&#x27;</span><br>    <span class="hljs-attr">backrefs:</span> <span class="hljs-literal">yes</span><br><br><br>  <br><br><span class="hljs-attr">NOTE:</span> <span class="hljs-string">Fully</span> <span class="hljs-string">quoted</span> <span class="hljs-string">because</span> <span class="hljs-string">of</span> <span class="hljs-string">the</span> <span class="hljs-string">&#x27;: &#x27;</span> <span class="hljs-string">on</span> <span class="hljs-string">the</span> <span class="hljs-string">line.</span> <span class="hljs-string">See</span> <span class="hljs-string">the</span> <span class="hljs-string">Gotchas</span> <span class="hljs-string">in</span> <span class="hljs-string">the</span> <span class="hljs-string">YAML</span> <span class="hljs-string">docs.</span><br><br><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">Validate</span> <span class="hljs-string">the</span> <span class="hljs-string">sudoers</span> <span class="hljs-string">file</span> <span class="hljs-string">before</span> <span class="hljs-string">saving</span><br>     <span class="hljs-attr">lineinfile:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/sudoers</span><br>      <span class="hljs-attr">state:</span> <span class="hljs-string">present</span><br>      <span class="hljs-attr">regexp:</span> <span class="hljs-string">&#x27;^%ADMIN ALL=&#x27;</span><br>      <span class="hljs-attr">line:</span> <span class="hljs-string">&#x27;%ADMIN ALL=(ALL) NOPASSWD: ALL&#x27;</span><br>      <span class="hljs-attr">validate:</span> <span class="hljs-string">/usr/sbin/visudo</span> <span class="hljs-string">-cf</span> <span class="hljs-string">%s</span><br></code></pre></td></tr></table></figure><h2 id="synchronize"><a href="#synchronize" class="headerlink" title="synchronize"></a>synchronize</h2><p>EXAMPLES:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Synchronization</span> <span class="hljs-string">of</span> <span class="hljs-string">src</span> <span class="hljs-string">on</span> <span class="hljs-string">the</span> <span class="hljs-string">control</span> <span class="hljs-string">machine</span> <span class="hljs-string">to</span> <span class="hljs-string">dest</span> <span class="hljs-string">on</span> <span class="hljs-string">the</span> <span class="hljs-string">remote</span> <span class="hljs-string">hosts</span><br>  <span class="hljs-attr">synchronize:</span><br>    <span class="hljs-attr">src:</span> <span class="hljs-string">some/relative/path</span><br>    <span class="hljs-attr">dest:</span> <span class="hljs-string">/some/absolute/path</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Synchronization</span> <span class="hljs-string">using</span> <span class="hljs-string">rsync</span> <span class="hljs-string">protocol</span> <span class="hljs-string">(push)</span><br>  <span class="hljs-attr">synchronize:</span><br>    <span class="hljs-attr">src:</span> <span class="hljs-string">some/relative/path/</span><br>    <span class="hljs-attr">dest:</span> <span class="hljs-string">rsync://somehost.com/path/</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Synchronization</span> <span class="hljs-string">using</span> <span class="hljs-string">rsync</span> <span class="hljs-string">protocol</span> <span class="hljs-string">(pull)</span><br>  <span class="hljs-attr">synchronize:</span><br>    <span class="hljs-attr">mode:</span> <span class="hljs-string">pull</span><br>    <span class="hljs-attr">src:</span> <span class="hljs-string">rsync://somehost.com/path/</span><br>    <span class="hljs-attr">dest:</span> <span class="hljs-string">/some/absolute/path/</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span>  <span class="hljs-string">Synchronization</span> <span class="hljs-string">using</span> <span class="hljs-string">rsync</span> <span class="hljs-string">protocol</span> <span class="hljs-string">on</span> <span class="hljs-string">delegate</span> <span class="hljs-string">host</span> <span class="hljs-string">(push)</span><br>  <span class="hljs-attr">synchronize:</span><br>    <span class="hljs-attr">src:</span> <span class="hljs-string">/some/absolute/path/</span><br>    <span class="hljs-attr">dest:</span> <span class="hljs-string">rsync://somehost.com/path/</span><br>  <span class="hljs-attr">delegate_to:</span> <span class="hljs-string">delegate.host</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Synchronization</span> <span class="hljs-string">using</span> <span class="hljs-string">rsync</span> <span class="hljs-string">protocol</span> <span class="hljs-string">on</span> <span class="hljs-string">delegate</span> <span class="hljs-string">host</span> <span class="hljs-string">(pull)</span><br>  <span class="hljs-attr">synchronize:</span><br>    <span class="hljs-attr">mode:</span> <span class="hljs-string">pull</span><br>    <span class="hljs-attr">src:</span> <span class="hljs-string">rsync://somehost.com/path/</span><br>    <span class="hljs-attr">dest:</span> <span class="hljs-string">/some/absolute/path/</span><br>  <span class="hljs-attr">delegate_to:</span> <span class="hljs-string">delegate.host</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Synchronization</span> <span class="hljs-string">without</span> <span class="hljs-string">any</span> <span class="hljs-string">--archive</span> <span class="hljs-string">options</span> <span class="hljs-string">enabled</span><br>  <span class="hljs-attr">synchronize:</span><br>    <span class="hljs-attr">src:</span> <span class="hljs-string">some/relative/path</span><br>    <span class="hljs-attr">dest:</span> <span class="hljs-string">/some/absolute/path</span><br>    <span class="hljs-attr">archive:</span> <span class="hljs-literal">no</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Synchronization</span> <span class="hljs-string">with</span> <span class="hljs-string">--archive</span> <span class="hljs-string">options</span> <span class="hljs-string">enabled</span> <span class="hljs-string">except</span> <span class="hljs-string">for</span> <span class="hljs-string">--recursive</span><br>  <span class="hljs-attr">synchronize:</span><br>    <span class="hljs-attr">src:</span> <span class="hljs-string">some/relative/path</span><br>    <span class="hljs-attr">dest:</span> <span class="hljs-string">/some/absolute/path</span><br>    <span class="hljs-attr">recursive:</span> <span class="hljs-literal">no</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Synchronization</span> <span class="hljs-string">with</span> <span class="hljs-string">--archive</span> <span class="hljs-string">options</span> <span class="hljs-string">enabled</span> <span class="hljs-string">except</span> <span class="hljs-string">for</span> <span class="hljs-string">--times,</span> <span class="hljs-string">with</span> <span class="hljs-string">--checksum</span> <span class="hljs-string">option</span> <span class="hljs-string">enabled</span><br>  <span class="hljs-attr">synchronize:</span><br>    <span class="hljs-attr">src:</span> <span class="hljs-string">some/relative/path</span><br>    <span class="hljs-attr">dest:</span> <span class="hljs-string">/some/absolute/path</span><br>    <span class="hljs-attr">checksum:</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-attr">times:</span> <span class="hljs-literal">no</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Synchronization</span> <span class="hljs-string">without</span> <span class="hljs-string">--archive</span> <span class="hljs-string">options</span> <span class="hljs-string">enabled</span> <span class="hljs-string">except</span> <span class="hljs-string">use</span> <span class="hljs-string">--links</span><br>  <span class="hljs-attr">synchronize:</span><br>    <span class="hljs-attr">src:</span> <span class="hljs-string">some/relative/path</span><br>    <span class="hljs-attr">dest:</span> <span class="hljs-string">/some/absolute/path</span><br>    <span class="hljs-attr">archive:</span> <span class="hljs-literal">no</span><br>    <span class="hljs-attr">links:</span> <span class="hljs-literal">yes</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Synchronization</span> <span class="hljs-string">of</span> <span class="hljs-string">two</span> <span class="hljs-string">paths</span> <span class="hljs-string">both</span> <span class="hljs-string">on</span> <span class="hljs-string">the</span> <span class="hljs-string">control</span> <span class="hljs-string">machine</span><br>  <span class="hljs-attr">synchronize:</span><br>    <span class="hljs-attr">src:</span> <span class="hljs-string">some/relative/path</span><br>    <span class="hljs-attr">dest:</span> <span class="hljs-string">/some/absolute/path</span><br>  <span class="hljs-attr">delegate_to:</span> <span class="hljs-string">localhost</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Synchronization</span> <span class="hljs-string">of</span> <span class="hljs-string">src</span> <span class="hljs-string">on</span> <span class="hljs-string">the</span> <span class="hljs-string">inventory</span> <span class="hljs-string">host</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">dest</span> <span class="hljs-string">on</span> <span class="hljs-string">the</span> <span class="hljs-string">localhost</span> <span class="hljs-string">in</span> <span class="hljs-string">pull</span> <span class="hljs-string">mode</span><br>  <span class="hljs-attr">synchronize:</span><br>    <span class="hljs-attr">mode:</span> <span class="hljs-string">pull</span><br>    <span class="hljs-attr">src:</span> <span class="hljs-string">some/relative/path</span><br>    <span class="hljs-attr">dest:</span> <span class="hljs-string">/some/absolute/path</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Synchronization</span> <span class="hljs-string">of</span> <span class="hljs-string">src</span> <span class="hljs-string">on</span> <span class="hljs-string">delegate</span> <span class="hljs-string">host</span> <span class="hljs-string">to</span> <span class="hljs-string">dest</span> <span class="hljs-string">on</span> <span class="hljs-string">the</span> <span class="hljs-string">current</span> <span class="hljs-string">inventory</span> <span class="hljs-string">host.</span><br>  <span class="hljs-attr">synchronize:</span><br>    <span class="hljs-attr">src:</span> <span class="hljs-string">/first/absolute/path</span><br>    <span class="hljs-attr">dest:</span> <span class="hljs-string">/second/absolute/path</span><br>  <span class="hljs-attr">delegate_to:</span> <span class="hljs-string">delegate.host</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Synchronize</span> <span class="hljs-string">two</span> <span class="hljs-string">directories</span> <span class="hljs-string">on</span> <span class="hljs-string">one</span> <span class="hljs-string">remote</span> <span class="hljs-string">host.</span><br>  <span class="hljs-attr">synchronize:</span><br>    <span class="hljs-attr">src:</span> <span class="hljs-string">/first/absolute/path</span><br>    <span class="hljs-attr">dest:</span> <span class="hljs-string">/second/absolute/path</span><br>  <span class="hljs-attr">delegate_to:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; inventory_hostname &#125;&#125;</span>&quot;</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Synchronize</span> <span class="hljs-string">and</span> <span class="hljs-string">delete</span> <span class="hljs-string">files</span> <span class="hljs-string">in</span> <span class="hljs-string">dest</span> <span class="hljs-string">on</span> <span class="hljs-string">the</span> <span class="hljs-string">remote</span> <span class="hljs-string">host</span> <span class="hljs-string">that</span> <span class="hljs-string">are</span> <span class="hljs-string">not</span> <span class="hljs-string">found</span> <span class="hljs-string">in</span> <span class="hljs-string">src</span> <span class="hljs-string">of</span> <span class="hljs-string">localhost.</span><br>  <span class="hljs-attr">synchronize:</span><br>    <span class="hljs-attr">src:</span> <span class="hljs-string">some/relative/path</span><br>    <span class="hljs-attr">dest:</span> <span class="hljs-string">/some/absolute/path</span><br>    <span class="hljs-attr">delete:</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-attr">recursive:</span> <span class="hljs-literal">yes</span><br><br><span class="hljs-comment"># This specific command is granted su privileges on the destination</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Synchronize</span> <span class="hljs-string">using</span> <span class="hljs-string">an</span> <span class="hljs-string">alternate</span> <span class="hljs-string">rsync</span> <span class="hljs-string">command</span><br>  <span class="hljs-attr">synchronize:</span><br>    <span class="hljs-attr">src:</span> <span class="hljs-string">some/relative/path</span><br>    <span class="hljs-attr">dest:</span> <span class="hljs-string">/some/absolute/path</span><br>    <span class="hljs-attr">rsync_path:</span> <span class="hljs-string">su</span> <span class="hljs-string">-c</span> <span class="hljs-string">rsync</span><br><br><span class="hljs-comment"># Example .rsync-filter file in the source directory</span><br><span class="hljs-comment"># - var       # exclude any path whose last part is &#x27;var&#x27;</span><br><span class="hljs-comment"># - /var      # exclude any path starting with &#x27;var&#x27; starting at the source directory</span><br><span class="hljs-comment"># + /var/conf # include /var/conf even though it was previously excluded</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Synchronize</span> <span class="hljs-string">passing</span> <span class="hljs-string">in</span> <span class="hljs-string">extra</span> <span class="hljs-string">rsync</span> <span class="hljs-string">options</span><br>  <span class="hljs-attr">synchronize:</span><br>    <span class="hljs-attr">src:</span> <span class="hljs-string">/tmp/helloworld</span><br>    <span class="hljs-attr">dest:</span> <span class="hljs-string">/var/www/helloworld</span><br>    <span class="hljs-attr">rsync_opts:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;--no-motd&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;--exclude=.git&quot;</span><br><br><span class="hljs-comment"># Hardlink files if they didn&#x27;t change</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">hardlinks</span> <span class="hljs-string">when</span> <span class="hljs-string">synchronizing</span> <span class="hljs-string">filesystems</span><br>  <span class="hljs-attr">synchronize:</span><br>    <span class="hljs-attr">src:</span> <span class="hljs-string">/tmp/path_a/foo.txt</span><br>    <span class="hljs-attr">dest:</span> <span class="hljs-string">/tmp/path_b/foo.txt</span><br>    <span class="hljs-attr">link_dest:</span> <span class="hljs-string">/tmp/path_a/</span><br><br><span class="hljs-comment"># Specify the rsync binary to use on remote host and on local host</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">groupofhosts</span><br>  <span class="hljs-attr">vars:</span><br>        <span class="hljs-attr">ansible_rsync_path:</span> <span class="hljs-string">/usr/gnu/bin/rsync</span><br><br>  <span class="hljs-attr">tasks:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">copy</span> <span class="hljs-string">/tmp/localpath/</span> <span class="hljs-string">to</span> <span class="hljs-string">remote</span> <span class="hljs-string">location</span> <span class="hljs-string">/tmp/remotepath</span><br>      <span class="hljs-attr">synchronize:</span><br>        <span class="hljs-attr">src:</span> <span class="hljs-string">/tmp/localpath/</span><br>        <span class="hljs-attr">dest:</span> <span class="hljs-string">/tmp/remotepath</span><br>        <span class="hljs-attr">rsync_path:</span> <span class="hljs-string">/usr/gnu/bin/rsync</span><br><br></code></pre></td></tr></table></figure><h2 id="file"><a href="#file" class="headerlink" title="file"></a>file</h2><p>EXAMPLES:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Change</span> <span class="hljs-string">file</span> <span class="hljs-string">ownership,</span> <span class="hljs-string">group</span> <span class="hljs-string">and</span> <span class="hljs-string">permissions</span><br>  <span class="hljs-attr">file:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/foo.conf</span><br>    <span class="hljs-attr">owner:</span> <span class="hljs-string">foo</span><br>    <span class="hljs-attr">group:</span> <span class="hljs-string">foo</span><br>    <span class="hljs-attr">mode:</span> <span class="hljs-string">&#x27;0644&#x27;</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Give</span> <span class="hljs-string">insecure</span> <span class="hljs-string">permissions</span> <span class="hljs-string">to</span> <span class="hljs-string">an</span> <span class="hljs-string">existing</span> <span class="hljs-string">file</span><br>  <span class="hljs-attr">file:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/work</span><br>    <span class="hljs-attr">owner:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">group:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">mode:</span> <span class="hljs-string">&#x27;1777&#x27;</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Create</span> <span class="hljs-string">a</span> <span class="hljs-string">symbolic</span> <span class="hljs-string">link</span><br>  <span class="hljs-attr">file:</span><br>    <span class="hljs-attr">src:</span> <span class="hljs-string">/file/to/link/to</span><br>    <span class="hljs-attr">dest:</span> <span class="hljs-string">/path/to/symlink</span><br>    <span class="hljs-attr">owner:</span> <span class="hljs-string">foo</span><br>    <span class="hljs-attr">group:</span> <span class="hljs-string">foo</span><br>    <span class="hljs-attr">state:</span> <span class="hljs-string">link</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Create</span> <span class="hljs-string">two</span> <span class="hljs-string">hard</span> <span class="hljs-string">links</span><br>  <span class="hljs-attr">file:</span><br>    <span class="hljs-attr">src:</span> <span class="hljs-string">&#x27;/tmp/<span class="hljs-template-variable">&#123;&#123; item.src &#125;&#125;</span>&#x27;</span><br>    <span class="hljs-attr">dest:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; item.dest &#125;&#125;</span>&#x27;</span><br>    <span class="hljs-attr">state:</span> <span class="hljs-string">hard</span><br>  <span class="hljs-attr">loop:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">src:</span> <span class="hljs-string">x</span>, <span class="hljs-attr">dest:</span> <span class="hljs-string">y</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">src:</span> <span class="hljs-string">z</span>, <span class="hljs-attr">dest:</span> <span class="hljs-string">k</span> &#125;<br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Touch</span> <span class="hljs-string">a</span> <span class="hljs-string">file,</span> <span class="hljs-string">using</span> <span class="hljs-string">symbolic</span> <span class="hljs-string">modes</span> <span class="hljs-string">to</span> <span class="hljs-string">set</span> <span class="hljs-string">the</span> <span class="hljs-string">permissions</span> <span class="hljs-string">(equivalent</span> <span class="hljs-string">to</span> <span class="hljs-number">0644</span><span class="hljs-string">)</span><br>  <span class="hljs-attr">file:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/foo.conf</span><br>    <span class="hljs-attr">state:</span> <span class="hljs-string">touch</span><br>    <span class="hljs-attr">mode:</span> <span class="hljs-string">u=rw,g=r,o=r</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Touch</span> <span class="hljs-string">the</span> <span class="hljs-string">same</span> <span class="hljs-string">file,</span> <span class="hljs-string">but</span> <span class="hljs-string">add/remove</span> <span class="hljs-string">some</span> <span class="hljs-string">permissions</span><br>  <span class="hljs-attr">file:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/foo.conf</span><br>    <span class="hljs-attr">state:</span> <span class="hljs-string">touch</span><br>    <span class="hljs-attr">mode:</span> <span class="hljs-string">u+rw,g-wx,o-rwx</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Touch</span> <span class="hljs-string">again</span> <span class="hljs-string">the</span> <span class="hljs-string">same</span> <span class="hljs-string">file,</span> <span class="hljs-string">but</span> <span class="hljs-string">dont</span> <span class="hljs-string">change</span> <span class="hljs-string">times</span> <span class="hljs-string">this</span> <span class="hljs-string">makes</span> <span class="hljs-string">the</span> <span class="hljs-string">task</span> <span class="hljs-string">idempotent</span><br>  <span class="hljs-attr">file:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/foo.conf</span><br>    <span class="hljs-attr">state:</span> <span class="hljs-string">touch</span><br>    <span class="hljs-attr">mode:</span> <span class="hljs-string">u+rw,g-wx,o-rwx</span><br>    <span class="hljs-attr">modification_time:</span> <span class="hljs-string">preserve</span><br>    <span class="hljs-attr">access_time:</span> <span class="hljs-string">preserve</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Create</span> <span class="hljs-string">a</span> <span class="hljs-string">directory</span> <span class="hljs-string">if</span> <span class="hljs-string">it</span> <span class="hljs-string">does</span> <span class="hljs-string">not</span> <span class="hljs-string">exist</span><br>  <span class="hljs-attr">file:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/some_directory</span><br>    <span class="hljs-attr">state:</span> <span class="hljs-string">directory</span><br>    <span class="hljs-attr">mode:</span> <span class="hljs-string">&#x27;0755&#x27;</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Update</span> <span class="hljs-string">modification</span> <span class="hljs-string">and</span> <span class="hljs-string">access</span> <span class="hljs-string">time</span> <span class="hljs-string">of</span> <span class="hljs-string">given</span> <span class="hljs-string">file</span><br>  <span class="hljs-attr">file:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/some_file</span><br>    <span class="hljs-attr">state:</span> <span class="hljs-string">file</span><br>    <span class="hljs-attr">modification_time:</span> <span class="hljs-string">now</span><br>    <span class="hljs-attr">access_time:</span> <span class="hljs-string">now</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Set</span> <span class="hljs-string">access</span> <span class="hljs-string">time</span> <span class="hljs-string">based</span> <span class="hljs-string">on</span> <span class="hljs-string">seconds</span> <span class="hljs-string">from</span> <span class="hljs-string">epoch</span> <span class="hljs-string">value</span><br>  <span class="hljs-attr">file:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/another_file</span><br>    <span class="hljs-attr">state:</span> <span class="hljs-string">file</span><br>    <span class="hljs-attr">access_time:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; &quot;%Y%m%d%H%M.%S&quot; | strftime(stat_var.stat.atime) &#125;&#125;</span>&#x27;</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Recursively</span> <span class="hljs-string">change</span> <span class="hljs-string">ownership</span> <span class="hljs-string">of</span> <span class="hljs-string">a</span> <span class="hljs-string">directory</span><br>  <span class="hljs-attr">file:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/foo</span><br>    <span class="hljs-attr">state:</span> <span class="hljs-string">directory</span><br>    <span class="hljs-attr">recurse:</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-attr">owner:</span> <span class="hljs-string">foo</span><br>    <span class="hljs-attr">group:</span> <span class="hljs-string">foo</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Remove</span> <span class="hljs-string">file</span> <span class="hljs-string">(delete</span> <span class="hljs-string">file)</span><br>  <span class="hljs-attr">file:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/foo.txt</span><br>    <span class="hljs-attr">state:</span> <span class="hljs-string">absent</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Recursively</span> <span class="hljs-string">remove</span> <span class="hljs-string">directory</span><br>  <span class="hljs-attr">file:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/foo</span><br>    <span class="hljs-attr">state:</span> <span class="hljs-string">absent</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ansible</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用shell脚本</title>
    <link href="/2022/07/14/%E5%B8%B8%E7%94%A8shell/"/>
    <url>/2022/07/14/%E5%B8%B8%E7%94%A8shell/</url>
    
    <content type="html"><![CDATA[<h1 id="常用shell脚本"><a href="#常用shell脚本" class="headerlink" title="常用shell脚本"></a>常用shell脚本</h1><h2 id="ssh-免密"><a href="#ssh-免密" class="headerlink" title="ssh 免密"></a>ssh 免密</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment">#!/bin/sh</span><br><span class="hljs-built_in">set</span> -x<br>pwds=Aa11111111<br><span class="hljs-built_in">users</span>=root<br>ip=(<br>192.168.10.11<br>192.168.10.12<br>192.168.10.13<br>192.168.10.14<br>)<br><br>[ -f ~/.ssh/id_rsa ] || ssh-keygen -t rsa -f ~/.ssh/id_rsa -P <span class="hljs-string">&#x27;&#x27;</span> &amp;&gt; /dev/null<br><span class="hljs-keyword">for</span> ips <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;ip[*]&#125;</span><br><span class="hljs-keyword">do</span><br>    sshpass -p <span class="hljs-variable">$pwds</span> ssh-copy-id -i ~/.ssh/id_rsa.pub <span class="hljs-variable">$&#123;users&#125;</span>@<span class="hljs-variable">$ips</span> -o StrictHostKeyChecking=no<br><span class="hljs-keyword">done</span><br><br></code></pre></td></tr></table></figure><h2 id="git-project-clone"><a href="#git-project-clone" class="headerlink" title="git project clone"></a>git project clone</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-built_in">set</span> -x <br><span class="hljs-function"><span class="hljs-title">clone</span></span>()&#123;<br>barch_dir=./k8s<br><span class="hljs-comment">#rm -rf $barch_dir</span><br><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$barch_dir</span><br>pro=(<br>k8s<br>)<br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$barch_dir</span><br><span class="hljs-keyword">for</span> barch <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;pro[*]&#125;</span><br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-built_in">clone</span> <span class="hljs-variable">$barch</span><br>git <span class="hljs-built_in">clone</span> git@git.github:user/<span class="hljs-variable">$barch</span>.git<br><span class="hljs-keyword">done</span> <br>&#125;<br><br><span class="hljs-built_in">clone</span><br></code></pre></td></tr></table></figure><h2 id="proxy-sh"><a href="#proxy-sh" class="headerlink" title="proxy.sh"></a>proxy.sh</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>proxy_hosts=172.16.10.13<br><span class="hljs-comment"># proxy_hosts=172.16.0.131</span><br>proxy_port=9880<br>http_proxy=http://<span class="hljs-variable">$proxy_hosts</span>:<span class="hljs-variable">$proxy_port</span><br><br>https_proxy=<span class="hljs-variable">$http_proxy</span><br><br>no_proxy=192.168.0.0,localhost,127.0.0.1,10.0.0<br><br><span class="hljs-built_in">export</span> http_proxy https_proxy no_proxy<br><br><span class="hljs-comment"># bash -c &quot;echo blacklist nouveau &gt; /etc/modprobe.d/blacklist-nvidia-nouveau.conf&quot;;bash -c &quot;echo options nouveau modeset=0 &gt;&gt; /etc/modprobe.d/blacklist-nvidia-nouveau.conf&quot;</span><br></code></pre></td></tr></table></figure><h2 id="etcd-backup"><a href="#etcd-backup" class="headerlink" title="etcd backup"></a>etcd backup</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-built_in">export</span> ETCDCTL_API=3<br>ca_pem=<span class="hljs-string">&quot;/etc/etcd/ssl/ca.pem&quot;</span><br>server_pem=<span class="hljs-string">&quot;/etc/etcd/ssl/server.pem&quot;</span><br>server_key=<span class="hljs-string">&quot;/etc/etcd/ssl/server-key.pem&quot;</span><br>etcd_endpoints=<span class="hljs-string">&quot;https://160.180.3.1:2379&quot;</span><br>backup_dir=<span class="hljs-string">&quot;/data/backups/etcd&quot;</span><br>time=$(<span class="hljs-built_in">date</span> +%Y%m%d%H%M%S)<br>cmd=<span class="hljs-string">&quot;etcdctl --cacert=<span class="hljs-variable">$ca_pem</span> --cert=<span class="hljs-variable">$server_pem</span> --key=<span class="hljs-variable">$server_key</span> --endpoints=<span class="hljs-variable">$etcd_endpoints</span> snapshot save <span class="hljs-variable">$backup_dir</span>/etcd-snapshot-<span class="hljs-variable">$time</span>.db&quot;</span><br><span class="hljs-comment"># ETCDCTL_API=3 etcdctl --cacert=/etc/etcd/ssl/ca.pem --cert=/etc/etcd/ssl/server.pem --key=/etc/etcd/ssl/server-key.pem --endpoints=https://160.180.3.1:2379 snapshot save /data/backups/etcd/etcd-snapshot-$(date +%Y%m%d%H%M%S).db</span><br><span class="hljs-variable">$cmd</span><br><br></code></pre></td></tr></table></figure><h2 id="docker-clean"><a href="#docker-clean" class="headerlink" title="docker-clean"></a>docker-clean</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment">#!/bin/sh</span><br><span class="hljs-comment"># linux系统定时清理docker中的日志</span><br>per_use=$( <span class="hljs-built_in">df</span> /|sed 1d | awk <span class="hljs-string">&#x27;&#123;print $5&#125;&#x27;</span>|<span class="hljs-built_in">tr</span> -d %)<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$per_use</span> -gt 75 ];<span class="hljs-keyword">then</span><br>&#123;<br>free -h &amp;&amp;  <span class="hljs-built_in">sync</span> &amp;&amp; <span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/vm/drop_caches<span class="hljs-comment">#释放系统缓存</span><br>logs=$(find /var/lib/docker/containers/ -name *-json.log)<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">log</span> <span class="hljs-keyword">in</span> <span class="hljs-variable">$logs</span><br>      <span class="hljs-keyword">do</span><br>       <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;正在 清理 docker日志  docker core logs : <span class="hljs-variable">$log</span>&quot;</span><br>        <span class="hljs-built_in">cat</span> /dev/null &gt; <span class="hljs-variable">$log</span><br>       systemctl  reload docker <span class="hljs-comment">#加载docker服务，不影响已经docker</span><br>       <span class="hljs-built_in">df</span> -h /<br>        <span class="hljs-keyword">done</span><br>&#125;<br><span class="hljs-keyword">fi</span><br><br><br></code></pre></td></tr></table></figure><h2 id="mavenimport"><a href="#mavenimport" class="headerlink" title="mavenimport"></a>mavenimport</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment"># copy and run this script to the root of the repository directory containing files</span><br><span class="hljs-comment"># this script attempts to exclude uploading itself explicitly so the script name is important</span><br><span class="hljs-comment"># Get command line params</span><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">getopts</span> <span class="hljs-string">&quot;:r:u:p:&quot;</span> opt; <span class="hljs-keyword">do</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-variable">$opt</span> <span class="hljs-keyword">in</span><br>                r) REPO_URL=<span class="hljs-string">&quot;<span class="hljs-variable">$OPTARG</span>&quot;</span><br>                ;;<br>                u) USERNAME=<span class="hljs-string">&quot;<span class="hljs-variable">$OPTARG</span>&quot;</span><br>                ;;<br>                p) PASSWORD=<span class="hljs-string">&quot;<span class="hljs-variable">$OPTARG</span>&quot;</span><br>                ;;<br>        <span class="hljs-keyword">esac</span><br><span class="hljs-keyword">done</span><br><br>find . -<span class="hljs-built_in">type</span> f -not -path <span class="hljs-string">&#x27;./mavenimport\.sh*&#x27;</span> -not -path <span class="hljs-string">&#x27;*/\.*&#x27;</span> -not -path <span class="hljs-string">&#x27;*/\^archetype\-catalog\.xml*&#x27;</span> -not -path <span class="hljs-string">&#x27;*/\^maven\-metadata\-local*\.xml&#x27;</span> -not -path <span class="hljs-string">&#x27;*/\^maven\-metadata\-deployment*\.xml&#x27;</span> | sed <span class="hljs-string">&quot;s|^\./||&quot;</span> | xargs -I <span class="hljs-string">&#x27;&#123;&#125;&#x27;</span> curl -u <span class="hljs-string">&quot;<span class="hljs-variable">$USERNAME</span>:<span class="hljs-variable">$PASSWORD</span>&quot;</span> -X PUT -v -T &#123;&#125; <span class="hljs-variable">$&#123;REPO_URL&#125;</span>/&#123;&#125; ;<br><br><br><br><span class="hljs-comment">#./mavenimport.sh -u admin -p admin123 -r http://192.168.25.81:30309/repository/ghostcloud/</span><br><br><br></code></pre></td></tr></table></figure><h2 id="monitor-httpd"><a href="#monitor-httpd" class="headerlink" title="monitor httpd"></a>monitor httpd</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>status=$(ss -lntup|grep -w 80|<span class="hljs-built_in">wc</span> -l)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">do</span><br>     <span class="hljs-keyword">if</span> [ ` curl -o /dev/null -s -w <span class="hljs-string">&quot;%&#123;http_code&#125;&quot;</span> http://127.0.0.1` -ne 200 ]<br>     <span class="hljs-keyword">then</span><br>         pkill python3<br>         python3 -m http.server 80 &amp;<br>     <span class="hljs-keyword">fi</span><br><span class="hljs-built_in">sleep</span> 30<br><span class="hljs-keyword">done</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos7配置nfs网络文件共享</title>
    <link href="/2022/07/14/centos7%E9%85%8D%E7%BD%AEnfs%E7%BD%91%E7%BB%9C%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/"/>
    <url>/2022/07/14/centos7%E9%85%8D%E7%BD%AEnfs%E7%BD%91%E7%BB%9C%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="centos7配置nfs网络文件共享"><a href="#centos7配置nfs网络文件共享" class="headerlink" title="centos7配置nfs网络文件共享"></a>centos7配置nfs网络文件共享</h1><p>NFS(NetworkFileSystem)即网络文件系统,是Linux&#x2F;Unix支持的文件系统中的一种,它允许网络中的计算机之间通过TCP&#x2F;IP网络共享资源。在NFS的应用中,本地NFS的客户端应用可以透明地读写位于远端NFS服务器上的文件,就像访问本地文件一样。</p><p>NFS 的基本原则是“容许不同的客户端及服务端通过一组RPC分享相同的文件系统”，它是独立于操作系统，容许不同硬件及操作系统的系统共同进行文件的分享。</p><p>NFS在文件传送或信息传送过程中依赖于RPC协议。RPC，远程过程调用 (Remote Procedure Call) 是能使客户端执行其他系统中程序的一种机制。NFS本身是没有提供信息传输的协议和功能的，但NFS却能让我们通过网络进行资料的分享，这是因为NFS使用了一些其它的传输协议。而这些传输协议用到这个RPC功能的。可以说NFS本身就是使用RPC的一个程序。或者说NFS也是一个RPC SERVER。所以只要用到NFS的地方都要启动RPC服务，不论是NFS SERVER或者NFS CLIENT。这样SERVER和CLIENT才能通过RPC来实现PROGRAM PORT（centos5之前，之后是rpcbind）的对应。可以这么理解RPC和NFS的关系：NFS是一个文件系统，而RPC是负责信息的传输。</p><h1 id="NFS服务端-示例ip-192-168-0-240"><a href="#NFS服务端-示例ip-192-168-0-240" class="headerlink" title="NFS服务端(示例ip:192.168.0.240)"></a>NFS服务端(示例ip:192.168.0.240)</h1><p>1 安装nfs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[root<span class="hljs-meta">@nfs_server</span> ~]# yum -y install nfs-utils rpcbind<br></code></pre></td></tr></table></figure><p>（小提示：在安装完nfs-utils后，rpcbind默认是启动了的。）</p><p>2 enable services。设置开机启动nfs相关服务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">[root<span class="hljs-meta">@nfs_server</span> ~]# systemctl enable rpcbind<br><br><br><br>[root<span class="hljs-meta">@nfs_server</span> ~]# systemctl enable nfs-server<br><br><br><br>Created symlink from /etc/systemd/system/multi-user.target.wants/nfs-server.service to /usr/lib/systemd/system/nfs-server.service.<br><br><br><br>[root<span class="hljs-meta">@nfs_server</span> ~]# systemctl enable nfs-lock<br><br><br><br>[root<span class="hljs-meta">@nfs_server</span> ~]# systemctl enable nfs-idmap<br></code></pre></td></tr></table></figure><p>3 启动nfs service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">[root<span class="hljs-meta">@nfs_server</span> ~]# systemctl start rpcbind<br><br><br><br>[root<span class="hljs-meta">@nfs_server</span> ~]# systemctl start nfs-server<br><br><br><br>[root<span class="hljs-meta">@nfs_server</span> ~]# systemctl start nfs-lock<br><br><br><br>[root<span class="hljs-meta">@nfs_server</span> ~]# systemctl start nfs-idmap<br></code></pre></td></tr></table></figure><p>4 创建需要共享的目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">[root<span class="hljs-meta">@nfs_server</span> ~]# mkdir -p /application/share                    -p 级联创建<br><br><br><br>[root<span class="hljs-meta">@nfs_server</span> ~]# chmod -R <span class="hljs-number">777</span> /application/share       更改share文件夹及其子文件夹权限为<span class="hljs-number">777</span><br></code></pre></td></tr></table></figure><p>5 配置需要共享的目录到 &#x2F;etc&#x2F;exports下，xxx.xxx.xxx.xxx为需要共享的对象ip地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">[root<span class="hljs-meta">@nfs_server</span> ~]# echo <span class="hljs-string">&quot;/application/share 192.168.0.*(rw,sync,no_root_squash)&quot;</span> &gt;&gt; /etc/<span class="hljs-keyword">exports</span><br><br><br><br>[root<span class="hljs-meta">@nfs_server</span> ~]# exportfs -a          使<span class="hljs-keyword">exports</span>的修改生效<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">[root<span class="hljs-meta">@nfs_server</span> ~]# echo <span class="hljs-string">&quot;/application/share 192.168.0.0/24(rw,sync,no_root_squash)&quot;</span> &gt;&gt; /etc/<span class="hljs-keyword">exports</span><br><br><br><br>[root<span class="hljs-meta">@nfs_server</span> ~]# exportfs -a          使<span class="hljs-keyword">exports</span>的修改生效<br></code></pre></td></tr></table></figure><p>[root@nfs_server ~]# echo “&#x2F;application&#x2F;share 192.168.0.<em>(rw,sync,no_root_squash)” &gt;&gt; &#x2F;etc&#x2F;exports<br>[root@nfs_server ~]# exportfs -a<br>[root@nfs_server ~]# more &#x2F;etc&#x2F;exports<br>&#x2F;application&#x2F;share 192.168.0.</em>(rw,sync,no_root_squash)</p><p>6 检查共享目录是否设置正确</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">[root<span class="hljs-meta">@nfs_server</span> /]# showmount -e<br><br><br><br>Export list <span class="hljs-keyword">for</span> nfs_server:<br><br><br><br>/application/share <span class="hljs-number">192.168</span><span class="hljs-number">.0</span>.*<br></code></pre></td></tr></table></figure><p>7 调整防火墙配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java">[root<span class="hljs-meta">@nfs_server</span> ~]# firewall-cmd --add-service=nfs --permanent --zone=<span class="hljs-keyword">public</span><br><br><br><br>success<br><br><br><br>[root<span class="hljs-meta">@nfs_server</span> ~]# firewall-cmd --add-service=mountd --permanent --zone=<span class="hljs-keyword">public</span><br><br><br><br>success<br><br><br><br>[root<span class="hljs-meta">@nfs_server</span> ~]# firewall-cmd --add-service=rpc-bind --permanent --zone=<span class="hljs-keyword">public</span><br><br><br><br>success<br><br><br><br>[root<span class="hljs-meta">@nfs_server</span> ~]# firewall-cmd --reload   重新载入配置，使其生效<br><br><br><br>success<br></code></pre></td></tr></table></figure><p>可使用 命令 iptables -L -n 查看开放的端口</p><p>在修改防火墙配置前，nfs_server这台机器上开放的端口信息</p><p><img src="/images/pasted-15.png" alt="upload successful"></p><p>修改防火墙配置后，nfs_server这台机器上开放的端口信息</p><p><img src="/images/pasted-16.png" alt="upload successful"></p><h1 id="NFS客户端"><a href="#NFS客户端" class="headerlink" title="NFS客户端"></a>NFS客户端</h1><p>注意：客户端不需要启动nfs服务</p><p>1 安装nfs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[root<span class="hljs-meta">@nfs_client</span> ~]# yum -y install nfs-utils<br></code></pre></td></tr></table></figure><p>2 检查共享目录是否设置正确，xxx.xxx.xxx.xxx 为共享服务器地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">[root<span class="hljs-meta">@nfs_client</span> ~]# showmount -e <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.240</span><br><br><br><br>Export list <span class="hljs-keyword">for</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.240</span>:<br><br><br><br>/application/share <span class="hljs-number">192.168</span><span class="hljs-number">.0</span>.*<br></code></pre></td></tr></table></figure><p>3 挂载远程服务器NFS分区到本地挂载点</p><p># make mount points</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[root<span class="hljs-meta">@nfs_client</span> ~]# mkdir -p /application/share<br></code></pre></td></tr></table></figure><p># mount nfs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[root<span class="hljs-meta">@nfs_client</span> ~]# mount -t nfs <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.240</span>:/application/share /application/share<br></code></pre></td></tr></table></figure><p>挂载格式解读：</p><p>mount -t nfs -o nolock,vers&#x3D;2 10.0.0.147:&#x2F;work&#x2F;nfs &#x2F;mnt</p><p>解释一下：<br>mount :挂载命令<br>nfs :使用的协议<br>nolock :不阻塞<br>vers : 使用的NFS版本号<br>IP : NFS服务器的IP（NFS服务器运行在哪个系统上，就是哪个系统的IP）<br>&#x2F;work&#x2F;nfs: 要挂载的目录（Ubuntu的目录）<br>&#x2F;mnt : 要挂载到的目录（开发板上的目录，注意挂载成功后，&#x2F;mnt下原有数据将会被隐藏，无法找到）</p><p>取消挂载(先df -h 查看分区挂载情况)<br>[root@localhost local]# umount 192.168.0.240:&#x2F;application&#x2F;share</p><p>取消挂载示例2：</p><p><img src="https://img-blog.csdnimg.cn/20190718102620114.png" alt="img"></p><p>取消挂载方式1</p><blockquote><p>#挂载<br>mount -t nfs 192.168.222.38:&#x2F;share&#x2F;api&#x2F;images &#x2F;home&#x2F;work&#x2F;images</p></blockquote><p>#取消挂载<br>umount 192.168.222.38:&#x2F;share&#x2F;api&#x2F;images</p><p><img src="https://img-blog.csdnimg.cn/20190718102957799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1ZGluYW5peWE=,size_16,color_FFFFFF,t_70" alt="img"></p><p>取消挂载方式2：</p><blockquote><p>#挂载<br>mount -t nfs 192.168.222.38:&#x2F;share&#x2F;api&#x2F;images &#x2F;home&#x2F;work&#x2F;images</p></blockquote><p>#取消挂载<br>umount &#x2F;home&#x2F;work&#x2F;images</p><p><img src="https://img-blog.csdnimg.cn/20190718102455425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1ZGluYW5peWE=,size_16,color_FFFFFF,t_70" alt="img"></p><h1 id="验证nfs网络文件共享是否成功："><a href="#验证nfs网络文件共享是否成功：" class="headerlink" title="验证nfs网络文件共享是否成功："></a>验证nfs网络文件共享是否成功：</h1><p>切换到nfs_server端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">[root<span class="hljs-meta">@nfs_server</span> ~]# cd /application/share/<br><br><br><br>[root<span class="hljs-meta">@nfs_server</span> share]# ls<br><br><br><br>[root<span class="hljs-meta">@nfs_server</span> share]# touch a.txt<br></code></pre></td></tr></table></figure><p>切换到nfs_client端：</p><p>查看挂载是否成功，即查看是否在被挂载目录下，同步生成了 a.txt文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">[root<span class="hljs-meta">@nfs_client</span> ~]# mkdir -p /application/share<br><br><br><br>[root<span class="hljs-meta">@nfs_client</span> ~]# mount -t nfs <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.240</span>:/application/share /application/share<br><br><br><br>[root<span class="hljs-meta">@nfs_client</span> ~]# cd /application/share/<br><br><br><br>[root<span class="hljs-meta">@nfs_client</span> share]# ls<br><br><br><br>a.txt               可看到在nfs客户端同步生成了a.txt<br></code></pre></td></tr></table></figure><p>**在客户端使用命令df查看整个的挂载情况\</p><blockquote><p>[root@nfs_client etc]# df<br>Filesystem            1K-blocks   Used Available Use% Mounted on<br>&#x2F;dev&#x2F;mapper&#x2F;centos-root      49250820 2996840  46253980  7% &#x2F;<br>devtmpfs               920376    0   920376  0% &#x2F;dev<br>tmpfs                932652    0   932652  0% &#x2F;dev&#x2F;shm<br>tmpfs                932652   9748   922904  2% &#x2F;run<br>tmpfs                932652    0   932652  0% &#x2F;sys&#x2F;fs&#x2F;cgroup<br>&#x2F;dev&#x2F;sda1              1038336  147844   890492  15% &#x2F;boot<br>tmpfs                186532    0   186532  0% &#x2F;run&#x2F;user&#x2F;0<br>192.168.0.240:&#x2F;application&#x2F;share  49251072 1796096  47454976  4% &#x2F;application&#x2F;share</p></blockquote><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul><li>若服务端挂了，则客户端将无法使用</li><li>服务端若设置了开机启动，则每次重启后，服务仍然活着</li></ul><p>​    客户端重启后，需要重新挂载</p><p>重启服务器后，查看服务端状态如下：</p><p><img src="https://img-blog.csdn.net/20180716185108176?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1ZGluYW5peWE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><hr><hr><p>配置客户端开机自动挂载nfs共享目录</p><p>vi &#x2F;etc&#x2F;fstab</p><p>添加  192.168.0.240:&#x2F;application&#x2F;share &#x2F;application&#x2F;share nfs defaults 0 0</p><p>&#x2F;etc&#x2F;fstab 里面的挂载配置立即生效的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mount -a<br></code></pre></td></tr></table></figure><hr><hr><p>以下内容与nfs无关：</p><p>chmod +x  和 chmod -x 的区别：</p><blockquote><p>-rw-r–r–.  1 root root  474 Jul 19 13:23 rc.local</p><p>[root@nfs_client rc.d]# chmod +x &#x2F;etc&#x2F;rc.d&#x2F;rc.local   # 给rc.local 增加运行权限</p><p>-rwxr-xr-x.  1 root root  474 Jul 19 13:23 rc.local</p><p>[root@nfs_client rc.d]# chmod -x &#x2F;etc&#x2F;rc.d&#x2F;rc.local    # 除去rc.local 的运行权限</p><p>-rw-r–r–.  1 root root  474 Jul 19 13:23 rc.local</p></blockquote><h3 id="如果使用nginx-nfs-tomcat报403解决方案"><a href="#如果使用nginx-nfs-tomcat报403解决方案" class="headerlink" title="如果使用nginx+nfs+tomcat报403解决方案"></a>如果使用nginx+nfs+tomcat报403解决方案</h3><p>step 1: 将nfs共享目录的用户和组设为root</p><p>由于上传的文件对不同组用户没有读权限，所以只能更改nfs所属的用户和组，即配置nfs时，追加参数 no_root_squash</p><p>&#x2F;usr&#x2F;local&#x2F;static 192.168.0.*(rw,sync,no_root_squash)</p><p>no_root_squash：NFS客户端连接服务端时如果使用的是root的话，那么对服务端分享的目录来说，也拥有root权限。</p><p>step 2: 修改nginx访问者的用户和组为root（nginx.conf中配置）</p><p>nginx修改用户和组：</p><p>user root root;   # 或者  user root;</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用apt-mirror搭建debian本地仓库</title>
    <link href="/2022/07/14/%E4%BD%BF%E7%94%A8apt-mirror%E6%90%AD%E5%BB%BAdebian%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/"/>
    <url>/2022/07/14/%E4%BD%BF%E7%94%A8apt-mirror%E6%90%AD%E5%BB%BAdebian%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<p>apt-mirror能够将官方镜像下载到本地，并保证目录结构与其一致，但是不能对镜像仓库进行修改。如果想要修改镜像仓库，需要使用reprepro。</p><p>1、安装apt-mirror</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># aptitude update</span><br><span class="hljs-comment"># aptitude install -y apt-mirror</span><br><br><span class="hljs-comment"># dpkg -L apt-mirror</span><br>/.<br>/usr<br><span class="hljs-regexp">/usr/</span>bin<br><span class="hljs-regexp">/usr/</span>bin/apt-mirror<br><span class="hljs-regexp">/usr/</span>share<br><span class="hljs-regexp">/usr/</span>share/man<br><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/man/m</span>an1<br><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/man/m</span>an1/apt-mirror.<span class="hljs-number">1</span>.gz<br><span class="hljs-regexp">/usr/</span>share/doc<br><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/doc/</span>apt-mirror<br><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/doc/</span>apt-mirror/changelog.gz<br><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/doc/</span>apt-mirror/changelog.Debian.gz<br><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/doc/</span>apt-mirror/copyright<br>/etc<br><span class="hljs-regexp">/etc/</span>cron.d<br><span class="hljs-regexp">/etc/</span>cron.d/apt-mirror<br><span class="hljs-regexp">/etc/</span>apt<br><span class="hljs-regexp">/etc/</span>apt/mirror.list<br>/var<br><span class="hljs-regexp">/var/</span>spool<br><span class="hljs-regexp">/var/</span>spool/apt-mirror<br><span class="hljs-regexp">/var/</span>spool<span class="hljs-regexp">/apt-mirror/</span>skel<br><span class="hljs-regexp">/var/</span>spool<span class="hljs-regexp">/apt-mirror/mi</span>rror<br><span class="hljs-regexp">/var/</span>spool<span class="hljs-regexp">/apt-mirror/</span>var<br></code></pre></td></tr></table></figure><p>2、修改配置文件，添加要下载的源（我这里添加的是debian_squeeze的源）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># vim /etc/apt/mirror.list</span><br><br><span class="hljs-built_in">set</span> base_path    /docker/debian_mirror<br><span class="hljs-built_in">set</span> mirror_path  <span class="hljs-variable">$base_path</span>/mirror<br><span class="hljs-built_in">set</span> skel_path    <span class="hljs-variable">$base_path</span>/skel<br><span class="hljs-built_in">set</span> var_path     <span class="hljs-variable">$base_path</span>/var<br><span class="hljs-built_in">set</span> cleanscript <span class="hljs-variable">$var_path</span>/clean.sh<br><span class="hljs-built_in">set</span> defaultarch  &lt;running host architecture&gt;<br><span class="hljs-built_in">set</span> postmirror_script <span class="hljs-variable">$var_path</span>/postmirror.sh<br><span class="hljs-built_in">set</span> run_postmirror 0<br><span class="hljs-built_in">set</span> nthreads     40<br><span class="hljs-built_in">set</span> _tilde 0<br><br>deb-amd64 http://archive.debian.org/debian squeeze main<br>deb-amd64 http://archive.debian.org/debian squeeze-lts main<br></code></pre></td></tr></table></figure><p>3、手动运行apt-mirror下载镜像</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs prolog"># apt-mirror<br><span class="hljs-symbol">Downloading</span> <span class="hljs-number">28</span> index files using <span class="hljs-number">28</span> threads...<br><span class="hljs-symbol">Begin</span> time: <span class="hljs-symbol">Mon</span> <span class="hljs-symbol">Aug</span> <span class="hljs-number">21</span> <span class="hljs-number">11</span>:<span class="hljs-number">24</span>:<span class="hljs-number">11</span> <span class="hljs-number">2017</span><br>[<span class="hljs-number">28</span>]... [<span class="hljs-number">27</span>]... [<span class="hljs-number">26</span>]... [<span class="hljs-number">25</span>]... [<span class="hljs-number">24</span>]... [<span class="hljs-number">23</span>]... [<span class="hljs-number">22</span>]... [<span class="hljs-number">21</span>]... [<span class="hljs-number">20</span>]... [<span class="hljs-number">19</span>]... [<span class="hljs-number">18</span>]... [<span class="hljs-number">17</span>]... [<span class="hljs-number">16</span>]... [<span class="hljs-number">15</span>]... [<span class="hljs-number">14</span>]... [<span class="hljs-number">13</span>]... [<span class="hljs-number">12</span>]... [<span class="hljs-number">11</span>]... [<span class="hljs-number">10</span>]... [<span class="hljs-number">9</span>]... [<span class="hljs-number">8</span>]... [<span class="hljs-number">7</span>]... [<span class="hljs-number">6</span>]... [<span class="hljs-number">5</span>]... [<span class="hljs-number">4</span>]... [<span class="hljs-number">3</span>]... [<span class="hljs-number">2</span>]... [<span class="hljs-number">1</span>]... [<span class="hljs-number">0</span>]...<br><span class="hljs-symbol">End</span> time: <span class="hljs-symbol">Mon</span> <span class="hljs-symbol">Aug</span> <span class="hljs-number">21</span> <span class="hljs-number">11</span>:<span class="hljs-number">24</span>:<span class="hljs-number">18</span> <span class="hljs-number">2017</span><br><br><span class="hljs-symbol">Processing</span> tranlation indexes: [<span class="hljs-symbol">TT</span>]<br><br><span class="hljs-symbol">Downloading</span> <span class="hljs-number">32</span> translation files using <span class="hljs-number">32</span> threads...<br><span class="hljs-symbol">Begin</span> time: <span class="hljs-symbol">Mon</span> <span class="hljs-symbol">Aug</span> <span class="hljs-number">21</span> <span class="hljs-number">11</span>:<span class="hljs-number">24</span>:<span class="hljs-number">19</span> <span class="hljs-number">2017</span><br>[<span class="hljs-number">32</span>]... [<span class="hljs-number">31</span>]... [<span class="hljs-number">30</span>]... [<span class="hljs-number">29</span>]... [<span class="hljs-number">28</span>]... [<span class="hljs-number">27</span>]... [<span class="hljs-number">26</span>]... [<span class="hljs-number">25</span>]... [<span class="hljs-number">24</span>]... [<span class="hljs-number">23</span>]... [<span class="hljs-number">22</span>]... [<span class="hljs-number">21</span>]... [<span class="hljs-number">20</span>]... [<span class="hljs-number">19</span>]... [<span class="hljs-number">18</span>]... [<span class="hljs-number">17</span>]... [<span class="hljs-number">16</span>]... [<span class="hljs-number">15</span>]... [<span class="hljs-number">14</span>]... [<span class="hljs-number">13</span>]... [<span class="hljs-number">12</span>]... [<span class="hljs-number">11</span>]... [<span class="hljs-number">10</span>]... [<span class="hljs-number">9</span>]... [<span class="hljs-number">8</span>]... [<span class="hljs-number">7</span>]... [<span class="hljs-number">6</span>]... [<span class="hljs-number">5</span>]... [<span class="hljs-number">4</span>]... [<span class="hljs-number">3</span>]... [<span class="hljs-number">2</span>]... [<span class="hljs-number">1</span>]... [<span class="hljs-number">0</span>]...<br><span class="hljs-symbol">End</span> time: <span class="hljs-symbol">Mon</span> <span class="hljs-symbol">Aug</span> <span class="hljs-number">21</span> <span class="hljs-number">11</span>:<span class="hljs-number">24</span>:<span class="hljs-number">20</span> <span class="hljs-number">2017</span><br><br><span class="hljs-symbol">Processing</span> indexes: [<span class="hljs-symbol">PP</span>]<br><br><span class="hljs-number">32.8</span> <span class="hljs-symbol">GiB</span> will be downloaded into archive.<br><span class="hljs-symbol">Downloading</span> <span class="hljs-number">25138</span> archive files using <span class="hljs-number">40</span> threads...<br><span class="hljs-symbol">Begin</span> time: <span class="hljs-symbol">Mon</span> <span class="hljs-symbol">Aug</span> <span class="hljs-number">21</span> <span class="hljs-number">11</span>:<span class="hljs-number">24</span>:<span class="hljs-number">23</span> <span class="hljs-number">2017</span><br>[<span class="hljs-number">40</span>]... [<span class="hljs-number">39</span>]... [<span class="hljs-number">38</span>]... [<span class="hljs-number">37</span>]... [<span class="hljs-number">36</span>]... [<span class="hljs-number">35</span>]... [<span class="hljs-number">34</span>]... [<span class="hljs-number">33</span>]... [<span class="hljs-number">32</span>]... [<span class="hljs-number">31</span>]... [<span class="hljs-number">30</span>]... [<span class="hljs-number">29</span>]... [<span class="hljs-number">28</span>]... [<span class="hljs-number">27</span>]... [<span class="hljs-number">26</span>]... [<span class="hljs-number">25</span>]... [<span class="hljs-number">24</span>]... [<span class="hljs-number">23</span>]... [<span class="hljs-number">22</span>]... [<span class="hljs-number">21</span>]... [<span class="hljs-number">20</span>]... [<span class="hljs-number">19</span>]... [<span class="hljs-number">18</span>]... [<span class="hljs-number">17</span>]... [<span class="hljs-number">16</span>]... [<span class="hljs-number">15</span>]... [<span class="hljs-number">14</span>]... [<span class="hljs-number">13</span>]... [<span class="hljs-number">12</span>]... [<span class="hljs-number">11</span>]... [<span class="hljs-number">10</span>]... [<span class="hljs-number">9</span>]... [<span class="hljs-number">8</span>]... [<span class="hljs-number">7</span>]... [<span class="hljs-number">6</span>]... [<span class="hljs-number">5</span>]... [<span class="hljs-number">4</span>]... [<span class="hljs-number">3</span>]... [<span class="hljs-number">2</span>]... [<span class="hljs-number">1</span>]... [<span class="hljs-number">0</span>]...<br><span class="hljs-symbol">End</span> time: <span class="hljs-symbol">Mon</span> <span class="hljs-symbol">Aug</span> <span class="hljs-number">21</span> <span class="hljs-number">21</span>:<span class="hljs-number">38</span>:<span class="hljs-number">48</span> <span class="hljs-number">2017</span><br><br><span class="hljs-number">0</span> bytes in <span class="hljs-number">0</span> files and <span class="hljs-number">0</span> directories can be freed.<br><span class="hljs-symbol">Run</span> /docker/debian_mirror/var/clean.sh for this purpose.<br></code></pre></td></tr></table></figure><p>4、设置定时任务，定时与官方源同步</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># vim /etc/cron.d/apt-mirror</span><br><span class="hljs-attribute">0</span> <span class="hljs-number">0</span> * * * apt-mirror &gt; /docker/mirror.log <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>5、设置发布目录软链接</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># ln -sv <span class="hljs-regexp">/docker/</span>debian_mirror<span class="hljs-regexp">/mirror/</span>archive.debian.org <span class="hljs-regexp">/docker/mi</span>rror<br></code></pre></td></tr></table></figure><p>6、配置nginx发布镜像目录</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf<span class="hljs-regexp">/vhosts/</span><br># vim debian_mirror.conf<br><br>server &#123;<br>    listen <span class="hljs-number">8081</span>;<br>    server_name debian_mirror;<br><br>    root <span class="hljs-regexp">/docker/mi</span>rror<br>    location / &#123;<br>        autoindex on;<br>    &#125;<br><br>    access_log <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>logs/debian_mirror.access.log oupeng_logs;<br>    error_log <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>logs/debian_mirror.error.log;<br>&#125;<br><br># <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx -t<br># <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx -s reload<br></code></pre></td></tr></table></figure><p>7、找一台debian6的机器添加本地源测试</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># vim /etc/apt/sources.list</span><br>deb http:<span class="hljs-regexp">//</span><span class="hljs-number">117.119</span>.<span class="hljs-number">33.138</span>:<span class="hljs-number">8081</span>/debian squeeze main<br>deb http:<span class="hljs-regexp">//</span><span class="hljs-number">117.119</span>.<span class="hljs-number">33.138</span>:<span class="hljs-number">8081</span>/debian squeeze-lts main<br><br><span class="hljs-comment"># aptitude update</span><br>Hit http:<span class="hljs-regexp">//</span><span class="hljs-number">117.119</span>.<span class="hljs-number">33.138</span> squeeze Release.gpg<br>Ign http:<span class="hljs-regexp">//</span><span class="hljs-number">117.119</span>.<span class="hljs-number">33.138</span><span class="hljs-regexp">/debian/</span> squeeze/main Translation-en<br>Ign http:<span class="hljs-regexp">//</span><span class="hljs-number">117.119</span>.<span class="hljs-number">33.138</span><span class="hljs-regexp">/debian/</span> squeeze/main Translation-en_US<br>Get:<span class="hljs-number">1</span> http:<span class="hljs-regexp">//</span><span class="hljs-number">117.119</span>.<span class="hljs-number">33.138</span> squeeze-lts Release.gpg [<span class="hljs-number">819</span> B]<br>Ign http:<span class="hljs-regexp">//</span><span class="hljs-number">117.119</span>.<span class="hljs-number">33.138</span><span class="hljs-regexp">/debian/</span> squeeze-lts/main Translation-en<br>Ign http:<span class="hljs-regexp">//</span><span class="hljs-number">117.119</span>.<span class="hljs-number">33.138</span><span class="hljs-regexp">/debian/</span> squeeze-lts/main Translation-en_US<br>Hit http:<span class="hljs-regexp">//</span><span class="hljs-number">117.119</span>.<span class="hljs-number">33.138</span> squeeze Release<br>Get:<span class="hljs-number">2</span> http:<span class="hljs-regexp">//</span><span class="hljs-number">117.119</span>.<span class="hljs-number">33.138</span> squeeze-lts Release [<span class="hljs-number">34.3</span> kB]<br>Hit http:<span class="hljs-regexp">//</span><span class="hljs-number">117.119</span>.<span class="hljs-number">33.138</span> squeeze/main amd64 Packages<br>E: Release file expired, ignoring http:<span class="hljs-regexp">//</span><span class="hljs-number">117.119</span>.<span class="hljs-number">33.138</span>:<span class="hljs-number">8081</span><span class="hljs-regexp">/debian/</span>dists<span class="hljs-regexp">/squeeze-lts/</span>Release (invalid since <span class="hljs-number">524</span>d <span class="hljs-number">12</span>h <span class="hljs-number">54</span>min <span class="hljs-number">42</span>s)<br></code></pre></td></tr></table></figure><p>其中第二个源squeeze-lts会提示过期，在apt配置文件中添加一项配置即可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># vim /etc/apt/apt.conf</span><br>Acquire::Check-Valid-Until false;<br><br><span class="hljs-comment"># aptitude update</span><br>Get:<span class="hljs-number">1</span> http:<span class="hljs-regexp">//</span>apt.oupeng.com squeeze Release.gpg [<span class="hljs-number">1</span>,<span class="hljs-number">655</span> B]<br>Ign http:<span class="hljs-regexp">//</span>apt.oupeng.com<span class="hljs-regexp">/debian/</span> squeeze/main Translation-en<br>Ign http:<span class="hljs-regexp">//</span>apt.oupeng.com<span class="hljs-regexp">/debian/</span> squeeze/main Translation-en_US<br>Get:<span class="hljs-number">2</span> http:<span class="hljs-regexp">//</span>apt.oupeng.com squeeze-lts Release.gpg [<span class="hljs-number">819</span> B]<br>Ign http:<span class="hljs-regexp">//</span>apt.oupeng.com<span class="hljs-regexp">/debian/</span> squeeze-lts/main Translation-en<br>Ign http:<span class="hljs-regexp">//</span>apt.oupeng.com<span class="hljs-regexp">/debian/</span> squeeze-lts/main Translation-en_US<br>Get:<span class="hljs-number">3</span> http:<span class="hljs-regexp">//</span>apt.oupeng.com squeeze Release [<span class="hljs-number">96.0</span> kB]<br>Get:<span class="hljs-number">4</span> http:<span class="hljs-regexp">//</span>apt.oupeng.com squeeze-lts Release [<span class="hljs-number">34.3</span> kB]<br>Get:<span class="hljs-number">5</span> http:<span class="hljs-regexp">//</span>apt.oupeng.com squeeze/main amd64 Packages [<span class="hljs-number">6</span>,<span class="hljs-number">527</span> kB]<br>Get:<span class="hljs-number">6</span> http:<span class="hljs-regexp">//</span>apt.oupeng.com squeeze-lts/main amd64 Packages [<span class="hljs-number">305</span> kB]<br>Hit http:<span class="hljs-regexp">//</span>apt.puppetlabs.com squeeze Release.gpg<br>Ign http:<span class="hljs-regexp">//</span>apt.puppetlabs.com<span class="hljs-regexp">/ squeeze/</span>dependencies Translation-en<br>Ign http:<span class="hljs-regexp">//</span>apt.puppetlabs.com<span class="hljs-regexp">/ squeeze/</span>dependencies Translation-en_US<br>Ign http:<span class="hljs-regexp">//</span>apt.puppetlabs.com<span class="hljs-regexp">/ squeeze/m</span>ain Translation-en<br>Ign http:<span class="hljs-regexp">//</span>apt.puppetlabs.com<span class="hljs-regexp">/ squeeze/m</span>ain Translation-en_US<br>Hit http:<span class="hljs-regexp">//</span>apt.puppetlabs.com squeeze Release<br>Ign http:<span class="hljs-regexp">//</span>apt.puppetlabs.com squeeze/main Sources<br>Ign http:<span class="hljs-regexp">//</span>apt.puppetlabs.com squeeze/dependencies Sources<br>Ign http:<span class="hljs-regexp">//</span>apt.puppetlabs.com squeeze/main amd64 Packages<br>Ign http:<span class="hljs-regexp">//</span>apt.puppetlabs.com squeeze/dependencies amd64 Packages<br>Hit http:<span class="hljs-regexp">//</span>apt.puppetlabs.com squeeze/main Sources<br>Hit http:<span class="hljs-regexp">//</span>apt.puppetlabs.com squeeze/dependencies Sources<br>Hit http:<span class="hljs-regexp">//</span>apt.puppetlabs.com squeeze/main amd64 Packages<br>Hit http:<span class="hljs-regexp">//</span>apt.puppetlabs.com squeeze/dependencies amd64 Packages<br>Fetched <span class="hljs-number">6</span>,<span class="hljs-number">965</span> kB <span class="hljs-keyword">in</span> <span class="hljs-number">2</span>s (<span class="hljs-number">3</span>,<span class="hljs-number">148</span> kB/s)<br><br>Current status: <span class="hljs-number">43</span> updates [+<span class="hljs-number">41</span>], <span class="hljs-number">27994</span> new [+<span class="hljs-number">27654</span>].<br></code></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="https://my.oschina.net/davehe/blog/301665">https://my.oschina.net/davehe/blog/301665</a></li><li><a href="http://www.iteye.com/topic/1117441">http://www.iteye.com/topic/1117441</a></li><li><a href="http://zhangbin.junxilinux.com/?p=341">http://zhangbin.junxilinux.com/?p=341</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用nexus搭建npm私服</title>
    <link href="/2022/07/14/%E4%BD%BF%E7%94%A8nexus%E6%90%AD%E5%BB%BAnpm%E7%A7%81%E6%9C%8D/"/>
    <url>/2022/07/14/%E4%BD%BF%E7%94%A8nexus%E6%90%AD%E5%BB%BAnpm%E7%A7%81%E6%9C%8D/</url>
    
    <content type="html"><![CDATA[<p>第一步，下载nexus</p><p>下载链接： <a href="https://pan.baidu.com/s/1GOYi2M3nT4Wcy7JEYmnqdA">https://pan.baidu.com/s/1GOYi2M3nT4Wcy7JEYmnqdA</a> 提取码: a9hf</p><hr><p>第二步，解压缩</p><p>我下载的是nexus-3.16.1-02-win64.zip这个版本，解压缩后，进入\nexus-3.16.1-02\bin</p><p><img src="https://img2018.cnblogs.com/blog/1737715/201907/1737715-20190711155857755-2044607658.png" alt="img"></p><p>再次目录下，用cmd命令行执行：<code>nexus.exe /run</code></p><p>启动之后默认地址为 localhost:8081, 默认账号密码 admin&#x2F; admin123</p><p><img src="https://img2018.cnblogs.com/blog/1737715/201907/1737715-20190711160628887-1849615120.png" alt="img"></p><hr><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">第三步，创建存储空间（如果使用默认的存储空间，此步骤可省略）<br></code></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/blog/1737715/201907/1737715-20190711161102955-1041368154.jpg" alt="img"></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">输入空间的名称，点击<span class="hljs-keyword">create</span>创建<br></code></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/blog/1737715/201907/1737715-20190711161410888-806828826.jpg" alt="img"></p><hr><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">第四步，创建仓库<br></code></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/blog/1737715/201907/1737715-20190711161824860-518087890.jpg" alt="img"></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span>的仓库有三种：<br></code></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/blog/1737715/201907/1737715-20190711161945372-914768601.jpg" alt="img"></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">这三种分别是：<br>hosted（私有仓库）：用于发布个人开发的<span class="hljs-built_in">npm</span>组件<br>proxy（代理仓库）：可以代理<span class="hljs-built_in">npm</span>和淘宝镜像<br>group（组合仓库）：对外公开的仓库，集合了hosted和proxy<br></code></pre></td></tr></table></figure><hr><p>1.创建 Hosted npm Registries</p><p><img src="https://img2018.cnblogs.com/blog/1737715/201907/1737715-20190711163029318-1980635417.png" alt="img"></p><p>输入仓库名称，存储空间选择刚刚创建的，也可以用默认的。点击create创建。</p><p>2.创建 Proxy npm Registries</p><p><img src="https://img2018.cnblogs.com/blog/1737715/201907/1737715-20190711163433197-1682080117.png" alt="img"></p><p>输入仓库名称，选择存储空间，代理的远程地址可以写<a href="https://registry.npmjs.org,也可以写淘宝镜像.点击create创建./">https://registry.npmjs.org，也可以写淘宝镜像。点击create创建。</a></p><p>3.创建 Group npm Registries</p><p><img src="https://img2018.cnblogs.com/blog/1737715/201907/1737715-20190711164259551-1947844464.png" alt="img"></p><p>组合仓库中除了输入名称和选择存储空间之外，还要选择要包括的仓库，越靠上优先级越高，如果私有仓库在上，用户下载npm包的时候会优先下载私有仓库中的，如果私有仓库没有再去代理仓库中下载。</p><hr><p>第五步，创建用户，设置权限（用于发布npm包）</p><p><img src="https://img2018.cnblogs.com/blog/1737715/201907/1737715-20190711165126924-1536035735.png" alt="img"></p><p>然后是设置权限，这一步如果不设置，是不能发布自己的npm包的。</p><p><img src="https://img2018.cnblogs.com/blog/1737715/201907/1737715-20190711165411076-1196708391.png" alt="img"></p><hr><p>第六步，用户端使用私服</p><p>到这里，nexus的设置都好了，但是用户如何使用私服下载npm和上传npm呢？</p><p>1.用户端设置npm的registry为group仓库</p><p>首先复制出group仓库的链接地址</p><p><img src="https://img2018.cnblogs.com/blog/1737715/201907/1737715-20190711170623345-1749607522.png" alt="img"></p><p>然后，用户端设置registry。</p><p>方法一：</p><p>命令行执行：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm config set registry http:<span class="hljs-regexp">//</span>npm私服所在服务器的ip地址:<span class="hljs-number">8081</span><span class="hljs-regexp">/repository/</span>npm-group/<br></code></pre></td></tr></table></figure><p>方法二：</p><p>修改C:\Users\Administrator下的.npmrc文件，修改为：</p><p>registry&#x3D;<a href="http://npm私服所在服务器的ip地址:8081/repository/npm-group/">http://npm私服所在服务器的ip地址:8081/repository/npm-group/</a></p><p>两种方法都可以，修改后，就可以正常使用npm下载了。</p><p>2.用户端发布自己的npm包到私服（执行的命令均在发布的模块根目录下）</p><p>首先，登陆私服：</p><p>命令行执行：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm login –registry=http:<span class="hljs-regexp">//</span>npm私服所在服务器的ip地址:<span class="hljs-number">8081</span><span class="hljs-regexp">/repository/</span>npm-hosted/<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">这时候需要输入nexus的用户名、密码和邮箱。<br></code></pre></td></tr></table></figure><p>然后，就可以发布了，要发布的模块，必须保证在根目录下有package.json文件，否则会报错。</p><p>命令行执行：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm publish –registry=http:<span class="hljs-regexp">//</span>npm私服所在服务器的ip地址:<span class="hljs-number">8081</span><span class="hljs-regexp">/repository/</span>npm-hosted/<br><br>到此，可以到nexus验证一下有没有发布成功<br></code></pre></td></tr></table></figure><h1 id="Maven-amp-Npm私有仓库离线环境Nexus服务配置总结"><a href="#Maven-amp-Npm私有仓库离线环境Nexus服务配置总结" class="headerlink" title="Maven&amp;Npm私有仓库离线环境Nexus服务配置总结"></a>Maven&amp;Npm私有仓库离线环境Nexus服务配置总结</h1><h3 id="Maven-amp-Npm私有仓库离线环境Nexus服务配置总结-1"><a href="#Maven-amp-Npm私有仓库离线环境Nexus服务配置总结-1" class="headerlink" title="Maven&amp;Npm私有仓库离线环境Nexus服务配置总结"></a>Maven&amp;Npm私有仓库离线环境Nexus服务配置总结</h3><ul><li><a href="https://blog.csdn.net/xiaoxiaocxy/article/details/103079268#_1">说明</a></li><li><a href="https://blog.csdn.net/xiaoxiaocxy/article/details/103079268#Maven_6">Maven仓库</a></li><li><a href="https://blog.csdn.net/xiaoxiaocxy/article/details/103079268#npm__15">npm 仓库</a></li><li><ul><li><a href="https://blog.csdn.net/xiaoxiaocxy/article/details/103079268#npm_16">创建npm仓库</a></li><li><a href="https://blog.csdn.net/xiaoxiaocxy/article/details/103079268#nexus__24">nexus 用户设置</a></li><li><a href="https://blog.csdn.net/xiaoxiaocxy/article/details/103079268#npm_30">npm开发配置</a></li><li><ul><li><a href="https://blog.csdn.net/xiaoxiaocxy/article/details/103079268#_31">设置私有仓库地址</a></li><li><a href="https://blog.csdn.net/xiaoxiaocxy/article/details/103079268#_38">设置私有仓库上传令牌</a></li></ul></li><li><a href="https://blog.csdn.net/xiaoxiaocxy/article/details/103079268#npm_93">下载npm依赖</a></li><li><ul><li><a href="https://blog.csdn.net/xiaoxiaocxy/article/details/103079268#_95">安装下载工具</a></li><li><ul><li><a href="https://blog.csdn.net/xiaoxiaocxy/article/details/103079268#nodetgzdownloader_96">安装node-tgz-downloader</a></li><li><a href="https://blog.csdn.net/xiaoxiaocxy/article/details/103079268#_106">下载项目依赖</a></li></ul></li><li><a href="https://blog.csdn.net/xiaoxiaocxy/article/details/103079268#_117">上传项目依赖</a></li></ul></li><li><a href="https://blog.csdn.net/xiaoxiaocxy/article/details/103079268#_119">单独上传</a></li><li><a href="https://blog.csdn.net/xiaoxiaocxy/article/details/103079268#_132">批量上传</a></li><li><a href="https://blog.csdn.net/xiaoxiaocxy/article/details/103079268#_151">上传问题</a></li><li><ul><li><a href="https://blog.csdn.net/xiaoxiaocxy/article/details/103079268#_168">验证</a></li></ul></li></ul></li></ul><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li>项目使用Maven构建。开发遇到环境为内网，无法连接外网。内网构建的nexus服务无法正常从公共的中央仓库同步项目使用的第三方依赖，造成项目开发放上的困扰。查看nexus部署文档与检索网络上类似问题的解决方法，经过尝试，初步实现内网构建的nexus服务能正常提供服务。这里整理做下记录</li><li>主要针对nexus版本 2.0</li></ul><h1 id="Maven仓库"><a href="#Maven仓库" class="headerlink" title="Maven仓库"></a>Maven仓库</h1><ol><li>本机开发环境Maven仓库依赖包打包上传至nexus服务器目录：&#x2F;usr&#x2F;local&#x2F;nexus&#x2F;sonatype-work&#x2F;nexus&#x2F;storage&#x2F;releases，&#x2F;usr&#x2F;local&#x2F;为nexus安装目录。</li><li>建议上传过滤掉本机Maven仓库中名称为 .cache .locks 的文件夹。</li><li>上传完成，在Releases仓库执行 Update Index<br><img src="https://img-blog.csdnimg.cn/20191115104420337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW94aWFvY3h5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>Browse Storage Refresh<br><img src="https://img-blog.csdnimg.cn/20191115104812843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW94aWFvY3h5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>修改项目中pom.xml repositories url，测试、验证项目依赖是否正常</li></ol><h1 id="npm-仓库"><a href="#npm-仓库" class="headerlink" title="npm 仓库"></a>npm 仓库</h1><h2 id="创建npm仓库"><a href="#创建npm仓库" class="headerlink" title="创建npm仓库"></a>创建npm仓库</h2><ol><li>管理员用户名、密码登陆nexus服务</li><li>view&#x2F;repositories—–&gt;Add Host Repository</li><li>Provider：npm，Deployment Policy：Allow Redeploy</li><li>保存<br><img src="https://img-blog.csdnimg.cn/20191115152441749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW94aWFvY3h5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><h2 id="nexus-用户设置"><a href="#nexus-用户设置" class="headerlink" title="nexus 用户设置"></a>nexus 用户设置</h2><p>nexus上传权限这里使用deployment用户，设置nexus用户deployment密码</p><ol><li>Security—–&gt;Users</li><li>右击deployment用户行，重置或设置deployment用户密码</li></ol><p><img src="https://img-blog.csdnimg.cn/20191115154134860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW94aWFvY3h5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="npm开发配置"><a href="#npm开发配置" class="headerlink" title="npm开发配置"></a>npm开发配置</h2><h3 id="设置私有仓库地址"><a href="#设置私有仓库地址" class="headerlink" title="设置私有仓库地址"></a>设置私有仓库地址</h3><ul><li>本地命令行执行：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry http://xxxxx 地址<br>1<br></code></pre></td></tr></table></figure><h3 id="设置私有仓库上传令牌"><a href="#设置私有仓库上传令牌" class="headerlink" title="设置私有仓库上传令牌"></a>设置私有仓库上传令牌</h3><ul><li>生成令牌</li></ul><p>Encoding Credentials on Linux<br>You can create this encoded string on Linux with the openssl command line tool. For example, for the default admin user:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> -n <span class="hljs-string">&#x27;admin:admin123&#x27;</span> | openssl <span class="hljs-built_in">base64</span><br><br></code></pre></td></tr></table></figure><p>Encoding Credentials on Windows using “certutil”<br>To use certutil on Windows you need to put the credentials to be encoded into a file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">admin:admin123<br><br></code></pre></td></tr></table></figure><p>Then run:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">c:\certutil /encode in.txt out.txt<br><br></code></pre></td></tr></table></figure><p>After this the base64 encoded credentials can be found in between the begin and end certificate lines in the output file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">-----BEGIN CERTIFICATE-----<br>YWRtaW46YWRtaW4xMjM=<br>-----END CERTIFICATE----- <br><br></code></pre></td></tr></table></figure><p>Encoding Credentials on Windows using Powershell</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$Bytes = [<span class="hljs-title class_">System</span>.<span class="hljs-property">Text</span>.<span class="hljs-property">Encoding</span>]::<span class="hljs-title class_">UTF8</span>.<span class="hljs-title class_">GetBytes</span>(<span class="hljs-string">&quot;admin:admin123&quot;</span>)<br>[<span class="hljs-title class_">Convert</span>]::<span class="hljs-title class_">ToBase64String</span>($Bytes)<br><br></code></pre></td></tr></table></figure><p>Adding Credentials to the npm Configuration<br>Once you have the encoded credentials the value as well as author information can then be added to the .npmrc file:<br>#an email is required to publish npm packages<br>email&#x3D;<a href="mailto:&#x6a;&#x61;&#x6e;&#x65;&#64;&#x65;&#x78;&#x61;&#x6d;&#x70;&#108;&#101;&#x2e;&#x63;&#x6f;&#109;">&#x6a;&#x61;&#x6e;&#x65;&#64;&#x65;&#x78;&#x61;&#x6d;&#x70;&#108;&#101;&#x2e;&#x63;&#x6f;&#109;</a><br>always-auth&#x3D;true<br>_auth&#x3D;YWRtaW46YWRtaW4xMjM&#x3D;</p><p><em>Using whatever tool you are generating the encoded username and password string, try to encode the string admin:admin123. The result is YWRtaW46YWRtaW4xMjM&#x3D;. Another example for a valid setup is jane:testpassword123 resulting in amFuZTp0ZXN0cGFzc3dvcmQxMjM&#x3D;.<br>Once a package is published to the private registry in the repository manager, any other developers or build servers, that access it via the repository group have instant access to the packages.</em></p><ul><li>说明<br>修改系统用户目录文件：.npmc<br>email：设置个人邮箱地址<br>always-auth：true，设置授权<br>_auth：通过base64编码设置的用户名:密码字符串</li></ul><p><a href="https://blog.csdn.net/xiaoxiaocxy/article/details/%E5%AE%98%E6%96%B9%E8%AE%BE%E7%BD%AE%E6%96%87%E6%A1%A3">https://help.sonatype.com/repomanager2/node-packaged-modules-and-npm-registries</a></p><h2 id="下载npm依赖"><a href="#下载npm依赖" class="headerlink" title="下载npm依赖"></a>下载npm依赖</h2><h3 id="安装下载工具"><a href="#安装下载工具" class="headerlink" title="安装下载工具"></a>安装下载工具</h3><h4 id="安装node-tgz-downloader"><a href="#安装node-tgz-downloader" class="headerlink" title="安装node-tgz-downloader"></a>安装node-tgz-downloader</h4><p><a href="https://blog.csdn.net/xiaoxiaocxy/article/details/%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95">https://www.npmjs.com/package/node-tgz-downloader</a></p><p>介绍如下：<br>Downloads all of the tarballs based on one of the following:</p><ol><li>local package-lock.json file</li><li>url to a package-lock.json</li><li>name of package</li><li>url to a package.json</li><li>search keyword</li></ol><h4 id="下载项目依赖"><a href="#下载项目依赖" class="headerlink" title="下载项目依赖"></a>下载项目依赖</h4><ol><li>项目目录执行 npm install，生成 package-lock.json文件</li><li>在项目 package-lock.json 文件所在目录，打开命令行窗口。执行下载npm依赖：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">download-tgz package-lock package-lock.json<br><br></code></pre></td></tr></table></figure><ol><li>下载完成，查看依赖下载目录 tarballs 以及npm tgz格式的依赖</li></ol><h3 id="上传项目依赖"><a href="#上传项目依赖" class="headerlink" title="上传项目依赖"></a>上传项目依赖</h3><p>上传下载的项目依赖至nexus</p><h2 id="单独上传"><a href="#单独上传" class="headerlink" title="单独上传"></a>单独上传</h2><ol><li>上传tgz格式</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm publish XXXX.tgz<br><br></code></pre></td></tr></table></figure><ol><li>上传包含 package.json文件 的文件夹</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm publish XXXX/package.json<br><br></code></pre></td></tr></table></figure><h2 id="批量上传"><a href="#批量上传" class="headerlink" title="批量上传"></a>批量上传</h2><p>批量上传脚本供参考。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># 参数为带上传依赖tgz所在的目录</span><br>REPOSITORY=<span class="hljs-variable">$1</span><br><br><span class="hljs-keyword">for</span> package <span class="hljs-keyword">in</span> <span class="hljs-variable">$REPOSITORY</span>/*; <span class="hljs-keyword">do</span><br><br><span class="hljs-keyword">for</span> npm_dep <span class="hljs-keyword">in</span> <span class="hljs-variable">$package</span>/*.tgz; <span class="hljs-keyword">do</span><br><br>    npm publish <span class="hljs-variable">$npm_dep</span><br><br>    <span class="hljs-keyword">done</span><br><br><span class="hljs-keyword">done</span><br><br></code></pre></td></tr></table></figure><h2 id="上传问题"><a href="#上传问题" class="headerlink" title="上传问题"></a>上传问题</h2><p>部分npm依赖 package.json 中已设置上传地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;publishConfig&quot;</span>: &#123;<br>   <span class="hljs-string">&quot;registry&quot;</span>: <span class="hljs-string">&quot;https://registry.npmjs.org/&quot;</span><br> &#125;<br><br></code></pre></td></tr></table></figure><p>这里的处理方式是将此配置删除，单独上传。<br>这里列出存在此配置的部分依赖包名称：</p><ul><li>archiver-1.3.0</li><li>archiver-utils-1.3.0</li><li>builtins-1.0.3</li><li>compress-commons-1.2.2</li><li>crc32-stream-2.0.0</li><li>zip-stream-1.2.0</li></ul><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>项目目录执行：npm install验证依赖包是否正常下载。</p><p>以上，有问题的话，请指出。谢谢</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>在Vim中查看文件编码</title>
    <link href="/2022/07/14/%E5%9C%A8Vim%E4%B8%AD%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81/"/>
    <url>/2022/07/14/%E5%9C%A8Vim%E4%B8%AD%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:<span class="hljs-built_in">set</span> fileencoding<br></code></pre></td></tr></table></figure><p>即可显示文件编码格式。 如果你只是想查看其它编码格式的文件或者想解决 用Vim查看文件乱码的问题，那么在 ~&#x2F;.vimrc 文件中添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> encoding=utf-8 fileencodings=utf-8<br></code></pre></td></tr></table></figure><p>这样，就可以让vim自动识别文件编码（可以自动识别UTF-8或 者GBK编码的文件），其实就是依照fileencodings提供的编码列表尝试，如果没有找到合适 的编码，就用latin-1(ASCII)编码打开。</p><h2 id="以指定的编码打开某文件"><a href="#以指定的编码打开某文件" class="headerlink" title="以指定的编码打开某文件"></a>以指定的编码打开某文件</h2><p>如打开windows中以ANSI保存的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim file.txt -c <span class="hljs-string">&quot;e ++enc=GB18030&quot;</span><br></code></pre></td></tr></table></figure><h2 id="文件编码转换"><a href="#文件编码转换" class="headerlink" title="文件编码转换"></a>文件编码转换</h2><p>在Vim中直接进行转换文件编码,比如将一个文件转换成utf-8格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:<span class="hljs-built_in">set</span> fileencoding=utf-8<br></code></pre></td></tr></table></figure><p>查看文件格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:<span class="hljs-built_in">set</span> fileformat?<br></code></pre></td></tr></table></figure><p>设置文件格式为 unix</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>:<span class="hljs-built_in">set</span> fileformat=unix<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>搭建Nginx正向代理服务</title>
    <link href="/2022/07/14/%E6%90%AD%E5%BB%BANginx%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1/"/>
    <url>/2022/07/14/%E6%90%AD%E5%BB%BANginx%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>需求背景：</p><p>  前段时间公司因为业务需求需要部署一个正向代理，需要内网服务通过正向代理访问到外网移动端厂商域名通道等效果，之前一直用nginx做四层或者七层的反向代理，正向代理还是第一次配置，配置的过程也遇到些小坑，今天就分享出来。</p><p>安装环境准备:</p><p>​     nginx本身是不支持https协议请求转发，为了让nginx能达到这一效果需要借助第三方模块ngx_http_proxy_connect_module。首先下载这一模块：<a href="https://github.com/chobits/ngx_http_proxy_connect_module%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E7%84%B6%E5%90%8E%E5%87%86%E5%A4%87nginx%E7%8E%AF%E5%A2%83">https://github.com/chobits/ngx_http_proxy_connect_module到服务器，然后准备nginx环境</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">yum -y install pcre-devel zlib-devel gcc gcc+c++ make openssl-devel pcre-devel  zlib-devel patch   <br>tar xf nginx-<span class="hljs-number">1.6</span>.<span class="hljs-number">0</span>.tar.gz<br>unzip <span class="hljs-regexp">/root/</span>ngx_http_proxy_connect_module-master.zip<br>cd  <span class="hljs-regexp">/root/</span>nginx-<span class="hljs-number">1.6</span>.<span class="hljs-number">0</span>/<br>patch  -p1 &lt; <span class="hljs-regexp">/root/</span>ngx_http_proxy_connect_module-master/proxy_connect.patch  <br>.<span class="hljs-regexp">/configure --add-module=/</span>root<span class="hljs-regexp">/ngx_http_proxy_connect_module-master/</span>ngx_http_proxy_connect_module<br>make &amp;&amp;  make install<br></code></pre></td></tr></table></figure><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>编译安装成功后，配置nginx正向代理：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">#user nobody;<span class="hljs-string">``</span>worker_processes <span class="hljs-number">1</span>;<span class="hljs-string">``</span>#error_log logs/error.log;<span class="hljs-string">``</span>#error_log logs/error.log notice;<span class="hljs-string">``</span>#error_log logs/error.log info;<span class="hljs-string">``</span>#pid    logs/nginx.pid;<span class="hljs-string">``</span>events &#123;<span class="hljs-string">``</span>  <span class="hljs-string">``</span>worker_connections <span class="hljs-number">1024</span>;<span class="hljs-string">``</span>&#125;<span class="hljs-string">` `</span>http &#123;<span class="hljs-string">``</span>  <span class="hljs-string">``</span>include    mime.types;<span class="hljs-string">``</span>  <span class="hljs-string">``</span>default_type application<span class="hljs-string">``</span>/octet-stream<span class="hljs-string">``</span>;<span class="hljs-string">``</span>  <span class="hljs-string">``</span>#access_log logs/access.log main;<span class="hljs-string">``</span>  <span class="hljs-string">``</span>sendfile    on;<span class="hljs-string">``</span>  <span class="hljs-string">``</span>#tcp_nopush   on;<span class="hljs-string">``</span>  <span class="hljs-string">``</span>keepalive_timeout <span class="hljs-number">65</span>;<span class="hljs-string">``</span>  <span class="hljs-string">``</span>#gzip on;<span class="hljs-string">` `</span>server &#123;<span class="hljs-string">``</span>    <span class="hljs-string">``</span>listen <span class="hljs-number">88</span>;        <span class="hljs-string">``</span>#监听端口<span class="hljs-string">``</span>    <span class="hljs-string">``</span>resolver <span class="hljs-number">183.60</span><span class="hljs-number">.82</span><span class="hljs-number">.98</span>;  <span class="hljs-string">``</span>#dns解析地址<span class="hljs-string">``</span>    <span class="hljs-string">``</span>server_name <span class="hljs-symbol">_</span>;<span class="hljs-string">``</span>    <span class="hljs-string">``</span>#charset koi8-r;<span class="hljs-string">``</span>    <span class="hljs-string">``</span>#access_log logs/host.access.log main;<span class="hljs-string">``</span>    <span class="hljs-string">``</span>location / &#123;<span class="hljs-string">``</span>       <span class="hljs-string">``</span>proxy_pass https:<span class="hljs-string">``</span>//<span class="hljs-string">``</span>$host$request_uri;   <span class="hljs-string">``</span>#设定http代理服务器的协议和地址<span class="hljs-string">``</span>       <span class="hljs-string">``</span>proxy_set_header <span class="hljs-symbol">HOST</span> $host;<span class="hljs-string">``</span>       <span class="hljs-string">``</span>proxy_buffers <span class="hljs-number">256</span> <span class="hljs-number">4</span>k;<span class="hljs-string">``</span>       <span class="hljs-string">``</span>proxy_max_temp_file_size <span class="hljs-number">0</span>k;<span class="hljs-string">``</span>       <span class="hljs-string">``</span>proxy_connect_timeout <span class="hljs-number">30</span>;<span class="hljs-string">``</span>       <span class="hljs-string">``</span>proxy_send_timeout <span class="hljs-number">60</span>;<span class="hljs-string">``</span>       <span class="hljs-string">``</span>proxy_read_timeout <span class="hljs-number">60</span>;<span class="hljs-string">``</span>       <span class="hljs-string">``</span>proxy_next_upstream error timeout invalid_header http_502;<span class="hljs-string">``</span>      <span class="hljs-string">``</span>#root  html;<span class="hljs-string">``</span>      <span class="hljs-string">``</span>#index index.html index.htm;<span class="hljs-string">``</span>    <span class="hljs-string">``</span>&#125;<span class="hljs-string">``</span>    <span class="hljs-string">``</span>error_page  <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span> <span class="hljs-string">``</span>/<span class="hljs-number">50</span>x<span class="hljs-string">``</span>.html;<span class="hljs-string">``</span>    <span class="hljs-string">``</span>location = <span class="hljs-string">``</span>/<span class="hljs-number">50</span>x<span class="hljs-string">``</span>.html &#123;<span class="hljs-string">``</span>      <span class="hljs-string">``</span>root  html;<span class="hljs-string">``</span>    <span class="hljs-string">``</span>&#125;<span class="hljs-string">` `</span>  <span class="hljs-string">``</span>&#125;<span class="hljs-string">`  `</span>server &#123;<span class="hljs-string">``</span>    <span class="hljs-string">``</span>resolver <span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span>;  <span class="hljs-string">``</span>#dns解析地址<span class="hljs-string">``</span>    <span class="hljs-string">``</span>listen <span class="hljs-number">89</span>;     <span class="hljs-string">``</span>#代理监听端口<span class="hljs-string">``</span>    <span class="hljs-string">``</span>proxy_connect;<span class="hljs-string">``</span>    <span class="hljs-string">``</span>proxy_connect_allow      <span class="hljs-number">443</span> <span class="hljs-number">563</span>;<span class="hljs-string">``</span>    <span class="hljs-string">``</span>location / &#123;<span class="hljs-string">``</span>       <span class="hljs-string">``</span>proxy_pass https:<span class="hljs-string">``</span>//<span class="hljs-string">``</span>$host$request_uri;   <span class="hljs-string">``</span>#设定https代理服务器的协议和地址<span class="hljs-string">``</span>       <span class="hljs-string">``</span>proxy_set_header <span class="hljs-symbol">HOST</span> $host;<span class="hljs-string">``</span>       <span class="hljs-string">``</span>proxy_buffers <span class="hljs-number">256</span> <span class="hljs-number">4</span>k;<span class="hljs-string">``</span>       <span class="hljs-string">``</span>proxy_max_temp_file_size <span class="hljs-number">0</span>k;<span class="hljs-string">``</span>       <span class="hljs-string">``</span>proxy_connect_timeout <span class="hljs-number">30</span>;<span class="hljs-string">``</span>       <span class="hljs-string">``</span>proxy_send_timeout <span class="hljs-number">60</span>;<span class="hljs-string">``</span>       <span class="hljs-string">``</span>proxy_read_timeout <span class="hljs-number">60</span>;<span class="hljs-string">``</span>       <span class="hljs-string">``</span>proxy_next_upstream error timeout invalid_header http_502;<span class="hljs-string">` `</span>    <span class="hljs-string">``</span>&#125;<span class="hljs-string">``</span>    <span class="hljs-string">``</span>error_page  <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span> <span class="hljs-string">``</span>/<span class="hljs-number">50</span>x<span class="hljs-string">``</span>.html;<span class="hljs-string">``</span>    <span class="hljs-string">``</span>location = <span class="hljs-string">``</span>/<span class="hljs-number">50</span>x<span class="hljs-string">``</span>.html &#123;<span class="hljs-string">``</span>      <span class="hljs-string">``</span>root  html;<span class="hljs-string">``</span>    <span class="hljs-string">``</span>&#125;<span class="hljs-string">` `</span>  <span class="hljs-string">``</span>&#125; <span class="hljs-string">` `</span>&#125;　　<br></code></pre></td></tr></table></figure><p>当配置文件配置好之后保存即可，重启nginx，进行测试：</p><p>去内网服务器里curl，可以在环境变量里添加代理：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">vim <span class="hljs-string">``</span>/etc/profile<span class="hljs-string">``</span><span class="hljs-params">...</span><span class="hljs-string">``</span><span class="hljs-params">...</span><span class="hljs-string">``</span>#export https_proxy=正向代理IP:端口<span class="hljs-string">``</span>export<span class="hljs-string">` `</span>https_proxy=<span class="hljs-number">192.168</span><span class="hljs-number">.3</span><span class="hljs-number">.17</span>:<span class="hljs-number">89</span><br></code></pre></td></tr></table></figure><p>　　<img src="https://img2018.cnblogs.com/common/1450920/201911/1450920-20191122143113488-952180395.png" alt="img"></p><p>另一种 方式不用加环境变量，临时代理</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#curl</span> -<span class="hljs-selector-tag">i</span> <span class="hljs-attr">--proxy</span> 代理IP：端口   要访问域名``curl -<span class="hljs-selector-tag">i</span> <span class="hljs-attr">--proxy</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">3.17</span>:<span class="hljs-number">89</span>   www<span class="hljs-selector-class">.baidu</span>.com<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>网络排错必备</title>
    <link href="/2022/07/14/%E7%BD%91%E7%BB%9C%E6%8E%92%E9%94%99%E5%BF%85%E5%A4%87/"/>
    <url>/2022/07/14/%E7%BD%91%E7%BB%9C%E6%8E%92%E9%94%99%E5%BF%85%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<p>为什么还要必备条件？因为这里所讲的网络排错并不仅仅是停留在某一个小小命令的使用上，而是一套系统的方法，如果没有这些条件，难以在项目中灵活运用，所以还是先看看这些基础的条件吧。</p><h4 id="1-了解网络通信的基础设备和其对应的OSI层次"><a href="#1-了解网络通信的基础设备和其对应的OSI层次" class="headerlink" title="1.了解网络通信的基础设备和其对应的OSI层次"></a>1.了解网络通信的基础设备和其对应的OSI层次</h4><p>像交换机、三层交换机、路由器、防火墙这些最基本的网络设备应该要有些了解，尤其是它们对应的OSI层次以及作用，比如普通的二层交换机对应OSI七层模型中的数据链路层，它可以隔绝冲突域，同时可能通过虚拟局域网技术(VLAN)来隔绝广播域，二层交换机通过二层地址即MAC地址来实现数据帧的转发；再比如路由器，它对应网络层，可以提供路由寻址的功能等等。</p><h4 id="2-了解中小型企业网络的基本架构"><a href="#2-了解中小型企业网络的基本架构" class="headerlink" title="2.了解中小型企业网络的基本架构"></a>2.了解中小型企业网络的基本架构</h4><p>一般中小型企业网络的基本架构都是这样的：接入层–汇聚层–核心层–网络出口。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ac7ee6298f64ebe35da524c22fc23e7d.png" alt="网络基本架构"></p><p>如果网络环境比较庞大，汇聚层和核心层都会有，像这里的话，一般小型网络，就直接没有汇聚层，不过思想是一样的。</p><p>下面讲的排错其实都是针对用户PC来说明的，事实上，数据中心中的网络排错也是类似的。不管网络环境多么复杂，其实简化下来跟这个都是差不多的。</p><h4 id="3-知道常用的网络排错命令"><a href="#3-知道常用的网络排错命令" class="headerlink" title="3.知道常用的网络排错命令"></a>3.知道常用的网络排错命令</h4><p>如果用户使用的是Windows操作系统，那么下面的这些命令就很重要了：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a57f71aed601265df5cc37673a0315de.png" alt="图片"> <img src="https://img-blog.csdnimg.cn/img_convert/b55e7f14cec1d0dc0d4268ff6d1fda14.png" alt="常见的命令合集"></p><p>这些命令都是网络排错和检查过程中会用到的基础命令。</p><h4 id="4-清楚知道网络排错的一个重要原则"><a href="#4-清楚知道网络排错的一个重要原则" class="headerlink" title="4. 清楚知道网络排错的一个重要原则"></a>4. 清楚知道网络排错的一个重要原则</h4><p>网络排错，不就是要判断网络哪里出了问题，因此，你就必须要知道数据的走向。</p><p>所以这个重要的原则是：关注数据的走向。</p><p>下面讲的网络排错思路其实就是通过追踪数据的走向来一步步缩小网络故障点的，因此，时刻记住这一点非常非常重要！这也是为什么上面需要让你了解中小型企业网络的基本架构了。</p><h3 id="网络排错基本思路"><a href="#网络排错基本思路" class="headerlink" title="网络排错基本思路"></a>网络排错基本思路</h3><p>基本思路如下：</p><p>步骤一：检查物理链路是否有问题</p><p>步骤二：查看本机IP地址、路由、DNS的设置是否有问题</p><p>步骤三：测试网关或路由器的通畅情况。先测网关然后再测路由器，一级一级地测试IP)</p><p>步骤四：测试ping公网ip的通畅情况(平时要记几个外部公网ip）</p><p>步骤五：测试DNS的通畅情况，可以直接ping网站地址</p><h3 id="网络排错详细步骤"><a href="#网络排错详细步骤" class="headerlink" title="网络排错详细步骤"></a>网络排错详细步骤</h3><p>为了更好的讲述网络排错的过程和思路，假设我们有下面的一个网络环境：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a57f71aed601265df5cc37673a0315de.png" alt="图片"> <img src="https://img-blog.csdnimg.cn/img_convert/905cc6c6ce12b936718c5f680ded6fb2.png" alt="网络环境"></p><p>下面，我们就以上面这个网络环境为例子，详细介绍我们的网络排错思路，每一步要怎么做，每一步为什么要这样做以及这样做之后我们可以得到什么信息，都会做一个说明。</p><h4 id="1-检查物理链路是否有问题"><a href="#1-检查物理链路是否有问题" class="headerlink" title="1. 检查物理链路是否有问题"></a>1. 检查物理链路是否有问题</h4><p>这一步是我个人认为在做网络排错时必须要做的第一步！经常会听朋友说，领导的电脑上不了网，需要过去排错，搞了老半天，还发现不了问题，最后在几经绝望之时，竟然发现网线都没接上电脑。这就真的是悲剧了，浪费了很多时间不说，这样的网络排错思路本来就是有错误的，所以清晰的思路很重要，避免走弯路。</p><p>因为也许不是每个人都可以去机房查看交换机的接线情况，所以这一步，我们排查的重点范围就应该放在如下面图所示的地方：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a57f71aed601265df5cc37673a0315de.png" alt="图片"> <img src="https://img-blog.csdnimg.cn/img_convert/081dfbb5485f3030cebfc8746acfdb4b.png" alt="检查物理链路"></p><p>在这一步，下面几点是需要注意排查的：</p><ul><li>确认电脑本身的网卡有没有问题</li><li>确认接的网线有没有问题(检查水晶头、网线的连接、网线的质量)</li><li>本机所连接的交换机(如果可以去机房查看的话)</li></ul><p>如果上面这几点排查都没有问题了，那么就是该网络环境中的其他设备问题了。这一范围的排查相对比较简单，因为只涉及到物理链路的连接问题。</p><h4 id="2-查看本机IP地址、路由、DNS的设置是否有问题"><a href="#2-查看本机IP地址、路由、DNS的设置是否有问题" class="headerlink" title="2. 查看本机IP地址、路由、DNS的设置是否有问题"></a>2. 查看本机IP地址、路由、DNS的设置是否有问题</h4><p>上面第一步，物理链路的排查没有问题了，也就是说，电脑接上网线之后，电脑有反应了，可以识别，但是网络还是不通，来到这一步，就应该先把注意的范围放在电脑的设置上面了。</p><p>这一步，我们关注的重点是：</p><p>(1) IP地址设置</p><p>如果采用的是DHCP自动获取的方法，那么这时候只需要看自己本机的设置上有没有开启自动获取IP的设置以及有没有开启相关的服务;如果用的是静态IP，那么就必须要注意IP地址的填写有没有错(一般网络管理人员给的)、IP地址的子网掩码有没有问题(这很重要，对于静态IP，很多人在这里设置错误)。</p><p>另外值得提的是，给电脑分配ip地址时，最好是绑定mac地址，避免用户私改ip地址，造成ip冲突。</p><p>一般可以用下面的命令查看：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a57f71aed601265df5cc37673a0315de.png" alt="图片"> <img src="https://img-blog.csdnimg.cn/img_convert/cafe972bd525c1dc48e0bad272d8f7ae.png" alt="查看IP配置"></p><p>(2) 路由设置</p><p>对于服务器、PC，一般是指默认网关的设置了;对于路由器本身或三层交换机，那就是静态路由或动态路由的设置问题了。</p><p>(3) DNS设置</p><p>主要是要确保所设置的DNS服务器地址到底有没有提供域名解析服务或者是否出现了故障，你得设置一个正确的DNS服务器地址或可以自动获取。</p><p>在windows上面你可以通过下面的命令查看：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a57f71aed601265df5cc37673a0315de.png" alt="图片"> <img src="https://img-blog.csdnimg.cn/img_convert/6eeb0c4cea029fff978d861c579d8c12.png" alt="查看dns配置"></p><h4 id="3-测试网关或路由器的通畅情况"><a href="#3-测试网关或路由器的通畅情况" class="headerlink" title="3. 测试网关或路由器的通畅情况"></a>3. 测试网关或路由器的通畅情况</h4><p>先测网关然后再测路由器，一级一级地测试。</p><p>在上面的网络环境中，在网络通的情况下，我们在电脑上使用命令tracert -d命令，会得到下面的结果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a57f71aed601265df5cc37673a0315de.png" alt="图片"> <img src="https://img-blog.csdnimg.cn/img_convert/a63d4e30dfa7207a97436528149a8922.png" alt="测试路由"></p><p>通过这个测试结果，我们可以清楚地知道电脑在访问互联网时，数据的走向情况：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a57f71aed601265df5cc37673a0315de.png" alt="图片"> <img src="https://img-blog.csdnimg.cn/img_convert/cbcb01ff28e362d6fc5b31f7cb232760.png" alt="数据走向"></p><p>根据这个数据走向，我们就可以得到一个重要的思路，就是根据数据走向来检测网络的通畅情况!因此，我们可以分两步：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ac1de1a3a022e01b14c066954c29fac8.png" alt="测试网关"></p><p>(1) 先测试电脑到网关192.168.2.254的通畅情况</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a57f71aed601265df5cc37673a0315de.png" alt="图片"></p><p>我们可以在自己的电脑上自己ping网关的地址，看是否有响应</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a57f71aed601265df5cc37673a0315de.png" alt="图片"> <img src="https://img-blog.csdnimg.cn/img_convert/7c28092f32a7e9341ad48d0d447b1583.png" alt="ping网关"></p><p>一般这样的判断方法是比较快的，但有时候，无论怎样都ping不通，那么则可能有以下的几种情况：</p><ul><li>网关设备做了禁止ping的设置</li><li>网关接口或网关设备出现故障</li></ul><p>对于a，一般很少会在这些设备在做ping的限制操作，实在是没有太大的必要这样做，当然，网络安全等要求十分严格的除外。ping通192.168.2.254网关后，再ping一下172.16.13.1以确认电脑到整个网关设备都没有问题。</p><p>对于ping不通的时候，我个人还建议在电脑上执行如下操作：arp -a ：网关地址和网关的mac地址。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a57f71aed601265df5cc37673a0315de.png" alt="图片"> <img src="https://img-blog.csdnimg.cn/img_convert/487c32d74f8cf171eb4ce67474e71194.png" alt="查看arp"></p><p>即查看电脑本身有没有获取到网关的MAC的地址，显然，如果没有网关的MAC地址，那也是不可能ping通网关的，在排除了前面电脑设置的问题后，你可以猜测是网关设备出了问题，这时就可以联系网络工程师对网关设备进行测试了。</p><p>(2) 测试到其它路由器的通畅情况</p><p>前面一步没有问题了，也就是电脑到网关通信正常了，再测试网关到出口路由器的通畅情况：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a57f71aed601265df5cc37673a0315de.png" alt="图片"> <img src="https://img-blog.csdnimg.cn/img_convert/ae77d9dca5789c156bdb34616fef52fc.png" alt="出口路由器"></p><p>这里，我们使用tracert -d命令就可以了：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a57f71aed601265df5cc37673a0315de.png" alt="图片"> <img src="https://img-blog.csdnimg.cn/img_convert/8b74ed818808b5c3063bb5ad6b7229fe.png" alt="tracert出口路由器"></p><p>当然，如果发现不通，那么则可能是下面的情况：</p><p>· 网关设备与路由器之间的物理链路问题</p><p>· 网关设备与路由器之间的设置问题，比如路由协议、接口配置之类的</p><p>出现上面的情况，那就是网络工程师的问题了，当然，如果你是网络工程师，应该要马上查看一下设备的状态，看是不是设备哪里出现问题了。</p><p>上面的步骤完成了，假设你的出口路由器设置是没有问题的，比如NAT与默认路由等的设置没有问题，那么我们大致可以知道，内网的一个基本通信是正常的(至少你的电脑和出口路由器的通信没问题)，我们就要看看电脑到底能不能访问互联网了。</p><h3 id="测试ping公网ip的通畅情况"><a href="#测试ping公网ip的通畅情况" class="headerlink" title="测试ping公网ip的通畅情况"></a>测试ping公网ip的通畅情况</h3><p>来到这一步的时候，就说明前面三步是没有问题的，也就是说，本地局域网络的通信是正常的，这时要做的就是判断本地局域网络与外网(公网)之间的通信有没有问题了：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a57f71aed601265df5cc37673a0315de.png" alt="图片"> <img src="https://img-blog.csdnimg.cn/img_convert/7ce6606ea145a7c218b7841cf8987e4f.png" alt="测试公网"></p><p>这里采取的是直接ping公网地址的方法，是为了排除DNS的影响(万一你的DNS设置又有问题)，至于要ping什么样的公网地址，个人建议是，可以ping一些没有禁止ping的公共DNS服务器地址，比如114.114.114.114和8.8.8.8的：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a57f71aed601265df5cc37673a0315de.png" alt="图片"> <img src="https://img-blog.csdnimg.cn/img_convert/3a060df02274c9061b7c0a8454f9cf8a.png" alt="ping dns"></p><p>这样之后，基本上就可以确定网络是没有问题的了。能ping通外网，说明网络是没有问题的，当然，这里并没有提到出口放置防火墙的情况，实际上，思路是一致的，但是，你需要考虑的是，你的访问数据有没有被防火墙给过滤掉，是数据出去的时候过滤了，还是数据回来的时候过滤了？由于还要涉及到防火墙的设置，这里就不再提及了，只是仍要注意这一点就是了。</p><h3 id="测试DNS的通畅情况"><a href="#测试DNS的通畅情况" class="headerlink" title="测试DNS的通畅情况"></a>测试DNS的通畅情况</h3><p>如题，可以直接ping网站地址，看有没有回显IP地址，至于通不通是另外一回事，只要可以回显IP地址，那么DNS就没有问题了，不过这里仍然要说一下nslookup这个命令，这是一个非常好用的命令，我平常自己在网络排错时，基本上都会用到：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a57f71aed601265df5cc37673a0315de.png" alt="图片"> <img src="https://img-blog.csdnimg.cn/img_convert/2a0cfafa7e7f3ab7a338e8b5588fa9d7.png" alt="dns排查命令"></p><p>当然也可以像下面这样使用：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a57f71aed601265df5cc37673a0315de.png" alt="图片"> <img src="https://img-blog.csdnimg.cn/img_convert/096fd699c927ef0877b53b01f74c245e.png" alt="dns排查命令"></p><p>使用nslookup命令，作用有二：</p><ul><li>帮你测试你设置的DNS服务器有没有问题</li><li>在不考虑DNS服务器是否智能的前提下，你可以根据回显IP地址速度的快慢来大致判断DNS服务器的优劣情况</li></ul><p>所以可以充分利用nslookup命令了。</p><p>所以对于网络排错的思路和一些基本命令的掌握还是很重要的，虽然单个命令的使用的功能不是特别大，但组合起来使用却是可以解决很多问题。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>通过docker-compose安装wordpress</title>
    <link href="/2022/07/14/%E9%80%9A%E8%BF%87docker-compose%E5%AE%89%E8%A3%85wordpress/"/>
    <url>/2022/07/14/%E9%80%9A%E8%BF%87docker-compose%E5%AE%89%E8%A3%85wordpress/</url>
    
    <content type="html"><![CDATA[<p>一、安装docker<br>1、配置源</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat &lt;&lt;<span class="hljs-keyword">END</span> &gt;<span class="hljs-regexp">/etc/yum</span>.repos.d/repo.repo<br>[repo]<br>name=repo<br>baseurl = https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span><span class="hljs-number">7</span><span class="hljs-regexp">/x86_64/</span>stable/<br>enabled=<span class="hljs-number">1</span><br>gpgcheck=<span class="hljs-number">0</span><br><span class="hljs-keyword">END</span><br><span class="hljs-number">1234567</span><br></code></pre></td></tr></table></figure><p>2、安装docker-ce</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> docker-ce<br><br></code></pre></td></tr></table></figure><p>3、启动服务和设置开机启动</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># service docker start</span><br><span class="hljs-meta"># chkconfig docker on</span><br><br></code></pre></td></tr></table></figure><p>4、配置国内源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> -p /etc/docker</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> <span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span></span><br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://*.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">service docker restart</span><br><br><br></code></pre></td></tr></table></figure><p>二、安装docker-compose</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># yum install epel* -y</span><br><span class="hljs-meta"># yum install  docker-compose -y</span><br><br></code></pre></td></tr></table></figure><p>三、安装wordpress<br>1、创建 stack.yml</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;3.1&#x27;</span><br><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br>  <span class="hljs-attribute">wordpress</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">wordpress</span><br>    <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">8080:80</span><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">WORDPRESS_DB_HOST</span><span class="hljs-punctuation">:</span> <span class="hljs-string">db</span><br>      <span class="hljs-attribute">WORDPRESS_DB_USER</span><span class="hljs-punctuation">:</span> <span class="hljs-string">exampleuser</span><br>      <span class="hljs-attribute">WORDPRESS_DB_PASSWORD</span><span class="hljs-punctuation">:</span> <span class="hljs-string">examplepass</span><br>      <span class="hljs-attribute">WORDPRESS_DB_NAME</span><span class="hljs-punctuation">:</span> <span class="hljs-string">exampledb</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">wordpress:/var/www/html</span><br><br>  <span class="hljs-attribute">db</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mysql:5.7</span><br>    <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">MYSQL_DATABASE</span><span class="hljs-punctuation">:</span> <span class="hljs-string">exampledb</span><br>      <span class="hljs-attribute">MYSQL_USER</span><span class="hljs-punctuation">:</span> <span class="hljs-string">exampleuser</span><br>      <span class="hljs-attribute">MYSQL_PASSWORD</span><span class="hljs-punctuation">:</span> <span class="hljs-string">examplepass</span><br>      <span class="hljs-attribute">MYSQL_RANDOM_ROOT_PASSWORD</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;1&#x27;</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">db:/var/lib/mysql</span><br><br><span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">wordpress</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">db</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br></code></pre></td></tr></table></figure><p>2、启动</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">docker-compose -f stack.yml up<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>3、登录web</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//i</span>p:<span class="hljs-number">8080</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200403144255775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5bGZlbmd5dWppYW5jaGVuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200403144311925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5bGZlbmd5dWppYW5jaGVuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200403144325316.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5bGZlbmd5dWppYW5jaGVuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200403144339246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5bGZlbmd5dWppYW5jaGVuZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Centos7 下代理配置</title>
    <link href="/2022/07/14/Centos7%20%E4%B8%8B%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/07/14/Centos7%20%E4%B8%8B%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Centos7-下代理配置"><a href="#Centos7-下代理配置" class="headerlink" title="Centos7 下代理配置"></a><a href="https://www.cnblogs.com/michael9/p/12762229.html">Centos7 下代理配置</a></h1><p>目录</p><ul><li><a href="https://www.cnblogs.com/michael9/p/12762229.html#_label0">添加代理</a></li><li><a href="https://www.cnblogs.com/michael9/p/12762229.html#_label1">查询配置的代理</a></li><li><a href="https://www.cnblogs.com/michael9/p/12762229.html#_label2">临时删除代理</a></li></ul><hr><p>对于提供服务的服务器来说，一般都配置在内网环境中，而在内网下公司处于安全的考虑，一般不开放外网的访问权限。这时如果想要访问外网，一般需要配置公司提供的代理服务器再进行使用。下面介绍几种配置代理的方法：</p><p><a href="https://www.cnblogs.com/michael9/p/12762229.html#_labelTop">Top</a></p><h2 id="添加代理"><a href="#添加代理" class="headerlink" title="添加代理"></a>添加代理</h2><p>方式一：在 <code>/etc/environment</code> 下进行配置</p><p>在 <code>/etc/environment</code> 添加代理服务的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 通过自己搭建账号密码的代理服务器</span><br>http_proxy=<span class="hljs-string">&quot;http://username:password@proxysrv:8080/&quot;</span><br>https_proxy=<span class="hljs-string">&quot;https://username:password@proxysrv:8080/&quot;</span><br>ftp_proxy=<span class="hljs-string">&quot;ftp://username:password@proxysrv:8080/&quot;</span><br>no_proxy=<span class="hljs-string">&quot;.mylan.local,.domain1.com,host1,host2&quot;</span><br><br><span class="hljs-comment"># 通过公司提供</span><br><span class="hljs-built_in">export</span> http_proxy=http://192.168.525.40:8118/<br><span class="hljs-built_in">export</span> https_proxy=http://192.168.525.40:8118/<br>ftp_proxy=https://proxy.esl.cisco.com:80/<br><span class="hljs-built_in">export</span> http_proxy<br><span class="hljs-built_in">export</span> https_proxy<br><span class="hljs-built_in">export</span> ftp_proxy<br></code></pre></td></tr></table></figure><p>方式二： <code>/etc/profile</code> 下添加：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">export http_proxy=http://proxy.esl.cisco.com:80/<br>export https_proxy=https://proxy.esl.cisco.com:80/<br>ftp_proxy=https://proxy.esl.cisco.com:80/<br>export http_proxy<br>export https_proxy<br>export ftp_proxy<br></code></pre></td></tr></table></figure><p>方式三：使用函数，动态添加：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">/.bashrc</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Set Proxy</span><br>function setproxy() &#123;<br>    export &#123;http,https,ftp&#125;_proxy=&quot;http://PROXY_SERVER:PORT&quot;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Unset Proxy</span><br>function unsetproxy() &#123;<br>    unset &#123;http,https,ftp&#125;_proxy<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在配置后使用 <code>source</code> 命令对应</p></blockquote><p><a href="https://www.cnblogs.com/michael9/p/12762229.html#_labelTop">Top</a></p><h2 id="查询配置的代理"><a href="#查询配置的代理" class="headerlink" title="查询配置的代理"></a>查询配置的代理</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">env | grep -i proxy<br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/michael9/p/12762229.html#_labelTop">Top</a></p><h2 id="临时删除代理"><a href="#临时删除代理" class="headerlink" title="临时删除代理"></a>临时删除代理</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">unset http_proxy<br>unset https_proxy<br>unset ftp_proxy<br></code></pre></td></tr></table></figure><h1 id="配置docker-http代理"><a href="#配置docker-http代理" class="headerlink" title="配置docker http代理"></a><a href="https://www.cnblogs.com/ka1em/p/11299193.html">配置docker http代理</a></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /etc/systemd/system/docker.service.d<br>cat &gt; /etc/systemd/system/docker.service.d/https-proxy.conf &lt;&lt; EOF<br>[Service]<br>Environment=&quot;HTTP_PROXY=http://192.168.25.40:8118/&quot; &quot;HTTPS_PROXY=http://192.168.25.40:8118/&quot; &quot;NO_PROXY=localhost,127.0.0.1,docker-registry.example.com,&quot;<br>EOF<br>systemctl daemon-reload<br>systemctl restart docker<br>systemctl show --property=Environment docker<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>centos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>华为交换机Console密码重置</title>
    <link href="/2022/07/14/%E5%8D%8E%E4%B8%BA%E4%BA%A4%E6%8D%A2%E6%9C%BAConsole%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE/"/>
    <url>/2022/07/14/%E5%8D%8E%E4%B8%BA%E4%BA%A4%E6%8D%A2%E6%9C%BAConsole%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>1、通过Console口连接交换机，并重启交换机。<br>2、当界面出现以下打印信息时，及时按下快捷键“Ctrl+B”并输入BootROM&#x2F;BootLoad密码，进入BootROM&#x2F;BootLoad主菜单<br>3、密码： <a href="mailto:&#x41;&#x64;&#x6d;&#105;&#x6e;&#x40;&#x68;&#x75;&#x61;&#x77;&#x65;&#x69;&#46;&#99;&#x6f;&#109;">&#x41;&#x64;&#x6d;&#105;&#x6e;&#x40;&#x68;&#x75;&#x61;&#x77;&#x65;&#x69;&#46;&#99;&#x6f;&#109;</a> A必须大写。<br>4、选着7 Clear password for console user （选择清除console用户密码模式）。<br>5、选择1 Boot with default mode（键入1启动默认模式），进入后更改Console 及telnet密码。</p><h3 id="2设备初始化"><a href="#2设备初始化" class="headerlink" title="*2设备初始化"></a>*2设备初始化</h3><p>1、登录华为交换机<br>2、输入：reset saved-configuration 接着问你是否初始化 选择“Y”<br>3、初始化之后，需要重启交换机才能生效 “reboot”</p><h3 id="3-默认用户名和密码"><a href="#3-默认用户名和密码" class="headerlink" title="3.默认用户名和密码"></a>3.默认用户名和密码</h3><p>华为交换机的默认用户名是admin，密码是<a href="mailto:&#x41;&#x64;&#109;&#105;&#110;&#64;&#104;&#x75;&#x61;&#x77;&#101;&#105;&#46;&#99;&#x6f;&#109;">&#x41;&#x64;&#109;&#105;&#110;&#64;&#104;&#x75;&#x61;&#x77;&#101;&#105;&#46;&#99;&#x6f;&#109;</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>高效的Nginx负载均衡器</title>
    <link href="/2022/07/14/%E9%AB%98%E6%95%88%E7%9A%84Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8/"/>
    <url>/2022/07/14/%E9%AB%98%E6%95%88%E7%9A%84Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/d5patQGz8KePjVSakC8OgAVYU23ZhZMiaE38K9FHns73BqrB7jFWNFIaZHPY8mMbk8mcJ4GHfZYKadhXkCNp3kQ/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>1、编译安装Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">shell &gt; yum -y install gcc gcc-c++ make wget zlib-devel pcre-devel openssl-devel<br>shell &gt; wget http://nginx.org/download/nginx-1.12.2.tar.gz<br>shell &gt; tar zxf nginx-1.12.2.tar.gz; <span class="hljs-built_in">cd</span> nginx-1.12.2<br>shell &gt; ./configure --prefix=/usr/local/nginx-1.12.2 &amp;&amp; make &amp;&amp; make install<br></code></pre></td></tr></table></figure><h5 id="2、准备后端Web服务器"><a href="#2、准备后端Web服务器" class="headerlink" title="2、准备后端Web服务器"></a>2、准备后端Web服务器</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">shell &gt; curl 192.168.10.24:8080<br>welcome to tomcat1<br>shell &gt; curl 192.168.10.24:8081<br>welcome to tomcat2<br>shell &gt; curl 192.168.10.24:8082<br>welcome to tomcat3<br></code></pre></td></tr></table></figure><p>好了，三台后端Web服务器已经启动，分别监听 8080、8081、8082，分别返回 1、2、3</p><h5 id="3、Nginx负载均衡配置"><a href="#3、Nginx负载均衡配置" class="headerlink" title="3、Nginx负载均衡配置"></a>3、Nginx负载均衡配置</h5><p>涉及模块：</p><ul><li><h5 id="ngx-http-proxy-module"><a href="#ngx-http-proxy-module" class="headerlink" title="ngx_http_proxy_module"></a>ngx_http_proxy_module</h5></li><li><h5 id="ngx-http-upstream-module"><a href="#ngx-http-upstream-module" class="headerlink" title="ngx_http_upstream_module"></a>ngx_http_upstream_module</h5></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">shell &gt; vim conf/nginx.conf<br><br>user  nobody;<br>worker_processes  1;<br><br>pid        logs/nginx.pid;<br>events &#123;<br>    worker_connections  1024;<br>&#125;<br><br>http &#123;<br>    include       mime.types;<br>    default_type  application/octet-stream;<br><br>    upstream <span class="hljs-built_in">ls</span> &#123;<br>        server 192.168.10.24:8080 weight=1 max_fails=3 fail_timeout=20s;<br>        server 192.168.10.24:8081 weight=2 max_fails=3 fail_timeout=20s;<br>        server 192.168.10.24:8082 weight=3 max_fails=3 fail_timeout=20s;<br>    &#125;<br><br>    server &#123;<br>        listen  80;<br><br>        location / &#123;<br>            proxy_pass http://ls;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是一个最简配的 Nginx 配置文件，定义了一个负载均衡池，池中有三台服务器，权重分别是 1、2、3 ( 越大越高 )</p><p>最大失败次数 3 次，超过 3 次失败后，20 秒内不检测。</p><h5 id="4、Nginx反向代理配置"><a href="#4、Nginx反向代理配置" class="headerlink" title="4、Nginx反向代理配置"></a>4、Nginx反向代理配置</h5><p>当用户访问该 IP 的 80 端口时，被转发到后端的服务器。下面是一些反向代理的配置。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 故障转移策略，当后端服务器返回如下错误时，自动负载到后端其余机器</span><br><span class="hljs-attribute">proxy_next_upstream</span> http_500 http_502 http_503 <span class="hljs-literal">error</span> timeout invalid_header;<br><br><span class="hljs-comment"># 设置后端服务器获取用户真实IP、代理者真实IP等</span><br><span class="hljs-attribute">proxy_redirect</span> <span class="hljs-literal">off</span>;<br><span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br><span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br><span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br><br><span class="hljs-comment"># 用于指定客户端请求主体缓存区大小，可以理解成先保存到本地再传给用户</span><br><span class="hljs-attribute">client_body_buffer_size</span> <span class="hljs-number">128k</span>;<br><br><span class="hljs-comment"># 表示与后端服务器连接的超时时间，即发起握手等侯响应的超时时间</span><br><span class="hljs-attribute">proxy_connect_timeout</span> <span class="hljs-number">90</span>;<br><br><span class="hljs-comment"># 表示后端服务器的数据回传时间，即在规定时间之后端服务器必须传完所有的数据，否则 Nginx 将断开这个连接</span><br><span class="hljs-attribute">proxy_send_timeout</span> <span class="hljs-number">90</span>;<br><br><span class="hljs-comment"># 设置 Nginx 从代理的后端服务器获取信息的时间，表示连接建立成功后，Nginx 等待后端服务器的响应时间，其实是 Nginx 已经进入后端的排队中等候处理的时间</span><br><span class="hljs-attribute">proxy_read_timeout</span> <span class="hljs-number">90</span>;<br><br><span class="hljs-comment"># 设置缓冲区大小，默认该缓冲区大小等于指令 proxy_buffers 设置的大小</span><br><span class="hljs-attribute">proxy_buffer_size</span> <span class="hljs-number">4k</span>;<br><br><span class="hljs-comment"># 设置缓冲区的数量和大小。Nginx 从代理的后端服务器获取的响应信息，会放置到缓冲区</span><br><span class="hljs-attribute">proxy_buffers</span> <span class="hljs-number">4</span> <span class="hljs-number">32k</span>;<br><br><span class="hljs-comment"># 用于设置系统很忙时可以使用的 proxy_buffers 大小，官方推荐大小为 proxu_buffers 的两倍</span><br><span class="hljs-attribute">proxy_busy_buffers_size</span> <span class="hljs-number">64k</span>;<br><br><span class="hljs-comment"># 指定 proxy 缓存临时文件的大小</span><br><span class="hljs-attribute">proxy_temp_file_write_size</span> <span class="hljs-number">64k</span>;<br><span class="hljs-attribute">shell</span> &gt; /usr/local/nginx-<span class="hljs-number">1</span>.<span class="hljs-number">12</span>.<span class="hljs-number">2</span>/sbin/nginx -t<br>nginx: the configuration file /usr/local/nginx-<span class="hljs-number">1</span>.<span class="hljs-number">12</span>.<span class="hljs-number">2</span>/conf/nginx.conf syntax is ok<br>nginx: configuration file /usr/local/nginx-<span class="hljs-number">1</span>.<span class="hljs-number">12</span>.<span class="hljs-number">2</span>/conf/nginx.conf test is successful<br><br>shell &gt; /usr/local/nginx-<span class="hljs-number">1</span>.<span class="hljs-number">12</span>.<span class="hljs-number">2</span>/sbin/nginx<br><br>shell &gt; i=<span class="hljs-number">0</span>; <span class="hljs-attribute">while</span> [ <span class="hljs-variable">$i</span> -lt <span class="hljs-number">10</span> ];<span class="hljs-attribute">do</span> curl localhost; <span class="hljs-attribute">let</span> i++;<span class="hljs-attribute">done</span><br>welcome to tomcat2<br>welcome to tomcat3<br>welcome to tomcat3<br>welcome to tomcat2<br>welcome to tomcat1<br>welcome to tomcat3<br>welcome to tomcat2<br>welcome to tomcat3<br>welcome to tomcat3<br>welcome to tomcat2<br></code></pre></td></tr></table></figure><p>总共请求10次，tomcat3 响应了5次，因为它的权重最高(weight&#x3D;3)。</p><h5 id="5、Nginx后端Web服务器健康检查"><a href="#5、Nginx后端Web服务器健康检查" class="headerlink" title="5、Nginx后端Web服务器健康检查"></a>5、Nginx后端Web服务器健康检查</h5><p>这样有一个问题，由于没有后端检测功能，当后端某一服务器无法提供服务时，该链接先被转发到这台机器，然后发现该机故障，而后才转发到其它机器，导致资源浪费。</p><h5 id="因此引入-nginx-upstream-check-module-模块，该模块用于提供负载均衡器内节点的健康检查，通过它可以用来检测后端服务的健康状态。如果后端服务不可用，则后面的请求就不会转发到该节点上。"><a href="#因此引入-nginx-upstream-check-module-模块，该模块用于提供负载均衡器内节点的健康检查，通过它可以用来检测后端服务的健康状态。如果后端服务不可用，则后面的请求就不会转发到该节点上。" class="headerlink" title="因此引入 nginx_upstream_check_module 模块，该模块用于提供负载均衡器内节点的健康检查，通过它可以用来检测后端服务的健康状态。如果后端服务不可用，则后面的请求就不会转发到该节点上。"></a>因此引入 nginx_upstream_check_module 模块，该模块用于提供负载均衡器内节点的健康检查，通过它可以用来检测后端服务的健康状态。如果后端服务不可用，则后面的请求就不会转发到该节点上。</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gradle">shell &gt; git clone https:<span class="hljs-comment">//github.com/yaoweibin/nginx_upstream_check_module.git</span><br><br>shell &gt; yum -y install patch<br><br>shell &gt; cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/src/</span>nginx-<span class="hljs-number">1.12</span>.<span class="hljs-number">2</span>; patch -p1 &lt; <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/src/</span>nginx_upstream_check_module/check_1.<span class="hljs-number">12.1</span>+.patch<br>patching <span class="hljs-keyword">file</span> src<span class="hljs-regexp">/http/m</span>odules/ngx_http_upstream_hash_module.c<br>patching <span class="hljs-keyword">file</span> src<span class="hljs-regexp">/http/m</span>odules/ngx_http_upstream_ip_hash_module.c<br>patching <span class="hljs-keyword">file</span> src<span class="hljs-regexp">/http/m</span>odules/ngx_http_upstream_least_conn_module.c<br>patching <span class="hljs-keyword">file</span> src<span class="hljs-regexp">/http/</span>ngx_http_upstream_round_robin.c<br>patching <span class="hljs-keyword">file</span> src<span class="hljs-regexp">/http/</span>ngx_http_upstream_round_robin.h<br></code></pre></td></tr></table></figure><p>切换到 Nginx 源码目录，打补丁 ( 注意与自己的 Nginx 版本匹配 )</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">shell &gt; .<span class="hljs-regexp">/configure --prefix=/u</span>sr<span class="hljs-regexp">/local/</span>nginx-<span class="hljs-number">1.12</span>.<span class="hljs-number">2</span> --add-module=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/src/</span>nginx_upstream_check_module<br>shell &gt; make &amp;&amp; make install<br></code></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="重新编译、安装-Nginx，注意加上原来的编译参数。"><a href="#重新编译、安装-Nginx，注意加上原来的编译参数。" class="headerlink" title="重新编译、安装 Nginx，注意加上原来的编译参数。"></a>重新编译、安装 Nginx，注意加上原来的编译参数。</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">shell &gt; vim /usr/<span class="hljs-keyword">local</span>/nginx<span class="hljs-number">-1.12</span><span class="hljs-number">.2</span>/conf/nginx.conf<br><br>    upstream ls &#123;<br>        <span class="hljs-keyword">server</span> <span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.24</span>:<span class="hljs-number">8080</span>;<br>        <span class="hljs-keyword">server</span> <span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.24</span>:<span class="hljs-number">8081</span>;<br>        <span class="hljs-keyword">server</span> <span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.24</span>:<span class="hljs-number">8082</span>;<br><br>        <span class="hljs-keyword">check</span> <span class="hljs-type">interval</span>=<span class="hljs-number">3000</span> rise=<span class="hljs-number">2</span> fall=<span class="hljs-number">5</span> timeout=<span class="hljs-number">1000</span> <span class="hljs-keyword">type</span>=http;<br>    &#125;<br><br>    <span class="hljs-keyword">server</span> &#123;<br>        <span class="hljs-keyword">listen</span>  <span class="hljs-number">80</span>;<br><br>        <span class="hljs-keyword">location</span> / &#123;<br>            proxy_pass http://ls;<br>        &#125;<br><br>        <span class="hljs-keyword">location</span> /status &#123;<br>            check_status;<br>            access_log <span class="hljs-keyword">off</span>;<br>            # allow x.x.x.x;<br>            # deny <span class="hljs-keyword">all</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>去掉了权重值，注意：是可以同时存在的。</p><p>添加了一行，检测间隔3000毫秒，连续成功2次标记为UP，连续失败5次标记为DOWN，超时时间1000毫秒，检测类型HTTP。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle">shell &gt; <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx-1.12.2/</span>sbin/nginx -t<br>nginx: the configuration <span class="hljs-keyword">file</span> <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx-1.12.2/</span>conf/nginx.conf syntax is ok<br>nginx: configuration <span class="hljs-keyword">file</span> <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx-1.12.2/</span>conf/nginx.conf test is successful<br><br>shell &gt; <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx-1.12.2/</span>sbin/nginx -s stop<br>shell &gt; <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx-1.12.2/</span>sbin/nginx<br></code></pre></td></tr></table></figure><p>直接 -s reload 貌似不行~</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">shell</span><span class="language-bash"> &gt; curl localhost/status?format=json</span><br>&#123;<span class="hljs-string">&quot;servers&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;total&quot;</span>: <span class="hljs-number">3</span>,<br>  <span class="hljs-string">&quot;generation&quot;</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-string">&quot;server&quot;</span>: [<br>    &#123;<span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;upstream&quot;</span>: <span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;192.168.10.24:8080&quot;</span>, <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;up&quot;</span>, <span class="hljs-string">&quot;rise&quot;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&quot;fall&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;http&quot;</span>, <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-number">0</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;upstream&quot;</span>: <span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;192.168.10.24:8081&quot;</span>, <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;up&quot;</span>, <span class="hljs-string">&quot;rise&quot;</span>: <span class="hljs-number">18</span>, <span class="hljs-string">&quot;fall&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;http&quot;</span>, <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-number">0</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;upstream&quot;</span>: <span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;192.168.10.24:8082&quot;</span>, <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;up&quot;</span>, <span class="hljs-string">&quot;rise&quot;</span>: <span class="hljs-number">19</span>, <span class="hljs-string">&quot;fall&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;http&quot;</span>, <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-number">0</span>&#125;<br>  ]<br>&#125;&#125;<br></code></pre></td></tr></table></figure><p>总共有三台机器，都属于负载均衡 ls 组，状态 up，连续成功次数等等。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">shell</span><span class="language-bash"> &gt; curl localhost/status?format=json</span><br>&#123;<span class="hljs-string">&quot;servers&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;total&quot;</span>: <span class="hljs-number">3</span>,<br>  <span class="hljs-string">&quot;generation&quot;</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-string">&quot;server&quot;</span>: [<br>    &#123;<span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;upstream&quot;</span>: <span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;192.168.10.24:8080&quot;</span>, <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;up&quot;</span>, <span class="hljs-string">&quot;rise&quot;</span>: <span class="hljs-number">73</span>, <span class="hljs-string">&quot;fall&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;http&quot;</span>, <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-number">0</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;upstream&quot;</span>: <span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;192.168.10.24:8081&quot;</span>, <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;down&quot;</span>, <span class="hljs-string">&quot;rise&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;fall&quot;</span>: <span class="hljs-number">6</span>, <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;http&quot;</span>, <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-number">0</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;upstream&quot;</span>: <span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;192.168.10.24:8082&quot;</span>, <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;up&quot;</span>, <span class="hljs-string">&quot;rise&quot;</span>: <span class="hljs-number">68</span>, <span class="hljs-string">&quot;fall&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;http&quot;</span>, <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-number">0</span>&#125;<br>  ]<br>&#125;&#125;<br></code></pre></td></tr></table></figure><p>关一台后端的话，就变成了这样！重启检测成功后，会被重新加入到负载均衡中！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ZooKeeper 简介</title>
    <link href="/2022/07/14/ZooKeeper%20%E7%AE%80%E4%BB%8B/"/>
    <url>/2022/07/14/ZooKeeper%20%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="ZooKeeper-简介"><a href="#ZooKeeper-简介" class="headerlink" title="ZooKeeper 简介"></a>ZooKeeper 简介</h2><p>ZooKeeper是一个开放源码的分布式应用程序协调服务，它包含一个简单的原语集，分布式应用程序可以基于它实现同步服务，配置维护和命名服务等。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/WlIksv5EUJku3rgiaByr4c1cichJXH88p1lOOTAVnBSZ6WAq2biaAk62awpKqiaDgvGhD03ygdDfGJsu0ibhqdhiaDaQ/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="ZooKeeper-设计目的"><a href="#ZooKeeper-设计目的" class="headerlink" title="ZooKeeper 设计目的"></a>ZooKeeper 设计目的</h2><p>\1. 最终一致性：client不论连接到哪个Server，展示给它都是同一个视图，这是zookeeper最重要的性能。</p><p>\2. 可靠性：具有简单、健壮、良好的性能，如果消息m被到一台服务器接受，那么它将被所有的服务器接受。</p><p>\3. 实时性：Zookeeper保证客户端将在一个时间间隔范围内获得服务器的更新信息，或者服务器失效的信息。</p><p>但由于网络延时等原因，Zookeeper不能保证两个客户端能同时得到刚更新的数据，如果需要最新数据，应该在读数据之前调用sync()接口。</p><p>\4. 等待无关（wait-free）：慢的或者失效的client不得干预快速的client的请求，使得每个client都能有效的等待。</p><p>\5. 原子性：更新只能成功或者失败，没有中间状态。</p><p>\6. 顺序性：包括全局有序和偏序两种：全局有序是指如果在一台服务器上消息a在消息b前发布，则在所有Server上消息a都将在消息b前被发布；偏序是指如果一个消息b在消息a后被同一个发送者发布，a必将排在b前面。</p><h2 id="ZooKeeper数据模型"><a href="#ZooKeeper数据模型" class="headerlink" title="ZooKeeper数据模型"></a>ZooKeeper数据模型</h2><p>Zookeeper会维护一个具有层次关系的数据结构，它非常类似于一个标准的文件系统，如图所示：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/WlIksv5EUJku3rgiaByr4c1cichJXH88p1GvIYqiavuAwt27UlXfQlv1ffuTTibFMATlsWD3DndgZWsuDWKB9umvicg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>Zookeeper这种数据结构有如下这些特点：</p><p>1）每个子目录项如NameService都被称作为znode，这个znode是被它所在的路径唯一标识，如Server1这个znode的标识为&#x2F;NameService&#x2F;Server1。</p><p>2）znode可以有子节点目录，并且每个znode可以存储数据，注意EPHEMERAL（临时的）类型的目录节点不能有子节点目录。</p><p>3）znode是有版本的（version），每个znode中存储的数据可以有多个版本，也就是一个访问路径中可以存储多份数据，version号自动增加。</p><p>4）znode的类型：</p><ul><li>Persistent 节点，一旦被创建，便不会意外丢失，即使服务器全部重启也依然存在。每个 Persist 节点即可包含数据，也可包含子节点。</li><li>Ephemeral 节点，在创建它的客户端与服务器间的 Session 结束时自动被删除。服务器重启会导致 Session 结束，因此 Ephemeral 类型的 znode 此时也会自动删除。</li><li>Non-sequence 节点，多个客户端同时创建同一 Non-sequence 节点时，只有一个可创建成功，其它匀失败。并且创建出的节点名称与创建时指定的节点名完全一样。</li><li>Sequence 节点，创建出的节点名在指定的名称之后带有10位10进制数的序号。多个客户端创建同一名称的节点时，都能创建成功，只是序号不同。</li></ul><p>5）znode可以被监控，包括这个目录节点中存储的数据的修改，子节点目录的变化等，一旦变化可以通知设置监控的客户端，这个是Zookeeper的核心特性，Zookeeper的很多功能都是基于这个特性实现的。</p><p>6）ZXID：每次对Zookeeper的状态的改变都会产生一个zxid（ZooKeeper Transaction Id），zxid是全局有序的，如果zxid1小于zxid2，则zxid1在zxid2之前发生。</p><h2 id="ZooKeeper-Session"><a href="#ZooKeeper-Session" class="headerlink" title="ZooKeeper Session"></a>ZooKeeper Session</h2><p>Client和Zookeeper集群建立连接，整个session状态变化如图所示：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/WlIksv5EUJku3rgiaByr4c1cichJXH88p1Hu7UFypyM1S4Y7Tnt40Rtib4oeic4YibL9FMepl23qnxV6eCkuJdMRS3Q/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>如果Client因为Timeout和Zookeeper Server失去连接，client处在CONNECTING状态，会自动尝试再去连接Server，如果在session有效期内再次成功连接到某个Server，则回到CONNECTED状态。</p><p>注意：如果因为网络状态不好，client和Server失去联系，client会停留在当前状态，会尝试主动再次连接Zookeeper Server。client不能宣称自己的session expired，session expired是由Zookeeper Server来决定的，client可以选择自己主动关闭session。</p><h2 id="ZooKeeper-Watch"><a href="#ZooKeeper-Watch" class="headerlink" title="ZooKeeper Watch"></a>ZooKeeper Watch</h2><p>Zookeeper watch是一种监听通知机制。Zookeeper所有的读操作getData(), getChildren()和 exists()都可以设置监视(watch)，监视事件可以理解为一次性的触发器</p><p>官方定义如下：</p><blockquote><p>a watch event is one-time trigger, sent to the client that set the watch, whichoccurs when the data for which the watch was set changes。</p></blockquote><p>Watch的三个关键点：</p><ul><li>（一次性触发）One-time trigger</li></ul><p>当设置监视的数据发生改变时，该监视事件会被发送到客户端。</p><p>例如，如果客户端调用了getData(&#x2F;znode1, true) 并且稍后 &#x2F;znode1 节点上的数据发生了改变或者被删除了，客户端将会获取到 &#x2F;znode1 发生变化的监视事件；</p><p>而如果 &#x2F;znode1 再一次发生了变化，除非客户端再次对&#x2F;znode1 设置监视，否则客户端不会收到事件通知。</p><ul><li>（发送至客户端）Sent to the client</li></ul><p>Zookeeper客户端和服务端是通过 socket 进行通信的，由于网络存在故障，所以监视事件很有可能不会成功地到达客户端，监视事件是异步发送至监视者的。</p><p>Zookeeper 本身提供了顺序保证(ordering guarantee)：即客户端只有首先看到了监视事件后，才会感知到它所设置监视的znode发生了变化(a client will never see a change for which it has set a watch until it first sees the watch event)。</p><p>网络延迟或者其他因素可能导致不同的客户端在不同的时刻感知某一监视事件，但是不同的客户端所看到的一切具有一致的顺序。</p><ul><li>（被设置 watch 的数据）The data for which the watch was set</li></ul><p>这意味着znode节点本身具有不同的改变方式。你也可以想象 Zookeeper 维护了两条监视链表：数据监视和子节点监视(data watches and child watches) getData() 和exists()设置数据监视，getChildren()设置子节点监视。</p><p>或者你也可以想象 Zookeeper 设置的不同监视返回不同的数据，getData() 和 exists() 返回znode节点的相关信息，而getChildren() 返回子节点列表。</p><p>因此，setData() 会触发设置在某一节点上所设置的数据监视（假定数据设置成功），而一次成功的create() 操作则会出发当前节点上所设置的数据监视以及父节点的子节点监视。</p><p>一次成功的 delete操作将会触发当前节点的数据监视和子节点监视事件，同时也会触发该节点父节点的child watch。</p><p>Zookeeper 中的监视是轻量级的，因此容易设置、维护和分发。当客户端与 Zookeeper 服务器失去联系时，客户端并不会收到监视事件的通知，只有当客户端重新连接后，若在必要的情况下，以前注册的监视会重新被注册并触发，对于开发人员来说这通常是透明的。</p><p>只有一种情况会导致监视事件的丢失，即：通过exists()设置了某个znode节点的监视，但是如果某个客户端在此znode节点被创建和删除的时间间隔内与zookeeper服务器失去了联系，该客户端即使稍后重新连接 zookeeper服务器后也得不到事件通知。</p><h2 id="Consistency-Guarantees"><a href="#Consistency-Guarantees" class="headerlink" title="Consistency Guarantees"></a>Consistency Guarantees</h2><p>Zookeeper是一个高效的、可扩展的服务，read和write操作都被设计为快速的，read比write操作更快。</p><p>顺序一致性（Sequential Consistency）：从一个客户端来的更新请求会被顺序执行。</p><p>原子性（Atomicity）：更新要么成功要么失败，没有部分成功的情况。</p><p>唯一的系统镜像（Single System Image）：无论客户端连接到哪个Server，看到系统镜像是一致的。</p><p>可靠性（Reliability）：更新一旦有效，持续有效，直到被覆盖。</p><p>时间线（Timeliness）：保证在一定的时间内各个客户端看到的系统信息是一致的。</p><h2 id="ZooKeeper的工作原理"><a href="#ZooKeeper的工作原理" class="headerlink" title="ZooKeeper的工作原理"></a>ZooKeeper的工作原理</h2><p>在zookeeper的集群中，各个节点共有下面3种角色和4种状态：</p><ul><li>角色：leader,follower,observer</li><li>状态：leading,following,observing,looking</li></ul><p>Zookeeper的核心是原子广播，这个机制保证了各个Server之间的同步。实现这个机制的协议叫做Zab协议（ZooKeeper Atomic Broadcast protocol）。Zab协议有两种模式，它们分别是恢复模式（Recovery选主）和广播模式（Broadcast同步）。</p><p>当服务启动或者在领导者崩溃后，Zab就进入了恢复模式，当领导者被选举出来，且大多数Server完成了和leader的状态同步以后，恢复模式就结束了。状态同步保证了leader和Server具有相同的系统状态。</p><p>为了保证事务的顺序一致性，zookeeper采用了递增的事务id号（zxid）来标识事务。所有的提议（proposal）都在被提出的时候加上了zxid。</p><p>实现中zxid是一个64位的数字，它高32位是epoch用来标识leader关系是否改变，每次一个leader被选出来，它都会有一个新的epoch，标识当前属于那个leader的统治时期。低32位用于递增计数。</p><p>每个Server在工作过程中有4种状态：</p><p>LOOKING：当前Server不知道leader是谁，正在搜寻。</p><p>LEADING：当前Server即为选举出来的leader。</p><p>FOLLOWING：leader已经选举出来，当前Server与之同步。</p><p>OBSERVING：observer的行为在大多数情况下与follower完全一致，但是他们不参加选举和投票，而仅仅接受(observing)选举和投票的结果。</p><h2 id="Leader-Election"><a href="#Leader-Election" class="headerlink" title="Leader Election"></a>Leader Election</h2><p>当leader崩溃或者leader失去大多数的follower，这时候zk进入恢复模式，恢复模式需要重新选举出一个新的leader，让所有的Server都恢复到一个正确的状态。</p><p>Zk的选举算法有两种：一种是基于basic paxos实现的，另外一种是基于fast paxos算法实现的。</p><p>系统默认的选举算法为fast paxos。先介绍basic paxos流程：</p><p>\1. 选举线程由当前Server发起选举的线程担任，其主要功能是对投票结果进行统计，并选出推荐的Server；</p><p>\2. 选举线程首先向所有Server发起一次询问（包括自己）；</p><p>\3. 选举线程收到回复后，验证是否是自己发起的询问（验证zxid是否一致），然后获取对方的id（myid），并存储到当前询问对象列表中，最后获取对方提议的leader相关信息（id,zxid），并将这些信息存储到当次选举的投票记录表中；</p><p>\4. 收到所有Server回复以后，就计算出zxid最大的那个Server，并将这个Server相关信息设置成下一次要投票的Server；</p><p>\5. 线程将当前zxid最大的Server设置为当前Server要推荐的Leader，如果此时获胜的Server获得n&#x2F;2 + 1的Server票数，设置当前推荐的leader为获胜的Server，将根据获胜的Server相关信息设置自己的状态，否则，继续这个过程，直到leader被选举出来。</p><p>通过流程分析我们可以得出：要使Leader获得多数Server的支持，则Server总数必须是奇数2n+1，且存活的Server的数目不得少于n+1.</p><p>每个Server启动后都会重复以上流程。在恢复模式下，如果是刚从崩溃状态恢复的或者刚启动的server还会从磁盘快照中恢复数据和会话信息，zk会记录事务日志并定期进行快照，方便在恢复时进行状态恢复。</p><p>fast paxos流程是在选举过程中，某Server首先向所有Server提议自己要成为leader，当其它Server收到提议以后，解决epoch和zxid的冲突，并接受对方的提议，然后向对方发送接受提议完成的消息，重复这个流程，最后一定能选举出Leader。</p><h2 id="Leader工作流程"><a href="#Leader工作流程" class="headerlink" title="Leader工作流程"></a>Leader工作流程</h2><p>Leader主要有三个功能：</p><ol><li>恢复数据；</li><li>维持与follower的心跳，接收follower请求并判断follower的请求消息类型；</li><li>follower的消息类型主要有PING消息、REQUEST消息、ACK消息、REVALIDATE消息，根据不同的消息类型，进行不同的处理。</li></ol><p>说明：</p><blockquote><p>PING消息是指follower的心跳信息；REQUEST消息是follower发送的提议信息，包括写请求及同步请求；<br>ACK消息是follower的对提议的回复，超过半数的follower通过，则commit该提议；<br>REVALIDATE消息是用来延长SESSION有效时间。</p></blockquote><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h2 id="Follower工作流程"><a href="#Follower工作流程" class="headerlink" title="Follower工作流程"></a>Follower工作流程</h2><p>Follower主要有四个功能：</p><ol><li>向Leader发送请求（PING消息、REQUEST消息、ACK消息、REVALIDATE消息）；</li><li>接收Leader消息并进行处理；</li><li>接收Client的请求，如果为写请求，发送给Leader进行投票；</li><li>返回Client结果。</li></ol><p>Follower的消息循环处理如下几种来自Leader的消息：</p><ol><li>PING消息：心跳消息</li><li>PROPOSAL消息：Leader发起的提案，要求Follower投票</li><li>COMMIT消息：服务器端最新一次提案的信息</li><li>UPTODATE消息：表明同步完成</li><li>REVALIDATE消息：根据Leader的REVALIDATE结果，关闭待revalidate的session还是允许其接受消息</li><li>SYNC消息：返回SYNC结果到客户端，这个消息最初由客户端发起，用来强制得到最新的更新。</li></ol><h2 id="Zab-Broadcasting-State-Updates"><a href="#Zab-Broadcasting-State-Updates" class="headerlink" title="Zab: Broadcasting State Updates"></a>Zab: Broadcasting State Updates</h2><p>Zookeeper Server接收到一次request，如果是follower，会转发给leader，Leader执行请求并通过Transaction的形式广播这次执行。</p><p>Zookeeper集群如何决定一个Transaction是否被commit执行？通过“两段提交协议”（a two-phase commit）：</p><ul><li>Leader给所有的follower发送一个PROPOSAL消息。</li><li>一个follower接收到这次PROPOSAL消息，写到磁盘，发送给leader一个ACK消息，告知已经收到。</li><li>当Leader收到法定人数（quorum）的follower的ACK时候，发送commit消息执行。</li></ul><p>Zab协议保证：</p><ul><li>如果leader以T1和T2的顺序广播，那么所有的Server必须先执行T1，再执行T2。</li><li>如果任意一个Server以T1、T2的顺序commit执行，其他所有的Server也必须以T1、T2的顺序执行。</li></ul><p>“两段提交协议”最大的问题是如果Leader发送了PROPOSAL消息后crash或暂时失去连接，会导致整个集群处在一种不确定的状态（follower不知道该放弃这次提交还是执行提交）。</p><p>Zookeeper这时会选出新的leader，请求处理也会移到新的leader上，不同的leader由不同的epoch标识。切换Leader时，需要解决下面两个问题：</p><ol><li>Never forget delivered messages</li></ol><p>Leader在COMMIT投递到任何一台follower之前crash，只有它自己commit了。新Leader必须保证这个事务也必须commit。</p><ol start="2"><li>Let go of messages that are skipped</li></ol><p>Leader产生某个proposal，但是在crash之前，没有follower看到这个proposal。该server恢复时，必须丢弃这个proposal。</p><p>Zookeeper会尽量保证不会同时有2个活动的Leader，因为2个不同的Leader会导致集群处在一种不一致的状态，所以Zab协议同时保证：</p><ul><li>在新的leader广播Transaction之前，先前Leader commit的Transaction都会先执行。</li><li>在任意时刻，都不会有2个Server同时有法定人数（quorum）的支持者。<br>这里的quorum是一半以上的Server数目，确切的说是有投票权力的Server（不包括Observer）。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单介绍了Zookeeper的基本原理，数据模型，Session，Watch机制，一致性保证，Leader Election，Leader和Follower的工作流程和Zab协议。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>windows server 2012 开启 hyper-v 并创建虚拟机</title>
    <link href="/2022/07/14/windows%20server%202012%20%E5%BC%80%E5%90%AF%20hyper-v%20%E5%B9%B6%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <url>/2022/07/14/windows%20server%202012%20%E5%BC%80%E5%90%AF%20hyper-v%20%E5%B9%B6%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="windows-server-2012-开启-hyper-v-并创建虚拟机"><a href="#windows-server-2012-开启-hyper-v-并创建虚拟机" class="headerlink" title="windows server 2012 开启 hyper-v 并创建虚拟机"></a>windows server 2012 开启 hyper-v 并创建虚拟机</h2><p>新的windows server 2012 服务器的时候，默认hyper-v是没有开启的，如果我们要在windows server上面创建虚拟机，那么我们也就需要开启hyper-v。</p><p>　　开启 hyper-v :  **服务器管理器-–\》管理\—\》添加角色和功能\</p><p><img src="https://images2018.cnblogs.com/blog/1227086/201808/1227086-20180801191437481-1314197419.png" alt="img"></p><p> 然后一路下一步后，我们可以看到服务器角色里有个Hyper-V\我们选择并添加安装.</p><p><img src="https://images2018.cnblogs.com/blog/1227086/201808/1227086-20180801191708550-385817881.png" alt="img"></p><p><img src="https://images2018.cnblogs.com/blog/1227086/201808/1227086-20180801191743972-21066557.png" alt="img"></p><p>**注意的一点就是我们在选择网卡的时候要选择我们已经连接网络的网卡作为网络适配器.\</p><p>然后我们需要重启我们的服务器让我们的hyper-v配置生效。我们可以在网络连接管理的界面看到有三个网络适配器了。</p><p><img src="https://images2018.cnblogs.com/blog/1227086/201808/1227086-20180801192007824-1332416961.png" alt="img"></p><p> 然后我们就就可以基于hyper-v进行创建虚拟机了。</p><p> **打开Hyper-v管理器，点击新建—》虚拟机\</p><p><img src="https://images2018.cnblogs.com/blog/1227086/201808/1227086-20180802163245195-2016501839.png" alt="img"></p><p><img src="https://images2018.cnblogs.com/blog/1227086/201808/1227086-20180802164628104-1967197662.png" alt="img"></p><p>**指定虚拟机的名称和安装位置。\</p><p><img src="https://images2018.cnblogs.com/blog/1227086/201808/1227086-20180802164813275-2092148921.png" alt="img"></p><p>**选择虚拟机的代数。\</p><p><img src="https://images2018.cnblogs.com/blog/1227086/201808/1227086-20180802165152324-1115141449.png" alt="img"></p><p>**对于上面的代数选择，我在网上看到一张有关于第一代和第二代虚拟机对比的图片，大家可以根据自己的需求进行选择。\</p><p><img src="https://images2018.cnblogs.com/blog/1227086/201808/1227086-20180802165408211-90352239.png" alt="img"></p><p>**分配内存\</p><p><img src="https://images2018.cnblogs.com/blog/1227086/201808/1227086-20180802165732797-102319904.png" alt="img"></p><p> **配置网络\</p><p><img src="https://images2018.cnblogs.com/blog/1227086/201808/1227086-20180802183838140-469607898.png" alt="img"></p><p>设置虚拟磁盘大小以及储存位置和虚拟磁盘名称。</p><p><img src="https://images2018.cnblogs.com/blog/1227086/201808/1227086-20180802184025920-274375276.png" alt="img"></p><p>**选择安装镜像\</p><p><img src="https://images2018.cnblogs.com/blog/1227086/201808/1227086-20180802184235898-1916870035.png" alt="img"></p><p>这样我们就创建好了一个虚拟主机。如果我们已经加载好了镜像，那么我们就可以通过启动虚拟机来进行安装系统的步骤了。如果之前没有加载镜像那么我们需要加载后才可以进行系统的安装。</p><p>**注意事项：\</p><p>在设置网络和开启hyper-v时候选择的网络一定要注意，否则容易导致断网，连接不上主机。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>UltraISO注册版破解教程</title>
    <link href="/2022/07/14/UltraISO%E6%B3%A8%E5%86%8C%E7%89%88%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/"/>
    <url>/2022/07/14/UltraISO%E6%B3%A8%E5%86%8C%E7%89%88%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>UltraISO注册版破解教程</p><p>1、程序启动时弹出注册画面，请输入软件包中的注册信息</p><p>注册名：王涛</p><p>注册码：7C81-1689-4046-626F</p><p><img src="https://www.win10com.com/d/file/softxiazai/gongju/2020-05-21/6c4930edc391e62437d9ecd4dcda9cdf.jpg" alt="UltraISO注册版"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis 日常操作命令</title>
    <link href="/2022/07/14/Redis%20Cluster%E6%97%A5%E5%B8%B8%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E6%A2%B3%E7%90%86/"/>
    <url>/2022/07/14/Redis%20Cluster%E6%97%A5%E5%B8%B8%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E6%A2%B3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>在之前的一篇文章已经介绍了<a href="http://www.cnblogs.com/kevingrace/p/7846324.html">Redis Cluster及其部署</a>，下面说下Redis Cluster日常操作命令：</p><p>一、以下命令是Redis Cluster集群所独有的，执行下面命令需要先登录redis：<br>[root@manage redis]# redis-cli -c -p 6382 -h 192.168.10.12   （客户端命令：redis-cli -c -p port -h ip）<br>192.168.10.12:6382&gt; 登录redis后，在里面可以进行下面命令操作</p><p>集群<br>cluster info ：打印集群的信息<br>cluster nodes ：列出集群当前已知的所有节点（ node），以及这些节点的相关信息。<br>节点<br>cluster meet <ip> <port> ：将 ip 和 port 所指定的节点添加到集群当中，让它成为集群的一份子。<br>cluster forget <node_id> ：从集群中移除 node_id 指定的节点。<br>cluster replicate <master_node_id> ：将当前从节点设置为 node_id 指定的master节点的slave节点。只能针对slave节点操作。<br>cluster saveconfig ：将节点的配置文件保存到硬盘里面。<br>槽(slot)<br>cluster addslots <slot> [slot …] ：将一个或多个槽（ slot）指派（ assign）给当前节点。<br>cluster delslots <slot> [slot …] ：移除一个或多个槽对当前节点的指派。<br>cluster flushslots ：移除指派给当前节点的所有槽，让当前节点变成一个没有指派任何槽的节点。<br>cluster setslot <slot> node <node_id> ：将槽 slot 指派给 node_id 指定的节点，如果槽已经指派给<br>另一个节点，那么先让另一个节点删除该槽&gt;，然后再进行指派。<br>cluster setslot <slot> migrating <node_id> ：将本节点的槽 slot 迁移到 node_id 指定的节点中。<br>cluster setslot <slot> importing <node_id> ：从 node_id 指定的节点中导入槽 slot 到本节点。<br>cluster setslot <slot> stable ：取消对槽 slot 的导入（ import）或者迁移（ migrate）。<br>键<br>cluster keyslot <key> ：计算键 key 应该被放置在哪个槽上。<br>cluster countkeysinslot <slot> ：返回槽 slot 目前包含的键值对数量。<br>cluster getkeysinslot <slot> <count> ：返回 count 个 slot 槽中的键 。</p><p>二、集群中Master的下线及恢复<br>1）Master下线后，其对应的Slaver节点会自动变为Master节点，如下截图：</p><p><img src="https://images2018.cnblogs.com/blog/907596/201807/907596-20180710161223820-1254980281.png" alt="img"></p><p>2）原来的Master重启后变成Slaver节点，并是原来Master节点的Slaver节点</p><p><img src="https://images2018.cnblogs.com/blog/907596/201807/907596-20180710161301422-1069153864.png" alt="img"></p><p>三，添加节点</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-number">1</span>）新配置二个测试节点``# cd /etc/redis ` `//``新增配置 ``# cp redis-<span class="hljs-number">6379</span>.conf redis-<span class="hljs-number">6378</span>.conf &amp;&amp; sed -i <span class="hljs-string">&quot;s/6379/6378/g&quot;</span> redis-<span class="hljs-number">6378</span>.conf ``# cp redis-<span class="hljs-number">6382</span>.conf redis-<span class="hljs-number">6385</span>.conf &amp;&amp; sed -i <span class="hljs-string">&quot;s/6382/6385/g&quot;</span> redis-<span class="hljs-number">6385</span>.conf `` ` `//``启动 ``# redis-server /etc/redis/redis-<span class="hljs-number">6385</span>.conf &gt; /var/log/redis/redis-<span class="hljs-number">6385</span>.log <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp; ``# redis-server /etc/redis/redis-<span class="hljs-number">6378</span>.conf &gt; /var/log/redis/redis-<span class="hljs-number">6378</span>.log <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp; ` `2）添加主节点``# redis-trib.rb add-node <span class="hljs-number">192.168</span>.<span class="hljs-number">10.219</span>:<span class="hljs-number">6378</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">10.219</span>:<span class="hljs-number">6379</span> ``注释：``<span class="hljs-number">192.168</span>.<span class="hljs-number">10.219</span>:<span class="hljs-number">6378</span>是新增的节点``<span class="hljs-number">192.168</span>.<span class="hljs-number">10.219</span>:<span class="hljs-number">6379</span>集群任一个旧节点` `3）添加从节点``# redis-trib.rb add-node --slave --master-id <span class="hljs-number">03</span>ccad2ba5dd1e062464bc7590400441fafb63f2 <span class="hljs-number">192.168</span>.<span class="hljs-number">10.220</span>:<span class="hljs-number">6385</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">10.219</span>:<span class="hljs-number">6379</span> ``注释：``--slave，表示添加的是从节点``--master-``id` `03ccad2ba5dd1e062464bc7590400441fafb63f2,主节点的node ``id``，在这里是前面新添加的<span class="hljs-number">6378</span>的node ``id``<span class="hljs-number">192.168</span>.<span class="hljs-number">10.220</span>:<span class="hljs-number">6385</span>,新节点``<span class="hljs-number">192.168</span>.<span class="hljs-number">10.219</span>:<span class="hljs-number">6379</span>集群任一个旧节点` `4）重新分配slot``# redis-trib.rb reshard <span class="hljs-number">192.168</span>.<span class="hljs-number">10.219</span>:<span class="hljs-number">6378</span>        //下面是主要过程 ``How many slots ``do` `you want to move (from <span class="hljs-number">1</span> to <span class="hljs-number">16384</span>)? <span class="hljs-number">1000</span> ``//``设置slot数<span class="hljs-number">1000</span> ``What is the receiving node ID? <span class="hljs-number">03</span>ccad2ba5dd1e062464bc7590400441fafb63f2 ``//``新节点node ``id` `Please enter all the ``source` `node IDs. `` ``Type ``&#x27;all&#x27;` `to use all the nodes as ``source` `nodes ``for` `the ``hash` `slots. `` ``Type ``&#x27;done&#x27;` `once you entered all the ``source` `nodes IDs. ``Source node ``#<span class="hljs-number">1</span>:all                   //表示全部节点重新洗牌 ``Do you want to proceed with the proposed reshard plan (``yes``/no``)? ``yes` `//``确认重新分 ` `新增加的主节点，是没有slots的，``M: <span class="hljs-number">03</span>ccad2ba5dd1e062464bc7590400441fafb63f2 <span class="hljs-number">192.168</span>.<span class="hljs-number">10.219</span>:<span class="hljs-number">6378</span>``slots:<span class="hljs-number">0</span>-<span class="hljs-number">332</span>,<span class="hljs-number">5461</span>-<span class="hljs-number">5794</span>,<span class="hljs-number">10923</span>-<span class="hljs-number">11255</span> (<span class="hljs-number">0</span> slots) master``主节点如果没有slots的话，存取数据就都不会被选中。``可以把分配的过程理解成打扑克牌，all表示大家重新洗牌；输入某个主节点的node ``id``，然后在输入``done``的话，就好比从某个节点，抽牌。` `5）查看一下，集群情况``[root@slave2 redis]``# redis-trib.rb check <span class="hljs-number">192.168</span>.<span class="hljs-number">10.219</span>:<span class="hljs-number">6379</span> ``Connecting to node <span class="hljs-number">192.168</span>.<span class="hljs-number">10.219</span>:<span class="hljs-number">6379</span>: OK ``Connecting to node <span class="hljs-number">192.168</span>.<span class="hljs-number">10.220</span>:<span class="hljs-number">6385</span>: OK ``Connecting to node <span class="hljs-number">192.168</span>.<span class="hljs-number">10.219</span>:<span class="hljs-number">6378</span>: OK ``Connecting to node <span class="hljs-number">192.168</span>.<span class="hljs-number">10.220</span>:<span class="hljs-number">6382</span>: OK ``Connecting to node <span class="hljs-number">192.168</span>.<span class="hljs-number">10.220</span>:<span class="hljs-number">6383</span>: OK ``Connecting to node <span class="hljs-number">192.168</span>.<span class="hljs-number">10.219</span>:<span class="hljs-number">6380</span>: OK ``Connecting to node <span class="hljs-number">192.168</span>.<span class="hljs-number">10.219</span>:<span class="hljs-number">6381</span>: OK ``Connecting to node <span class="hljs-number">192.168</span>.<span class="hljs-number">10.220</span>:<span class="hljs-number">6384</span>: OK ``&gt;&gt;&gt; Performing Cluster Check (using node <span class="hljs-number">192.168</span>.<span class="hljs-number">10.219</span>:<span class="hljs-number">6379</span>) ``M: <span class="hljs-number">5</span>d8ef5a7fbd72ac586bef04fa6de8a88c0671052 <span class="hljs-number">192.168</span>.<span class="hljs-number">10.219</span>:<span class="hljs-number">6379</span> `` ``slots:<span class="hljs-number">5795</span>-<span class="hljs-number">10922</span> (<span class="hljs-number">5128</span> slots) master `` ``<span class="hljs-number">1</span> additional replica(s) ``S: <span class="hljs-number">9</span>c240333476469e8e2c8e80b089c48f389827265 <span class="hljs-number">192.168</span>.<span class="hljs-number">10.220</span>:<span class="hljs-number">6385</span> `` ``slots: (<span class="hljs-number">0</span> slots) slave `` ``replicates <span class="hljs-number">03</span>ccad2ba5dd1e062464bc7590400441fafb63f2 ``M: <span class="hljs-number">03</span>ccad2ba5dd1e062464bc7590400441fafb63f2 <span class="hljs-number">192.168</span>.<span class="hljs-number">10.219</span>:<span class="hljs-number">6378</span> `` ``slots:<span class="hljs-number">0</span>-<span class="hljs-number">332</span>,<span class="hljs-number">5461</span>-<span class="hljs-number">5794</span>,<span class="hljs-number">10923</span>-<span class="hljs-number">11255</span> (<span class="hljs-number">1000</span> slots) master `` ``<span class="hljs-number">1</span> additional replica(s) ``M: <span class="hljs-number">19</span>b042c17d2918fade18a4ad2efc75aa81fd2422 <span class="hljs-number">192.168</span>.<span class="hljs-number">10.220</span>:<span class="hljs-number">6382</span> `` ``slots:<span class="hljs-number">333</span>-<span class="hljs-number">5460</span> (<span class="hljs-number">5128</span> slots) master `` ``<span class="hljs-number">1</span> additional replica(s) ``M: b2c50113db7bd685e316a16b423c9b8abc3ba0b7 <span class="hljs-number">192.168</span>.<span class="hljs-number">10.220</span>:<span class="hljs-number">6383</span> `` ``slots:<span class="hljs-number">11256</span>-<span class="hljs-number">16383</span> (<span class="hljs-number">5128</span> slots) master `` ``<span class="hljs-number">1</span> additional replica(s) ``S: <span class="hljs-number">6475</span>e4c8b5e0c0ea27547ff7695d05e9af0c5ccb <span class="hljs-number">192.168</span>.<span class="hljs-number">10.219</span>:<span class="hljs-number">6380</span> `` ``slots: (<span class="hljs-number">0</span> slots) slave `` ``replicates <span class="hljs-number">19</span>b042c17d2918fade18a4ad2efc75aa81fd2422 ``S: <span class="hljs-number">1</span>ee01fe95bcfb688a50825d54248eea1e6133cdc <span class="hljs-number">192.168</span>.<span class="hljs-number">10.219</span>:<span class="hljs-number">6381</span> `` ``slots: (<span class="hljs-number">0</span> slots) slave `` ``replicates b2c50113db7bd685e316a16b423c9b8abc3ba0b7 ``S: <span class="hljs-number">9</span>a2a1d75b8eb47e05eee1198f81a9edd88db5aa1 <span class="hljs-number">192.168</span>.<span class="hljs-number">10.220</span>:<span class="hljs-number">6384</span> `` ``slots: (<span class="hljs-number">0</span> slots) slave `` ``replicates <span class="hljs-number">5</span>d8ef5a7fbd72ac586bef04fa6de8a88c0671052 ``[OK] All nodes agree about slots configuration. ``&gt;&gt;&gt; Check ``for` `open` `slots... ``&gt;&gt;&gt; Check slots coverage... ``[OK] All <span class="hljs-number">16384</span> slots covered.<br></code></pre></td></tr></table></figure><p>三、手动改变slave从节点所属的master主节点（一个slave只能属于一个master，而一个master可以有多个slave）</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">//<span class="hljs-string">``</span>查看一下<span class="hljs-number">6378</span>的从节点 <span class="hljs-string">``</span># redis-cli -p <span class="hljs-number">6378</span> cluster nodes | grep slave | grep <span class="hljs-number">03</span>ccad2ba5dd1e062464bc7590400441fafb63f2 <span class="hljs-string">``</span> <span class="hljs-string">` `</span>//<span class="hljs-string">``</span>将<span class="hljs-number">6385</span>加入到新的master <span class="hljs-string">``</span># redis-cli -c -p <span class="hljs-number">6385</span> -h <span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.220</span> <span class="hljs-string">``</span><span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.220</span>:<span class="hljs-number">6385</span>&gt; cluster replicate <span class="hljs-number">5</span>d8ef5a7fbd72ac586bef04fa6de8a88c0671052 <span class="hljs-string">``</span>//<span class="hljs-string">``</span>新master的node <span class="hljs-string">``</span>id<span class="hljs-string">` `</span><span class="hljs-symbol">OK</span> <span class="hljs-string">``</span><span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.220</span>:<span class="hljs-number">6385</span>&gt; quit <span class="hljs-string">``</span> <span class="hljs-string">` `</span>//<span class="hljs-string">``</span>查看新master的slave <span class="hljs-string">``</span># redis-cli -p <span class="hljs-number">6379</span> cluster nodes | grep slave | grep <span class="hljs-number">5</span>d8ef5a7fbd72ac586bef04fa6de8a88c0671052<br></code></pre></td></tr></table></figure><p>四、删除节点</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-number">1</span>）删除从节点``# redis-trib.rb del-node <span class="hljs-number">192.168</span>.<span class="hljs-number">10.220</span>:<span class="hljs-number">6385</span> &#x27;<span class="hljs-number">9</span>c240333476469e8e2c8e80b089c48f389827265&#x27; ` `2）删除主节点``如果主节点有从节点，将从节点转移到其他主节点``如果主节点有slot，去掉分配的slot，然后在删除主节点``# redis-trib.rb reshard <span class="hljs-number">192.168</span>.<span class="hljs-number">10.219</span>:<span class="hljs-number">6378</span>               //取消分配的slot,下面是主要过程 ``How many slots ``do` `you want to move (from <span class="hljs-number">1</span> to <span class="hljs-number">16384</span>)? <span class="hljs-number">1000</span>       ``//``被删除master的所有slot数量 ``What is the receiving node ID? <span class="hljs-number">5</span>d8ef5a7fbd72ac586bef04fa6de8a88c0671052 ``//``接收<span class="hljs-number">6378</span>节点slot的master ``Please enter all the ``source` `node IDs. `` ``Type ``&#x27;all&#x27;` `to use all the nodes as ``source` `nodes ``for` `the ``hash` `slots. `` ``Type ``&#x27;done&#x27;` `once you entered all the ``source` `nodes IDs. ``Source node ``#<span class="hljs-number">1</span>:<span class="hljs-number">03</span>ccad2ba5dd1e062464bc7590400441fafb63f2        //被删除master的node-id ``Source node ``#<span class="hljs-number">2</span>:done `` ` `Do you want to proceed with the proposed reshard plan (``yes``/no``)? ``yes`  `//``取消slot后，reshard ` `新增master节点后，也进行了这一步操作，当时是分配，现在去掉。反着的。``# redis-trib.rb del-node <span class="hljs-number">192.168</span>.<span class="hljs-number">10.219</span>:<span class="hljs-number">6378</span> &#x27;<span class="hljs-number">03</span>ccad2ba5dd1e062464bc7590400441fafb63f2&#x27; ` `新的master节点被删除了，这样就回到了，就是这篇文章开头，还没有添加节点的状态<br></code></pre></td></tr></table></figure><p>五、复制迁移</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">在redis集群中通过``<span class="hljs-string">&quot;cluster replicate &lt;master_node_id&gt; &quot;</span>``命令可以将一个slave节点重新配置为另外一个master的slave。``注意：这个只是针对slave节点，即登录到slave节点的reids中，执行这个命令。` `比如<span class="hljs-number">172.16</span>.<span class="hljs-number">60.204</span>:<span class="hljs-number">7003</span>是<span class="hljs-number">172.16</span>.<span class="hljs-number">60.202</span>:<span class="hljs-number">7000</span>主节点的slave节点，也可以把他设置成<span class="hljs-number">172.16</span>.<span class="hljs-number">60.205</span>:<span class="hljs-number">7004</span>主节点的slave节点。``<span class="hljs-number">172.16</span>.<span class="hljs-number">60.205</span>:<span class="hljs-number">7004</span>主节点的ID是<span class="hljs-number">48</span>cbab906141dd26241ccdbc38bee406586a8d03` `则操作为``[root@redis-new01 ~]``# /data/redis-<span class="hljs-number">4.0</span>.<span class="hljs-number">6</span>/src/redis-cli -h <span class="hljs-number">172.16</span>.<span class="hljs-number">60.204</span> -c -p <span class="hljs-number">7003</span>``<span class="hljs-number">172.16</span>.<span class="hljs-number">60.204</span>:<span class="hljs-number">7003</span>&gt; cluster replicate <span class="hljs-number">48</span>cbab906141dd26241ccdbc38bee406586a8d03``OK``<span class="hljs-number">172.16</span>.<span class="hljs-number">60.204</span>:<span class="hljs-number">7003</span>&gt;` `这样<span class="hljs-number">172.16</span>.<span class="hljs-number">60.204</span>:<span class="hljs-number">7003</span>节点就变成了<span class="hljs-number">172.16</span>.<span class="hljs-number">60.205</span>:<span class="hljs-number">7004</span>主节点的slave节点，而不再是<span class="hljs-number">172.16</span>.<span class="hljs-number">60.202</span>:<span class="hljs-number">7000</span>主节点的slave节点！` `这样可以自动的将一个复制节点从一个master下移动到另外一个master下。 这种情况下的复制节点的自动重配置被称为复制迁移。``复制迁移可以提升系统的可靠性和抗灾性。` `在某种情况下，你想让集群的复制节点从一个master迁移到另一个master的原因可能是：``集群的抗崩溃能力总是跟集群中master 拥有的平均slave数量成正比。``比如，如果一个集群中每个master只有一个slave，当master和slave都挂掉的时候这个集群就崩溃了。因为此时有一些哈希槽无法找到了。``虽然网络分裂会把一堆节点从集群中孤立出来（这样你一下就会知道集群出问题了），但是其他的更常见的硬件或者软件的问题并不会在多台机器上同时发生，``所以很 可能在你的这个集群（平均每个master只有一个slave）有一个slave在早上<span class="hljs-number">4</span>点挂掉，然后他的master在随后的早上<span class="hljs-number">6</span>点挂掉。这样依然会 导致集群崩溃。` `可以通过给每个master都再多加一个slave节点来改进系统的可靠性，但是这样很昂贵。复制迁移允许只给某些master增加slave。比方说你的集群有<span class="hljs-number">20</span>个节点，``<span class="hljs-number">10</span>个master，每个master都有<span class="hljs-number">1</span>个slave。然后你增加<span class="hljs-number">3</span>个 slave到集群中并把他们分配给某几个master节点，这样某些master就会拥有多于<span class="hljs-number">1</span>个slave。` `当某个 master失去了slave的时候，复制迁移可以将slave节点从拥有富余slave的master旗下迁移给没有slave的master。所以当 你的slave在早上<span class="hljs-number">4</span>点挂掉的时候，``另一个slave会被迁移过来取代它的位置，这样当master节点在早上<span class="hljs-number">5</span>点挂掉的时候，依然有一个slave可 以被选举为master，集群依然可以正常运行。` `所以简而言之，关于复制迁移应该注意下面几个方面：``- 集群在迁移的时候会尝试去迁移拥有最多slave数量的master旗下的slave。``- 想利用复制迁移特性来增加系统的可用性，你只需要增加一些slave节点给单个master（哪个master节点并不重要）。``- 复制迁移是由配置项cluster-migration-barrier控制的<br></code></pre></td></tr></table></figure><p>六、升级节点</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">升级从服务器节点很简单，因为你只需要停止节点然后用已更新的Redis版本重启。如果有客户端使用从服务器节点分离读请求，它们应该能够在某个节点``不可用时重新连接另一个从服务器。``  ` `升级主服务器要稍微复杂一些，建议的步骤是：``<span class="hljs-number">1</span>）使用cluster failover来触发一次手工故障转移主服务器(请看本文档的手工故障转移小节)。``<span class="hljs-number">2</span>）等待主服务器变为从服务器。``<span class="hljs-number">3</span>）像升级从服务器那样升级这个节点。``<span class="hljs-number">4</span>）如果你想让你刚刚升级的节点成为主服务器，触发一次新的手工故障转移，让升级的节点重新变回主服务器。` `可以按照这些步骤来一个节点一个节点的升级，直到全部节点升级完毕。<br></code></pre></td></tr></table></figure><p>目前redis cluster集群的启动只能空节点启动，当节点有数据时会有err警告，但是只要进行fix就好了 redis-trib.rb fix 用这个命令修复下就OK了。</p><p>七、Redis缓存清理</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-number">1</span>）登陆redis``# src/redis-cli -c -h <span class="hljs-number">192.168</span>.<span class="hljs-number">1.100</span> -p <span class="hljs-number">6379</span>` `2）执行：``<span class="hljs-number">192.168</span>.<span class="hljs-number">1.100</span>:<span class="hljs-number">6379</span>&gt; dbsize` `3）``<span class="hljs-number">192.168</span>.<span class="hljs-number">1.100</span>:<span class="hljs-number">6379</span>&gt; flushall` `================================================================``redis集群指定key值得缓存清理：``<span class="hljs-number">1</span>)登录至指定端口的redis服务器``# src/redis-cli -c -h <span class="hljs-number">192.168</span>.<span class="hljs-number">1.100</span> -p <span class="hljs-number">6379</span>` `2）查看所有key值 （或者使用info命令也能查看出来）``keys *` `3）删除指定索引的值``del key<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Python正则表达式指南</title>
    <link href="/2022/07/14/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/"/>
    <url>/2022/07/14/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="Python正则表达式指南"><a href="#Python正则表达式指南" class="headerlink" title="Python正则表达式指南"></a>Python正则表达式指南</h1><p>本文介绍了Python对于正则表达式的支持，包括正则表达式基础以及Python正则表达式标准库的完整介绍及使用示例。本文的内容不包括如何编写高效的正则表达式、如何优化正则表达式，这些主题请查看其他教程。</p><h5 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h5><p>本文介绍了Python对于正则表达式的支持，包括正则表达式基础以及Python正则表达式标准库的完整介绍及使用示例。本文的内容不包括如何编写高效的正则表达式、如何优化正则表达式，这些主题请查看其他教程。</p><p>注意：本文基于Python2.4完成；如果看到不明白的词汇请记得百度谷歌或维基，whatever。</p><h2 id="1-正则表达式基础"><a href="#1-正则表达式基础" class="headerlink" title="1. 正则表达式基础"></a>1. 正则表达式基础</h2><h3 id="1-1-简单介绍"><a href="#1-1-简单介绍" class="headerlink" title="1.1. 简单介绍"></a>1.1. 简单介绍</h3><p>正则表达式并不是Python的一部分。正则表达式是用于处理字符串的强大工具，拥有自己独特的语法以及一个独立的处理引擎，效率上可能不如str自带的方法，但功能十分强大。得益于这一点，在提供了正则表达式的语言里，正则表达式的语法都是一样的，区别只在于不同的编程语言实现支持的语法数量不同；但不用担心，不被支持的语法通常是不常用的部分。如果已经在其他语言里使用过正则表达式，只需要简单看一看就可以上手了。</p><p>下图展示了使用正则表达式进行匹配的流程：<br><img src="https://img.jbzj.com/file_images/article/201810/201810090837111.png" alt="img"></p><p>正则表达式的大致匹配过程是：依次拿出表达式和文本中的字符比较，如果每一个字符都能匹配，则匹配成功；一旦有匹配不成功的字符则匹配失败。如果表达式中有量词或边界，这个过程会稍微有一些不同，但也是很好理解的，看下图中的示例以及自己多使用几次就能明白。</p><p>下图列出了Python支持的正则表达式元字符和语法： </p><p><img src="https://img.jbzj.com/file_images/article/201810/201810090837112.png" alt="img"></p><h3 id="1-2-数量词的贪婪模式与非贪婪模式"><a href="#1-2-数量词的贪婪模式与非贪婪模式" class="headerlink" title="1.2. 数量词的贪婪模式与非贪婪模式"></a>1.2. 数量词的贪婪模式与非贪婪模式</h3><p>正则表达式通常用于在文本中查找匹配的字符串。Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；非贪婪的则相反，总是尝试匹配尽可能少的字符。例如：正则表达式”ab*”如果用于查找”abbbc”，将找到”abbb”。而如果使用非贪婪的数量词”ab*?”，将找到”a”。</p><h3 id="1-3-反斜杠的困扰"><a href="#1-3-反斜杠的困扰" class="headerlink" title="1.3. 反斜杠的困扰"></a>1.3. 反斜杠的困扰</h3><p>与大多数编程语言相同，正则表达式里使用”&quot;作为转义字符，这就可能造成反斜杠困扰。假如你需要匹配文本中的字符”&quot;，那么使用编程语言表示的正则表达式里将需要4个反斜杠”\\“：前两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。Python里的原生字符串很好地解决了这个问题，这个例子中的正则表达式可以使用r”\“表示。同样，匹配一个数字的”\d”可以写成r”\d”。有了原生字符串，你再也不用担心是不是漏写了反斜杠，写出来的表达式也更直观。</p><h3 id="1-4-匹配模式"><a href="#1-4-匹配模式" class="headerlink" title="1.4. 匹配模式"></a>1.4. 匹配模式</h3><p>正则表达式提供了一些可用的匹配模式，比如忽略大小写、多行匹配等，这部分内容将在Pattern类的工厂方法re.compile(pattern[, flags])中一起介绍。</p><h2 id="2-re模块"><a href="#2-re模块" class="headerlink" title="2. re模块"></a>2. re模块</h2><h3 id="2-1-开始使用re"><a href="#2-1-开始使用re" class="headerlink" title="2.1. 开始使用re"></a>2.1. 开始使用re</h3><p>Python通过re模块提供对正则表达式的支持。使用re的一般步骤是先将正则表达式的字符串形式编译为Pattern实例，然后使用Pattern实例处理文本并获得匹配结果（一个Match实例），最后使用Match实例获得信息，进行其他的操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">`<span class="hljs-comment"># encoding: UTF-8``import` `re` `# 将正则表达式编译成Pattern对象``pattern ``=` `re.``compile``(r``&#x27;hello&#x27;``)` `# 使用Pattern匹配文本，获得匹配结果，无法匹配时将返回None``match ``=` `pattern.match(``&#x27;hello world!&#x27;``)` `if` `match:`` ``# 使用Match获得分组信息`` ``print` `match.group()` `### 输出 ###``# hello`</span><br></code></pre></td></tr></table></figure><p>re.compile(strPattern[, flag]):</p><p>这个方法是Pattern类的工厂方法，用于将字符串形式的正则表达式编译为Pattern对象。 第二个参数flag是匹配模式，取值可以使用按位或运算符’|’表示同时生效，比如re.I | re.M。另外，你也可以在regex字符串中指定模式，比如re.compile(‘pattern’, re.I | re.M)与re.compile(‘(?im)pattern’)是等价的。<br>可选值有：</p><p>re.I(re.IGNORECASE): 忽略大小写（括号内是完整写法，下同） M(MULTILINE): 多行模式，改变’^’和’$’的行为（参见上图） S(DOTALL): 点任意匹配模式，改变’.’的行为 L(LOCALE): 使预定字符类 \w \W \b \B \s \S 取决于当前区域设定 U(UNICODE): 使预定字符类 \w \W \b \B \s \S \d \D 取决于unicode定义的字符属性 X(VERBOSE): 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。以下两个正则表达式是等价的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">`a ``=` `re.``<span class="hljs-built_in">compile</span>``(r``<span class="hljs-string">&quot;&quot;&quot;\d + # the integral part`` ``\. # the decimal point`` ``\d * # some fractional digits&quot;&quot;&quot;</span>``, re.X)``b ``=` `re.``<span class="hljs-built_in">compile</span>``(r``<span class="hljs-string">&quot;\d+\.\d*&quot;</span>``)`<br></code></pre></td></tr></table></figure><p>re提供了众多模块方法用于完成正则表达式的功能。这些方法可以使用Pattern实例的相应方法替代，唯一的好处是少写一行re.compile()代码，但同时也无法复用编译后的Pattern对象。这些方法将在Pattern类的实例方法部分一起介绍。如上面这个例子可以简写为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">`m ``=` `re.match(r``<span class="hljs-string">&#x27;hello&#x27;</span>``, ``<span class="hljs-string">&#x27;hello world!&#x27;</span>``)``<span class="hljs-built_in">print</span>` `m.group()`<br></code></pre></td></tr></table></figure><p>re模块还提供了一个方法escape(string)，用于将string中的正则表达式元字符如*&#x2F;+&#x2F;?等之前加上转义符再返回，在需要大量匹配元字符时有那么一点用。</p><h3 id="2-2-Match"><a href="#2-2-Match" class="headerlink" title="2.2. Match"></a>2.2. Match</h3><p>Match对象是一次匹配的结果，包含了很多关于此次匹配的信息，可以使用Match提供的可读属性或方法来获取这些信息。</p><p>属性：</p><p>string: 匹配时使用的文本。 re: 匹配时使用的Pattern对象。 pos: 文本中正则表达式开始搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。 endpos: 文本中正则表达式结束搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。 lastindex: 最后一个被捕获的分组在文本中的索引。如果没有被捕获的分组，将为None。 lastgroup: 最后一个被捕获的分组的别名。如果这个分组没有别名或者没有被捕获的分组，将为None。</p><p>方法：</p><p>group([group1, …]):</p><p>获得一个或多个分组截获的字符串；指定多个参数时将以元组形式返回。group1可以使用编号也可以使用别名；编号0代表整个匹配的子串；不填写参数时，返回group(0)；没有截获字符串的组返回None；截获了多次的组返回最后一次截获的子串。 groups([default]):</p><p>以元组形式返回全部分组截获的字符串。相当于调用group(1,2,…last)。default表示没有截获字符串的组以这个值替代，默认为None。 groupdict([default]):<br>返回以有别名的组的别名为键、以该组截获的子串为值的字典，没有别名的组不包含在内。default含义同上。 start([group]):<br>返回指定的组截获的子串在string中的起始索引（子串第一个字符的索引）。group默认值为0。 end([group]):<br>返回指定的组截获的子串在string中的结束索引（子串最后一个字符的索引+1）。group默认值为0。 span([group]):<br>返回(start(group), end(group))。 expand(template):<br>将匹配到的分组代入template中然后返回。template中可以使用\id或\g<id>、\g<name>引用分组，但不能使用编号0。\id与\g<id>是等价的；但\10将被认为是第10个分组，如果你想表达\1之后是字符’0’，只能使用\g&lt;1&gt;0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">`<span class="hljs-keyword">import</span>` `re``m ``=` `re.match(r``<span class="hljs-string">&#x27;(\w+) (\w+)(?P.*)&#x27;</span>``, ``<span class="hljs-string">&#x27;hello world!&#x27;</span>``)` `<span class="hljs-built_in">print</span>` `<span class="hljs-string">&quot;m.string:&quot;</span>``, m.string``<span class="hljs-built_in">print</span>` `<span class="hljs-string">&quot;m.re:&quot;</span>``, m.re``<span class="hljs-built_in">print</span>` `<span class="hljs-string">&quot;m.pos:&quot;</span>``, m.pos``<span class="hljs-built_in">print</span>` `<span class="hljs-string">&quot;m.endpos:&quot;</span>``, m.endpos``<span class="hljs-built_in">print</span>` `<span class="hljs-string">&quot;m.lastindex:&quot;</span>``, m.lastindex``<span class="hljs-built_in">print</span>` `<span class="hljs-string">&quot;m.lastgroup:&quot;</span>``, m.lastgroup` `<span class="hljs-built_in">print</span>` `<span class="hljs-string">&quot;m.group(1,2):&quot;</span>``, m.group(``<span class="hljs-number">1</span>``, ``<span class="hljs-number">2</span>``)``<span class="hljs-built_in">print</span>` `<span class="hljs-string">&quot;m.groups():&quot;</span>``, m.groups()``<span class="hljs-built_in">print</span>` `<span class="hljs-string">&quot;m.groupdict():&quot;</span>``, m.groupdict()``<span class="hljs-built_in">print</span>` `<span class="hljs-string">&quot;m.start(2):&quot;</span>``, m.start(``<span class="hljs-number">2</span>``)``<span class="hljs-built_in">print</span>` `<span class="hljs-string">&quot;m.end(2):&quot;</span>``, m.end(``<span class="hljs-number">2</span>``)``<span class="hljs-built_in">print</span>` `<span class="hljs-string">&quot;m.span(2):&quot;</span>``, m.span(``<span class="hljs-number">2</span>``)``<span class="hljs-built_in">print</span>` `r``<span class="hljs-string">&quot;m.expand(r&#x27;\2 \1\3&#x27;):&quot;</span>``, m.expand(r``<span class="hljs-string">&#x27;\2 \1\3&#x27;</span>``)` `<span class="hljs-comment">### output ###``# m.string: hello world!``# m.re: &lt;_sre.SRE_Pattern object at 0x016E1A38&gt;``# m.pos: 0``# m.endpos: 12``# m.lastindex: 3``# m.lastgroup: sign``# m.group(1,2): (&#x27;hello&#x27;, &#x27;world&#x27;)``# m.groups(): (&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;!&#x27;)``# m.groupdict(): &#123;&#x27;sign&#x27;: &#x27;!&#x27;&#125;``# m.start(2): 6``# m.end(2): 11``# m.span(2): (6, 11)``# m.expand(r&#x27;\2 \1\3&#x27;): world hello!`</span><br></code></pre></td></tr></table></figure><h3 id="2-3-Pattern"><a href="#2-3-Pattern" class="headerlink" title="2.3. Pattern"></a>2.3. Pattern</h3><p>Pattern对象是一个编译好的正则表达式，通过Pattern提供的一系列方法可以对文本进行匹配查找。</p><p>Pattern不能直接实例化，必须使用re.compile()进行构造。</p><p>Pattern提供了几个可读属性用于获取表达式的相关信息：</p><p>pattern: 编译时用的表达式字符串。 flags: 编译时用的匹配模式。数字形式。 groups: 表达式中分组的数量。 groupindex: 以表达式中有别名的组的别名为键、以该组对应的编号为值的字典，没有别名的组不包含在内。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">`<span class="hljs-keyword">import</span>` `re``p ``=` `re.``<span class="hljs-built_in">compile</span>``(r``<span class="hljs-string">&#x27;(\w+) (\w+)(?P.*)&#x27;</span>``, re.DOTALL)` `<span class="hljs-built_in">print</span>` `<span class="hljs-string">&quot;p.pattern:&quot;</span>``, p.pattern``<span class="hljs-built_in">print</span>` `<span class="hljs-string">&quot;p.flags:&quot;</span>``, p.flags``<span class="hljs-built_in">print</span>` `<span class="hljs-string">&quot;p.groups:&quot;</span>``, p.groups``<span class="hljs-built_in">print</span>` `<span class="hljs-string">&quot;p.groupindex:&quot;</span>``, p.groupindex` `<span class="hljs-comment">### output ###``# p.pattern: (\w+) (\w+)(?P.*)``# p.flags: 16``# p.groups: 3``# p.groupindex: &#123;&#x27;sign&#x27;: 3&#125;`</span><br></code></pre></td></tr></table></figure><p>实例方法[ | re模块方法]：</p><p>match(string[, pos[, endpos]]) | re.match(pattern, string[, flags]):<br>这个方法将从string的pos下标处起尝试匹配pattern；如果pattern结束时仍可匹配，则返回一个Match对象；如果匹配过程中pattern无法匹配，或者匹配未结束就已到达endpos，则返回None。<br>pos和endpos的默认值分别为0和len(string)；re.match()无法指定这两个参数，参数flags用于编译pattern时指定匹配模式。</p><p>注意：这个方法并不是完全匹配。当pattern结束时若string还有剩余字符，仍然视为成功。想要完全匹配，可以在表达式末尾加上边界匹配符’$’。<br>示例参见2.1小节。 search(string[, pos[, endpos]]) | re.search(pattern, string[, flags]):<br>这个方法用于查找字符串中可以匹配成功的子串。从string的pos下标处起尝试匹配pattern，如果pattern结束时仍可匹配，则返回一个Match对象；若无法匹配，则将pos加1后重新尝试匹配；直到pos&#x3D;endpos时仍无法匹配则返回None。<br>pos和endpos的默认值分别为0和len(string))；re.search()无法指定这两个参数，参数flags用于编译pattern时指定匹配模式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">`<span class="hljs-comment"># encoding: UTF-8 ``import` `re ` `# 将正则表达式编译成Pattern对象 ``pattern ``=` `re.``compile``(r``&#x27;world&#x27;``) ` `# 使用search()查找匹配的子串，不存在能匹配的子串时将返回None ``# 这个例子中使用match()无法成功匹配 ``match ``=` `pattern.search(``&#x27;hello world!&#x27;``) ` `if` `match: `` ``# 使用Match获得分组信息 `` ``print` `match.group() ` `### 输出 ### ``# world `</span><br></code></pre></td></tr></table></figure><p>split(string[, maxsplit]) | re.split(pattern, string[, maxsplit]):<br>按照能够匹配的子串将string分割后返回列表。maxsplit用于指定最大分割次数，不指定将全部分割。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">`<span class="hljs-keyword">import</span>` `re` `p ``=` `re.``<span class="hljs-built_in">compile</span>``(r``<span class="hljs-string">&#x27;\d+&#x27;</span>``)``<span class="hljs-built_in">print</span>` `p.split(``<span class="hljs-string">&#x27;one1two2three3four4&#x27;</span>``)` `<span class="hljs-comment">### output ###``# [&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;, &#x27;four&#x27;, &#x27;&#x27;]`</span><br></code></pre></td></tr></table></figure><p>findall(string[, pos[, endpos]]) | re.findall(pattern, string[, flags]):<br>搜索string，以列表形式返回全部能匹配的子串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">`<span class="hljs-keyword">import</span>` `re` `p ``=` `re.``<span class="hljs-built_in">compile</span>``(r``<span class="hljs-string">&#x27;\d+&#x27;</span>``)``<span class="hljs-built_in">print</span>` `p.findall(``<span class="hljs-string">&#x27;one1two2three3four4&#x27;</span>``)` `<span class="hljs-comment">### output ###``# [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]`</span><br></code></pre></td></tr></table></figure><p>finditer(string[, pos[, endpos]]) | re.finditer(pattern, string[, flags]):<br>搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">`<span class="hljs-keyword">import</span>` `re` `p ``=` `re.``<span class="hljs-built_in">compile</span>``(r``<span class="hljs-string">&#x27;\d+&#x27;</span>``)``<span class="hljs-keyword">for</span>` `m ``<span class="hljs-keyword">in</span>` `p.finditer(``<span class="hljs-string">&#x27;one1two2three3four4&#x27;</span>``):`` ``<span class="hljs-built_in">print</span>` `m.group(),` `<span class="hljs-comment">### output ###``# 1 2 3 4`</span><br></code></pre></td></tr></table></figure><p>sub(repl, string[, count]) | re.sub(pattern, repl, string[, count]):<br>使用repl替换string中每一个匹配的子串后返回替换后的字符串。<br>当repl是一个字符串时，可以使用\id或\g<id>、\g<name>引用分组，但不能使用编号0。<br>当repl是一个方法时，这个方法应当只接受一个参数（Match对象），并返回一个字符串用于替换（返回的字符串中不能再引用分组）。<br>count用于指定最多替换次数，不指定时全部替换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">`<span class="hljs-keyword">import</span>` `re` `p ``=` `re.``<span class="hljs-built_in">compile</span>``(r``<span class="hljs-string">&#x27;(\w+) (\w+)&#x27;</span>``)``s ``=` `<span class="hljs-string">&#x27;i say, hello world!&#x27;</span>` `<span class="hljs-built_in">print</span>` `p.sub(r``<span class="hljs-string">&#x27;\2 \1&#x27;</span>``, s)` `<span class="hljs-keyword">def</span>` `func(m):`` ``<span class="hljs-keyword">return</span>` `m.group(``<span class="hljs-number">1</span>``).title() ``+` `<span class="hljs-string">&#x27; &#x27;</span>` `+` `m.group(``<span class="hljs-number">2</span>``).title()` `<span class="hljs-built_in">print</span>` `p.sub(func, s)` `<span class="hljs-comment">### output ###``# say i, world hello!``# I Say, Hello World!`</span><br></code></pre></td></tr></table></figure><p>subn(repl, string[, count]) |re.sub(pattern, repl, string[, count]):<br>返回 (sub(repl, string[, count]), 替换次数)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">`<span class="hljs-keyword">import</span>` `re` `p ``=` `re.``<span class="hljs-built_in">compile</span>``(r``<span class="hljs-string">&#x27;(\w+) (\w+)&#x27;</span>``)``s ``=` `<span class="hljs-string">&#x27;i say, hello world!&#x27;</span>` `<span class="hljs-built_in">print</span>` `p.subn(r``<span class="hljs-string">&#x27;\2 \1&#x27;</span>``, s)` `<span class="hljs-keyword">def</span>` `func(m):`` ``<span class="hljs-keyword">return</span>` `m.group(``<span class="hljs-number">1</span>``).title() ``+` `<span class="hljs-string">&#x27; &#x27;</span>` `+` `m.group(``<span class="hljs-number">2</span>``).title()` `<span class="hljs-built_in">print</span>` `p.subn(func, s)` `<span class="hljs-comment">### output ###``# (&#x27;say i, world hello!&#x27;, 2)``# (&#x27;I Say, Hello World!&#x27;, 2)`</span><br></code></pre></td></tr></table></figure><p>以上就是Python对于正则表达式的支持。熟练掌握正则表达式是每一个程序员必须具备的技能，这年头没有不与字符串打交道的程序了。笔者也处于初级阶段，与君共勉，^_^</p><p>另外，图中的特殊构造部分没有举出例子，用到这些的正则表达式是具有一定难度的。有兴趣可以思考一下，如何匹配不是以abc开头的单词，^_^</p><p>您可能感兴趣的文章:</p><ul><li><a href="https://www.jb51.net/article/134936.htm">python的staticmethod与classmethod实现实例代码</a></li><li><a href="https://www.jb51.net/article/126598.htm">基于python中staticmethod和classmethod的区别(详解)</a></li><li><a href="https://www.jb51.net/article/138609.htm">对Python中的@classmethod用法详解</a></li><li><a href="https://www.jb51.net/article/148606.htm">10 行 Python 代码教你自动发送短信(不想回复工作邮件妙招)</a></li><li><a href="https://www.jb51.net/article/148528.htm">Python 变量类型详解</a></li><li><a href="https://www.jb51.net/article/148526.htm">Python中几种属性访问的区别与用法详解</a></li><li><a href="https://www.jb51.net/article/148494.htm">不知道这5种下划线的含义,你就不算真的会Python！</a></li><li><a href="https://www.jb51.net/article/148474.htm">python如何发布自已pip项目的方法步骤</a></li><li><a href="https://www.jb51.net/article/148615.htm">Python中staticmethod和classmethod的作用与区别</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Python pip 安装与使用</title>
    <link href="/2022/07/14/Python%20pip%20%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/07/14/Python%20pip%20%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Python-pip-安装与使用"><a href="#Python-pip-安装与使用" class="headerlink" title="Python pip 安装与使用"></a>Python pip 安装与使用</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>pip 是 Python 包管理工具，该工具提供了对Python 包的查找、下载、安装、卸载的功能。</p><p>目前如果你在 <a href="https://www.python.org/">python.org</a> 下载最新版本的安装包，则是已经自带了该工具。</p><p>Python 2.7.9 + 或 Python 3.4+ 以上版本都自带 pip 工具。</p><p>pip 官网：<a href="https://pypi.org/project/pip/">https://pypi.org/project/pip/</a></p><p>你可以通过以下命令来判断是否已安装：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">pip --<span class="hljs-keyword">version</span>     <span class="hljs-comment"># Python2.x 版本命令</span><br>pip3 --<span class="hljs-keyword">version</span>    <span class="hljs-comment"># Python3.x 版本命令</span><br></code></pre></td></tr></table></figure><p>如果你还未安装，则可以使用以下方法来安装：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">$ <span class="hljs-string">curl</span> <span class="hljs-string">https</span>://<span class="hljs-string">bootstrap</span>.<span class="hljs-string">pypa</span>.<span class="hljs-string">io</span>/<span class="hljs-built_in">get-pip.py</span> -<span class="hljs-string">o</span> <span class="hljs-built_in">get-pip.py</span>   <span class="hljs-comment"># 下载安装脚本</span><br>$ <span class="hljs-string">sudo</span> <span class="hljs-string">python</span> <span class="hljs-built_in">get-pip.py</span>    <span class="hljs-comment"># 运行安装脚本</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：用哪个版本的 Python 运行安装脚本，pip 就被关联到哪个版本，如果是 Python3 则执行以下命令：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">$ <span class="hljs-string">sudo</span> <span class="hljs-string">python3</span> <span class="hljs-built_in">get-pip.py</span>    <span class="hljs-comment"># 运行安装脚本。</span><br></code></pre></td></tr></table></figure><p>一般情况 pip 对应的是 Python 2.7，pip3 对应的是 Python 3.x。</p></blockquote><p>部分 Linux 发行版可直接用包管理器安装 pip，如 Debian 和 Ubuntu：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install python-pip<br></code></pre></td></tr></table></figure><h3 id="pip-最常用命令"><a href="#pip-最常用命令" class="headerlink" title="pip 最常用命令"></a>pip 最常用命令</h3><p>显示版本和路径</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">pip <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><p>获取帮助</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">pip <span class="hljs-comment">--help</span><br></code></pre></td></tr></table></figure><p>升级 pip</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> -U pip<br></code></pre></td></tr></table></figure><blockquote><p>如果这个升级命令出现问题 ，可以使用以下命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sudo easy_install <span class="hljs-comment">--upgrade pip</span><br></code></pre></td></tr></table></figure></blockquote><p>安装包</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pip</span> install SomePackage              # 最新版本<br><span class="hljs-attribute">pip</span> install SomePackage==<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4</span>       # 指定版本<br><span class="hljs-attribute">pip</span> install &#x27;SomePackage&gt;=<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4</span>&#x27;     # 最小版本<br></code></pre></td></tr></table></figure><p>比如我要安装 Django。用以下的一条命令就可以，方便快捷。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">pip install Django<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">1.7</span><br></code></pre></td></tr></table></figure><p>升级包</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">pip install <span class="hljs-comment">--upgrade SomePackage</span><br></code></pre></td></tr></table></figure><p>升级指定的包，通过使用&#x3D;&#x3D;, &gt;&#x3D;, &lt;&#x3D;, &gt;, &lt; 来指定一个版本号。</p><p>卸载包</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">pip uninstall SomePackage</span><br></code></pre></td></tr></table></figure><p>搜索包</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">pip search SomePackage</span><br></code></pre></td></tr></table></figure><p>显示安装包信息</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">pip <span class="hljs-keyword">show</span> <br></code></pre></td></tr></table></figure><p>查看指定包的详细信息</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">pip <span class="hljs-keyword">show</span> -f SomePackage<br></code></pre></td></tr></table></figure><p>列出已安装的包</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">pip list</span><br></code></pre></td></tr></table></figure><p>查看可升级的包</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">pip list -o</span><br></code></pre></td></tr></table></figure><h3 id="pip-升级"><a href="#pip-升级" class="headerlink" title="pip 升级"></a>pip 升级</h3><p>Linux 或 macOS</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> --upgrade pip    <span class="hljs-comment"># python2.x</span><br>pip3 <span class="hljs-keyword">install</span> --upgrade pip   <span class="hljs-comment"># python3.x</span><br></code></pre></td></tr></table></figure><p>Windows 平台升级：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">python -m pip <span class="hljs-keyword">install</span> -U pip   <span class="hljs-comment"># python2.x</span><br>python -m pip3 <span class="hljs-keyword">install</span> -U pip    <span class="hljs-comment"># python3.x</span><br></code></pre></td></tr></table></figure><h3 id="pip-清华大学开源软件镜像站"><a href="#pip-清华大学开源软件镜像站" class="headerlink" title="pip 清华大学开源软件镜像站"></a>pip 清华大学开源软件镜像站</h3><p>使用国内镜像速度会快很多：</p><p>临时使用：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple <span class="hljs-keyword">some</span>-<span class="hljs-keyword">package</span><br></code></pre></td></tr></table></figure><p>例如，安装 Django：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">pip install -i https:<span class="hljs-regexp">//</span>pypi.tuna.tsinghua.edu.cn/simple Django<br></code></pre></td></tr></table></figure><p>如果要设为默认需要升级 pip 到最新的版本 (&gt;&#x3D;10.0.0) 后进行配置：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">pip install pip -U<br>pip config <span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span>.<span class="hljs-built_in">index</span>-url https://pypi.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span>/simple<br></code></pre></td></tr></table></figure><p>如果您到 pip 默认源的网络连接较差，临时使用本镜像站来升级 pip：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">pip install -i https:<span class="hljs-regexp">//</span>pypi.tuna.tsinghua.edu.cn/simple pip -U<br></code></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>如果 Python2 和 Python3 同时有 pip，则使用方法如下：</p><p>Python2：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">python2 -m pip <span class="hljs-keyword">install</span> XXX<br></code></pre></td></tr></table></figure><p>Python3:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">python3 -m pip <span class="hljs-keyword">install</span> XXX<br></code></pre></td></tr></table></figure><p>← <a href="http://www.runoob.com/w3cnote/bridge-pattern2.html">桥接模式</a></p><p><a href="http://www.runoob.com/w3cnote/htmlcss-make-a-website.html">HTML&#x2F;CSS 设计一个网页</a> →</p><h2 id="1-篇笔记-写笔记"><a href="#1-篇笔记-写笔记" class="headerlink" title="1 篇笔记 写笔记"></a>1 篇笔记 写笔记</h2><p>若由于一些局域网的原因，使用 pip 出现 “connection timeout”，连接超时可以使用国内的镜像网站下载：</p><ul><li>豆瓣：<a href="https://pypi.doubanio.com/simple/">https://pypi.doubanio.com/simple/</a></li><li>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></li></ul><p>命令如下:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">pip install -i http:<span class="hljs-string">//pypi.douban.com/simple</span> <span class="hljs-params">--trusted-host</span> pypi.douban.com packagename <span class="hljs-comment"># packagename是要下载的包的名字</span><br>pip install -i http:<span class="hljs-string">//e.pypi.python.org</span> <span class="hljs-params">--trusted-host</span> e.pypi.python.org <span class="hljs-params">--upgrade</span> pip <span class="hljs-comment"># 升级pip</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Prometheus 存储容量规划</title>
    <link href="/2022/07/14/Prometheus%20%E5%AD%98%E5%82%A8%E5%AE%B9%E9%87%8F%E8%A7%84%E5%88%92/"/>
    <url>/2022/07/14/Prometheus%20%E5%AD%98%E5%82%A8%E5%AE%B9%E9%87%8F%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="Prometheus-存储容量规划"><a href="#Prometheus-存储容量规划" class="headerlink" title="Prometheus 存储容量规划"></a><a href="http://support.transwarp.cn/t/topic/3226">Prometheus 存储容量规划</a></h1><p><a href="http://support.transwarp.cn/u/dezheng"><img src="http://support.transwarp.cn/letter_avatar_proxy/v2/letter/d/73ab20/45.png" alt="dezheng"></a></p><p>.</p><p>本文主要分析 Prometheus 在 TDH 集群上运行时存储用量受到哪些因素影响，以及如何根据这些因素得出一个经验公式, 用来预估 Prometheus 的磁盘使用量和内存消耗</p><p>经验公式<br>正式分析 Prometheus 的磁盘使用量和内存消耗 之前，先给一个基本的经验公式，可以直接根据这个公式来合理分配磁盘与内存.</p><p>Prometheus 需要磁盘大小 &#x3D; 节点个数 * 1 GB<br>Prometheus 需要内存大小 &#x3D; 节点个数 * 50 MB</p><p>磁盘容量规划<br>首先明确几个概念:</p><ul><li>监控节点: 一个 exporter 进程被认为是一个监控节点。Manager 在安装 AQUILA时，默认每个节点都会安装一个 node-exporter 收集节点信息(CPU, Memory 等), 每个节点安装一个 tdh-exporter 收集 TDH Services metrics (目前有: HDFS, YARN, ZOOKEEPER, KAFKA, HYPERBASE, INCEPTOR). 故在 TDH 集群上, 每个节点有两个 exporter 进程.</li><li>测量点: 一个测量点代表了某监控节点上的一个观测对象. 从某测量点采集到的一组样本数据构成一条时间序列（time series).</li><li>抓取间隔: Promtheus 对某个监控节点采集 metrics 的时间间隔. 一般为同类监控节点设置相同的抓取间隔. AQUILA对应的配置值为: prometheus.node.exporter.scrape_interval(默认15s) 和 prometheus.tdh.exporter.scrape_interval(默认60s)</li><li>保留时间: 样本数据在磁盘上保存的时间,超过该时间限制的数据就会被删除. 存储在磁盘上的样本都是经过编码之后的样本(对样本进行过数据编码, 一般为 double-delta 编码). AQUILA对应的配置值为 prometheus.storage.retention.time(默认15天)</li><li>活跃样本留存时间: 留存于内存的活跃样本（已经被编码）在内存保留时间. 在内存中的留存数据越多，查询过往数据的性能越高，但是消耗内存也会增加. 在实际应用中，需要根据所监控的业务的性质，设定合理的内存留存时间. AQUILA对应的配置值为 prometheus.min-block-duration (默认2h), prometheus.max-block-duration(默认36h). Facebook 在论文 《Gorilla: A Fast, Scalable, In-Memory Time Series DataBase》 （Prometheus实现参考论文）中给出了留存内存时间的一般经验: 26 h.</li><li>样本(测量点)大小: 根据 Prometheus 官方文档说明, 每一个编码后的样本大概占用1-2字节大小</li></ul><p>每个监控节点上的测量点由具体使用的 exporter 定义, 测量点可根据 exporter 暴露给 prometheus 的 api 获取（以下测量点为 TDH 集群上单个节点上的测量点：<br>node-exporter 有 534 个测量点<br>tdh-exporter 有 481 个测量点 （每个服务均安装一个）</p><p>根据以上概念可以得出, Prometheus 存储用量受到: 测量点(即样本数量), 样本大小, 抓取间隔, 保留时间四个因素影响.</p><p>根据 Prometheus 官方文档说明: 磁盘大小 &#x3D; 保留时间 * 每秒获取样本数 * 样本大小<br>官方文档中的每秒获取样本数可由抓取间隔内收集的样本总数除以抓取间隔获取.</p><p>根据以上公式我们可以得出在 TDH 集群上, Promethues 压缩样本使用磁盘大小公式为 :<br>compact_data_disk_usage &#x3D; (534 &#x2F; prometheus.node.exporter.scrape_interval + 481 &#x2F; prometheus.tdh.exporter.scrape_interval) * nodeNum * prometheus.storage.retention.time (in seconds) * 单个样本平均大小(1-2 bytes)</p><p>将上述值全部替换为默认参数计算:<br>compact_data_disk_usage &#x3D; (534 &#x2F; 15 + 481 &#x2F; 60) * 3 * (15 * 24 * 60 * 60) * 2 &#x3D; 339163200 bytes &#x3D; 323 mb</p><p>除了持久化在磁盘的样本之外, 根据Prometheus 官方文档说明, Prometheus 还在在磁盘上写入 write-ahead-log (WAL) 来防止 Prometheus 程序突然崩溃导致在内存中的未写入的磁盘的样本的丢失. WAL 文件大小取决于Prometheus 留存于内存的活跃样本的大小. 而留存于内存的活跃样本的大小又取决于每秒获取样本数和活跃样本留存内存时间.记录活跃样本信息的 WAL 文件都是 raw data, 故大小比经过编码之后的样本大得多. Prometheus 官方文档中说明至少会保存3个 write-ahead log files(每一个最大为128M), 如果实际使用中留存内存的样本数量非常大, 那么用来记录样本的 WAL 文件可能需要不止三个.</p><p>计算 wal file 之前需要计算留存于内存的活跃样本占用内存大小<br>active_data_mem_uage &#x3D; (534 &#x2F; prometheus.node.exporter.scrape_interval + 481 &#x2F; prometheus.tdh.exporter.scrape_interval) * nodeNum * prometheus.max-block-duration(in seconds) * 单个样本平均大小(1-2 bytes)</p><p>将上述值全部替换为默认参数计算:<br>active_data_mem_uage &#x3D; (534 &#x2F; 15 + 481 &#x2F; 60) * 3 * (36 * 60 * 60) * 2 &#x3D; 33916320 bytes &#x3D; 32 mb<br>Prometheus 编码之后的样本平均大小为1~2 bytes, 而未编码的 double类型数据为 8 bytes, 故raw data最大可为编码之后的样本数据的八倍. 可以粗略的认为 WAL file 大小和 样本 raw data近似相等, 故可以得出公式:<br>wal_file_disk_usage &#x3D; active_data_mem_uage * (8 &#x2F; 1) &#x3D; 256m</p><p>综上所述, total_disk_usage &#x3D; compact_data_disk_usage + wal_file_disk_usage, 考虑集群的扩展性，建议预留磁盘空间为 total_disk_usage * 5.<br>故在有三个节点的 TDH 集群上，TDH Services 均安装一个, AQUILA 参数均为默认参数的情况下, 使用的磁盘大小预估为: 323 mb + 256m &#x3D; 579m, 考虑到后续集群的扩展性, 建议大小为: 579 * 5 &#x3D; 2895 mb</p><p>在实际集群上，我们可以根据部署的需求，例如部署多个Inceptor(会导致tdh-exporter测量点增加), 减少抓取间隔 (导致每秒获取样本数增加), 增加保留时间, 添加新的监控节点，以上因素均会导致 prometheus 磁盘使用量增加.我们可初步根据上述公式，计算出一个合理的磁盘使用空间.</p><p>内存容量规划<br>Prometheus 对内存的使用由以下四个部分组成：</p><ul><li>留存于内存的活跃样本</li><li>排队等待持久化的过期样本</li><li>索引数据</li><li>其他运行时内存消耗</li></ul><p>1). 留存于内存的活跃样本<br>active_data_mem_uage &#x3D; (534 &#x2F; prometheus.node.exporter.scrape_interval + 481 &#x2F; prometheus.tdh.exporter.scrape_interval) * nodeNum * prometheus.max-block-duration(in seconds) * 单个样本平均大小(1-2 bytes)</p><p>将上述值全部替换为默认参数计算:<br>active_data_mem_uage &#x3D; (534 &#x2F; 15 + 481 &#x2F; 60) * 3 * (36 * 60 * 60) * 2 &#x3D; 32 mb</p><p>2). 排队等待持久化的过期样本<br>当留存于内存的样本超过了最大留存时间 prometheus.max-block-duration(默认36h), 会被持久化到磁盘.<br>一个经验值: 排队等待持久化的过期样本占用内存大小不会超过 active_data_mem_uage.</p><p>3). 索引数据<br>索引数据所需的内存较少，一个经验公式为，每一千个时间序列大约需要 1M 内存. 在本文中使用的时间序列大小为: (534 + 481) * 3 &#x3D; 3M</p><p>4). 其他运行时内存消耗<br>Prometheus 程序本身运行消耗的内存非常小, 不会超过留存于内存的活跃样本内存大小</p><p>综上所述，Prometheus 内存等于上述四部分相加, 排队等待持久化的过期样本占用内存大小不会超过留存于内存的活跃样本内存大小, 索引数据大小可忽略, 其他运行时内存消耗大小也不会超过留存于内存的活跃样本内存大小.</p><p>故一个Prometheu 内存容量经验公式为:<br>total_mem_usage &#x3D; 3 * active_data_mem_uage</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>LVM创建</title>
    <link href="/2022/07/14/LVM%E5%88%9B%E5%BB%BA/"/>
    <url>/2022/07/14/LVM%E5%88%9B%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="LVM创建"><a href="#LVM创建" class="headerlink" title="LVM创建"></a><a href="https://www.cnblogs.com/chadiandianwenrou/p/9025862.html">LVM创建</a></h1><h3 id="LVM介绍"><a href="#LVM介绍" class="headerlink" title="LVM介绍"></a>LVM介绍</h3><p>PV(Physical Volume) - 物理卷</p><p>物理卷在逻辑卷管理中处于最底层，它可以是实际物理硬盘上的分区，也可以是整个物理硬盘，也可以是raid设备</p><p>VG(Volume Group) - 卷组</p><p>卷组建立在物理卷之上，一个卷组中至少要包括一个物理卷，在卷组建立之后可动态添加物理卷到卷组中。一个逻辑卷管理系统工程中可以只有一个卷组，也可以拥有多个卷组</p><p>LV(Logical Volume) - 逻辑卷</p><p>逻辑卷建立在卷组之上，卷组中的未分配空间可以用于建立新的逻辑卷，逻辑卷建立后可以动态地扩展和缩小空间。系统中的多个逻辑卷可以属于同一个卷组，也可以属于不同的多个卷组</p><p><img src="https://images2018.cnblogs.com/blog/929849/201805/929849-20180511172228368-364897317.png" alt="img"></p><p>创建LVM步骤</p><ol><li>添加新硬盘；</li><li>给新硬盘创建分区；</li><li>创建PV；</li><li>创建VG；</li><li>创建LV；</li><li>格式化LV；</li><li>挂载LV到指定目录；</li></ol><p>扩容步骤</p><p>LV的扩容</p><ul><li>(1) 使用VG的Free空间，对LV扩容；</li><li>(2) 完成后需要在对文件系统扩容；</li></ul><p>VG的扩容</p><ul><li>方式1： 通过增加PV来实现</li><li>方式2： 通过扩展raid（磁盘阵列）设备的容量来间接对VG扩容</li></ul><p>LVM的缩减</p><ul><li>\1. LV的缩减</li><li>\2. VG的缩减</li></ul><h3 id="创建LVM"><a href="#创建LVM" class="headerlink" title="创建LVM"></a>创建LVM</h3><p>创建系统分区</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs tap">fdisk /dev/vdb<br>欢迎使用 fdisk (util-linux 2.23.2)。<br><br>更改将停留在内存中，直到您决定将更改写入磁盘。<br>使用写入命令前请三思。<br><br>Device does not contain a recognized partition table<br>使用磁盘标识符 0x09261bf7 创建新的 DOS 磁盘标签。<br><br>命令(输入 m 获取帮助)：n    <span class="hljs-comment">#创建分区</span><br>Partition type:<br>   p   primary (0 primary,<span class="hljs-number"> 0 </span>extended,<span class="hljs-number"> 4 </span>free)<br>   e   extended<br>Select (default p): p    <span class="hljs-comment">#创建主分区</span><br>分区号 (1-4，默认 1)：1     <span class="hljs-comment">#选择1</span><br>起始 扇区 (2048-629145599，默认为 2048)： <span class="hljs-comment">#回车</span><br>将使用默认值 2048<br>Last 扇区, +扇区 or +size&#123;K,M,G&#125; (2048-629145599，默认为 629145599)：  <span class="hljs-comment">#回车</span><br>将使用默认值 629145599<br>分区<span class="hljs-number"> 1 </span>已设置为 Linux 类型，大小设为<span class="hljs-number"> 300 </span>GiB<br><br>命令(输入 m 获取帮助)：p  <span class="hljs-comment">#查看创建的主分区</span><br><br>磁盘 /dev/vdb：322.1 GB,<span class="hljs-number"> 322122547200 </span>字节，629145600 个扇区<br>Units = 扇区 of<span class="hljs-number"> 1 </span>*<span class="hljs-number"> 512 </span>=<span class="hljs-number"> 512 </span>bytes<br>扇区大小(逻辑/物理)：512 字节 /<span class="hljs-number"> 512 </span>字节<br>I/O 大小(最小/最佳)：512 字节 /<span class="hljs-number"> 512 </span>字节<br>磁盘标签类型：dos<br>磁盘标识符：0x09261bf7<br><br>   设备 Boot      Start         End      Blocks   Id  System<br>/dev/vdb1           <span class="hljs-number"> 2048 </span> <span class="hljs-number"> 629145599 </span> <span class="hljs-number"> 314571776 </span> <span class="hljs-number"> 83 </span> Linux    <span class="hljs-comment">#系统默认为83，即：Linux</span><br><br>命令(输入 m 获取帮助)：t          <span class="hljs-comment">#更改分区格式</span><br>已选择分区<span class="hljs-number"> 1 </span> <br>Hex 代码(输入 L 列出所有代码)：8e       <span class="hljs-comment">#8e为Linux LVM格式</span><br>已将分区“Linux”的类型更改为“Linux LVM”<br><br>命令(输入 m 获取帮助)：p<br><br>磁盘 /dev/vdb：322.1 GB,<span class="hljs-number"> 322122547200 </span>字节，629145600 个扇区<br>Units = 扇区 of<span class="hljs-number"> 1 </span>*<span class="hljs-number"> 512 </span>=<span class="hljs-number"> 512 </span>bytes<br>扇区大小(逻辑/物理)：512 字节 /<span class="hljs-number"> 512 </span>字节<br>I/O 大小(最小/最佳)：512 字节 /<span class="hljs-number"> 512 </span>字节<br>磁盘标签类型：dos<br>磁盘标识符：0x09261bf7<br><br>   设备 Boot      Start         End      Blocks   Id  System<br>/dev/vdb1           <span class="hljs-number"> 2048 </span> <span class="hljs-number"> 629145599 </span> <span class="hljs-number"> 314571776 </span>  8e  Linux LVM  <span class="hljs-comment">#已改成8e</span><br><br>命令(输入 m 获取帮助)：w <span class="hljs-comment">#保存</span><br>The partition table has been altered!<br></code></pre></td></tr></table></figure><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>创建PV</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@VM_8_76_centos</span> ~]<span class="hljs-meta"># pvcreate /dev/vdb1  </span><br>  Physical volume <span class="hljs-string">&quot;/dev/vdb1&quot;</span> successfully created.<br></code></pre></td></tr></table></figure><p>创建VG</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@VM_8_76_centos ~]# vgcreate datavg  <span class="hljs-regexp">/dev/</span>vdb1    #创建一个名为datavg的Volume <span class="hljs-keyword">Group</span> <br>  Volume <span class="hljs-keyword">group</span> <span class="hljs-string">&quot;datavg&quot;</span> successfully created<br></code></pre></td></tr></table></figure><p>创建LV</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[root@<span class="hljs-symbol">VM_8_76_centos</span> ~]# lvcreate -l <span class="hljs-number">100</span><span class="hljs-comment">%free -n datalv  datavg    </span><br>  <span class="hljs-symbol">Logical</span> volume <span class="hljs-string">&quot;datalv&quot;</span> created.<br></code></pre></td></tr></table></figure><p>格式化LV</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkfs.ext4 <span class="hljs-regexp">/dev/</span>datavg/datalv <br></code></pre></td></tr></table></figure><p>挂载LV</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mount <span class="hljs-regexp">/dev/</span>datavg<span class="hljs-regexp">/datalv  /</span>data/ <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>kickstart模式实现批量安装centos7.x系统</title>
    <link href="/2022/07/14/kickstart%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0%E6%89%B9%E9%87%8F%E5%AE%89%E8%A3%85centos7.x%E7%B3%BB%E7%BB%9F/"/>
    <url>/2022/07/14/kickstart%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0%E6%89%B9%E9%87%8F%E5%AE%89%E8%A3%85centos7.x%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="kickstart模式实现批量安装centos7-x系统"><a href="#kickstart模式实现批量安装centos7-x系统" class="headerlink" title="kickstart模式实现批量安装centos7.x系统"></a><a href="https://www.cnblogs.com/clsn/p/7833333.html">kickstart模式实现批量安装centos7.x系统</a></h1><h2 id="1-1-安装系统的方法"><a href="#1-1-安装系统的方法" class="headerlink" title="1.1 安装系统的方法"></a>1.1 安装系统的方法</h2><p>　　l 光盘（ISO文件，光盘的镜像文件）&#x3D;&#x3D;&#x3D;&gt;&gt;每一台物理机都得给一个光驱，如果用外置光驱的话，是不是每台机器都需要插一下</p><p>　　l U盘：ISO镜像刻录到U盘&#x3D;&#x3D;&gt;&gt;需要每台机器都需要插一下</p><p>　　l 并行安装&#x3D;&#x3D;&gt;&gt;网络安装</p><p>　　l 自动化安装</p><h2 id="1-2-linux下批量安装系统"><a href="#1-2-linux下批量安装系统" class="headerlink" title="1.2 linux下批量安装系统"></a>1.2 linux下批量安装系统</h2><p>kickstart是RedHat公司开源的软件，所以对CentOS兼容性最好。</p><p>原理：</p><p>　　我们将手动安装的所有的详细步骤记录到一个文件中，然后kickstart通过读取这个文件就可以实现自动化安装系统。</p><p>　　kickstart是一个项目的名称。没有这个软件。使用者水平是高中以上</p><p>　　cobbler是对kickstart的所有组件的封装。使用者水平是初中以上。本质上就是网页版本的kickstart。</p><h3 id="1-2-1-PXE说明"><a href="#1-2-1-PXE说明" class="headerlink" title="1.2.1 PXE说明"></a>1.2.1 PXE说明</h3><p>　　PXE，全名Pre-boot Execution Environment，预启动执行环境；</p><p>　　通过网络接口启动计算机，不依赖本地存储设备（如硬盘）或本地已安装的操作系统；</p><p>　　由Intel和Systemsoft公司于1999年9月20日公布的技术；</p><p>　　客户端&#x2F;Server的工作模式；</p><p>　　PXE客户端会调用网际协议(IP)、用户数据报协议(UDP)、动态主机设定协议(DHCP)、小型文件传输协议(TFTP)等网络协议；</p><p>　　PXE客户端(客户端)这个术语是指机器在PXE启动过程中的角色。一个PXE客户端可以是一台服务器、笔记本电脑或者其他装有PXE启动代码的机器（我们电脑的网卡）</p><h3 id="1-2-2-kickstart原理"><a href="#1-2-2-kickstart原理" class="headerlink" title="1.2.2 kickstart原理"></a>1.2.2 kickstart原理</h3><p><img src="https://images2017.cnblogs.com/blog/1190037/201711/1190037-20171114163420781-1228474973.png" alt="img"> </p><h3 id="1-2-3-PXE请求顺序说明"><a href="#1-2-3-PXE请求顺序说明" class="headerlink" title="1.2.3 PXE请求顺序说明"></a>1.2.3 PXE请求顺序说明</h3><p>① PXE 客户端发送UDP广播请求</p><p>　　PXE 客户端从自己的PXE网卡启动，通过PXE BootROM(自启动芯片)会以UDP(简单用户数据报协议)发送一个广播请求，向本网络中的DHCP服务器索取IP。</p><p>② DHCP服务器提供信息</p><p>　　DHCP服务器收到客户端的请求，验证是否来至合法的PXE 客户端的请求，验证通过它将给客户端一个“提供”响应，这个“提供”响应中包含了为客户端分配的IP地址、pxelinux启动程序(TFTP)位置，以及配置文件所在位置。</p><p>③ PXE客户端请求下载启动文件</p><p>　　客户端收到服务器的“回应”后，会回应一个帧，以请求传送启动所需文件。这些启动文件包括：pxelinux.0、pxelinux.cfg&#x2F;default、vmlinuz、initrd.img等文件。</p><p>④ TETP服务器响应客户端请求并传送文件</p><p>　　当服务器收到客户端的请求后，他们之间之后将有更多的信息在客户端与服务器之间作应答, 用以决定启动参数。BootROM由TFTP通讯协议从tftp服务器 下载启动安装程序所必须的文件(pxelinux.0、pxelinux.cfg&#x2F;default)。default文件下载完成后，会根据该文件中定义的引导顺序，启动Linux安装程序的引导内核。</p><p>⑤ 请求下载自动应答文件</p><p>　　客户端通过pxelinux.cfg&#x2F;default文件成功的引导Linux安装内核后，安装程序首先必须确定你通过什么安装介质来安装linux，如果是通过网络安装(NFS, FTP, HTTP)，则会在这个时候初始化网络，并定位安装源位置。接着会读取default文件中指定的自动应答文件ks.cfg所在位置，根据该位置请求下载该文件。</p><p>⑥ 客户端安装操作系统</p><p>　　将ks.cfg文件下载回来后，通过该文件找到http镜像，并按照该文件的配置请求下载安装过程需要的软件包。</p><p>　　http镜像和客户端建立连接后，将开始传输软件包，客户端将开始安装操作系统。</p><p>　　安装完成后，将提示重新引导计算机。</p><h2 id="1-3-kickstart批量安装系统实践"><a href="#1-3-kickstart批量安装系统实践" class="headerlink" title="1.3 kickstart批量安装系统实践"></a>1.3 kickstart批量安装系统实践</h2><p>　　一般批量安装操作系统最好一次安装23台机器最佳，主要因为大部分交换机为24口，安装23台服务器没有太大的压力</p><h3 id="1-3-1-环境说明"><a href="#1-3-1-环境说明" class="headerlink" title="1.3.1 环境说明"></a>1.3.1 环境说明</h3><p>防火墙与selinux必须关闭。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/etc/</span>redhat-release<br>CentOS Linux release <span class="hljs-number">7.4</span>.<span class="hljs-number">1708</span> (Core)<br><br>uname -r<br><span class="hljs-number">3.10</span>.<span class="hljs-number">0</span>-<span class="hljs-number">693</span>.el7.x86_64<br>sed -i <span class="hljs-string">&#x27;s/SELINUXTYPE=enforcing/SELINUXTYPE=disabled/&#x27;</span>  <span class="hljs-regexp">/etc/</span>selinux/config<br>setenforce  <span class="hljs-number">0</span><br><br> getenforce<br>Disabled<br>systemctl stop firewalld.service<br>systemctl disable firewalld.service<br><br>systemctl status firewalld.service<br>● firewalld.service - firewalld - dynamic firewall daemon<br>   Loaded: loaded (<span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/systemd/</span>system/firewalld.service; disabled; vendor preset: enabled)<br>   Active: inactive (dead)<br>     Docs: man:firewalld(<span class="hljs-number">1</span>)<br><br>hostname -I<br><span class="hljs-number">10.0</span>.<span class="hljs-number">0.201</span> <span class="hljs-number">172.16</span>.<span class="hljs-number">1.201</span><br></code></pre></td></tr></table></figure><h3 id="1-3-2-第一个里程碑：安装dhcp服务"><a href="#1-3-2-第一个里程碑：安装dhcp服务" class="headerlink" title="1.3.2 第一个里程碑：安装dhcp服务"></a>1.3.2 第一个里程碑：安装dhcp服务</h3><p><em>安装</em></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> dhcp -y<br></code></pre></td></tr></table></figure><p><em>配置DHCP服务</em></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs abnf">cat &gt;&gt;/etc/dhcp/dhcpd.conf&lt;&lt;EOF<br>subnet <span class="hljs-number">172.16</span>.<span class="hljs-number">1.0</span> netmask <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span> &#123;<br>range <span class="hljs-number">172.16</span>.<span class="hljs-number">1.100</span> <span class="hljs-number">172.16</span>.<span class="hljs-number">1.199</span><span class="hljs-comment">;</span><br>option subnet-mask <span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><span class="hljs-comment">;</span><br>default-lease-time <span class="hljs-number">21600</span><span class="hljs-comment">;</span><br>max-lease-time <span class="hljs-number">43200</span><span class="hljs-comment">;</span><br>next-server <span class="hljs-number">172.16</span>.<span class="hljs-number">1.201</span><span class="hljs-comment">;</span><br>filename <span class="hljs-string">&quot;/pxelinux.0&quot;</span><span class="hljs-comment">;</span><br><span class="hljs-attribute">DHCPDARGS</span><span class="hljs-operator">=</span>ens33<span class="hljs-comment">;</span><br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><p>*配置文件说明：*</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs axapta">range <span class="hljs-number">172.16</span><span class="hljs-number">.1</span><span class="hljs-number">.100</span> <span class="hljs-number">172.16</span><span class="hljs-number">.1</span><span class="hljs-number">.199</span>;     <span class="hljs-meta"># 可分配的起始IP-结束IP</span><br>option subnet-mask <span class="hljs-number">255.255</span><span class="hljs-number">.255</span><span class="hljs-number">.0</span>;    <span class="hljs-meta"># 设定netmask</span><br><span class="hljs-literal">default</span>-lease-time <span class="hljs-number">21600</span>;            <span class="hljs-meta"># 设置默认的IP租用期限</span><br>max-lease-time <span class="hljs-number">43200</span>;                <span class="hljs-meta"># 设置最大的IP租用期限</span><br><span class="hljs-keyword">next</span>-<span class="hljs-keyword">server</span> <span class="hljs-number">172.16</span><span class="hljs-number">.1</span><span class="hljs-number">.201</span>;            <span class="hljs-meta"># 告知客户端TFTP服务器的ip</span><br>filename <span class="hljs-string">&quot;/pxelinux.0&quot;</span>;              <span class="hljs-meta"># 告知客户端从TFTP根目录下载pxelinux.0文件</span><br></code></pre></td></tr></table></figure><p><em>启动DHCP服务</em></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">systemctl restart dhcpd<span class="hljs-selector-class">.service</span><br>systemctl status dhcpd<span class="hljs-selector-class">.service</span><br>● dhcpd<span class="hljs-selector-class">.service</span> - DHCPv4 Server Daemon<br></code></pre></td></tr></table></figure><p><em>检测端口信息</em></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">netstat</span> -lntup |grep dhcpd<br><span class="hljs-attribute">udp</span>        <span class="hljs-number">0</span>      <span class="hljs-number">0</span> <span class="hljs-number">0.0.0.0:43679</span>           <span class="hljs-number">0.0.0.0</span>:*           <span class="hljs-number">2090</span>/dhcpd         <br><span class="hljs-attribute">udp</span>        <span class="hljs-number">0</span>      <span class="hljs-number">0</span> <span class="hljs-number">0.0.0.0:67</span>              <span class="hljs-number">0.0.0.0</span>:*             <span class="hljs-number">2090</span>/dhcpd         <br><span class="hljs-attribute">udp6</span>       <span class="hljs-number">0</span>      <span class="hljs-number">0</span> :::<span class="hljs-number">58101</span>                :::*                     <span class="hljs-number">2090</span>/dhcpd    <br></code></pre></td></tr></table></figure><p><em>查看其日志信息： (日志位置为&#x2F;var&#x2F;log&#x2F;messages)</em></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tailf</span> /var/log/messages<br><span class="hljs-attribute">Nov</span> <span class="hljs-number">13</span> <span class="hljs-number">19</span>:<span class="hljs-number">01</span>:<span class="hljs-number">40</span> clsn dhcpd: Listening <span class="hljs-literal">on</span> PF/eth1/<span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:a8:<span class="hljs-number">59</span>:b2/<span class="hljs-number">172.16.1.0</span>/<span class="hljs-number">24</span><br><span class="hljs-attribute">Nov</span> <span class="hljs-number">13</span> <span class="hljs-number">19</span>:<span class="hljs-number">01</span>:<span class="hljs-number">40</span> clsn dhcpd: Sending <span class="hljs-literal">on</span>   LPF/eth1/<span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:a8:<span class="hljs-number">59</span>:b2/<span class="hljs-number">172.16.1.0</span>/<span class="hljs-number">24</span><br><span class="hljs-attribute">Nov</span> <span class="hljs-number">13</span> <span class="hljs-number">19</span>:<span class="hljs-number">01</span>:<span class="hljs-number">40</span> clsn dhcpd:<br><span class="hljs-attribute">Nov</span> <span class="hljs-number">13</span> <span class="hljs-number">19</span>:<span class="hljs-number">01</span>:<span class="hljs-number">40</span> clsn dhcpd: No subnet declaration for eth0 (<span class="hljs-number">10.0.0.201</span>).<br><span class="hljs-attribute">Nov</span> <span class="hljs-number">13</span> <span class="hljs-number">19</span>:<span class="hljs-number">01</span>:<span class="hljs-number">40</span> clsn dhcpd:  Ignoring requests <span class="hljs-literal">on</span> eth0.  If this is not what<br><span class="hljs-attribute">Nov</span> <span class="hljs-number">13</span> <span class="hljs-number">19</span>:<span class="hljs-number">01</span>:<span class="hljs-number">40</span> clsn dhcpd:   you want, please write a subnet declaration<br><span class="hljs-attribute">Nov</span> <span class="hljs-number">13</span> <span class="hljs-number">19</span>:<span class="hljs-number">01</span>:<span class="hljs-number">40</span> clsn dhcpd:   in your dhcpd.conf file for the network segment<br><span class="hljs-attribute">Nov</span> <span class="hljs-number">13</span> <span class="hljs-number">19</span>:<span class="hljs-number">01</span>:<span class="hljs-number">40</span> clsn dhcpd:   to which interface eth0 is attached. <br></code></pre></td></tr></table></figure><p>注：配置dhcp的时候是可以配置监听的网卡，指定监听网卡</p><p>DHCPDARGS&#x3D;eth1 # 指定监听网卡</p><h3 id="1-3-3-创建一个新的空白虚拟机"><a href="#1-3-3-创建一个新的空白虚拟机" class="headerlink" title="1.3.3 创建一个新的空白虚拟机"></a>1.3.3 创建一个新的空白虚拟机</h3><p>说明：Centos7.3之后安装系统至少需要2G内存，低于2G将无法安装</p><p><img src="https://images2017.cnblogs.com/blog/1190037/201711/1190037-20171114163630843-1334194351.png" alt="img"> </p><p>  开启虚拟机</p><p><img src="https://images2017.cnblogs.com/blog/1190037/201711/1190037-20171114163641812-473530751.png" alt="img"> </p><p>日志输出</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Nov</span> <span class="hljs-number">13</span> <span class="hljs-number">19</span>:<span class="hljs-number">01</span>:<span class="hljs-number">40</span> clsn dhcpd: Sending <span class="hljs-literal">on</span>   Socket/fallback/fallback-net<br><span class="hljs-attribute">Nov</span> <span class="hljs-number">13</span> <span class="hljs-number">19</span>:<span class="hljs-number">01</span>:<span class="hljs-number">40</span> clsn systemd: Started DHCPv4 Server Daemon.<br><span class="hljs-attribute">Nov</span> <span class="hljs-number">13</span> <span class="hljs-number">19</span>:<span class="hljs-number">12</span>:<span class="hljs-number">16</span> clsn dhcpd: DHCPDISCOVER from <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:<span class="hljs-number">64</span>:<span class="hljs-number">7</span>b:<span class="hljs-number">09</span> via eth1<br><span class="hljs-attribute">Nov</span> <span class="hljs-number">13</span> <span class="hljs-number">19</span>:<span class="hljs-number">12</span>:<span class="hljs-number">17</span> clsn dhcpd: DHCPOFFER <span class="hljs-literal">on</span> <span class="hljs-number">172.16.1.120</span> to <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:<span class="hljs-number">64</span>:<span class="hljs-number">7</span>b:<span class="hljs-number">09</span> via eth1<br><span class="hljs-attribute">Nov</span> <span class="hljs-number">13</span> <span class="hljs-number">19</span>:<span class="hljs-number">12</span>:<span class="hljs-number">18</span> clsn dhcpd: DHCPREQUEST for <span class="hljs-number">172.16.1.120</span> (<span class="hljs-number">172.16.1.201</span>) from <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:<span class="hljs-number">64</span>:<span class="hljs-number">7</span>b:<span class="hljs-number">09</span> via eth1<br><span class="hljs-attribute">Nov</span> <span class="hljs-number">13</span> <span class="hljs-number">19</span>:<span class="hljs-number">12</span>:<span class="hljs-number">18</span> clsn dhcpd: DHCPACK <span class="hljs-literal">on</span> <span class="hljs-number">172.16.1.120</span> to <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:<span class="hljs-number">64</span>:<span class="hljs-number">7</span>b:<span class="hljs-number">09</span> via eth1<br><span class="hljs-attribute">Nov</span> <span class="hljs-number">13</span> <span class="hljs-number">19</span>:<span class="hljs-number">12</span>:<span class="hljs-number">54</span> clsn kernel: perf: interrupt took too long (<span class="hljs-number">6342</span> &gt; <span class="hljs-number">6262</span>), lowering kernel.perf_event_max_sample_rate to <span class="hljs-number">31000</span><br></code></pre></td></tr></table></figure><h3 id="1-3-4-安装tftp服务"><a href="#1-3-4-安装tftp服务" class="headerlink" title="1.3.4 安装tftp服务"></a>1.3.4 安装tftp服务</h3><p><em>安装tftp软件</em></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">yum install tftp-<span class="hljs-keyword">server</span> -y<br></code></pre></td></tr></table></figure><p><em>启动服务</em></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">systemctl <span class="hljs-built_in">start</span> tftp.<span class="hljs-built_in">socket</span><br>systemctl status tftp.<span class="hljs-built_in">socket</span><br></code></pre></td></tr></table></figure><p>tftp根目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/tftpboot/</span><br></code></pre></td></tr></table></figure><p>  再次启动虚拟机</p><p> <img src="https://images2017.cnblogs.com/blog/1190037/201711/1190037-20171114163726374-1592633776.png" alt="img"></p><p>启动发现又tftp但是没找到要加载的系统。上面报错是在TFTP服务的根目录找不到启动文件pxelinux.0</p><h3 id="1-3-5-获取pxelinux-0系统"><a href="#1-3-5-获取pxelinux-0系统" class="headerlink" title="1.3.5 获取pxelinux.0系统"></a>1.3.5 获取pxelinux.0系统</h3><p>通过安装软件获得</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y syslinux<br></code></pre></td></tr></table></figure><p><em>复制pxelinux.0文件到tftp根目录</em></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/syslinux/</span>pxelinux.<span class="hljs-number">0</span>  <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/tftpboot/</span><br>ls<br>pxelinux.<span class="hljs-number">0</span> <br></code></pre></td></tr></table></figure><p><img src="https://images2017.cnblogs.com/blog/1190037/201711/1190037-20171114163752359-867489723.png" alt="img"></p><p>　　　　首先排除最简单故障原因：selinux是否关闭，防火墙是否关闭</p><p>　　　　上面的错误是因为pxelinux.0这个小系统的配置文件（default）不存在，或者文件名不对</p><h3 id="1-3-6-添加pxelinux-0配置文件"><a href="#1-3-6-添加pxelinux-0配置文件" class="headerlink" title="1.3.6 添加pxelinux.0配置文件"></a>1.3.6 添加pxelinux.0配置文件</h3><p>1）给虚拟机添加上centos7的镜像，注意实在kickstart服务端添加</p><p><img src="https://images2017.cnblogs.com/blog/1190037/201711/1190037-20171114163817327-892449848.png" alt="img"> </p><p>2）将镜像挂载上</p><p>特别说明：由于这是测试环境可以使用挂载，在生产环境中必须把镜像中的文件复制到硬盘上，光驱速度太慢。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /var/www/html/ovirt<br>mount -o loop ovirt-node-ng-installer-4.3.2-2019031908.el7.iso /var/www/html/ovirt<br></code></pre></td></tr></table></figure><p>  3）将镜像中的相关文件复制到tftp根目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> -a /var/www/html/ovirt/isolinux/* /var/lib/tftpboot/<br><span class="hljs-built_in">mkdir</span> -p /var/lib/tftpboot/pxelinux.cfg<br><span class="hljs-built_in">cp</span> /var/www/html/ovirt/isolinux/isolinux.cfg /var/lib/tftpboot/pxelinux.cfg/default<br></code></pre></td></tr></table></figure><p>4）修改default配置文件实现通过网络安装操作系统</p><p>CentOS7.X 网络安装的关键点,修改default文件</p><p><img src="https://images2017.cnblogs.com/blog/1190037/201711/1190037-20171114163830843-742934555.png" alt="img"> </p><p>  修改完成后，重启pxe客户端，就会有安装界面，与使用光盘安装一致，这里就不是做详细的记录了。注意实现网路安装需要将下一步完成*(配置http服务*)。</p><p> <img src="https://images2017.cnblogs.com/blog/1190037/201711/1190037-20171114163902968-1255566686.png" alt="img"></p><p>5）CentOS7实现自动化安装的default文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cat /var/lib/tftpboot/pxelinux.cfg<span class="hljs-built_in">/default</span><br><span class="hljs-built_in">default </span>ks<br>prompt 0<br><br>label ks<br>  kernel vmlinuz<br>  append <span class="hljs-attribute">initrd</span>=initrd.img <span class="hljs-attribute">ks</span>=http://172.16.1.201/ks_config/CentOS7-ks.cfg net.<span class="hljs-attribute">ifnames</span>=0 <span class="hljs-attribute">biosdevname</span>=0 <span class="hljs-attribute">ksdevice</span>=eth1<br></code></pre></td></tr></table></figure><h3 id="1-3-7-配置httpd服务"><a href="#1-3-7-配置httpd服务" class="headerlink" title="1.3.7 配置httpd服务"></a>1.3.7 配置httpd服务</h3><p><em>安装apache服务</em></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">yum install httpd -y<br>sed -i <span class="hljs-string">&#x27;s/^[^#]/#/&#x27;</span> <span class="hljs-regexp">/etc/</span>httpd<span class="hljs-regexp">/conf.d/</span>welcome.conf<br></code></pre></td></tr></table></figure><p><em>启动apache服务</em></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">systemctl start httpd<span class="hljs-selector-class">.service</span><br>systemctl status httpd<span class="hljs-selector-class">.service</span><br>● httpd<span class="hljs-selector-class">.service</span> - The Apache HTTP Server<br></code></pre></td></tr></table></figure><p><em>通过浏览器访问，使用curl命令镜像访问。</em></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">172.16</span>.<span class="hljs-number">1.201</span><span class="hljs-regexp">/ovirt/</span><br></code></pre></td></tr></table></figure><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20201210111626233.png" alt="image-20201210111626233"></p><h2 id="1-4-ks文件说明"><a href="#1-4-ks文件说明" class="headerlink" title="1.4 ks文件说明"></a>1.4 ks文件说明</h2><h3 id="1-4-1-ks文件的作用"><a href="#1-4-1-ks文件的作用" class="headerlink" title="1.4.1 ks文件的作用"></a>1.4.1 ks文件的作用</h3><p>　　　通常，我们在安装操作系统的过程中，需要大量的和服务器交互操作，为了减少这个交互过程，kickstart就诞生了。使用这种kickstart，只需事先定义好一个Kickstart自动应答配置文件ks.cfg（通常存放在安装服务器上），并让安装程序知道该配置文件的位置，在安装过程中安装程序就可以自己从该文件中读取安装配置，这样就避免了在安装过程中多次的人机交互，从而实现无人值守的自动化安装。</p><h3 id="1-4-2-ks文件生成的三种方式"><a href="#1-4-2-ks文件生成的三种方式" class="headerlink" title="1.4.2 ks文件生成的三种方式"></a>1.4.2 ks文件生成的三种方式</h3><p>方法1</p><p>　　每安装好一台Centos机器，Centos安装程序都会创建一个kickstart配置文件，记录你的真实安装配置。如果你希望实现和某系统类似的安装，可以基于该系统的kickstart配置文件来生成你自己的kickstart配置文件。（生成的文件名字叫anaconda-ks.cfg位于&#x2F;root&#x2F;anaconda-ks.cfg）　　</p><p>方法2</p><p>　　Centos提供了一个图形化的kickstart配置工具。在任何一个安装好的Linux系统上运行该工具，就可以很容易地创建你自己的kickstart配置文件。kickstart配置工具命令为redhat-config-kickstart（RHEL3）或system-config-kickstart（RHEL4，RHEL5）.网上有很多用CentOS桌面版生成ks文件的文章，如果有现成的系统就没什么可说。但没有现成的，也没有必要去用桌面版，命令行也很简单。</p><p>方法3</p><p>　　阅读kickstart配置文件的手册。用任何一个文本编辑器都可以创建你自己的kickstart配置文件。</p><h3 id="1-4-3-centos7-4自动应答文件-ks"><a href="#1-4-3-centos7-4自动应答文件-ks" class="headerlink" title="1.4.3 centos7.4自动应答文件(ks)"></a>1.4.3 centos7.4自动应答文件(ks)</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># Kickstart Configurator for CentOS 7 by yao zhang #命令段</span><br>install   <span class="hljs-comment">#告知安装程序，这是一次全新安装，而不是升级</span><br>url <span class="hljs-params">--url=</span><span class="hljs-string">&quot;http://172.16.1.201/CentOS7/&quot;</span>  <span class="hljs-comment">#通过http下载安装镜像</span><br>text     <span class="hljs-comment">#以文本格式安装</span><br>lang en_US.UTF-8   <span class="hljs-comment">#设置字符集格式</span><br>keyboard us  <span class="hljs-comment">#设置键盘类型</span><br>zerombr   <span class="hljs-comment">#清除mbr引导</span><br>bootloader <span class="hljs-params">--location=mbr</span> <span class="hljs-params">--driveorder=sda</span> <span class="hljs-params">--append=</span><span class="hljs-string">&quot;crashkernel=auto rhgb quiet&quot;</span>    <span class="hljs-comment">#指定引导记录被写入的位置</span><br>network  <span class="hljs-params">--bootproto=static</span> <span class="hljs-params">--device=eth0</span> <span class="hljs-params">--gateway=10</span>.0.0.254 <span class="hljs-params">--ip=10</span>.0.0.202 <span class="hljs-params">--nameserver=223</span>.5.5.5 <span class="hljs-params">--netmask=255</span>.255.255.0 <span class="hljs-params">--activate</span>  <span class="hljs-comment">#配置eth0网卡</span><br>network  <span class="hljs-params">--bootproto=static</span> <span class="hljs-params">--device=eth1</span> <span class="hljs-params">--ip=172</span>.16.1.202 <span class="hljs-params">--netmask=255</span>.255.255.0 <span class="hljs-params">--activate</span>   <span class="hljs-comment">#配置eth1网卡</span><br>network  <span class="hljs-params">--hostname=Cobbler</span>  <span class="hljs-comment">#设置主机名</span><br><span class="hljs-comment">#network --bootproto=dhcp --device=eth1 --onboot=yes --noipv6 --hostname=CentOS7</span><br>timezone <span class="hljs-params">--utc</span> Asia/Shanghai  可以使用dhcp方式设置网络<br>authconfig <span class="hljs-params">--enableshadow</span> <span class="hljs-params">--passalgo=sha512</span>  <span class="hljs-comment">#设置密码格式</span><br>rootpw  <span class="hljs-params">--iscrypted</span> $6$X20eRtuZhkHznTb4$dK0BJByOSAWSDD8jccLVFz0CscijS9ldMWwpoCw/ZEjYw2BTQYGWlgKsn945fFTjRC658UXjuocwJbAjVI5D6/     <span class="hljs-comment">#密文密码</span><br>clearpart <span class="hljs-params">--all</span> <span class="hljs-params">--initlabel</span>  <span class="hljs-comment">#清空分区</span><br>part <span class="hljs-string">/boot</span> <span class="hljs-params">--fstype</span> xfs <span class="hljs-params">--size</span> 1024   <span class="hljs-comment">#/boot分区</span><br>part swap <span class="hljs-params">--size</span> 1024                    <span class="hljs-comment">#swap分区</span><br>part / <span class="hljs-params">--fstype</span> xfs <span class="hljs-params">--size</span> 1 <span class="hljs-params">--grow</span>   <span class="hljs-comment">#/分区</span><br>firstboot <span class="hljs-params">--disable</span>       <span class="hljs-comment">#负责协助配置redhat一些重要的信息</span><br>selinux <span class="hljs-params">--disabled</span>        <span class="hljs-comment">#关闭selinux</span><br>firewall <span class="hljs-params">--disabled</span>       <span class="hljs-comment">#关闭防火墙</span><br>logging <span class="hljs-params">--level=info</span>      <span class="hljs-comment">#设置日志级别</span><br>reboot                       <span class="hljs-comment">#安装完成重启</span><br><br>%packages <span class="hljs-comment">#包组段   @表示包组</span><br>@^minimal<br>@compat-libraries<br>@debugging<br>@development<br>tree<br>nmap<br>sysstat<br>lrzsz<br>dos2unix<br>telnet<br>wget<br>vim<br>bash-completion<br>%end<br><br>%post <span class="hljs-comment">#脚本段，可以放脚本或命令</span><br>systemctl disable postfix.service   <span class="hljs-comment">#关闭邮件服务开机自启动</span><br>%end<br></code></pre></td></tr></table></figure><h3 id="1-4-4-PXE配置文件default"><a href="#1-4-4-PXE配置文件default" class="headerlink" title="1.4.4 PXE配置文件default"></a>1.4.4 PXE配置文件default</h3><p>由于多个客户端可以从一个PXE服务器引导，PXE引导映像使用了一个复杂的配置文件搜索方式来查找针对客户机的配置文件。如果客户机的网卡的MAC地址为8F：3H：AA：6B：CC：5D，对应的IP地址为10.0.0.195，那么客户机首先尝试以MAC地址为文件名匹配的配置文件，如果不存在就以IP地址来查找。根据上述环境针对这台主机要查找的以一个配置文件就是 &#x2F;tftpboot&#x2F;pxelinux.cfg&#x2F;01-8F：3H：AA：6B：CC：5D。如果该文件不存在，就会根据IP地址来查找配置文件了，这个算法更复杂些，PXE映像查找会根据IP地址16进制命名的客户机配置文件。例如：10.0.0.195对应的16进制的形式为C0A801C3。（可以通过syslinux软件包提供的gethostip命令将10进制的IP转换为16进制）</p><p>如果C0A801C3文件不存在，就尝试查找C0A801C文件，如果C0A801C也不存在，那么就尝试C0A801文件，依次类推，直到查找C文件，如果C也不存在的话，那么最后尝试default文件。</p><p>总体来说，pxelinux搜索的文件的顺序是：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/tftpboot/</span>pxelinux.cfg/<span class="hljs-number">01</span>-<span class="hljs-number">88</span>-<span class="hljs-number">99</span>-aa-bb-cc-dd<br><span class="hljs-regexp">/tftpboot/</span>pxelinux.cfg/C0A801C3<br><span class="hljs-regexp">/tftpboot/</span>pxelinux.cfg/C0A801C<br><span class="hljs-regexp">/tftpboot/</span>pxelinux.cfg/C0A801<br><span class="hljs-regexp">/tftpboot/</span>pxelinux.cfg/C0A80<br><span class="hljs-regexp">/tftpboot/</span>pxelinux.cfg/C0A8<br><span class="hljs-regexp">/tftpboot/</span>pxelinux.cfg/C0A<br><span class="hljs-regexp">/tftpboot/</span>pxelinux.cfg/C0<br><span class="hljs-regexp">/tftpboot/</span>pxelinux.cfg/C<br><span class="hljs-regexp">/tftpboot/</span>pxelinux.cfg/<span class="hljs-keyword">default</span><br></code></pre></td></tr></table></figure><h3 id="1-4-5-上面的事情做完以后就可以批量安装系统了"><a href="#1-4-5-上面的事情做完以后就可以批量安装系统了" class="headerlink" title="1.4.5 上面的事情做完以后就可以批量安装系统了"></a>1.4.5 上面的事情做完以后就可以批量安装系统了</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@Cobbler ~]<span class="hljs-comment"># df -h</span><br>Filesystem      Size  Used Avail Use% Mounted on<br><span class="hljs-regexp">/dev/</span>sda3        <span class="hljs-number">98</span>G  <span class="hljs-number">1.5</span>G   <span class="hljs-number">97</span>G   <span class="hljs-number">2</span>% /<br>devtmpfs        <span class="hljs-number">227</span>M     <span class="hljs-number">0</span>  <span class="hljs-number">227</span>M   <span class="hljs-number">0</span>% /dev<br>tmpfs           <span class="hljs-number">237</span>M     <span class="hljs-number">0</span>  <span class="hljs-number">237</span>M   <span class="hljs-number">0</span>% <span class="hljs-regexp">/dev/</span>shm<br>tmpfs           <span class="hljs-number">237</span>M  <span class="hljs-number">4.6</span>M  <span class="hljs-number">232</span>M   <span class="hljs-number">2</span>% /run<br>tmpfs           <span class="hljs-number">237</span>M     <span class="hljs-number">0</span>  <span class="hljs-number">237</span>M   <span class="hljs-number">0</span>% <span class="hljs-regexp">/sys/</span>fs/cgroup<br><span class="hljs-regexp">/dev/</span>sda1      <span class="hljs-number">1014</span>M  <span class="hljs-number">135</span>M  <span class="hljs-number">880</span>M  <span class="hljs-number">14</span>% /boot<br>tmpfs            <span class="hljs-number">48</span>M     <span class="hljs-number">0</span>   <span class="hljs-number">48</span>M   <span class="hljs-number">0</span>% <span class="hljs-regexp">/run/u</span>ser/<span class="hljs-number">0</span><br><br>[root@Cobbler ~]<span class="hljs-comment"># systemctl status firewalld.service</span><br>● firewalld.service - firewalld - dynamic firewall daemon<br>   Loaded: loaded (<span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/systemd/</span>system/firewalld.service; disabled; vendor preset: enabled)<br>   Active: inactive (dead)<br>     Docs: man:firewalld(<span class="hljs-number">1</span>)<br><br>[root@Cobbler ~]<span class="hljs-comment"># getenforce</span><br>Disabled<br><br>[root@Cobbler ~]<span class="hljs-comment"># hostname -I</span><br><span class="hljs-number">10.0</span>.<span class="hljs-number">0.202</span> <span class="hljs-number">172.16</span>.<span class="hljs-number">1.202</span><br></code></pre></td></tr></table></figure><h2 id="1-5-常见错误"><a href="#1-5-常见错误" class="headerlink" title="1.5 常见错误"></a>1.5 常见错误</h2><h3 id="1-5-1-网卡无法启动解决"><a href="#1-5-1-网卡无法启动解决" class="headerlink" title="1.5.1 网卡无法启动解决"></a>1.5.1 网卡无法启动解决</h3><p>解决办法：</p><p>  将NetworkManager服务停止，再重新启动network服务</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@CentOS7 ~]<span class="hljs-comment"># systemctl disable NetworkManager</span><br>Removed symlink <span class="hljs-regexp">/etc/</span>systemd<span class="hljs-regexp">/system/mu</span>lti-user.target.wants/NetworkManager.service.<br>Removed symlink <span class="hljs-regexp">/etc/</span>systemd<span class="hljs-regexp">/system/</span>dbus-org.freedesktop.NetworkManager.service.<br>Removed symlink <span class="hljs-regexp">/etc/</span>systemd<span class="hljs-regexp">/system/</span>dbus-org.freedesktop.nm-dispatcher.service.<br><br>[root@CentOS7 ~]<span class="hljs-comment"># systemctl stop NetworkManager</span><br></code></pre></td></tr></table></figure><h3 id="1-5-2-Could-not-find-kernel-image"><a href="#1-5-2-Could-not-find-kernel-image" class="headerlink" title="1.5.2 Could not find kernel image"></a>1.5.2 Could not find kernel image</h3><p><img src="https://images2017.cnblogs.com/blog/1190037/201711/1190037-20171114164237827-576128101.png" alt="img"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hyper-v虚拟机联网配置</title>
    <link href="/2022/07/14/Hyper-v%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%81%94%E7%BD%91%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/07/14/Hyper-v%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%81%94%E7%BD%91%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Hyper-v虚拟机联网配置"><a href="#Hyper-v虚拟机联网配置" class="headerlink" title="Hyper-v虚拟机联网配置"></a><a href="https://www.cnblogs.com/jixiaosa/p/10465538.html">Hyper-v虚拟机联网配置</a></h1><p>最近想做点练手的项目部署到虚拟机的服务器上，然后关于虚拟机联网问题着实把贫道坑了一把。下面做一下记录防止以后忘了。。。。</p><p>1.新建虚拟交换机</p><p> <img src="https://img2018.cnblogs.com/blog/1237235/201903/1237235-20190303140312748-1709553102.png" alt="img"></p><p>输入交换机名称和选择外部网络，可以看到外部网络的下拉框的选项，这里选择当前计算机的联网方式。如何知道当前使用什么方式联网呢？—查看网络适配器。</p><p>点击确定，建立虚拟交换机。</p><p>然后查看网络适配器。此图可以看到我当前的联网是Qualcomm…….在上面的虚拟机建立外部网络时就要选这个。如果主机切换了联网方式，只要去虚拟机里改下对应的下拉选项即可。配置成功之后应该是这样子的。</p><p><img src="https://img2018.cnblogs.com/blog/1237235/201903/1237235-20190303135926725-2039312705.png" alt="img"></p><p> 2.将虚拟机的网络适配器改为我们刚刚创建的虚拟交换机</p><p>右键—设置—网络适配器</p><p><img src="https://img2018.cnblogs.com/blog/1237235/201903/1237235-20190303140720601-651889883.png" alt="img"></p><p> 3.启动虚拟机，我这里是WindowsServer</p><p><img src="https://img2018.cnblogs.com/blog/1237235/201903/1237235-20190303141325144-534656404.png" alt="img"></p><p>已经可以看到连接上网络了。</p><p><img src="https://img2018.cnblogs.com/blog/1237235/201903/1237235-20190303142230093-1042862299.png" alt="img"></p><p> 因为配置是外部网络，所以IP在同一网段。实现互相通信。</p><p>OK.大功告成!</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JDK for windows install</title>
    <link href="/2022/07/14/DK%20%E5%AE%89%E8%A3%85%E4%B8%8E%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE(Win10%E8%AF%A6%E7%BB%86%E7%89%88)/"/>
    <url>/2022/07/14/DK%20%E5%AE%89%E8%A3%85%E4%B8%8E%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE(Win10%E8%AF%A6%E7%BB%86%E7%89%88)/</url>
    
    <content type="html"><![CDATA[<h1 id="DK-安装与环境变量配置-Win10详细版"><a href="#DK-安装与环境变量配置-Win10详细版" class="headerlink" title="DK 安装与环境变量配置(Win10详细版)"></a>DK 安装与环境变量配置(Win10详细版)</h1><p><img src="https://csdnimg.cn/release/blogv2/dist/pc/img/original.png" alt="img"></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">JDK8下载地址</a></p><p><img src="https://img-blog.csdnimg.cn/20200324152151134.png#pic_center" alt="在这里插入图片描述"><br>一个JDK安装程序，这是是1.8版本,因为新的JDK版本都没有什么很大的亮点，如下图所示,<br><img src="https://img-blog.csdnimg.cn/20200324142335877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NDM2MjE0,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>鼠标双击运行，<br><img src="https://img-blog.csdnimg.cn/20200324142704171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NDM2MjE0,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>选择“是”，然后如下图：<br><img src="https://img-blog.csdnimg.cn/20200324142736522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NDM2MjE0,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点击下一步：<br><img src="https://img-blog.csdnimg.cn/20200324142855270.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NDM2MjE0,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>我在这里并不修改JDK的安装路径，所以无需改动，点击下一步：<br><img src="https://img-blog.csdnimg.cn/20200324143021889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NDM2MjE0,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>安装过程中会弹出jre的安装提示框，如下所示：<br><img src="https://img-blog.csdnimg.cn/20200324143213509.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NDM2MjE0,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这里无需改动，点击下一步,然后你会看到这个：<br><img src="https://img-blog.csdnimg.cn/20200324143249574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NDM2MjE0,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>反正你也很无聊，不如讲一下这个图的含义，Java成为3亿人的驱动,Java属于ORACLE公司，这里做后台的朋友应该比较清楚，而Java8的新特性，也使Java后面的JDK更替变得黯淡无光，所以现在开发人员中有90%的人还是选择Java8，最新的Java14无人问津，主要是因为Java8的稳定性。其次还有一点，就是Java以后的JDK可能不会开源了，这意味着后面不管他们有什么骚操作，使用了之前Java版本的人，都将被将一军，这时Google这个老狐狸就很狡猾，使用新语言，于是Android Studio编译器后续的首选语言就变成了Kotlin，而不再是Java了，也算是未雨绸缪了，你看完这些应该就已经安装完成了。</p><p><img src="https://img-blog.csdnimg.cn/20200324143423137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NDM2MjE0,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这样就安装完成了，点击“关闭”,然后进行环境变量的配置。</p><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><p>鼠标右键 “此电脑” 选择属性，之后会出现一个弹窗，点击 “高级系统设置”<br><img src="https://img-blog.csdnimg.cn/20200324144257730.png#pic_center" alt="在这里插入图片描述"><br>如下图：</p><p><img src="https://img-blog.csdnimg.cn/20200324144417635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NDM2MjE0,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点击 “环境变量” 然后会看到这样的画面：<br><img src="https://img-blog.csdnimg.cn/20200324144506838.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NDM2MjE0,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>关键是下面的内容，用户变量可以不用管：<br><img src="https://img-blog.csdnimg.cn/20200324144740560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NDM2MjE0,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>至此你已经完成了所有的准备步骤，接下来就是环境配置了：<br>1.点击“新建”会出现一个弹窗：<br><img src="https://img-blog.csdnimg.cn/20200324145127273.png#pic_center" alt="在这里插入图片描述"><br>变量名：JAVA_HOME<br>变量值：C:\Program Files\Java\jdk1.8.0_162(JDK的安装路径，这里以你自己的安装路径为准)</p><p><img src="https://img-blog.csdnimg.cn/20200324145322390.png#pic_center" alt="在这里插入图片描述"><br>输入完成之后点确认，第一项配置就完成了，接下来进行第二步<br>2.新建CLASSPATH 变量，变量值为：<br>.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar(注意前面是又有一个点的)，配置好之后如下图，这里是可以复制粘贴的。<br><img src="https://img-blog.csdnimg.cn/20200324151159228.png#pic_center" alt="![在这里插入图片描述](https://img-blog.csdnimg.cn/20200324145920366.png"></p><p>然后点确定保存变量，进入第三步</p><p>3.配置path,找到path，双击或者点编辑<br><img src="https://img-blog.csdnimg.cn/202003241458326.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NDM2MjE0,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>然后可以看到path里面已经有很多内容了，我们在最后面新建一个：<br><img src="https://img-blog.csdnimg.cn/20200324150059528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NDM2MjE0,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入 %JAVA_HOME%\bin</p><p><img src="https://img-blog.csdnimg.cn/20200324151748558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NDM2MjE0,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>然后点确定保存，出去之后再点确定，然后再点确定，至此环境变量配置完毕，接下来就是测试环境变量配置有没有问题了。</p><h1 id="验证环境变量配置"><a href="#验证环境变量配置" class="headerlink" title="验证环境变量配置"></a>验证环境变量配置</h1><p>快捷键“ win + R ” ,打开运行窗口，输入cmd，点击确定打开命令行窗口，<br><img src="https://img-blog.csdnimg.cn/20200324150524640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NDM2MjE0,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>输入 java ，回车执行<br><img src="https://img-blog.csdnimg.cn/20200324150620957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NDM2MjE0,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在输入 javac ，回车执行<br><img src="https://img-blog.csdnimg.cn/2020032415185560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NDM2MjE0,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>再输入 java -version ，回车执行<br><img src="https://img-blog.csdnimg.cn/20200324150737231.png#pic_center" alt="在这里插入图片描述"><br>至此，环境变量就配置完毕了，如果你是win7的操作系统，那么第三步要稍作改动。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>dfs</title>
    <link href="/2022/07/14/dfs/"/>
    <url>/2022/07/14/dfs/</url>
    
    <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>以nginx和组播机制为基础的简易弱一致性http分布式文件系统。其简易体现在</p><ol><li>无需特别定制的客户端,普通的浏览器等通用http客户端即可。</li><li>在配置上只需事先知道router节点即可，不需要知道实际的storage节点，storage节点可以自由退出和加入本文件系统。storage节点和router节点之间 不存在耦合关系</li></ol><h4 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h4><p><img src="https://gitee.com/fenquen/dfs/raw/master/assets/dfs.png" alt="structure"></p><ol><li>系统分为2大角色:router和storage,前者扮演路由角色后者用于实际保存文件。不直接对外暴露,统一由nginx反向代理。 上传下载首先访问router节点之后再通过nginx的内部重定向访问保存有目标文件的storage节点</li><li>为应对文件上传后节点间信息同步的时间差，防止上传之立马下载文件情况下可能发生的404错误，上传成功之后会生成cookie其中保存着storage节点的地址,该cookie的存活周期为60s, 携带有该cookie的下载请求可指定被引导到对应的存储节点</li><li>各个storage节点通过udp组播机制向加入该组播组的各个router节点广播信息(文件上传回执&#x2F;存储节点自身元数据),使用的是自定义的私有协议， 没有使用json的原因在于消息的体积不方便控制，必须保证单条消息的体积不超过网络的MTU值(一般是1500字节)， 使得接收端接收的单个datagramPacket都对应一条完整的信息</li><li>作为系统的大脑,router节点之间不会产生交互,各个router节点都是对等的,可以防止单点故障</li></ol><h4 id="部署配置"><a href="#部署配置" class="headerlink" title="部署配置"></a>部署配置</h4><ol><li>配置nginx的upstream servers代理router集群和error page实现内部重定向</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> dfs_routers &#123;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.100.60:8090</span>;<br>&#125;<br><br><span class="hljs-section">location</span> /upload &#123;<br>    <span class="hljs-attribute">proxy_pass</span> http://dfs_routers;<br>    <span class="hljs-attribute">index</span>  index.html index.htm;<br><br>    <span class="hljs-attribute">proxy_intercept_errors</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">error_page</span> <span class="hljs-number">301</span> <span class="hljs-number">302</span> <span class="hljs-number">307</span> = <span class="hljs-variable">@handle_redirect</span>;<br>&#125;<br><br><span class="hljs-section">location</span> /download &#123;<br>    <span class="hljs-attribute">proxy_pass</span> http://dfs_routers;<br>    <span class="hljs-attribute">index</span>  index.html index.htm;<br><br>    <span class="hljs-attribute">proxy_intercept_errors</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-comment"># 后台服务器要是返回重定向的状态码</span><br>    <span class="hljs-attribute">error_page</span> <span class="hljs-number">301</span> <span class="hljs-number">302</span> <span class="hljs-number">307</span> = <span class="hljs-variable">@handle_redirect</span>;<br>&#125; <br><br><span class="hljs-comment"># 用来读取被代理服务器的重定向地址实现内部重定向</span><br><span class="hljs-section">location</span> <span class="hljs-variable">@handle_redirect</span> &#123;<br>        <span class="hljs-attribute">set</span> <span class="hljs-variable">$saved_redirect_location</span> <span class="hljs-string">&#x27;<span class="hljs-variable">$upstream_http_location</span>&#x27;</span>;<br>        <span class="hljs-attribute">proxy_pass</span> <span class="hljs-variable">$saved_redirect_location</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h4><p>假设192.168.100.6:80为nginx对外暴露地址。</p><ol><li>文件上传</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">100.6</span><span class="hljs-regexp">/upload -F &quot;file=@~/</span>test.png<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p>上传成功之后会返回json格式的结果,其中会有文件的唯一标识</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;success&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;124e4567e89b12d3a456426655440000&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol><li>文件下载</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">curl</span> http://<span class="hljs-number">192.168.100.6</span>/download?uploadFileUUID=<span class="hljs-number">124</span>e4567e89b12d3a456426655440000<br></code></pre></td></tr></table></figure><p>nginx udp配置示例</p><blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">worker_processes</span> auto;<br><br><span class="hljs-attribute">error_log</span> /var/log/nginx/<span class="hljs-literal">error</span>.log <span class="hljs-literal">info</span>;<br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><br><span class="hljs-section">stream</span> &#123;<br>    <span class="hljs-section">upstream</span> backend &#123;<br>        <span class="hljs-attribute">hash</span> <span class="hljs-variable">$remote_addr</span> consistent;<br><br>        <span class="hljs-attribute">server</span> backend1.example.com:<span class="hljs-number">12345</span> weight=<span class="hljs-number">5</span>;<br>        <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:12345</span>            max_fails=<span class="hljs-number">3</span> fail_timeout=<span class="hljs-number">30s</span>;<br>        <span class="hljs-attribute">server</span> unix:/tmp/backend3;<br>    &#125;<br><br>    <span class="hljs-section">upstream</span> dns &#123;<br>       <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.0.1:53535</span>;<br>       <span class="hljs-attribute">server</span> dns.example.com:<span class="hljs-number">53</span>;<br>    &#125;<br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">12345</span>;<br>        <span class="hljs-attribute">proxy_connect_timeout</span> <span class="hljs-number">1s</span>;<br>        <span class="hljs-attribute">proxy_timeout</span> <span class="hljs-number">3s</span>;<br>        <span class="hljs-attribute">proxy_pass</span> backend;<br>    &#125;<br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">127.0.0.1:53</span> udp reuseport;<br>        <span class="hljs-attribute">proxy_timeout</span> <span class="hljs-number">20s</span>;<br>        <span class="hljs-attribute">proxy_pass</span> dns;<br>    &#125;<br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> [::<span class="hljs-number">1</span>]:<span class="hljs-number">12345</span>;<br>        <span class="hljs-attribute">proxy_pass</span> unix:/tmp/stream.socket;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><p>指令</p><p>| 句法： | <code>listen *address*:*port* [ssl] [udp] [proxy_protocol] [backlog=*number*] [rcvbuf=*size*] [sndbuf=*size*] [bind] [ipv6only=on|off] [reuseport] [so_keepalive=on|off|[*keepidle*]:[*keepintvl*]:[*keepcnt*]];</code> |<br>| :—– | ———————————————————— |<br>| 默认： | —                                                            |<br>| 内容： | <code>server</code>                                                     |</p><p>为服务器将在其上接受连接的套接字 设置<code>*address*</code>和<code>*port*</code>。可以仅指定端口。该地址也可以是主机名，例如：</p><blockquote><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sas">听127.0.0.1:12345; <br>听<span class="hljs-comment">*：12345;</span> <br>听12345; ＃与<span class="hljs-comment">*：12345相同</span><br><span class="hljs-comment">侦听localhost：12345;</span><br></code></pre></td></tr></table></figure></blockquote><p>IPv6地址在方括号中指定：</p><blockquote><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-title">听[::</span> <span class="hljs-number">1</span>]：<span class="hljs-number">12345</span><span class="hljs-comment">; </span><br><span class="hljs-title">听[::</span>]：<span class="hljs-number">12345</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></blockquote><p>UNIX域套接字使用“ <code>unix:</code>”前缀指定：</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">监听Unix：<span class="hljs-regexp">/var/</span>run/nginx.sock;<br></code></pre></td></tr></table></figure></blockquote><p>指定端口范围（1.15.10），第一个和最后一个端口用连字符分隔：</p><blockquote><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">听<span class="hljs-number">127.0.0.1</span>:<span class="hljs-number">12345-12399</span><span class="hljs-comment">; </span><br>听<span class="hljs-number">12345-12399</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></blockquote><p>该<code>ssl</code>参数允许指定该端口上接受的所有连接均应以SSL模式工作。</p><p>该<code>udp</code>参数配置用于处理数据报（1.9.13）的侦听套接字。为了在同一会话中处理来自相同地址和端口的数据包，<a href="http://nginx.org/en/docs/stream/ngx_stream_core_module.html#reuseport"><code>reuseport</code></a>还应指定该参数。</p><p>的<code>proxy_protocol</code>参数（1.11.4）允许指定这个端口上接受的所有连接应使用 <a href="http://www.haproxy.org/download/1.5/doc/proxy-protocol.txt">代理服务器协议</a>。</p><blockquote><p>自1.13.11版开始支持PROXY协议版本2。</p></blockquote><p>该<code>listen</code>指令可以具有几个特定于套接字相关系统调用的附加参数。</p><ul><li><p><code>backlog</code>&#x3D;<code>*number*</code></p><p>设置呼叫中的<code>backlog</code>参数，该参数 <code>listen()</code>限制挂起的连接队列的最大长度（1.9.2）。默认情况下， <code>backlog</code>在FreeBSD，DragonFly BSD和macOS上设置为-1，在其他平台上设置为511。</p></li><li><p><code>rcvbuf</code>&#x3D;<code>*size*</code></p><p>设置<code>SO_RCVBUF</code>侦听套接字（1.11.13）的接收缓冲区大小（该选项）。</p></li><li><p><code>sndbuf</code>&#x3D;<code>*size*</code></p><p>设置<code>SO_SNDBUF</code>侦听套接字（1.11.13）的发送缓冲区大小（该选项）。</p></li><li><p><code>bind</code></p><p>此参数指示对<code>bind()</code> 给定的address：port对单独进行调用。事实是，如果有多个<code>listen</code>指令具有相同的端口但地址不同，并且其中一个 <code>listen</code>指令在给定port（<code>*:``*port*</code>）的所有地址上进行侦听，则nginx <code>bind()</code>只会侦听<code>*:``*port*</code>。应当注意，<code>getsockname()</code>在这种情况下将进行系统调用以确定接受连接的地址。如果使用<code>ipv6only</code> 或<code>so_keepalive</code>参数，则对于给定的 <code>*address*</code>：<code>*port*</code>对，<code>bind()</code>将始终进行单独的调用。</p></li><li><p><code>ipv6only</code>&#x3D; <code>on</code>|<code>off</code></p><p>此参数（通过<code>IPV6_V6ONLY</code>套接字选项）确定侦听通配符地址的IPv6套接字是<code>[::]</code> 仅接受IPv6连接还是接受IPv6和IPv4连接。默认情况下，此参数是打开的。启动时只能设置一次。</p></li><li><p><code>reuseport</code></p><p>此参数（1.9.1）指示为每个工作进程创建一个单独的侦听套接字（使用<code>SO_REUSEPORT</code>Linux 3.9+和DragonFly BSD或<code>SO_REUSEPORT_LB</code>FreeBSD 12+上的 套接字选项），从而允许内核在工作进程之间分配传入的连接。当前仅在Linux 3.9 +，DragonFly BSD和FreeBSD 12+（1.15.1）上有效。不当地使用此选项可能会带来安全 <a href="http://man7.org/linux/man-pages/man7/socket.7.html">隐患</a>。</p></li><li><p><code>so_keepalive</code>&#x3D; <code>on</code>| <code>off</code>| [ <code>*keepidle*</code>]：[ <code>*keepintvl*</code>]：[ <code>*keepcnt*</code>]</p><p>此参数为侦听套接字配置“ TCP keepalive”行为。如果省略此参数，则操作系统的设置对套接字有效。如果将其设置为值“ <code>on</code>”，则<code>SO_KEEPALIVE</code>该套接字的 选项已打开。如果将其设置为值“ <code>off</code>”，则<code>SO_KEEPALIVE</code>该套接字的 选项已关闭。一些操作系统的支持TCP的keepalive参数对每个套接字使用的设置<code>TCP_KEEPIDLE</code>， <code>TCP_KEEPINTVL</code>以及<code>TCP_KEEPCNT</code>套接字选项。在这样的系统（目前，Linux的2.4 +，NetBSD的5+和FreeBSD 9.0-STABLE），它们可以使用被配置<code>*keepidle*</code>，<code>*keepintvl*</code>和 <code>*keepcnt*</code>参数。可以省略一个或两个参数，在这种情况下，相应套接字选项的系统默认设置将生效。例如，<code>so_keepalive = 30m :: 10</code>会将闲置超时（<code>TCP_KEEPIDLE</code>）设置为30分钟，将探测间隔（<code>TCP_KEEPINTVL</code>）保留为系统默认值，并将探测计数（<code>TCP_KEEPCNT</code>）设置为10个探测。</p></li></ul><p>不同的服务器必须侦听不同的 <code>*address*</code>：<code>*port*</code>对。</p><table><thead><tr><th align="left">句法：</th><th><code>preread_buffer_size *size*;</code></th></tr></thead><tbody><tr><td align="left">默认：</td><td><code>preread_buffer_size 16k;</code></td></tr><tr><td align="left">内容：</td><td><code>stream</code>， <code>server</code></td></tr></tbody></table><p>该指令出现在1.11.5版中。</p><p>指定<code>*size*</code>了的 <a href="http://nginx.org/en/docs/stream/stream_processing.html#preread_phase">预读</a>缓冲区。</p><table><thead><tr><th align="left">句法：</th><th><code>preread_timeout *timeout*;</code></th></tr></thead><tbody><tr><td align="left">默认：</td><td><code>preread_timeout 30秒；</code></td></tr><tr><td align="left">内容：</td><td><code>stream</code>， <code>server</code></td></tr></tbody></table><p>该指令出现在1.11.5版中。</p><p>指定<code>*timeout*</code>了的 <a href="http://nginx.org/en/docs/stream/stream_processing.html#preread_phase">预读</a>阶段。</p><table><thead><tr><th align="left">句法：</th><th><code>proxy_protocol_timeout *timeout*;</code></th></tr></thead><tbody><tr><td align="left">默认：</td><td><code>proxy_protocol_timeout 30秒；</code></td></tr><tr><td align="left">内容：</td><td><code>stream</code>， <code>server</code></td></tr></tbody></table><p>该指令出现在版本1.11.4中。</p><p>指定一个<code>*timeout*</code>用于读取要完成的PROXY协议标头。如果在此时间内未传输整个标头，则连接将关闭。</p><p>| 句法： | <code>resolver *address* ... [valid=*time*] [ipv6=on|off] [status_zone=*zone*];</code> |<br>| :—– | ———————————————————— |<br>| 默认： | —                                                            |<br>| 内容： | <code>stream</code>， <code>server</code>                                          |</p><p>该指令出现在1.11.3版本中。</p><p>配置用于将上游服务器的名称解析为地址的名称服务器，例如：</p><blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">解析器127.0.0.1 [:: </span>1]：5353;<br></code></pre></td></tr></table></figure></blockquote><p>可以使用可选端口将地址指定为域名或IP地址。如果未指定端口，则使用端口53。以循环方式查询名称服务器。</p><p>默认情况下，nginx会在解析时同时查找IPv4和IPv6地址。如果不需要查找IPv6地址，则<code>ipv6=off</code>可以指定该参数。</p><p>默认情况下，nginx使用响应的TTL值缓存答案。可选<code>valid</code>参数允许覆盖它：</p><blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">解析器127.0.0.1 [:: </span>1]：5353有效时间= 30秒；<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>为防止DNS欺骗，建议在适当安全的受信任本地网络中配置DNS服务器。</p></blockquote><p>可选<code>status_zone</code>参数（1.17.1）启用 对指定的中请求和响应的DNS服务器统计信息的<a href="http://nginx.org/en/docs/http/ngx_http_api_module.html#resolvers_">收集</a><code>*zone*</code>。该参数可作为我们的<a href="http://nginx.com/products/">商业订购的</a>一部分获得 。</p><blockquote><p>在1.11.3版之前，此指令可作为我们的<a href="http://nginx.com/products/">商业订阅的</a>一部分使用 。</p></blockquote><table><thead><tr><th align="left">句法：</th><th><code>resolver_timeout *time*;</code></th></tr></thead><tbody><tr><td align="left">默认：</td><td><code>resolver_timeout 30秒；</code></td></tr><tr><td align="left">内容：</td><td><code>stream</code>， <code>server</code></td></tr></tbody></table><p>该指令出现在1.11.3版本中。</p><p>设置名称解析超时，例如：</p><blockquote><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">resolver_timeout <span class="hljs-number">5</span>s<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></blockquote><blockquote><p>在1.11.3版之前，此指令可作为我们的<a href="http://nginx.com/products/">商业订阅的</a>一部分使用 。</p></blockquote><table><thead><tr><th align="left">句法：</th><th><code>server &#123; ... &#125;</code></th></tr></thead><tbody><tr><td align="left">默认：</td><td>—</td></tr><tr><td align="left">内容：</td><td><code>stream</code></td></tr></tbody></table><p>设置服务器的配置。</p><table><thead><tr><th align="left">句法：</th><th><code>stream &#123; ... &#125;</code></th></tr></thead><tbody><tr><td align="left">默认：</td><td>—</td></tr><tr><td align="left">内容：</td><td><code>main</code></td></tr></tbody></table><p>提供在其中指定流服务器指令的配置文件上下文。</p><p>| 句法： | <code>tcp_nodelay on | off;</code> |<br>| :—– | ————————— |<br>| 默认： | <code>tcp_nodelay;</code>              |<br>| 内容： | <code>stream</code>， <code>server</code>         |</p><p>该指令出现在版本1.9.4中。</p><p>启用或禁用该<code>TCP_NODELAY</code>选项的使用。客户端和代理服务器连接均启用该选项。</p><table><thead><tr><th align="left">句法：</th><th><code>variables_hash_bucket_size *size*;</code></th></tr></thead><tbody><tr><td align="left">默认：</td><td><code>variables_hash_bucket_size 64;</code></td></tr><tr><td align="left">内容：</td><td><code>stream</code></td></tr></tbody></table><p>该指令出现在1.11.2版中。</p><p>设置变量哈希表的存储桶大小。设置哈希表的详细信息在单独的<a href="http://nginx.org/en/docs/hash.html">文档</a>中提供 。</p><table><thead><tr><th align="left">句法：</th><th><code>variables_hash_max_size *size*;</code></th></tr></thead><tbody><tr><td align="left">默认：</td><td><code>variables_hash_max_size 1024;</code></td></tr><tr><td align="left">内容：</td><td><code>stream</code></td></tr></tbody></table><p>该指令出现在1.11.2版中。</p><p>设置<code>*size*</code>变量哈希表的最大值。设置哈希表的详细信息在单独的<a href="http://nginx.org/en/docs/hash.html">文档</a>中提供 。</p><p>嵌入式变量</p><p>该<code>ngx_stream_core_module</code>模块自1.11.2起支持变量。</p><ul><li><p><code>$binary_remote_addr</code></p><p>客户端地址（二进制形式），对于IPv4地址，值的长度始终为4个字节，对于IPv6地址，值的长度始终为16个字节</p></li><li><p><code>$bytes_received</code></p><p>从客户端收到的字节数（1.11.4）</p></li><li><p><code>$bytes_sent</code></p><p>发送给客户端的字节数</p></li><li><p><code>$connection</code></p><p>连接序列号</p></li><li><p><code>$hostname</code></p><p>主机名</p></li><li><p><code>$msec</code></p><p>以秒为单位的当前时间（以毫秒为单位）</p></li><li><p><code>$nginx_version</code></p><p>Nginx版本</p></li><li><p><code>$pid</code></p><p>工作进程的PID</p></li><li><p><code>$protocol</code></p><p>与客户端通信的协议： <code>TCP</code>或<code>UDP</code>（1.11.4）</p></li><li><p><code>$proxy_protocol_addr</code></p><p>来自PROXY协议标头（1.11.4）的客户端地址必须通过<code>proxy_protocol</code>在<a href="http://nginx.org/en/docs/stream/ngx_stream_core_module.html#listen">listen</a>指令中设置参数来预先启用PROXY协议 。</p></li><li><p><code>$proxy_protocol_port</code></p><p>PROXY协议标头（1.11.4）中的客户端端口必须通过<code>proxy_protocol</code>在<a href="http://nginx.org/en/docs/stream/ngx_stream_core_module.html#listen">listen</a>指令中设置参数来预先启用PROXY协议 。</p></li><li><p><code>$proxy_protocol_server_addr</code></p><p>PROXY协议标头中的服务器地址（1.17.6）必须通过<code>proxy_protocol</code>在<a href="http://nginx.org/en/docs/stream/ngx_stream_core_module.html#listen">listen</a>指令中设置参数来预先启用PROXY协议 。</p></li><li><p><code>$proxy_protocol_server_port</code></p><p>PROXY协议标头中的服务器端口（1.17.6）必须通过<code>proxy_protocol</code>在<a href="http://nginx.org/en/docs/stream/ngx_stream_core_module.html#listen">listen</a>指令中设置参数来预先启用PROXY协议 。</p></li><li><p><code>$remote_addr</code></p><p>客户地址</p></li><li><p><code>$remote_port</code></p><p>客户端口</p></li><li><p><code>$server_addr</code></p><p>接受连接的服务器的地址计算此变量的值通常需要一个系统调用。为避免系统调用，<a href="http://nginx.org/en/docs/stream/ngx_stream_core_module.html#listen">listen</a>伪指令必须指定地址并使用<code>bind</code>参数。</p></li><li><p><code>$server_port</code></p><p>接受连接的服务器的端口</p></li><li><p><code>$session_time</code></p><p>会话持续时间，以毫秒为单位，以毫秒为单位（1.11.4）；</p></li><li><p><code>$status</code></p><p>会话状态（1.11.4），可以是以下之一：<code>200</code>会话成功完成<code>400</code>客户端数据无法解析，例如，<a href="http://nginx.org/en/docs/stream/ngx_stream_core_module.html#proxy_protocol">PROXY协议</a>标头<code>403</code>禁止访问，例如，当<a href="http://nginx.org/en/docs/stream/ngx_stream_access_module.html">某些客户端地址的</a>访问受到限制时<code>500</code>内部服务器错误<code>502</code>错误的网关，例如，如果无法选择或访问上游服务器。<code>503</code>服务不可用，例如，当访问受<a href="http://nginx.org/en/docs/stream/ngx_stream_limit_conn_module.html">连接数</a>限制时</p></li><li><p><code>$time_iso8601</code></p><p>ISO 8601标准格式的当地时间</p></li><li><p><code>$time_local</code></p><p>通用日志格式的本地时间</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>devop deploy</title>
    <link href="/2022/07/14/devops/"/>
    <url>/2022/07/14/devops/</url>
    
    <content type="html"><![CDATA[<h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1  准备工作"></a>1  准备工作</h1><p>镜像：</p><table><thead><tr><th>工具</th><th>版本</th><th>备注</th></tr></thead><tbody><tr><td>Elasticsearch</td><td>7.10.2</td><td></td></tr><tr><td>Grafana</td><td>7.4.2v10</td><td></td></tr><tr><td>Gitea</td><td>1.14.2</td><td></td></tr><tr><td>Jenkins</td><td>2.170</td><td></td></tr><tr><td>Mysql</td><td>5.7.14</td><td></td></tr><tr><td>Minio</td><td>RELEASE.2021-05-26T00-22-46Z</td><td></td></tr><tr><td>Devops后端</td><td>最新稳定版本</td><td></td></tr><tr><td>Analysis-tool后端</td><td>最新稳定版本</td><td></td></tr><tr><td>Devops前端</td><td>最新稳定版本</td><td></td></tr></tbody></table><p>文件：</p><table><thead><tr><th>工具</th><th>文件名</th><th>备注</th></tr></thead><tbody><tr><td>Analysis-tool后端</td><td>analysis-application.yaml</td><td></td></tr><tr><td>Devops后端</td><td>devops-application.yml</td><td></td></tr><tr><td>Grafana</td><td>grafana-defaults.ini</td><td></td></tr><tr><td>Mysql</td><td>mysql.cnf</td><td></td></tr><tr><td>Jenkins</td><td>Plugin.tar</td><td></td></tr></tbody></table><p>将所有的镜像文件都上传到venus平台上</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image002.jpg" alt="img"></p><p>按照图中的步骤将准备好的镜像tar依次上传即可。</p><p>在venus上创建devops空间</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image004.jpg" alt="img"></p><h1 id="2-部署mysql"><a href="#2-部署mysql" class="headerlink" title="2  部署mysql"></a>2  部署mysql</h1><p>在配置管理中增加一个devops-mysql的配置，配置好mysql的root密码环境变量MYSQL_ROOT_PASSWORD</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image006.jpg" alt="img"></p><p>；增加mysql的配置文件mysql-cnf，内容为安装包中的mysql.cnf同名文件内容</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image008.jpg" alt="img"></p><p>在应用管理中我的应用点击自定义创建</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image010.jpg" alt="img"></p><p>在创建窗口中按照下图中的内容进行填写，创建MySQL应用。</p><p>l 挂在卷设置中添加的挂载卷设置为主机上的存储位置，需要在venus安装完成后先创建存储类，此处默认存储类已经创建完成；</p><p>l 容器配置中需要填写镜像的名称和tag号以及准备分配的资源和启动命令；</p><p>l 容器配置中的挂载卷左侧填写上方创建的挂载卷名称，右侧填写容器内需要挂载出来的路径&#x2F;var&#x2F;lib&#x2F;mysql；</p><p>l 环境变量处填写之前创建的配置。</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image012.jpg" alt="img"></p><p>在创建好的MySQL应用中修改yaml文件</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image014.jpg" alt="img"></p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image016.jpg" alt="img"></p><p>在yaml文件中找到spec.spec的位置，加上mysql配置文件的挂载</p><p>​    - name: conf</p><p>​     configMap:</p><p>​      name: mysql-conf</p><p>​      items:</p><p>​       - key: mysql.cnf</p><p>​        path: mysql.cnf</p><p>​      defaultMode: 420</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image018.jpg" alt="img"></p><p>在之前的位置下方再加入一下配置</p><p>​      - name: conf</p><p>​       mountPath: &#x2F;etc&#x2F;mysql&#x2F;mysql.cnf</p><p>​       subPath: mysql.cnf</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image020.jpg" alt="img"></p><p>点击页面上方的重新部署，等待应用重启</p><p>在我的应用中点击mysql的暴露应用暴露mysql的端口</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image022.jpg" alt="img"></p><p>再次点击mysql的暴露应用查看暴露出来的外部端口</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image024.jpg" alt="img"></p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image026.jpg" alt="img"></p><p>使用navicat连接工具（该工具在包中附带，依次执行navicat*.exe、PatchNavicat.exe）建立与数据库的连接，ip和端口改为venus访问的ip和上面查看到的暴露出来的端口，密码使用之前配置中设置的环境变量的值</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image028.jpg" alt="img"></p><p>连接数据库只有右键选择运行sql文件，将安装包中的两个初始化文件分别执行。</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image030.jpg" alt="img"><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image032.jpg" alt="img"></p><h1 id="3-部署gitea"><a href="#3-部署gitea" class="headerlink" title="3  部署gitea"></a>3  部署gitea</h1><p>点击自定义创建，创建一个gitea应用，按照下图填写配置</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image034.jpg" alt="img"></p><p>用容器内端口3000进行暴露，并获取暴露后的外部端口：</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image036.jpg" alt="img"></p><p>使用ip:暴露的外部端口，访问gitea：</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image038.jpg" alt="img"></p><p>按照下面的图进行gitea的配置</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image040.jpg" alt="img"></p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image042.jpg" alt="img"></p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image044.jpg" alt="img"></p><p>配置完成后点击下方的立即安装，完成gitea的安装。</p><h1 id="4-部署minio"><a href="#4-部署minio" class="headerlink" title="4  部署minio"></a>4  部署minio</h1><p>在配置管理中新建devops-minio的配置，内容为：</p><p>   MINIO_ACCESS_KEY: minioadmin</p><p>   MINIO_SECRET_KEY: minioadmin</p><p>   MINIO_BUCKET: devops </p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image046.jpg" alt="img"></p><p>然后在我的应用中点击自定义创建，创建一个minio应用，按照下图进行配置：</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image048.jpg" alt="img"></p><p>在minio应用的配置文件中将command修改为args：</p><p>参照下面两张图进行修改。</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image050.jpg" alt="img"></p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image052.jpg" alt="img"></p><p>完成修改后，重新部署minio应用；使用容器端口9000暴露应用并获取外部端口：</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image054.jpg" alt="img"></p><p>使用ip+外部端口访问minio</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image056.jpg" alt="img"></p><p>登录之后创建一个devops的文件桶：</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image058.jpg" alt="img"></p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image060.jpg" alt="img"></p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image062.jpg" alt="img"></p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image064.jpg" alt="img"></p><h1 id="5-部署jenkins"><a href="#5-部署jenkins" class="headerlink" title="5  部署jenkins"></a>5  部署jenkins</h1><p>首先还是在配置管理中新增一个devops-jenkins的配置，在可视化中增加两个环境变量</p><p>TZ ：  Asia&#x2F;Shanghai</p><p>JAVA_OPTS ：  -Xms4096m -Xmx4096m -XX:MaxNewSize&#x3D;512m -Dorg.jenkinsci.plugins.gitclient.Git.timeOut&#x3D;60</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image066.jpg" alt="img"></p><p>然后在我的应用中自定义创建jenkins应用，和创建mysql应用一样按照图中的内容进行选择和填写即可。</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image068.jpg" alt="img"></p><p>暴露jenkins的应用</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image070.jpg" alt="img"></p><p>查看再次点击暴露应用查看暴露的端口，或者在服务管理中查看暴露出来的端口</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image072.jpg" alt="img"></p><p>远程连接venus的后台，找到挂载的目录，</p><p>l 使用kubectl -n devops get pvc找到空间下的pvc，devops为部署的工作空间</p><p>l 使用kubectl -n devops get po -o wide找到空间下应用在的节点</p><p>l 在对应的节点找到对应的目录</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image074.jpg" alt="img"></p><p>l 将本地plugins.tar传输到持久化存储卷所在节点：scp plugins.tar root@[节点名称]:找到的目录</p><p>l 在venus中将jenkins应用的副本设为0</p><p>l ssh到对应的节点上，进入jenkins的目录</p><p>l mv plugins plugins_backup,将之前的plugin目录进行备份</p><p>l 解压plugins.tar包：tar -xvf plugins.tar</p><p>l 在veunus中将jenkins应用的副本设为1</p><p>l 使用venus的ip加上暴露的端口访问jenkins</p><p>l 在服务器上的查看jenkins初始密码</p><p>l <img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image075.png" alt="img"></p><p>使用密码登录jenkins，按照下面的图进行jenkins安装和设置</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image077.jpg" alt="img"></p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image079.jpg" alt="img"></p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image081.jpg" alt="img"></p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image083.jpg" alt="img"></p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image085.jpg" alt="img"></p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image087.png" alt="img"></p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image089.jpg" alt="img"></p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image091.png" alt="img"><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image093.png" alt="img"></p><h1 id="6-部署elasticsearch"><a href="#6-部署elasticsearch" class="headerlink" title="6  部署elasticsearch"></a>6  部署elasticsearch</h1><p>在配置管理中创建一个devops-es的配置，然后填上环境变量</p><p>discovery.type ： single-node</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image095.jpg" alt="img"></p><p>在配置管理中创建一个es-conf的配置，然后写上加上配置信息</p><p>sysctl.conf         vm.max_map_count&#x3D;262144</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image097.jpg" alt="img"></p><p>自定义创建elasticsearch应用</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image099.jpg" alt="img"></p><p>容器内部挂载目录：&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;data</p><p>和mysql一样，在应用的yaml文件中的对应位置加上配置</p><p>​    - name: conf</p><p>​     configMap:</p><p>​      name: es-conf</p><p>​      items:</p><p>​       - key: sysctl.conf</p><p>​        path: sysctl.conf</p><p>​      defaultMode: 420</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image101.jpg" alt="img"></p><p>​      - name: conf</p><p>​       mountPath: &#x2F;etc&#x2F;sysctl.conf</p><p>​       subPath: sysctl.conf</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image103.jpg" alt="img"></p><p>点击重新部署，完成修改</p><p>然后在应用列表使用容器端口9200暴露应用并获取暴露后端口</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image105.jpg" alt="img"></p><h1 id="7-部署grafana"><a href="#7-部署grafana" class="headerlink" title="7  部署grafana"></a>7  部署grafana</h1><p>在配置管理中创建一个grafana-conf的配置，内容为defaluts.ini（安装包同名文件）</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image107.jpg" alt="img"></p><p>点击自定义创建，创建grafana应用</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image109.jpg" alt="img"></p><p>同样在yaml文件中修改对应位置的配置</p><p>​    - name: conf</p><p>​     configMap:</p><p>​      name: grafana-conf</p><p>​      items:</p><p>​       - key: defaults.ini</p><p>​        path: defaults.ini</p><p>​      defaultMode: 420</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image111.jpg" alt="img"></p><p>​      - name: conf</p><p>​       mountPath: &#x2F;usr&#x2F;share&#x2F;grafana&#x2F;conf&#x2F;defaults.ini</p><p>​       subPath: defaults.ini</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image113.jpg" alt="img"></p><p>点击重新部署，完成修改</p><p>使用容器端口号3000完成应用暴露</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image115.jpg" alt="img"></p><h1 id="8-部署analysis后端应用"><a href="#8-部署analysis后端应用" class="headerlink" title="8  部署analysis后端应用"></a>8  部署analysis后端应用</h1><p>在配置管理中创建一个analysis-conf的配置文件，内容为analysis的application.yaml文件（安装包中可以找到）</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image117.jpg" alt="img"></p><p>点击自定义创建，创建analysis应用，如下图填写配置</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image119.jpg" alt="img"></p><p>在应用内的YAML文件中增加配置文件挂载内容：</p><p>​    - name: conf</p><p>​     configMap:</p><p>​      name: analysis-conf</p><p>​      items:</p><p>​       - key: application.yaml</p><p>​        path: application.yaml</p><p>​      defaultMode: 420</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image121.jpg" alt="img"></p><p>​      - name: conf</p><p>​       mountPath: &#x2F;root&#x2F;application.yaml</p><p>​       subPath: application.yaml</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image123.jpg" alt="img"></p><p>点击暴露应用，使用容器内端口8080进行暴露，并获取暴露后的端口号。</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image125.jpg" alt="img"></p><h1 id="9-部署devops后端应用"><a href="#9-部署devops后端应用" class="headerlink" title="9  部署devops后端应用"></a>9  部署devops后端应用</h1><p>在配置管理中创建一个devops-conf的文件，内容为devops后端的application.yaml（安装包中），按下图中的内容进行修改。</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image127.jpg" alt="img"></p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image129.jpg" alt="img"></p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image131.jpg" alt="img"></p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image133.jpg" alt="img"></p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image135.jpg" alt="img"></p><p>点击自定义创建，创建一个devops-platform应用，按下图填入配置</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image137.jpg" alt="img"></p><p>在devops-platform应用中的YAML文件增加以下内容：</p><p>   volumes:</p><p>​    - name: conf</p><p>​     configMap:</p><p>​      name: devops-conf</p><p>​      items:</p><p>​       - key: application.yml</p><p>​        path: application.yml</p><p>​      defaultMode: 420</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image139.jpg" alt="img"></p><p>​     volumeMounts:</p><p>​      - name: conf</p><p>​       mountPath: &#x2F;application.yml</p><p>​       subPath: application.yml</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image141.jpg" alt="img"></p><p>点击重新部署更新应用。</p><p>使用容器内端口8080暴露应用并获取暴露后的端口：</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image143.jpg" alt="img"></p><h1 id="10-部署devops前端应用"><a href="#10-部署devops前端应用" class="headerlink" title="10  部署devops前端应用"></a>10  部署devops前端应用</h1><p>点击自定义创建，创建一个devops-ui应用，按下图填写配置：</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image145.jpg" alt="img"></p><p>使用容器内部端口80暴露应用，并获取暴露后端口：</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image147.jpg" alt="img"></p><h1 id="11-设置入口转发"><a href="#11-设置入口转发" class="headerlink" title="11  设置入口转发"></a>11  设置入口转发</h1><p>在入口管理中新增一个devops-platform的ingress</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image149.png" alt="img"></p><p>编辑转发规则：</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image151.png" alt="img"></p><p>新增devops-platform和static-analysis-back的转发规则：</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image153.jpg" alt="img"></p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image155.jpg" alt="img"></p><p>新增一个devops-ui的ingress</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image157.jpg" alt="img"></p><p>添加转发规则：</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image159.png" alt="img"></p><p>新增devops-ui和grafana的转发规则：</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image161.jpg" alt="img"></p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image163.jpg" alt="img"></p><p>入口管理设置后，我的应用会出现ingress应用：</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image165.jpg" alt="img"></p><p>暴露ingress应用，直接将默认的80和443端口暴露并获取外部端口：</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image167.jpg" alt="img"></p><p>使用 [任意节点ip]:[ingress外部端口号]&#x2F;devops-front&#x2F; 访问Devops</p><p>使用admin &#x2F; adminP@ssw0rd 登录</p><p>获取到igress的ip之后，需要将之前devops的应用配置文件做对应的修改，接着修改下面的grafana的配置，然后重启devops-platform应用。</p><p>使用[任意节点ip]:[ingress外部端口号]&#x2F;grafana&#x2F;访问grafana页面，获取api-key</p><p>使用账号admin、密码admin登录</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image169.jpg" alt="img"></p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image171.jpg" alt="img"></p><p>点击生成一个新的api-key，填入devops的信息，赋予管理员权限</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image173.jpg" alt="img"></p><p>复制token内容，更新到devops的配置文件中</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image175.jpg" alt="img"></p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image177.jpg" alt="img"></p><p>更新图中内容</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image179.jpg" alt="img"></p><p>更新配置文件之后，重启devops-platform应用</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image181.jpg" alt="img"></p><p>然后接着在grafana的页面增加数据源：</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image183.jpg" alt="img"></p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image185.jpg" alt="img"></p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image187.jpg" alt="img"></p><p>按照下图中的数据源配置，依次创建grafana数据源：</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image189.jpg" alt="img"></p><p>Elasticsearch-all  *   devopsCollectTime</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image191.jpg" alt="img"></p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image193.jpg" alt="img"></p><p>Elasticsearch-issuestatus  issue_status_snapshot  devopsCollectTime</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image195.jpg" alt="img"></p><p>Elasticsearch-pipeline  pipeline  create_time</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image197.jpg" alt="img"></p><p>Elasticsearch-project  project   create_time</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image199.jpg" alt="img"></p><p>Elasticsearch-spte  spte   create_time</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image201.jpg" alt="img"></p><p>Elasticsearch-static-analysis  static_analysis  createTime</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image203.jpg" alt="img"></p><p>Elasticsearch-static-analysis-rule  static_analysis_rule  createTime</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image205.jpg" alt="img"></p><p>Elasticsearch-cpptest   cpptest    create_time</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image207.jpg" alt="img"></p><p>Elasticsearch-issue  Default  issue  create_time</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image209.jpg" alt="img"></p><p>Elasticsearch-issue_status_current  issue_status_current  devopsCollectTime</p><p>进入jenkins页面，在系统设置中将环境变量更新为ingress地址：</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image211.jpg" alt="img"></p><p>完成后可以使用 [任意节点ip]:[ingress外部端口号]&#x2F;devops-front&#x2F; 访问Devops</p><p>使用admin &#x2F; adminP@ssw0rd 登录</p><p>此时devops功能已可正常使用</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DevMilOps部署文档-Venus</title>
    <link href="/2022/07/14/DevMilOps%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3-Venus/"/>
    <url>/2022/07/14/DevMilOps%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3-Venus/</url>
    
    <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="工具版本"><a href="#工具版本" class="headerlink" title="工具版本"></a>工具版本</h2><table><thead><tr><th>工具</th><th>版本</th><th>venus应用版本</th></tr></thead><tbody><tr><td>nginx</td><td></td><td></td></tr><tr><td>mysql</td><td>5.7.14</td><td>可使用应用市场部署</td></tr><tr><td>jenkins</td><td>2.170</td><td>可使用应用市场部署</td></tr><tr><td>gitlab</td><td>9.5.1~13.2.1</td><td>11.8.6-ce.0</td></tr><tr><td>devops后端</td><td>最新稳定版本</td><td></td></tr><tr><td>devops前端</td><td>最新稳定版本</td><td></td></tr></tbody></table><p> 下载&#x2F;准备所需镜像（gitlab9.5.1~13.2.1、devops前后端稳定版本）</p><h2 id="上传所需镜像tar-x2F-tgz格式"><a href="#上传所需镜像tar-x2F-tgz格式" class="headerlink" title="上传所需镜像tar&#x2F;tgz格式"></a>上传所需镜像tar&#x2F;tgz格式</h2><p>将镜像上传至venus：<br> 方法1：<br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image002.png" alt="img"><br> 方法2：<br> 使用scp命令将包含所需镜像的压缩包传输至venus服务器：</p><ol><li>scp [压缩包文件路径] root@[服务器ip]:* *[路径]</li><li>解压缩：tar     –(z)xvf [压缩包]</li><li>docker     push [所需镜像] 到venus镜像仓库</li></ol><p>其他可能需要的docker命令:</p><ul><li>登录：docker     login <a href="http://xxxxx.com/">http://xxxxx.com</a></li><li>登录私有hub创建项目，例如项目叫：abc-dev</li><li>给镜像打tag：docker tag [已有镜像id] [新镜像名:tag] </li><li>推送镜像到仓库：docker     push [镜像名称]   注：镜像名应包含正确的镜像仓库地址</li><li>将镜像保存到文件：docker     save -o(输出到文件): docker save -o [文件名].tar 镜像名:tag*</li></ul><h2 id="在venus创建devops命名空间："><a href="#在venus创建devops命名空间：" class="headerlink" title="在venus创建devops命名空间："></a>在venus创建devops命名空间：</h2><p><img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image004.png" alt="img"></p><h1 id="部署jenkins"><a href="#部署jenkins" class="headerlink" title="部署jenkins"></a>部署jenkins</h1><h2 id="创建持久化存储卷"><a href="#创建持久化存储卷" class="headerlink" title="创建持久化存储卷"></a>创建持久化存储卷</h2><p>\1. 连接venus服务器，选择节点：ssh [masterX、nodeX…\</p><p>\2. 创建存储卷目录：mkdir -p &#x2F;data&#x2F;[存储卷目录:如devops-jenkins] （目录名应注意区分命名空间）</p><ol><li>进入venus界面：存储管理-存储类，若没有”local”类型的存储类，则新增local存储类：</li></ol><p><img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image006.png" alt="img"><br> 若已存在存储类，则创建持久化存储卷：<br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image008.png" alt="img"></p><h2 id="进入venus应用市场，部署jenkins"><a href="#进入venus应用市场，部署jenkins" class="headerlink" title="进入venus应用市场，部署jenkins"></a>进入venus应用市场，部署jenkins</h2><p><img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image010.png" alt="img"><br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image012.png" alt="img"></p><h2 id="替换jenkins插件："><a href="#替换jenkins插件：" class="headerlink" title="替换jenkins插件："></a>替换jenkins插件：</h2><ol><li>在venus中将jenkins应用的副本设为0</li><li>将plugins.tar上传到jenkins持久化存储卷目录：&#x2F;data&#x2F;devops-jenkins；<br> 或将本地plugins.tar传输到持久化存储卷所在节点：scp plugins.tar root@[节点名称]:&#x2F;data&#x2F;devops-jenkins</li><li>连接venus服务器，ssh [节点名称] 切换到持久化存储卷目录：<br> cd &#x2F;data&#x2F;devops-jenkins<br> mv plugins plugins_backup</li><li>解压plugins.tar包：tar -xvf plugins.tar</li><li>在veunus中将jenkins应用的副本设为1</li></ol><h2 id="修改jenkins配置"><a href="#修改jenkins配置" class="headerlink" title="修改jenkins配置"></a>修改jenkins配置</h2><ol><li>登录jenkins：任意venus节点ip+jenkins暴露端口:</li></ol><p><img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image014.png" alt="img"><br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image016.png" alt="img"><br> 如:192.168.2.8:31496 即可访问jenkins</p><ol><li>修改jenkins配置：</li></ol><p>进入系统管理-系统设置<br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image018.png" alt="img"><br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image020.png" alt="img"><br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image022.png" alt="img"><br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image024.png" alt="img"><br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image026.png" alt="img"><br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image028.png" alt="img"></p><h1 id="部署gitlab"><a href="#部署gitlab" class="headerlink" title="部署gitlab"></a>部署gitlab</h1><h2 id="创建gitlab持久化存储卷"><a href="#创建gitlab持久化存储卷" class="headerlink" title="创建gitlab持久化存储卷"></a>创建gitlab持久化存储卷</h2><p>\1. 连接venus服务器，选择节点：ssh [masterX、nodeX…]</p><p>\2. 创建存储卷目录：mkdir -p &#x2F;data&#x2F;[存储卷目录:如devops-gitlab]（目录名应注意区分命名空间）</p><ol><li>进入venus界面创建持久化存储卷</li></ol><h2 id="进入venus应用市场，部署gitlab-ce"><a href="#进入venus应用市场，部署gitlab-ce" class="headerlink" title="进入venus应用市场，部署gitlab-ce"></a>进入venus应用市场，部署gitlab-ce</h2><p><img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image030.png" alt="img"><br> 等待gitlab完全启动…</p><ol><li>进入venus配置管理，编辑gitlab配置文件，删除alertmanager、letsencrypt项</li></ol><p><img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image032.png" alt="img"></p><ol><li>将devops命名空间的gitlab应用副本设为0</li></ol><p><img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image034.png" alt="img"><br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image036.png" alt="img"></p><ol><li>连接venus服务器，删除gitlab的存储卷目录内容：</li></ol><p>cd &#x2F;data&#x2F;<br> rm -rf devops-gitlab<br> mkdir devops-gitlab</p><ol><li>重新发布gitlab应用，选择9.5.1的tag号，将应用副本重新修改为1</li></ol><p><img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image038.png" alt="img"><br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image040.png" alt="img"><br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image042.png" alt="img"></p><h1 id="部署mysql"><a href="#部署mysql" class="headerlink" title="部署mysql"></a>部署mysql</h1><h2 id="创建持久化存储卷-1"><a href="#创建持久化存储卷-1" class="headerlink" title="创建持久化存储卷"></a>创建持久化存储卷</h2><p>\1. 连接venus服务器，选择节点：ssh [masterX、nodeX…]</p><p>\2. 创建存储卷目录：mkdir -p &#x2F;data&#x2F;[存储卷目录:如devops-mysql] （目录名应注意区分命名空间）</p><ol><li>进入venus界面创建持久化存储卷</li></ol><h2 id="进入venus应用市场，部署mysql"><a href="#进入venus应用市场，部署mysql" class="headerlink" title="进入venus应用市场，部署mysql"></a>进入venus应用市场，部署mysql</h2><p><img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image044.png" alt="img"><br> 请保存设置的数据库密码</p><h2 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h2><ol><li><p>暴露mysql：在     应用管理-我的应用 中，对mysql应用进行暴露<br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image045.png" alt="img"><br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image045.png" alt="img"></p></li><li><p>使用任意节点ip和暴露的外部端口连接数据库（工具或命令均可，只要能连接数据库，此处使用Navicat）<br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image045.png" alt="img"><br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image045.png" alt="img"><br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image045.png" alt="img"></p></li><li><p>创建devops数据库（使用命令创建一定要指定字符集为utf-8：CREATE     DATABASE devops DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;）</p></li></ol><p><img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image046.png" alt="img"><br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image047.png" alt="img"></p><ol><li>初始化数据库</li></ol><p>执行devops.sql文件<br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image048.png" alt="img"><br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image049.png" alt="img"></p><h1 id="部署devops后端"><a href="#部署devops后端" class="headerlink" title="部署devops后端"></a>部署devops后端</h1><ol><li>进入venus我的应用，点击自定义创建，输入应用信息，点击提交</li></ol><p><img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image051.png" alt="img"><br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image053.png" alt="img"><br> 启动命令：<br> java<br> -agentlib:jdwp&#x3D;transport&#x3D;dt_socket,server&#x3D;y,suspend&#x3D;n,address&#x3D;5005<br> -Dspring.profiles.active&#x3D;sit<br> -XX:MetaspaceSize&#x3D;256m<br> -XX:MaxMetaspaceSize&#x3D;256m<br> -Xms2048m<br> -Xmx2048m<br> -jar<br> devops-platform.jar</p><ol><li>进入venus配置管理，创建配置文件</li></ol><p><img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image055.png" alt="img"><br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image057.png" alt="img"></p><ol><li>更改devops-platform应用的yaml文件，添加配置文件挂载信息</li></ol><p><img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image059.png" alt="img"><br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image061.png" alt="img"><br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image063.png" alt="img"><br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image065.png" alt="img"><br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image067.png" alt="img"><br> 增加内容见：应用yaml文件.txt</p><h1 id="部署devops前端"><a href="#部署devops前端" class="headerlink" title="部署devops前端"></a>部署devops前端</h1><ol><li>进入venus我的应用，点击自定义创建，输入应用信息，点击提交</li></ol><p><img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image069.png" alt="img"><br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image071.png" alt="img"></p><ol><li>更改devops-ui应用的Yaml信息</li></ol><p><img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image073.png" alt="img"><br> 点击重新部署</p><h1 id="暴露应用"><a href="#暴露应用" class="headerlink" title="暴露应用"></a>暴露应用</h1><h2 id="暴露后端："><a href="#暴露后端：" class="headerlink" title="暴露后端："></a>暴露后端：</h2><p><img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image075.png" alt="img"></p><h2 id="暴露前端："><a href="#暴露前端：" class="headerlink" title="暴露前端："></a>暴露前端：</h2><p><img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image077.png" alt="img"></p><h1 id="设置入口转发"><a href="#设置入口转发" class="headerlink" title="设置入口转发"></a>设置入口转发</h1><h2 id="后端："><a href="#后端：" class="headerlink" title="后端："></a>后端：</h2><p><img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image079.png" alt="img"><br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image081.png" alt="img"><br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image083.jpg" alt="img"></p><h2 id="前端："><a href="#前端：" class="headerlink" title="前端："></a>前端：</h2><p><img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image085.png" alt="img"><br> <img src="file:///C:/Users/liyupi/AppData/Local/Packages/oice_16_974fa576_32c1d314_1658/AC/Temp/msohtmlclip1/01/clip_image087.png" alt="img"></p><p>入口管理设置后，服务管理会出现ingress服务：</p><p>为ingress设置虚拟ip，使用 [ingress 虚拟ip]&#x2F;devops-front&#x2F;  访问Devops</p><p>或使用 [任意节点ip]:[ingress外部端口号]&#x2F;devops-front&#x2F; 访问Devops</p><p>使用admin &#x2F; adminP@ssw0rd 登录</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>命令行工具 (kubectl)</title>
    <link href="/2022/07/14/kubectl/"/>
    <url>/2022/07/14/kubectl/</url>
    
    <content type="html"><![CDATA[<h1 id="命令行工具-kubectl"><a href="#命令行工具-kubectl" class="headerlink" title="命令行工具 (kubectl)"></a>命令行工具 (kubectl)</h1><p>Kubernetes 提供 kubectl 是使用 Kubernetes API 与 Kubernetes 集群的控制面进行通信的命令行工具。</p><p>这个工具叫做 kubectl。</p><p>针对配置信息，kubectl 在 $HOME&#x2F;.kube 目录中查找一个名为 config 的配置文件。 你可以通过设置 KUBECONFIG 环境变量或设置 –kubeconfig</p><p>参数来指定其它 kubeconfig 文件。</p><p>本文概述了 kubectl 语法和命令操作描述，并提供了常见的示例。 有关每个命令的详细信息，包括所有受支持的参数和子命令， 请参阅 kubectl 参考文档。</p><p>有关安装说明，请参见安装 kubectl； 如需快速指南，请参见备忘单。 如果你更习惯使用 docker 命令行工具， Docker 用户的 kubectl 介绍了一些 Kubernetes 的等价命令。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>使用以下语法从终端窗口运行 kubectl 命令：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">kubectl <span class="hljs-selector-attr">[command]</span> <span class="hljs-selector-attr">[TYPE]</span> <span class="hljs-selector-attr">[NAME]</span> <span class="hljs-selector-attr">[flags]</span><br></code></pre></td></tr></table></figure><p>其中 command、TYPE、NAME 和 flags 分别是：</p><p>command：指定要对一个或多个资源执行的操作，例如 create、get、describe、delete。</p><p>TYPE：指定资源类型。资源类型不区分大小写， 可以指定单数、复数或缩写形式。例如，以下命令输出相同的结果：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> pod pod1<br>kubectl <span class="hljs-built_in">get</span> pods pod1<br>kubectl <span class="hljs-built_in">get</span> po pod1<br></code></pre></td></tr></table></figure><p>NAME：指定资源的名称。名称区分大小写。 如果省略名称，则显示所有资源的详细信息。例如：kubectl get pods。</p><p>在对多个资源执行操作时，你可以按类型和名称指定每个资源，或指定一个或多个文件：</p><p>要按类型和名称指定资源：</p><p>要对所有类型相同的资源进行分组，请执行以下操作：TYPE1 name1 name2 name&lt;#&gt;。<br>例子：kubectl get pod example-pod1 example-pod2</p><p>分别指定多个资源类型：TYPE1&#x2F;name1 TYPE1&#x2F;name2 TYPE2&#x2F;name3 TYPE&lt;#&gt;&#x2F;name&lt;#&gt;。<br>例子：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">kubectl <span class="hljs-built_in">get</span> pod/<span class="hljs-built_in">example</span>-pod1 replicationcontroller/<span class="hljs-built_in">example</span>-rc1<br></code></pre></td></tr></table></figure><p>用一个或多个文件指定资源：-f file1 -f file2 -f file&lt;#&gt;</p><p>使用 YAML 而不是 JSON， 因为 YAML 对用户更友好, 特别是对于配置文件。<br>例子：kubectl get -f .&#x2F;pod.yaml</p><p>flags： 指定可选的参数。例如，可以使用 -s 或 –server 参数指定 Kubernetes API 服务器的地址和端口。<br>注意： 从命令行指定的参数会覆盖默认值和任何相应的环境变量。<br>如果你需要帮助，在终端窗口中运行 kubectl help。</p><h2 id="集群内身份验证和命名空间覆盖"><a href="#集群内身份验证和命名空间覆盖" class="headerlink" title="集群内身份验证和命名空间覆盖"></a>集群内身份验证和命名空间覆盖</h2><p>默认情况下，kubectl 命令首先确定它是否在 Pod 中运行，从而被视为在集群中运行。 它首先检查 KUBERNETES_SERVICE_HOST 和 KUBERNETES_SERVICE_PORT 环境变量以及 &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;token 中是否存在服务帐户令牌文件。 如果三个条件都被满足，则假定在集群内进行身份验证。</p><p>为保持向后兼容性，如果在集群内身份验证期间设置了 POD_NAMESPACE 环境变量，它将覆盖服务帐户令牌中的默认命名空间。 任何依赖默认命名空间的清单或工具都会受到影响。</p><p>POD_NAMESPACE 环境变量</p><p>如果设置了 POD_NAMESPACE 环境变量，对命名空间资源的 CLI 操作对象将使用该变量值作为默认值。 例如，如果该变量设置为 seattle，kubectl get pods 将返回 seattle 命名空间中的 Pod。 这是因为 Pod 是一个命名空间资源，且命令中没有提供命名空间。</p><p>直接使用 –namespace <value> 会覆盖此行为。</p><p>kubectl 如何处理 ServiceAccount 令牌</p><p>假设：</p><p>有 Kubernetes 服务帐户令牌文件挂载在 &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;token 上，并且<br>设置了 KUBERNETES_SERVICE_HOST 环境变量，并且<br>设置了 KUBERNETES_SERVICE_PORT 环境变量，并且<br>你没有在 kubectl 命令行上明确指定命名空间。<br>然后 kubectl 假定它正在你的集群中运行。 kubectl 工具查找该 ServiceAccount 的命名空间 （该命名空间与 Pod 的命名空间相同）并针对该命名空间进行操作。 这与集群外运行的情况不同； 当 kubectl 在集群外运行并且你没有指定命名空间时， kubectl 命令会针对 default 命名空间进行操作。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>下表包含所有 kubectl 操作的简短描述和普通语法：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs coq">操作语法描述<br>alphakubectl alpha SUBCOMMAND [flags]列出与 alpha 特性对应的可用命令，这些特性在 Kubernetes 集群中默认情况下是不启用的。<br>annotatekubectl annotate (-f FILENAME | <span class="hljs-type">TYPE</span> NAME | <span class="hljs-type">TYPE</span>/NAME) KEY_1=VAL_1 ... KEY_N=VAL_N [--overwrite] [--all] [--resource-version=version] [flags]添加或更新一个或多个资源的注解。<br>api-resourceskubectl api-resources [flags]列出可用的 API 资源。<br>api-versionskubectl api-versions [flags]列出可用的 API 版本。<br><span class="hljs-built_in">apply</span> | <span class="hljs-type">kubectl</span> <span class="hljs-built_in">apply</span> -f FILENAME [flags]| <span class="hljs-type">从文件或 stdin</span> 对资源应用配置更改。 attach | <span class="hljs-type">kubectl</span> attach POD -c CONTAINER [-i] [-t] [flags] | <span class="hljs-type">挂接到正在运行的容器，查看输出流或与容器（stdin</span>）交互。 auth | <span class="hljs-type">kubectl</span> auth [flags] [options] | <span class="hljs-type">检查授权。 autoscale</span> | <span class="hljs-type">kubectl</span> autoscale (-f FILENAME | <span class="hljs-type">TYPE</span> NAME | <span class="hljs-type">TYPE</span>/NAME) [--min=MINPODS] --max=MAXPODS [--cpu-percent=CPU] [flags] | <span class="hljs-type">自动扩缩由副本控制器管理的一组 pod</span>。 certificate | <span class="hljs-type">kubectl</span> certificate SUBCOMMAND [options] | <span class="hljs-type">修改证书资源。 cluster</span>-info | <span class="hljs-type">kubectl</span> cluster-info [flags] | <span class="hljs-type">显示有关集群中主服务器和服务的端口信息。 completion</span> | <span class="hljs-type">kubectl</span> completion SHELL [options] | <span class="hljs-type">为指定的 Shell</span>（Bash 或 Zsh）输出 Shell 补齐代码。 config | <span class="hljs-type">kubectl</span> config SUBCOMMAND [flags] | <span class="hljs-type">修改 kubeconfig</span> 文件。有关详细信息，请参阅各个子命令。<br><br>convert | <span class="hljs-type">kubectl</span> convert -f FILENAME [options] | <span class="hljs-type">在不同的 API</span> 版本之间转换配置文件。配置文件可以是 YAML 或 JSON 格式。注意 - 需要安装 kubectl-convert 插件。 cordon | <span class="hljs-type">kubectl</span> cordon NODE [options] | <span class="hljs-type">将节点标记为不可调度。 cp</span> | <span class="hljs-type">kubectl</span> cp &lt;file-spec-src&gt; &lt;file-spec-dest&gt; [options] | <span class="hljs-type">从容器复制文件、目录或将文件、目录复制到容器。 create</span> | <span class="hljs-type">kubectl</span> create -f FILENAME [flags] | <span class="hljs-type">从文件或 stdin</span> 创建一个或多个资源。 delete | <span class="hljs-type">kubectl</span> delete (-f FILENAME | <span class="hljs-type">TYPE</span> [NAME | <span class="hljs-type">/NAME</span> | <span class="hljs-type">-l</span> label | <span class="hljs-type">--all</span>]) [flags] | <span class="hljs-type">基于文件、标准输入或通过指定标签选择器、名称、资源选择器或资源本身，删除资源。 describe</span> | <span class="hljs-type">kubectl</span> describe (-f FILENAME | <span class="hljs-type">TYPE</span> [NAME_PREFIX | <span class="hljs-type">/NAME</span> | <span class="hljs-type">-l</span> label]) [flags] | <span class="hljs-type">显示一个或多个资源的详细状态。 diff</span> | <span class="hljs-type">kubectl</span> diff -f FILENAME [flags]| <span class="hljs-type">在当前起作用的配置和文件或标准输之间作对比 (BETA</span>)<br><br>drain | <span class="hljs-type">kubectl</span> drain NODE [options] | <span class="hljs-type">腾空节点以准备维护。 edit</span> | <span class="hljs-type">kubectl</span> edit (-f FILENAME | <span class="hljs-type">TYPE</span> NAME | <span class="hljs-type">TYPE</span>/NAME) [flags] | <span class="hljs-type">使用默认编辑器编辑和更新服务器上一个或多个资源的定义。 exec</span> | <span class="hljs-type">kubectl</span> exec POD [-c CONTAINER] [-i] [-t] [flags] [-- COMMAND [args...]] | <span class="hljs-type">对 Pod</span> 中的容器执行命令。 explain | <span class="hljs-type">kubectl</span> explain [--recursive=false] [flags] | <span class="hljs-type">获取多种资源的文档。例如 Pod</span>、Node、Service 等。 expose | <span class="hljs-type">kubectl</span> expose (-f FILENAME | <span class="hljs-type">TYPE</span> NAME | <span class="hljs-type">TYPE</span>/NAME) [--port=port] [--protocol=TCP|<span class="hljs-type">UDP</span>] [--target-port=number-or-name] [--name=name] [--external-ip=external-ip-of-service] [--type=type] [flags] | <span class="hljs-type">将副本控制器、服务或 Pod</span> 作为新的 Kubernetes 服务暴露。 get | <span class="hljs-type">kubectl</span> get (-f FILENAME | <span class="hljs-type">TYPE</span> [NAME | <span class="hljs-type">/NAME</span> | <span class="hljs-type">-l</span> label]) [--watch] [--sort-<span class="hljs-built_in">by</span>=FIELD] [[-o | <span class="hljs-type">--output</span>]=OUTPUT_FORMAT] [flags] | <span class="hljs-type">列出一个或多个资源。 kustomize</span> | <span class="hljs-type">kubectl</span> kustomize<br><br>[flags] [options]` | <span class="hljs-type">列出从 kustomization</span>.yaml 文件中的指令生成的一组 API 资源。参数必须是包含文件的目录的路径，或者是 git 存储库 URL，其路径后缀相对于存储库根目录指定了相同的路径。<br>label | <span class="hljs-type">kubectl</span> label (-f FILENAME | <span class="hljs-type">TYPE</span> NAME | <span class="hljs-type">TYPE</span>/NAME) KEY_1=VAL_1 ... KEY_N=VAL_N [--overwrite] [--all] [--resource-version=version] [flags] | <span class="hljs-type">添加或更新一个或多个资源的标签。 logs</span> | <span class="hljs-type">kubectl</span> logs POD [-c CONTAINER] [--follow] [flags] | <span class="hljs-type">打印 Pod</span> 中容器的日志。 options | <span class="hljs-type">kubectl</span> options | <span class="hljs-type">全局命令行选项列表，这些选项适用于所有命令。 patch</span> | <span class="hljs-type">kubectl</span> patch (-f FILENAME | <span class="hljs-type">TYPE</span> NAME | <span class="hljs-type">TYPE</span>/NAME) --patch PATCH [flags] | <span class="hljs-type">使用策略合并流程更新资源的一个或多个字段。 plugin</span> | <span class="hljs-type">kubectl</span> plugin [flags] [options] | <span class="hljs-type">提供用于与插件交互的实用程序。 port</span>-forward | <span class="hljs-type">kubectl</span> port-forward POD [LOCAL_PORT:]REMOTE_PORT [...[LOCAL_PORT_N:]REMOTE_PORT_N] [flags] | <span class="hljs-type">将一个或多个本地端口转发到一个 Pod</span>。 proxy | <span class="hljs-type">kubectl</span> proxy [--port=PORT] [--www=static-dir] [--www-prefix=prefix] [--api-prefix=prefix] [flags] | <span class="hljs-type">运行访问 Kubernetes</span> API 服务器的代理。 <span class="hljs-built_in">replace</span> | <span class="hljs-type">kubectl</span> <span class="hljs-built_in">replace</span> -f FILENAME | <span class="hljs-type">基于文件或标准输入替换资源。 rollout</span> | <span class="hljs-type">kubectl</span> rollout SUBCOMMAND [options] | <span class="hljs-type">管理资源的上线。有效的资源类型包括：Deployment</span>、 DaemonSet 和 StatefulSet。 run | <span class="hljs-type">kubectl</span> run NAME --image=image [--env=<span class="hljs-string">&quot;key=value&quot;</span>] [--port=port] [--dry-run=server | <span class="hljs-type">client</span> | <span class="hljs-type">none</span>] [--overrides=inline-json] [flags] | <span class="hljs-type">在集群上运行指定的镜像。</span><br><span class="hljs-type"></span><br><span class="hljs-type">scale</span> | <span class="hljs-type">kubectl</span> scale (-f FILENAME | <span class="hljs-type">TYPE</span> NAME | <span class="hljs-type">TYPE</span>/NAME) --replicas=COUNT [--resource-version=version] [--current-replicas=count] [flags] | <span class="hljs-type">更新指定副本控制器的大小。 set</span> | <span class="hljs-type">kubectl</span> <span class="hljs-built_in">set</span> SUBCOMMAND [options] | <span class="hljs-type">配置应用资源。 taint</span> | <span class="hljs-type">kubectl</span> taint NODE NAME KEY_1=VAL_1:TAINT_EFFECT_1 ... KEY_N=VAL_N:TAINT_EFFECT_N [options] | <span class="hljs-type">更新一个或多个节点上的污点。 top</span> | <span class="hljs-type">kubectl</span> <span class="hljs-built_in">top</span> [flags] [options] | <span class="hljs-type">显示资源（CPU</span>、内存、存储）的使用情况。 uncordon | <span class="hljs-type">kubectl</span> uncordon NODE [options] | <span class="hljs-type">将节点标记为可调度。 version</span> | <span class="hljs-type">kubectl</span> version [--client] [flags] | <span class="hljs-type">显示运行在客户端和服务器上的 Kubernetes</span> 版本。 wait | <span class="hljs-type">kubectl</span> wait ([-f FILENAME] | <span class="hljs-type">resource</span>.group/resource.name | <span class="hljs-type">resource</span>.group [(-l label | <span class="hljs-type">--all</span>)]) [--<span class="hljs-keyword">for</span>=delete|<span class="hljs-type">--for</span> condition=available] [options] | <span class="hljs-type">实验特性：等待一种或多种资源的特定状况。</span><br></code></pre></td></tr></table></figure><p>了解更多有关命令操作的信息， 请参阅 kubectl 参考文档。</p><h2 id="资源类型"><a href="#资源类型" class="headerlink" title="资源类型"></a>资源类型</h2><p>下表列出所有受支持的资源类型及其缩写别名。</p><p>(以下输出可以通过 kubectl api-resources 获取，内容以 Kubernetes 1.19.1 版本为准。)</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs stylus">资源名缩写名API 分组按命名空间资源类型<br>bindingstrueBinding<br>componentstatusescsfalseComponentStatus<br>configmapscmtrueConfigMap<br>endpointseptrueEndpoints<br>eventsevtrueEvent<br>limitrangeslimitstrueLimitRange<br>namespacesnsfalseNamespace<br>nodesnofalseNode<br>persistentvolumeclaimspvctruePersistentVolumeClaim<br>persistentvolumespvfalsePersistentVolume<br>podspotruePod<br>podtemplatestruePodTemplate<br>replicationcontrollersrctrueReplicationController<br>resourcequotasquotatrueResourceQuota<br>secretstrueSecret<br>serviceaccountssatrueServiceAccount<br>servicessvctrueService<br>mutatingwebhookconfigurationsadmissionregistration<span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>falseMutatingWebhookConfiguration<br>validatingwebhookconfigurationsadmissionregistration<span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>falseValidatingWebhookConfiguration<br>customresourcedefinitionscrd,crdsapiextensions<span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>falseCustomResourceDefinition<br>apiservicesapiregistration<span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>falseAPIService<br>controllerrevisionsappstrueControllerRevision<br>daemonsetsdsappstrueDaemonSet<br>deploymentsdeployappstrueDeployment<br>replicasetsrsappstrueReplicaSet<br>statefulsetsstsappstrueStatefulSet<br>tokenreviewsauthentication<span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>falseTokenReview<br>localsubjectaccessreviewsauthorization<span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>trueLocalSubjectAccessReview<br>selfsubjectaccessreviewsauthorization<span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>falseSelfSubjectAccessReview<br>selfsubjectrulesreviewsauthorization<span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>falseSelfSubjectRulesReview<br>subjectaccessreviewsauthorization<span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>falseSubjectAccessReview<br>horizontalpodautoscalershpaautoscalingtrueHorizontalPodAutoscaler<br>cronjobscjbatchtrueCronJob<br>jobsbatchtrueJob<br>certificatesigningrequestscsrcertificates<span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>falseCertificateSigningRequest<br>leasescoordination<span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>trueLease<br>endpointslicesdiscovery<span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>trueEndpointSlice<br>eventsevevents<span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>trueEvent<br>ingressesingextensionstrueIngress<br>flowschemasflowcontrol<span class="hljs-selector-class">.apiserver</span><span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>falseFlowSchema<br>prioritylevelconfigurationsflowcontrol<span class="hljs-selector-class">.apiserver</span><span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>falsePriorityLevelConfiguration<br>ingressclassesnetworking<span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>falseIngressClass<br>ingressesingnetworking<span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>trueIngress<br>networkpoliciesnetpolnetworking<span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>trueNetworkPolicy<br>runtimeclassesnode<span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>falseRuntimeClass<br>poddisruptionbudgetspdbpolicytruePodDisruptionBudget<br>podsecuritypoliciespsppolicyfalsePodSecurityPolicy<br>clusterrolebindingsrbac<span class="hljs-selector-class">.authorization</span><span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>falseClusterRoleBinding<br>clusterrolesrbac<span class="hljs-selector-class">.authorization</span><span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>falseClusterRole<br>rolebindingsrbac<span class="hljs-selector-class">.authorization</span><span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>trueRoleBinding<br>rolesrbac<span class="hljs-selector-class">.authorization</span><span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>trueRole<br>priorityclassespcscheduling<span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>falsePriorityClass<br>csidriversstorage<span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>falseCSIDriver<br>csinodesstorage<span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>falseCSINode<br>storageclassesscstorage<span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>falseStorageClass<br>volumeattachmentsstorage<span class="hljs-selector-class">.k8s</span><span class="hljs-selector-class">.io</span>falseVolumeAttachment<br></code></pre></td></tr></table></figure><h2 id="输出选项"><a href="#输出选项" class="headerlink" title="输出选项"></a>输出选项</h2><p>有关如何格式化或排序某些命令的输出的信息，请参阅以下章节。有关哪些命令支持不同输出选项的详细信息， 请参阅 kubectl 参考文档。</p><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><p>所有 kubectl 命令的默认输出格式都是人类可读的纯文本格式。要以特定格式在终端窗口输出详细信息， 可以将 -o 或 –output 参数添加到受支持的 kubectl 命令中。</p><p>语法<br>kubectl [command] [TYPE] [NAME] -o <output_format><br>取决于具体的 kubectl 操作，支持的输出格式如下：</p><p>输出格式描述<br>-o custom-columns&#x3D;<spec>使用逗号分隔的自定义列列表打印表。<br>-o custom-columns-file&#x3D;<filename>使用 <filename> 文件中的自定义列模板打印表。<br>-o json输出 JSON 格式的 API 对象<br>-o jsonpath&#x3D;<template>打印 jsonpath 表达式定义的字段<br>-o jsonpath-file&#x3D;<filename>打印 <filename> 文件中 jsonpath 表达式定义的字段。<br>-o name仅打印资源名称而不打印任何其他内容。<br>-o wide以纯文本格式输出，包含所有附加信息。对于 Pod 包含节点名。<br>-o yaml输出 YAML 格式的 API 对象。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>在此示例中，以下命令将单个 Pod 的详细信息输出为 YAML 格式的对象：</p><p>kubectl get pod web-pod-13je7 -o yaml<br>请记住：有关每个命令支持哪种输出格式的详细信息， 请参阅 kubectl 参考文档。</p><p>自定义列<br>要定义自定义列并仅将所需的详细信息输出到表中，可以使用 custom-columns 选项。 你可以选择内联定义自定义列或使用模板文件：-o custom-columns&#x3D;<spec> 或 -o custom-columns-file&#x3D;<filename>。</p><p>示例<br>内联：</p><p>kubectl get pods <pod-name> -o custom-columns&#x3D;NAME:.metadata.name,RSRC:.metadata.resourceVersion<br>模板文件：</p><p>kubectl get pods <pod-name> -o custom-columns-file&#x3D;template.txt<br>其中，template.txt 文件包含：</p><p>NAME          RSRC<br>metadata.name metadata.resourceVersion<br>运行这两个命令之一的结果类似于：</p><p>NAME           RSRC<br>submit-queue   610995<br>Server-side 列<br>kubectl 支持从服务器接收关于对象的特定列信息。 这意味着对于任何给定的资源，服务器将返回与该资源相关的列和行，以便客户端打印。 通过让服务器封装打印的细节，这允许在针对同一集群使用的客户端之间提供一致的人类可读输出。</p><p>此功能默认启用。要禁用它，请将该 –server-print&#x3D;false 参数添加到 kubectl get 命令中。</p><p>例子：<br>要打印有关 Pod 状态的信息，请使用如下命令：</p><p>kubectl get pods <pod-name> –server-print&#x3D;false<br>输出类似于：</p><p>NAME       AGE<br>pod-name   1m</p><h3 id="排序列表对象"><a href="#排序列表对象" class="headerlink" title="排序列表对象"></a>排序列表对象</h3><p>要将对象排序后输出到终端窗口，可以将 –sort-by 参数添加到支持的 kubectl 命令。 通过使用 –sort-by 参数指定任何数字或字符串字段来对对象进行排序。 要指定字段，请使用 jsonpath 表达式。</p><p>语法<br>kubectl [command] [TYPE] [NAME] –sort-by&#x3D;<jsonpath_exp></p><p>示例</p><p>要打印按名称排序的 Pod 列表，请运行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> pods <span class="hljs-attribute">--sort-by</span>=.metadata.name<br></code></pre></td></tr></table></figure><h2 id="示例：常用操作"><a href="#示例：常用操作" class="headerlink" title="示例：常用操作"></a>示例：常用操作</h2><p>使用以下示例集来帮助你熟悉运行常用 kubectl 操作：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">kubectl apply - 以文件或标准输入为准应用或更新资源。<br><br># 使用 example-service.yaml 中的定义创建服务。<br>kubectl apply -f example-service.yaml<br><br># 使用 example-controller.yaml 中的定义创建 <span class="hljs-keyword">replication</span> controller。<br>kubectl apply -f example-controller.yaml<br><br># 使用 &lt;directory&gt; 路径下的任意 .yaml、.yml 或 .json 文件 创建对象。<br>kubectl apply -f &lt;directory&gt;<br>kubectl <span class="hljs-keyword">get</span> - 列出一个或多个资源。<br><br># 以纯文本输出格式列出所有 Pod。<br>kubectl <span class="hljs-keyword">get</span> pods<br><br># 以纯文本输出格式列出所有 Pod，并包含附加信息(如节点名)。<br>kubectl <span class="hljs-keyword">get</span> pods -o wide<br><br># 以纯文本输出格式列出具有指定名称的副本控制器。提示：你可以使用别名 <span class="hljs-string">&#x27;rc&#x27;</span> 缩短和替换 <span class="hljs-string">&#x27;replicationcontroller&#x27;</span> 资源类型。<br>kubectl <span class="hljs-keyword">get</span> replicationcontroller &lt;rc-<span class="hljs-type">name</span>&gt;<br><br># 以纯文本输出格式列出所有副本控制器和服务。<br>kubectl <span class="hljs-keyword">get</span> rc,services<br><br># 以纯文本输出格式列出所有守护程序集，包括未初始化的守护程序集。<br>kubectl <span class="hljs-keyword">get</span> ds <span class="hljs-comment">--include-uninitialized</span><br><br># 列出在节点 server01 上运行的所有 Pod<br>kubectl <span class="hljs-keyword">get</span> pods <span class="hljs-comment">--field-selector=spec.nodeName=server01</span><br>kubectl describe - 显示一个或多个资源的详细状态，默认情况下包括未初始化的资源。<br><br># 显示名为 &lt;pod-<span class="hljs-type">name</span>&gt; 的 Pod 的详细信息。<br>kubectl describe nodes &lt;node-<span class="hljs-type">name</span>&gt;<br><br># 显示名为 &lt;pod-<span class="hljs-type">name</span>&gt; 的 Pod 的详细信息。<br>kubectl describe pods/&lt;pod-<span class="hljs-type">name</span>&gt;<br><br># 显示由名为 &lt;rc-<span class="hljs-type">name</span>&gt; 的副本控制器管理的所有 Pod 的详细信息。<br># 记住：副本控制器创建的任何 Pod 都以副本控制器的名称为前缀。<br>kubectl describe pods &lt;rc-<span class="hljs-type">name</span>&gt;<br><br># 描述所有的 Pod<br>kubectl describe pods<br>说明：<br>kubectl <span class="hljs-keyword">get</span> 命令通常用于检索同一资源类别的一个或多个资源。 它具有丰富的参数，允许你使用 -o 或 <span class="hljs-comment">--output 参数自定义输出格式。 你可以指定 -w 或 --watch 参数以开始监测特定对象的更新。 kubectl describe 命令更侧重于描述指定资源的许多相关方面。它可以调用对 API 服务器 的多个 API 调用来为用户构建视图。 例如，该 kubectl describe node 命令不仅检索有关节点的信息，还检索在其上运行的 Pod 的摘要，为节点生成的事件等。</span><br><br>kubectl <span class="hljs-keyword">delete</span> - 基于文件、标准输入或通过指定标签选择器、名称、资源选择器或资源来删除资源。<br><br># 使用 pod.yaml 文件中指定的类型和名称删除 Pod。<br>kubectl <span class="hljs-keyword">delete</span> -f pod.yaml<br><br># 删除所有带有 <span class="hljs-string">&#x27;&lt;label-key&gt;=&lt;label-value&gt;&#x27;</span> 标签的 Pod 和服务。<br>kubectl <span class="hljs-keyword">delete</span> pods,services -l &lt;label-key&gt;=&lt;label-<span class="hljs-keyword">value</span>&gt;<br><br># 删除所有 Pod，包括未初始化的 Pod。<br>kubectl <span class="hljs-keyword">delete</span> pods <span class="hljs-comment">--all</span><br>kubectl exec - 对 Pod 中的容器执行命令。<br><br># 从 Pod &lt;pod-<span class="hljs-type">name</span>&gt; 中获取运行 <span class="hljs-string">&#x27;date&#x27;</span> 的输出。默认情况下，输出来自第一个容器。<br>kubectl exec &lt;pod-<span class="hljs-type">name</span>&gt; <span class="hljs-comment">-- date</span><br><br># 运行输出 <span class="hljs-string">&#x27;date&#x27;</span> 获取在 Pod &lt;pod-<span class="hljs-type">name</span>&gt; 中容器 &lt;container-<span class="hljs-type">name</span>&gt; 的输出。<br>kubectl exec &lt;pod-<span class="hljs-type">name</span>&gt; -c &lt;container-<span class="hljs-type">name</span>&gt; <span class="hljs-comment">-- date</span><br><br># 获取一个交互 TTY 并在 Pod  &lt;pod-<span class="hljs-type">name</span>&gt; 中运行 /bin/bash。默认情况下，输出来自第一个容器。<br>kubectl exec -ti &lt;pod-<span class="hljs-type">name</span>&gt; <span class="hljs-comment">-- /bin/bash</span><br>kubectl logs - 打印 Pod 中容器的日志。<br><br># 返回 Pod &lt;pod-<span class="hljs-type">name</span>&gt; 的日志快照。<br>kubectl logs &lt;pod-<span class="hljs-type">name</span>&gt;<br><br># 从 Pod &lt;pod-<span class="hljs-type">name</span>&gt; 开始流式传输日志。这类似于 <span class="hljs-string">&#x27;tail -f&#x27;</span> Linux 命令。<br>kubectl logs -f &lt;pod-<span class="hljs-type">name</span>&gt;<br>kubectl diff - 查看集群建议更新的差异。<br><br># “pod.json”中包含的差异资源。<br>kubectl diff -f pod.json<br><br># 从标准输入读取的差异文件。<br>cat service.yaml | kubectl diff -f -<br></code></pre></td></tr></table></figure><h2 id="示例：创建和使用插件"><a href="#示例：创建和使用插件" class="headerlink" title="示例：创建和使用插件"></a>示例：创建和使用插件</h2><p>使用以下示例来帮助你熟悉编写和使用 kubectl 插件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 用任何语言创建一个简单的插件，并为生成的可执行文件命名</span><br><span class="hljs-comment"># 以前缀 &quot;kubectl-&quot; 开始</span><br>cat ./kubectl-hello<br><span class="hljs-comment">#!/bin/sh</span><br><br><span class="hljs-comment"># 这个插件打印单词 &quot;hello world&quot;</span><br>echo <span class="hljs-string">&quot;hello world&quot;</span><br>这个插件写好了，把它变成可执行的：<br><br><br>sudo chmod a+x ./kubectl-hello<br><br><span class="hljs-comment"># 并将其移动到路径中的某个位置</span><br>sudo mv .<span class="hljs-regexp">/kubectl-hello /u</span>sr<span class="hljs-regexp">/local/</span>bin<br>sudo chown root:root <span class="hljs-regexp">/usr/</span>local/bin<br><br><span class="hljs-comment"># 你现在已经创建并&quot;安装了&quot;一个 kubectl 插件。</span><br><span class="hljs-comment"># 你可以开始使用这个插件，从 kubectl 调用它，就像它是一个常规命令一样</span><br>kubectl hello<br>hello world<br><span class="hljs-comment"># 你可以&quot;卸载&quot;一个插件，只需从你的 $PATH 中删除它</span><br>sudo rm <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>kubectl-hello<br>为了查看可用的所有 kubectl 插件，你可以使用 kubectl plugin list 子命令：<br><br>kubectl plugin list<br>输出类似于：<br><br>The following kubectl-compatible plugins are available:<br><br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>kubectl-hello<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>kubectl-foo<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>kubectl-bar<br>kubectl plugin list 指令也可以向你告警哪些插件被运行，或是被其它插件覆盖了，例如：<br></code></pre></td></tr></table></figure><p>sudo chmod -x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;kubectl-foo # 删除执行权限<br>kubectl plugin list<br>The following kubectl-compatible plugins are available:</p><p>&#x2F;usr&#x2F;local&#x2F;bin&#x2F;kubectl-hello<br>&#x2F;usr&#x2F;local&#x2F;bin&#x2F;kubectl-foo</p><ul><li>warning: &#x2F;usr&#x2F;local&#x2F;bin&#x2F;kubectl-foo identified as a plugin, but it is not executable<br>&#x2F;usr&#x2F;local&#x2F;bin&#x2F;kubectl-bar</li></ul><p>error: one plugin warning was found</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">你可以将插件视为在现有 kubectl 命令之上构建更复杂功能的一种方法：</span><br><span class="language-xml"></span><br><span class="language-xml">cat ./kubectl-whoami</span><br><span class="language-xml">## 接下来的几个示例假设你已经将 kubectl-whoami 设置为以下内容：</span><br><span class="language-xml"></span><br><span class="language-xml">#!/bin/bash</span><br><span class="language-xml"></span><br><span class="language-xml">#这个插件利用 `kubectl config` 命令基于当前所选上下文输出当前用户的信息</span><br><span class="language-xml">kubectl config view --template=&#x27;</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">range</span> .contexts &#125;&#125;</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name"><span class="hljs-built_in">if</span></span> eq .name <span class="hljs-string">&quot;&#x27;$(kubectl config current-context)&#x27;&quot;</span> &#125;&#125;</span><span class="language-xml">Current user: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">printf</span> <span class="hljs-string">&quot;%s\n&quot;</span> .context.user &#125;&#125;</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">end</span> &#125;&#125;</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">end</span> &#125;&#125;</span><span class="language-xml">&#x27;</span><br><span class="language-xml">运行以上命令将为你提供一个输出，其中包含 KUBECONFIG 文件中当前上下文的用户：</span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># 使文件成为可执行的</span><br>sudo <span class="hljs-built_in">chmod</span> +x ./kubectl-whoami<br><br><span class="hljs-comment"># 然后移动到你的路径中</span><br><br>sudo <span class="hljs-built_in">mv</span> ./kubectl-whoami /usr/local/bin<br><br>kubectl <span class="hljs-built_in">whoami</span><br>Current user: plugins-user<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker 网络</title>
    <link href="/2022/07/14/docker%20%E7%BD%91%E7%BB%9C/"/>
    <url>/2022/07/14/docker%20%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="docker-网络"><a href="#docker-网络" class="headerlink" title="docker 网络"></a>docker 网络</h1><h2 id="1-Docker-网络理论"><a href="#1-Docker-网络理论" class="headerlink" title="1. Docker 网络理论"></a>1. Docker 网络理论</h2><p>容器网络实质上是由 Dokcer 为应用程序所创造的虚拟环境的一部分，它能让应用从宿主机操作系统的网络环境中独立出来，形成容器自有的网络设备、IP 协议栈、端口套接字、IP 路由表、防火墙等等与网络相关的模块。</p><p>Docker 为实现容器网络，主要采用的架构由三部分组成：CNM、Libnetwork 和驱动。</p><h3 id="1-1-CNM"><a href="#1-1-CNM" class="headerlink" title="1.1. CNM"></a>1.1. CNM</h3><p>Docker 网络架构采用的设计规范是 CNM（Container Network Model）：CNM 中规定了 Docker 网络的基础组成要素：Sandbox、Endpoint、Network。如图所示，</p><p><img src="/images/pasted-8.png" alt="upload successful"></p><ul><li>Sandbox，提供了容器的虚拟网络栈，也即端口套接字、IP 路由表、防火墙、DNS 配置等内容。主要用于隔离容器网络与宿主机网络，形成了完全独立的容器网络环境。</li><li>Network，Docker 内部的虚拟子网，网络内的参与者相互可见并能够进行通讯。Docker 的虚拟网路和宿主机网络是存在隔离关系的，其目的主要是形成容器间的安全通讯环境。</li><li>Endpoint，就是虚拟网络的接口，就像普通网络接口一样，Endpoint 的主要职责是负责创建连接。在 CNM 中，终端负责将沙盒连接到网络。个人理解：Endpoint 与常见的网络适配器类似，也就意味着 Endpoint 只能接入某一个网络。因此，如果容器需要接入到多个网络，就需要多个 Endpoint。</li></ul><blockquote><p>★</p><p>如上图所示（我们将图中的三个容器从左到右依次标记为 1、2、3），那么容器 2 有两个 endpoint 并且分别接入 NetworkdA 和 NetworkB。那么容器 1 和容器 2 是可以实现通信的，因为都接入了 NetworkA。但是容器 3 和容器 1，以及容器 2 的两个 Endpoint 之间是不能通信的，除非有三层路由器的支持。</p><p>”</p></blockquote><h3 id="1-2-Libnetwork"><a href="#1-2-Libnetwork" class="headerlink" title="1.2. Libnetwork"></a>1.2. Libnetwork</h3><p>Libnetwork 是 CNM 的标准实现。Libnetwork 是开源库，采用 Go 语言编写（跨平台的），也是 Docker 所使用的库，Docker 网络架构的核心代码都在这个库中。Libnetwork 实现了 CNM 中定义的全部三个组件，此外它还实现了本地服务发现、基于 Ingress 的容器负载均衡，以及网络控制层和管理层功能。</p><h3 id="1-3-驱动"><a href="#1-3-驱动" class="headerlink" title="1.3. 驱动"></a>1.3. 驱动</h3><p>如果说 Libnetwork 实现了控制层和管理层功能，那么驱动就负责实现数据层。比如网络的连通性和隔离性是由驱动来处理的。驱动通过实现特定网络类型的方式扩展了 Docker 网络栈，例如桥接网络和覆盖网络。</p><p>Docker 内置了若干驱动，通常被称作原生驱动或者本地驱动。比如 Bridge Driver、Host Driver、Overlay Driver、MacLan Driver、None Driver 等等。第三方也可以编写 Docker 网络驱动，这些驱动被叫做远程驱动，例如 Calico、Contiv、Kuryr 以及 Weave 等。每个驱动负责创建其上所有网络资源的创建和管理。</p><p>其中 Bridge 和 Overlay 在开发过程中使用频率较高。</p><ul><li>Bridge，Docker 容器的默认网络驱动，通过网桥来实现网络通讯。</li><li>Overlay，借助 Docker 集群模块 Docker Swarm 搭建的跨 Docker Daemon 网络。通过它可以搭建跨物理网络主机的虚拟网络，进而让不同物理机中运行的容器感知不到多个物理机的存在。</li></ul><p><img src="/images/pasted-9.png" alt="upload successful"></p><p>在 Docker 安装时，会自动安装一块 Docker 网卡称为 docker0，用于 Docker 各容器及宿主机的网络通信。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker0</span>   Link encap:Ethernet  HWaddr <span class="hljs-number">02</span>:<span class="hljs-number">42</span>:be:<span class="hljs-number">6</span>b:<span class="hljs-number">61</span>:dc<br>          <span class="hljs-attribute">inet</span> addr:<span class="hljs-number">172.17.0.1</span>  Bcast:<span class="hljs-number">172.17.255.255</span>  Mask:<span class="hljs-number">255.255.0.0</span><br>          <span class="hljs-attribute">inet6</span> addr: fe80::<span class="hljs-number">42</span>:beff:fe6b:<span class="hljs-number">61</span>dc/<span class="hljs-number">64</span> Scope:Link<br>          <span class="hljs-attribute">UP</span> BROADCAST RUNNING MULTICAST  MTU:<span class="hljs-number">1500</span>  Metric:<span class="hljs-number">1</span><br>          <span class="hljs-attribute">RX</span> packets:<span class="hljs-number">0</span> errors:<span class="hljs-number">0</span> dropped:<span class="hljs-number">0</span> overruns:<span class="hljs-number">0</span> frame:<span class="hljs-number">0</span><br>          <span class="hljs-attribute">TX</span> packets:<span class="hljs-number">332</span> errors:<span class="hljs-number">0</span> dropped:<span class="hljs-number">0</span> overruns:<span class="hljs-number">0</span> carrier:<span class="hljs-number">0</span><br>          <span class="hljs-attribute">collisions</span>:<span class="hljs-number">0</span> txqueuelen:<span class="hljs-number">0</span><br>          <span class="hljs-attribute">RX</span> bytes:<span class="hljs-number">0</span> (<span class="hljs-number">0</span>.<span class="hljs-number">0</span> B)  TX bytes:<span class="hljs-number">30787</span> (<span class="hljs-number">30</span>.<span class="hljs-number">7</span> KB)<br></code></pre></td></tr></table></figure><blockquote><p>★</p><p>个人理解：CNM 就是一个设计文档，指导你怎么去实现容器网络，而 Libnetwork 和驱动则是其具体实现，从而确保容器网络的通信。</p><p>”</p></blockquote><h2 id="2-桥接网络"><a href="#2-桥接网络" class="headerlink" title="2. 桥接网络"></a>2. 桥接网络</h2><p>Docker 的 bridge 网络采用内置的 bridge 驱动，而 bridge 的底层采用的是 Linux 内核中 Linux bridge 技术（这意味着 bridge 是高性能并且是非常稳定的）。</p><p>那么 Linux 内核中 Linux bridge 应用于容器的话，到底是一个什么样的拓扑图呢？如图所示（这个拓扑关系不清楚接下去的很多东西难以理解，所以先贴出采用 bridge 之后的一个拓扑图），由于容器运行在自己单独的 network namespace 中，所以有单独的协议栈。容器中配置网关为 172.17.0.1，发出去的数据包先到达 br0，然后交给主机的协议栈，由于目的 IP 是外网 IP，且主机会开启 IP forward 功能，于是数据包通过主机的 eth0 发出去。由于 172.17.0.1 是内网 IP ，所以一般发出去之前会做 NAT 转换。由于要进过主机的协议栈并且要做 NAT 转换，所以性能上可能会差点，但是优点就是容器处于内网中，安全性相对要高点。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/kD0fSwqpCGz8CTmzyfWy1Ex9Rhqr2UD15GtLiaXMZWEu60JYDuZmqd15btLUckgrVicgZLt61cOktRtehWqka3tw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>默认情况下，创建的容器在没有使用 –network 参数指定要加入的 docker 网络时，默认都是加入 Docker 默认的单机桥接网络，也就是下面的 name 为 bridge 的网络。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ docker<span class="hljs-built_in"> network </span>ls<span class="hljs-built_in"></span><br><span class="hljs-built_in">NETWORK </span>ID          NAME                DRIVER              SCOPE<br>0dda6f303b8b       <span class="hljs-built_in"> bridge </span>            <span class="hljs-built_in"> bridge </span>             local<br></code></pre></td></tr></table></figure><p>而默认的 bridge 网络是被映射到内核中为 docker0 的网桥上。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pf">$ ip link show docker0<br><span class="hljs-number">4</span>: docker0: <span class="hljs-variable">&lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt;</span> mtu <span class="hljs-number">1500</span> qdisc noqueue <span class="hljs-keyword">state</span> DOWN mode DEFAULT <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span><br>    link/ether <span class="hljs-number">02</span>::::: brd ff:ff:ff:ff:ff:ff<br><br>$ docker network inspect bridge | grep bridge.name<br>            <span class="hljs-string">&quot;com.docker.network.bridge.name&quot;</span>: <span class="hljs-string">&quot;docker0&quot;</span>,<br></code></pre></td></tr></table></figure><p>Docker 默认的 bridge 网络和 Linux 内核中的 “docker0” 网桥是一个对应关系，如图所示。bridge 是 Docker 中对网络的命名，而 docker0 是内核中网桥的名字。（个人理解：你就可以把 bridge 和 docker0 当成 Linux 网桥的两个名字，两个都是代表同一个东西。docker 为了管理网络，又给 docker0 这个网桥取名为 bridge）。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/kD0fSwqpCGz8CTmzyfWy1Ex9Rhqr2UD1Tj8g9LlLWYqpEHQ6VT0Kic5Wibb9CmlNcQhFs10QzicuvSorlricwabVqw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>那么，容器在没有指定要加入的网络情况下，都是加入这个网络的，假如之后的拓扑图跟前面的一样。另外，单机桥接网络中的容器想要对外发布服务的话，需要依赖于端口映射，这也是为啥我们在启动容器的时候需要指定端口映射关系 的原因。</p><p>下面我们通过创建一个新的 Docker 桥接网络来阐述容器内部的通信、端口映射等情况。</p><h3 id="2-1-创建新的单机桥接网络"><a href="#2-1-创建新的单机桥接网络" class="headerlink" title="2.1. 创建新的单机桥接网络"></a>2.1. 创建新的单机桥接网络</h3><p>使用 <code>docker network create</code> 命令，我们可创建一个名为 “localnet” 的单机桥接网络，并且在内核中还会多出一个新的 Linux 网桥。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ docker<span class="hljs-built_in"> network </span>create -d<span class="hljs-built_in"> bridge </span>localnet<br><br>$ docker<span class="hljs-built_in"> network </span>ls<span class="hljs-built_in"></span><br><span class="hljs-built_in">NETWORK </span>ID          NAME                DRIVER              SCOPE<br><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><br>f55943e20201        localnet           <span class="hljs-built_in"> bridge </span>             local<br></code></pre></td></tr></table></figure><p>在创建完之后，我们可以通过 brctl 工具来查看系统中的 Linux 网桥。可以看到，输出的内容中包含了两个网桥，docker0 是默认的 Docker bridge 网络所使用的网桥，br-f55943e20201 是 Docker localnet 网络所使用的网桥。这两个网桥目前都没有任何设备接入（看 interface 列）。这两个网桥所处的网段是不同的，一个是 172.18.0.1，另一个则是 172.17.0.1。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">$ <span class="hljs-keyword">brctl </span><span class="hljs-keyword">show</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">bridge </span>name     <span class="hljs-keyword">bridge </span>id               STP enabled     interfaces<br><span class="hljs-keyword">br-f55943e20201 </span><span class="hljs-number">8000</span>.<span class="hljs-number">02421</span>d9aa3e1       no<br>docker0         <span class="hljs-number">8000</span>.<span class="hljs-number">0242</span>be<span class="hljs-symbol">6b</span>61dc       no<br><br>$ ifconfig<br><span class="hljs-keyword">br-f55943e20201 </span>Link encap:Ethernet  HWaddr <span class="hljs-number">02</span>:<span class="hljs-number">42</span>:<span class="hljs-number">1</span>d:<span class="hljs-number">9</span>a:<span class="hljs-built_in">a3</span>:e1<br>          inet <span class="hljs-keyword">addr:172.18.0.1 </span> <span class="hljs-keyword">Bcast:172.18.255.255 </span> Mask:<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br>......<br>docker0   Link encap:Ethernet  HWaddr <span class="hljs-number">02</span>:<span class="hljs-number">42</span>:<span class="hljs-keyword">be:6b:61:dc</span><br><span class="hljs-keyword"></span>          inet <span class="hljs-keyword">addr:172.17.0.1 </span> <span class="hljs-keyword">Bcast:172.17.255.255 </span> Mask:<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br>......<br></code></pre></td></tr></table></figure><p><img src="/images/pasted-10.png" alt="upload successful"></p><h3 id="2-2-同个网络中的容器间通信"><a href="#2-2-同个网络中的容器间通信" class="headerlink" title="2.2. 同个网络中的容器间通信"></a>2.2. 同个网络中的容器间通信</h3><p>使用下面这条命令即可运行一个新的容器，并且让这个新容器加入到 localnet 这个网络中的。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ docker container <span class="hljs-built_in">run</span> -d <span class="hljs-comment">--name demo1 --network localnet alpine sleep 3600</span><br></code></pre></td></tr></table></figure><p>我们查看网桥的情况，demo1 的网络接口连接到了网桥 br-f55943e20201 上，如图所示。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">$ <span class="hljs-keyword">brctl </span><span class="hljs-keyword">show</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">bridge </span>name     <span class="hljs-keyword">bridge </span>id               STP enabled     interfaces<br><span class="hljs-keyword">br-f55943e20201 </span><span class="hljs-number">8000</span>.<span class="hljs-number">02421</span>d9aa3e1       no              vethf6a<span class="hljs-symbol">3f</span>ba<br>docker0         <span class="hljs-number">8000</span>.<span class="hljs-number">0242</span>be<span class="hljs-symbol">6b</span>61dc       no<br></code></pre></td></tr></table></figure><p><img src="/images/pasted-11.png" alt="upload successful"></p><p>如果在相同的网络中继续接入新的容器，那么新接入的容器是可以通过 demo1 这个名称来 ping 通的。如下所示，我们创建了一个新的容器（demo2），并且在这个容器中直接 ping demo1 发现可以的 ping 通的。这是因为，demo2 运行了一个本地 DNS 解析器，该解析器会将该请求转发到 Docker 内部 DNS 服务器中。DNS 服务器中记录了容器启动时通过 –name 或者 –net-alias 参数指定的名称和容器之间的和映射关系。</p><p>之外，我们可以看到 demo1 的 IP 地址是 172.18.0.2，这个与网桥 br-f55943e20201 是处于同一个网段内的。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">/ # ls<br>bin    dev    etc    home   lib    media  mnt    opt    proc   root   <span class="hljs-built_in">run</span>    sbin   srv    sys    tmp    usr    var<br>/ #<span class="hljs-built_in"> ping </span>demo1<span class="hljs-built_in"></span><br><span class="hljs-built_in">PING </span>demo1 (172.18.0.2): 56 data bytes<br>64 bytes <span class="hljs-keyword">from</span> 172.18.0.2: <span class="hljs-attribute">seq</span>=0 <span class="hljs-attribute">ttl</span>=64 <span class="hljs-attribute">time</span>=0.230 ms<br>64 bytes <span class="hljs-keyword">from</span> 172.18.0.2: <span class="hljs-attribute">seq</span>=1 <span class="hljs-attribute">ttl</span>=64 <span class="hljs-attribute">time</span>=0.161 ms<br></code></pre></td></tr></table></figure><p><img src="/images/pasted-12.png" alt="upload successful"></p><blockquote><p>Docker 默认的 bridge 网络是不支持通过 Docker DNS 服务进行域名解析的，自定义桥接网络是可以的。</p><p>”</p></blockquote><h3 id="2-3-暴露端口"><a href="#2-3-暴露端口" class="headerlink" title="2.3. 暴露端口"></a>2.3. 暴露端口</h3><p>同一个网络中的容器之间虽然可以互相 ping 通，但是并不意味着可以任意访问容器中的任何服务。Docker 为容器增加了一套安全机制，只有容器自身允许的端口，才能被其他容器所访问。如下所示，我们可以通过 <code>docker container ls</code> 命令可以看到容器暴露给其他容器访问的端口是 80，那么我们只能容器的 80 端口进行访问，而不能对没有开放的 22 端口进行访问。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs lasso">$ docker container ls<br>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES<br><span class="hljs-number">5</span>a8dece3841d        nginx               <span class="hljs-string">&quot;/docker-entrypoint.…&quot;</span>   <span class="hljs-number">3</span> minutes ago       Up <span class="hljs-number">3</span> minutes        <span class="hljs-number">80</span>/tcp              web<br><br>$ telnet <span class="hljs-number">172.18</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span> <span class="hljs-number">80</span><br>Trying <span class="hljs-number">172.18</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span><span class="hljs-params">...</span><br>Connected <span class="hljs-keyword">to</span> <span class="hljs-number">172.18</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span>.<br>Escape character is <span class="hljs-string">&#x27;^]&#x27;</span>.<br><br>$ telnet <span class="hljs-number">172.18</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span> <span class="hljs-number">20</span><br>Trying <span class="hljs-number">172.18</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span><span class="hljs-params">...</span><br>telnet: Unable <span class="hljs-keyword">to</span> connect <span class="hljs-keyword">to</span> remote host: Connection refused<br></code></pre></td></tr></table></figure><p>我们可以在镜像创建的时候定义要暴露的端口，也可以在容器创建时定义要暴露的端口，使用 –expose。如下所示，就额外暴露了 20、22 这两个端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker container run -d --name web --expose 22 --expose 20 nginx<br><br>$ docker container <span class="hljs-built_in">ls</span><br>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES<br>4749dac32711        nginx               <span class="hljs-string">&quot;/docker-entrypoint.…&quot;</span>   12 seconds ago      Up 10 seconds       20/tcp, 22/tcp, 80/tcp   web<br></code></pre></td></tr></table></figure><p>容器的端口暴露类似于打开了容器的防火墙，具体能不能通过这个端口访问容器中的服务，还得看容器中有无应用监听并处理来自这个端口的请求。</p><h3 id="2-4-端口映射"><a href="#2-4-端口映射" class="headerlink" title="2.4. 端口映射"></a>2.4. 端口映射</h3><p>上面提到的桥接网络中的容器只能与位于相同网络中的容器进行通信，假如一个容器想对外提供服务的话，需要进行端口映射。端口映射将容器的某个端口映射到 Docker 主机端口上。那么任何发送到该端口的流量，都会被转发到容器中。如图所示，容器内部开放端口为 80，该端口被映射到了 Docker 主机的 10.0.0.15 的 5000 端口上。最终访问 10.0.0.15:5000 的所有流量都会被转发到容器的 80 端口。</p><p><img src="/images/pasted-13.png" alt="upload successful"></p><p>如下图所示，假设我们运行了一个新的 web 服务容器，并且将容器 80 端口映射到 Dokcer 主机的 5000 端口。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ docker container run -d <span class="hljs-attr">--name</span> web <span class="hljs-attr">--network</span> localnet -<span class="hljs-selector-tag">p</span> <span class="hljs-number">5000</span>:<span class="hljs-number">80</span> nginx<br></code></pre></td></tr></table></figure><p>那么，当我们通过 web 浏览器访问 Docker 主机的 5000 端口时，会得到如图所示的结果。外部系统可以通过访问 Docker 主机的 TCP 端口 5000，来访问运行在桥接网络上的 Nginx 容器了。</p><p>端口映射之后，假如主机的 5000 端口被占用了，那么其他容器就不能再使用这个端口了。</p><p><img src="/images/pasted-14.png" alt="upload successful"></p><h2 id="3-相关命令"><a href="#3-相关命令" class="headerlink" title="3. 相关命令"></a>3. 相关命令</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 列出运行在本地 docker 主机上的全部网络</span><br>docker<span class="hljs-built_in"> network </span>ls<br><br><span class="hljs-comment"># 提供 Docker 网络的详细配置信息</span><br>docker<span class="hljs-built_in"> network </span>inspect &lt;NETWORK_NAME&gt;<br><br><span class="hljs-comment"># 创建新的单机桥接网络，名为 localnet，其中 -d 不指定的话，默认是 bridge 驱动。并且主机内核中也会创建一个新的网桥。</span><br>docker<span class="hljs-built_in"> network </span>create -d<span class="hljs-built_in"> bridge </span>localnet<br><br><span class="hljs-comment"># 删除 Docker 主机上指定的网络</span><br>docker<span class="hljs-built_in"> network </span>rm<br><br><span class="hljs-comment"># 删除主机上全部未使用的网络</span><br>docker<span class="hljs-built_in"> network </span>prune<br><br><span class="hljs-comment"># 运行一个新的容器，并且让这个容器加入 Docker 的 localnet 这个网络中</span><br>docker container <span class="hljs-built_in">run</span> -d --name demo1 --network localnet alpine sleep 3600<br><br><span class="hljs-comment"># 运行一个新的容器，并且让这个容器暴露 22、20 两个端口</span><br>docker container <span class="hljs-built_in">run</span> -d --name web --expose 22 --expose 20 nginx<br><br><span class="hljs-comment"># 运行一个新的容器，并且将这个容器的 80 端口映射到主机的 5000 端口</span><br>docker container <span class="hljs-built_in">run</span> -d --name web --network localnet -p 5000:80 nginx<br><br><span class="hljs-comment"># 查看系统中的网桥</span><br>brctl show<br></code></pre></td></tr></table></figure><h2 id="4-巨人的肩膀"><a href="#4-巨人的肩膀" class="headerlink" title="4. 巨人的肩膀"></a>4. 巨人的肩膀</h2><p>\1. <a href="https://zhuanlan.zhihu.com/p/57203485">https://zhuanlan.zhihu.com/p/57203485</a></p><p>\2. <a href="https://segmentfault.com/a/1190000009491002">https://segmentfault.com/a/1190000009491002</a></p><p>\3. <a href="http://blog.nsfocus.net/linux-bridge/">http://blog.nsfocus.net/linux-bridge/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>win10修改静态路由</title>
    <link href="/2022/07/14/win10%E4%BF%AE%E6%94%B9%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1/"/>
    <url>/2022/07/14/win10%E4%BF%AE%E6%94%B9%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<h1 id="win10修改静态路由"><a href="#win10修改静态路由" class="headerlink" title="win10修改静态路由"></a>win10修改静态路由</h1><h2 id="添加静态路由"><a href="#添加静态路由" class="headerlink" title="添加静态路由"></a>添加静态路由</h2><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bat">route ADD <span class="hljs-number">160</span>.<span class="hljs-number">180</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> MASK <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">172</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">254</span><br><br>route ADD <span class="hljs-number">160</span>.<span class="hljs-number">180</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> MASK <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">160</span>.<span class="hljs-number">180</span>.<span class="hljs-number">3</span>.<span class="hljs-number">254</span> METRIC <span class="hljs-number">5</span> <br>route ADD <span class="hljs-number">160</span>.<span class="hljs-number">181</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> MASK <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">160</span>.<span class="hljs-number">180</span>.<span class="hljs-number">3</span>.<span class="hljs-number">254</span> METRIC <span class="hljs-number">5</span> <br></code></pre></td></tr></table></figure><h2 id="删除默认路由"><a href="#删除默认路由" class="headerlink" title="删除默认路由"></a>删除默认路由</h2><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bat">route delete <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="永久路由添加-P参数"><a href="#永久路由添加-P参数" class="headerlink" title="永久路由添加 -P参数"></a>永久路由添加 -P参数</h2><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bat">route ADD  -p  <span class="hljs-number">160</span>.<span class="hljs-number">180</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> MASK <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">172</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">254</span><br>route ADD  -p  <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> MASK <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">172</span>.<span class="hljs-number">16</span>.<span class="hljs-number">9</span>.<span class="hljs-number">254</span><br>route ADD  -p  <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> MASK <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">172</span>.<span class="hljs-number">16</span>.<span class="hljs-number">9</span>.<span class="hljs-number">254</span><br>route ADD  -p  <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> MASK <span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">172</span>.<span class="hljs-number">16</span>.<span class="hljs-number">9</span>.<span class="hljs-number">254</span><br>route ADD  -p  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> MASK <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">172</span>.<span class="hljs-number">16</span>.<span class="hljs-number">1</span>.<span class="hljs-number">254</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>systemd 管理node-exporter</title>
    <link href="/2022/07/13/systemd%20%E7%AE%A1%E7%90%86node-exporter/"/>
    <url>/2022/07/13/systemd%20%E7%AE%A1%E7%90%86node-exporter/</url>
    
    <content type="html"><![CDATA[<h1 id="systemd-管理node-exporter"><a href="#systemd-管理node-exporter" class="headerlink" title="systemd 管理node-exporter"></a>systemd 管理node-exporter</h1><h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/prometheus/node_exporter/releases/download/v1.3.1/node_exporter-1.3.1.linux-amd64.tar.gz<br><br>tar xzvf node_exporter-1.3.1.linux-amd64.tar.gz -C /usr/local/services/<br><span class="hljs-built_in">cd</span> /usr/local/services/node_exporter-1.3.1.linux-amd64<br><span class="hljs-built_in">cp</span> node_exporter /usr/local/bin/<br></code></pre></td></tr></table></figure><h1 id="node-exporter-service"><a href="#node-exporter-service" class="headerlink" title="node-exporter.service"></a>node-exporter.service</h1><p>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;node-exporter.service</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=node_exporter<br><span class="hljs-attr">Documentation</span>=https://prometheus.io/<br><span class="hljs-attr">After</span>=network.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">ExecStart</span>=/usr/local/bin/node_exporter<br><span class="hljs-attr">Restart</span>=<span class="hljs-literal">on</span>-failure<br><span class="hljs-attr">RestartSec</span>=<span class="hljs-number">20</span><br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><h1 id="配置服务"><a href="#配置服务" class="headerlink" title="配置服务"></a>配置服务</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl daemon-reload<br>systemctl restart node-exporter<br>systemctl status node-exporter<br>systemctl <span class="hljs-built_in">enable</span> node-exporter<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>麒麟 kylin v10 OOM内存溢出</title>
    <link href="/2022/07/13/%E9%BA%92%E9%BA%9F%20kylin%20v10%20OOM%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/"/>
    <url>/2022/07/13/%E9%BA%92%E9%BA%9F%20kylin%20v10%20OOM%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<p>问题现象<br>麒麟v10系统不停吃系统内存，最后导致宕机</p><p>系统日志还有bfree&#x3D;0 threshod_size&#x3D;75,fs_space_warning&#x3D;1打印</p><p>问题原因<br>系统bug</p><p>解决方法<br>方法1：升级auditd服务<br>方法2：禁用auditd服务 sudo systemctl stop auditd &amp;&amp; sudo systemctl disable auditd</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>防病毒服务器密码</title>
    <link href="/2022/07/13/%E9%98%B2%E7%97%85%E6%AF%92%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AF%86%E7%A0%81/"/>
    <url>/2022/07/13/%E9%98%B2%E7%97%85%E6%AF%92%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>snkjkg#2013</p><p>snkjkg#2013</p><p>scsnkjkg#2013</p><p>administrator</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>选股策略</title>
    <link href="/2022/07/13/%E9%80%89%E8%82%A1%E7%AD%96%E7%95%A5/"/>
    <url>/2022/07/13/%E9%80%89%E8%82%A1%E7%AD%96%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<p>1、大中阳线突破60日均线</p><p>2、优众选优，回调不破均线（1、第一次阴线不破10日均线，2、在大中阳线实体上部三分之一调整。3、三日不破大中阳线），红多绿少</p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20211108105128573.png" alt="image-20211108105128573"></p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20211108105422164.png" alt="image-20211108105422164"></p><h2 id="买入策略"><a href="#买入策略" class="headerlink" title="买入策略"></a>买入策略</h2><p>回调企稳</p><p>回调不破均线</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>选股公式</title>
    <link href="/2022/07/13/%E8%82%A1%E7%A5%A8%E5%85%AC%E5%BC%8F/"/>
    <url>/2022/07/13/%E8%82%A1%E7%A5%A8%E5%85%AC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>MA1 : MA(CLOSE,P1);<br>MA2 : MA(CLOSE,P2);<br>MA3 : MA(CLOSE,P3);<br>MA4 : MA(CLOSE,P4);<br>MA5 : MA(CLOSE,P5);<br>MA6 : MA(CLOSE,P6);<br>MA7 : MA(CLOSE,P7);<br>MA8 : MA(CLOSE,P8);<br>BIAS1 :&#x3D; (CLOSE-MA(CLOSE,5))&#x2F;MA(CLOSE,5)*100;<br>BIAS2 :&#x3D;(CLOSE-MA(CLOSE,10))&#x2F;MA(CLOSE,10)*100;<br>BIAS3 :&#x3D;(CLOSE-MA(CLOSE,20))&#x2F;MA(CLOSE,20)*100;<br>STICKLINE(CLOSE&lt;ref(CLOSE,1),o,c,7,0),COLORCYAN;<br>dy:&#x3D;(ma(c,5)&gt;ma(c,10)),drawnull;<br>dt:BARSLAST(dy&#x3D;0),drawnull;<br>yx:COUNT(CLOSE&lt;ref(CLOSE,1),dt),drawnull;<br>DRAWTEXT(CLOSE&#x2F;OPEN&gt;1.08,LOW,’大阳线’);<br>DRAWTEXT(CLOSE&#x2F;OPEN&gt;1.05 and CLOSE&#x2F;OPEN&lt;1.08,LOW,’中阳线’);</p><p>lqd:&#x3D;ma(c,20)&gt;ma(c,60),drawnull;<br>yx1:&#x3D;c&gt;o;<br>ly:BARSLAST(yx1&#x3D;0),drawnull;<br>DRAWTEXT(ly&gt;5,l<em>1.05,’6连阳’),COLORMAGENTA;<br>DRAWMOVETEXT(ly&gt;5,’6连阳’);<br>STICKLINE(ly&gt;5,c,ref(CLOSE,1),7,0),COLORMAGENTA;<br>nq:BARSLAST(lqd&#x3D;0),drawnull;<br>ztb:&#x3D;c&gt;&#x3D;1.09</em>o,drawnull;<br>60s:&#x3D;c&gt; ma(c,60),drawnull;<br>60st:BARSLAST(60s&#x3D;0),drawnull;<br>ztbtj:count(ztb,60st),COLORCYAN,drawnull;<br>FILLRGN(ma(c,120),ma(c,250),ma(c,120)&gt;ma(c,250),RGB(90,0,0),ma(c,120)&lt;ma(c,250),RGB(0,90,0));<br>tpxg:nq&gt;1 and cross(c,ma(c,10)),drawnull;</p><p>PARTLINE(MA2,MA2&gt;ref(ma2,1),RGB(255,255,0),MA2&lt;&#x3D;ref(ma2,1),RGB(0,255,0))LINETHICK1,drawnull;</p><p>PARTLINE(MA1,MA1&gt;ref(ma1,1),RGB(255,255,255),MA1&lt;&#x3D;ref(ma1,1),RGB(0,255,0))LINETHICK1,drawnull;</p><p>PARTLINE(MA3,MA3&gt;ref(MA3,1),RGB(255,0,255),MA3&lt;&#x3D;ref(MA3,1),RGB(0,255,0))LINETHICK1,drawnull;</p><p>PARTLINE(MA4,MA4&gt;ref(MA4,1),RGB(0,0,255),MA3&lt;&#x3D;ref(MA4,1),RGB(0,255,0))LINETHICK2,drawnull;</p><p>bkname,COLORMAGENTA;</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>记一次centos7.2 文件系统修复</title>
    <link href="/2022/07/13/%E8%AE%B0%E4%B8%80%E6%AC%A1centos7.2%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%BF%AE%E5%A4%8D/"/>
    <url>/2022/07/13/%E8%AE%B0%E4%B8%80%E6%AC%A1centos7.2%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%BF%AE%E5%A4%8D/</url>
    
    <content type="html"><![CDATA[<p>centos 7 系统恢复</p><p>故障描述</p><p>启动之后操作系统只能进入到单用户模式</p><p>使用U盘进入救援模式进行恢复</p><p>选择Troubleshooting</p><p>选择Rescue a Centos system</p><p>选择1 continue<br>但是选择这个之后就一直卡在这里不动，很奇怪不知道怎么回事</p><p>重启系统进入centos 7 单用户模式，于是修改启动项，</p><p>按e进入如下界面，原来是ro 编辑ro 为rw imit&#x3D;&#x2F;sysroot&#x2F;bin&#x2F;sh 完成后直接按ctrl+x</p><p>文件系统修复</p><p>进入单用户模式下，chroot &#x2F;sysroot 报错，使用命令行挂载试试<br>mount –o remount,rw &#x2F;sysroot<br>chroot &#x2F;sysroot</p><p>还是报错，怀疑文件系统有问题，因为centos 7 默认是xfs 文件系统，所以使用xfs 文件的修复工具进行修复。<br>执行xfs 看到我还有三个命令可用</p><p>xfs 相关命令介绍<br>xfs_db 调试或检测xfs 文件系统(查看文件系统碎片等)<br>xfs_metadump 将xfs文件系统的元数据拷贝到<br>xfs_repair 尝试修复受损的xfs 文件系统</p><p>xfs_repair -n &#x2F;dev&#x2F;dm-0 检查不修复<br>因为根分区&#x2F;dev&#x2F;sda1 对应的实际是&#x2F;dev&#x2F;dm-0</p><p>如果是日志和数据不一致了，xfs 默认会在挂载的时候修复这种不一致，操作系统给出的建议是以读写的方式挂载并自动修复，可以尝试以只读不修复方式挂载文件系统。</p><p>mount -o ro,norecovery &#x2F;dev&#x2F;dm-0 &#x2F;data0</p><p>如果不能以读写挂载不成功，可以清除日志再挂载</p><p>xfs_repair -L &#x2F;dev&#x2F;dm-0</p><p>清除日志有风险，可以在操作前将数据备份一下。</p><p>最后冒了一次风险执行<br>xfs_repair -L &#x2F;dev&#x2F;dm-0<br>然后reboot 重启就好了</p><p>造成故障原因：<br>重启设备或者断电造成linux 内核崩溃和系统停止，使xfs 调用堆栈及内核崩溃的。<br>报错如下：</p><p>xfs:xfs_error_report+0xf&#x2F;0x58</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>系统最大打开文件描述符数</title>
    <link href="/2022/07/13/%E7%B3%BB%E7%BB%9F%E6%9C%80%E5%A4%A7%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%E6%95%B0/"/>
    <url>/2022/07/13/%E7%B3%BB%E7%BB%9F%E6%9C%80%E5%A4%A7%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="查看系统的配置"><a href="#查看系统的配置" class="headerlink" title="查看系统的配置"></a>查看系统的配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ulimit</span> -a | grep open<br></code></pre></td></tr></table></figure><h3 id="查看程序服务的打开文件限制"><a href="#查看程序服务的打开文件限制" class="headerlink" title="查看程序服务的打开文件限制"></a>查看程序服务的打开文件限制</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/40636/limits<br></code></pre></td></tr></table></figure><p>查看docker打开文件数限制</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">ansible all -m <span class="hljs-keyword">shell</span><span class="language-bash"> -a <span class="hljs-string">&quot;pid=<span class="hljs-subst">$(pgrep -f dockerd)</span>;grep open /proc/<span class="hljs-subst">$(pgrep -f dockerd)</span>/limits;lsof -p <span class="hljs-subst">$(pgrep -f dockerd)</span> | wc -l&quot;</span></span><br></code></pre></td></tr></table></figure><h3 id="查看程序服务打开文件数"><a href="#查看程序服务打开文件数" class="headerlink" title="查看程序服务打开文件数"></a>查看程序服务打开文件数</h3><p>（连接数）情况，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsof -p 40636 | <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure><p>lsof -p $(ps -ef|grep dockerd|awk ‘NR&#x3D;&#x3D;1{print $2}’) | wc -l</p><h3 id="查看系统最大打开文件描述符数"><a href="#查看系统最大打开文件描述符数" class="headerlink" title="查看系统最大打开文件描述符数:"></a>查看系统最大打开文件描述符数:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> /proc/sys/fs/file-max<br>6553600<br>\<span class="hljs-comment">#3 设置</span><br>$ vim /etc/sysctl.conf<br>fs.file-max = 6553600<br></code></pre></td></tr></table></figure><h3 id="查看某进程的文件打开数"><a href="#查看某进程的文件打开数" class="headerlink" title="查看某进程的文件打开数"></a>查看某进程的文件打开数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc//limits<br><span class="hljs-built_in">ls</span> -lh /proc//fd<br><span class="hljs-built_in">ls</span> -lh /proc//fd|<span class="hljs-built_in">wc</span> -l<br>lsof -p 78757 | <span class="hljs-built_in">wc</span> -l<br><br><br></code></pre></td></tr></table></figure><h3 id="查看文件打开数"><a href="#查看文件打开数" class="headerlink" title="查看文件打开数"></a>查看文件打开数</h3><p>&#x2F;proc&#x2F;sys&#x2F;fs&#x2F;file-nr</p><p>该文件与 file-max 相关，它有三个值：</p><p>已分配文件句柄的数目</p><p>已使用文件句柄的数目</p><p>文件句柄的最大数目</p><p>该文件是只读的，仅用于显示信息。</p><h3 id="查看所有进程的文件打开数"><a href="#查看所有进程的文件打开数" class="headerlink" title="查看所有进程的文件打开数"></a>查看所有进程的文件打开数</h3><p>lsof |wc -l</p><p>查看某个进程打开的文件数</p><p>lsof -p pid |wc -l</p><h3 id="调整"><a href="#调整" class="headerlink" title="调整"></a>调整</h3><hr><p>Linux ulimit命令用于控制shell程序的资源。</p><p>ulimit为shell内建指令，可用来控制shell执行程序的资源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">-a 　显示目前资源限制的设定。<br>-c &lt;core文件上限&gt; 　设定core文件的最大值，单位为区块。<br>-d &lt;数据节区大小&gt; 　程序数据节区的最大值，单位为KB。<br>-f &lt;文件大小&gt; 　shell所能建立的最大文件，单位为区块。<br>-H 　设定资源的硬性限制，也就是管理员所设下的限制。<br>-m &lt;内存大小&gt; 　指定可使用内存的上限，单位为KB。<br>-n &lt;文件数目&gt; 　指定同一时间最多可开启的文件数。<br>-p &lt;缓冲区大小&gt; 　指定管道缓冲区的大小，单位512字节。<br>-s &lt;堆叠大小&gt; 　指定堆叠的上限，单位为KB。<br>-S 　设定资源的弹性限制。<br>-t &lt;CPU时间&gt; 　指定CPU使用时间的上限，单位为秒。<br>-u &lt;程序数目&gt; 　用户最多可开启的程序数目。<br>-v &lt;虚拟内存大小&gt; 　指定可使用的虚拟内存上限，单位为KB。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>生产docker run 卡住没反应故障排查思路</title>
    <link href="/2022/07/13/%E7%94%9F%E4%BA%A7docker%20run%20%E5%8D%A1%E4%BD%8F%E6%B2%A1%E5%8F%8D%E5%BA%94%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E6%80%9D%E8%B7%AF/"/>
    <url>/2022/07/13/%E7%94%9F%E4%BA%A7docker%20run%20%E5%8D%A1%E4%BD%8F%E6%B2%A1%E5%8F%8D%E5%BA%94%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<p>参考文献：<br>docker run hangs问题排查记录<br><a href="https://www.cnblogs.com/edenlong/p/10972876.html">https://www.cnblogs.com/edenlong/p/10972876.html</a><br>阿里巴巴 Kubernetes 集群问题排查思路和方法<br><a href="https://www.infoq.cn/article/t_ZQeWjJLGWGT8BmmiU4">https://www.infoq.cn/article/t_ZQeWjJLGWGT8BmmiU4</a></p><p>1.首先确认docker version一致<br>2.查看&#x2F;var&#x2F;log&#x2F;message日志报错如下<br>The maximum number of pending replies per connection has been reached</p><p>3.排查过程<br>网上搜了下，说是系统为了防止程序占用过多系统资源导致拒绝服务而做的限制。看看&#x2F;etc&#x2F;dbus-1&#x2F;session.conf文件属于哪个包，包含哪些文件<br>rpm -qf &#x2F;etc&#x2F;dbus-1&#x2F;session.conf<br>rpm -ql dbus-1.10.24-12.el7.x86_64</p><p>&#x2F;usr&#x2F;share&#x2F;dbus-1&#x2F;session.conf文件末尾有个max_replies_per_connection参数和报错类似，默认是50000</p><p>我这通过重启dbus解决问题<br>systemctl restart dbus</p><p>最终并没有查到具体哪个参数导致的，不过确实有关联，下次复现这个问题再继续跟踪下</p><p>附：使用strace追踪进程调用链（可能用到）<br>strace docker run –rm image:tag</p><p>故障：到下面卡住了<br>clone(child_stack&#x3D;0x7ff631ffafb0, flags&#x3D;CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tidptr&#x3D;0x7ff631ffb9d0, tls&#x3D;0x7ff631ffb700, child_tidptr&#x3D;0x7ff631ffb9d0) &#x3D; 25759<br>rt_sigprocmask(SIG_SETMASK, [], NULL, 8) &#x3D; 0<br>futex(0x55c38622c0a8, FUTEX_WAIT, 0, NULL) &#x3D; 0</p><p>正常情况<br>clone(child_stack&#x3D;0x7fa86cddffb0, flags&#x3D;CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tidptr&#x3D;0x7fa86cde09d0, tls&#x3D;0x7fa86cde0700, child_tidptr&#x3D;0x7fa86cde09d0) &#x3D; 15449<br>rt_sigprocmask(SIG_S) &#x3D; 40<br>) &#x3D; 4<br>write(2, “\33[K”, 3) &#x3D; 3<br>) &#x3D; 1<br>write(2, “8c5a7da1afbc: “, 148c5a7da1afbc: ) &#x3D; 14<br>ioctl(1, TIOCGWINSZ, {ws_row&#x3D;32, ws_col&#x3D;138, ws_xpixel&#x3D;0, ws_ypixel&#x3D;0}) &#x3D; 0<br>) &#x3D; 18Pulling fs layer \r”, 18Pulling fs layer<br>write(2, “\33[1B”, 4) &#x3D; 4<br>…<br>…<br>+++ exited with 0 +++</p><p>busctl tree<br>可以输出所有 bus 上对外暴露的接口</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>尾盘不能买的票：</title>
    <link href="/2022/07/13/%E5%B0%BE%E7%9B%98%E4%B8%8D%E8%83%BD%E4%B9%B0%E7%9A%84%E7%A5%A8%EF%BC%9A/"/>
    <url>/2022/07/13/%E5%B0%BE%E7%9B%98%E4%B8%8D%E8%83%BD%E4%B9%B0%E7%9A%84%E7%A5%A8%EF%BC%9A/</url>
    
    <content type="html"><![CDATA[<p>1、当天板块领涨，但标的是跟风，第二天分化</p><p>2、尾盘直线拉伸3~7个点的票</p><p>支撑和压力位的6大标准</p><p>价格重合的密集区域，阶段性上涨的一半，资金成本区</p><p>无量反弹继续回落</p><p>第一天赚钱是差价 第二天赚线是先手</p><p>阴线进场点</p><p>1、标的有过涨停</p><p>2、近期10-30标的横盘，不要下跌</p><p>3.热门题材</p><p>4.走势阳线多阴线少</p><p>进场点就是离场点，离场点就是进场点</p><p>优选涨停板后回调不破20日均线的标的</p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20210904101855591.png" alt="image-20210904101855591"></p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20210904102027775.png" alt="image-20210904102027775"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>修改grafana configmap的配置开启Grafana匿名登录</title>
    <link href="/2022/07/13/%E5%BC%80%E5%90%AF%E5%8C%BF%E5%90%8D%E7%99%BB%E5%BD%95/"/>
    <url>/2022/07/13/%E5%BC%80%E5%90%AF%E5%8C%BF%E5%90%8D%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">kubectl -<span class="hljs-keyword">n</span> venus-<span class="hljs-keyword">plugin</span> <span class="hljs-keyword">edit</span> cm grafana-configmap-<span class="hljs-keyword">conf</span> <br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs routeros">要为匿名用户设置登录，需要在defult.ini / grafana.ini文件（Grafana \ conf）中进行这些小配置。<br><br>修改<br>1. 如果要隐藏登录页面，请执行此配置<br> [auth]<br> # <span class="hljs-built_in">Set</span> <span class="hljs-keyword">to</span> <span class="hljs-literal">true</span> <span class="hljs-keyword">to</span> <span class="hljs-built_in">disable</span> (hide) the login form, useful <span class="hljs-keyword">if</span> you use OAuth<br> #disable_login_form = <span class="hljs-literal">false</span> <br> disable_login_form = <span class="hljs-literal">true</span><br>    更改disable_login_form到<span class="hljs-literal">true</span><br>2. 启用匿名访问<br> [auth.anonymous]<br> # <span class="hljs-built_in">enable</span> anonymous access <br>   enabled = <span class="hljs-literal">true</span><br>3.指定组织<br> # specify organization name that should be used <span class="hljs-keyword">for</span> unauthenticated<span class="hljs-built_in"> users</span><br><span class="hljs-built_in"></span> org_name = YOUR_ORG_NAME_HERE       <br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>命令补全</title>
    <link href="/2022/07/13/%E5%91%BD%E4%BB%A4%E8%A1%A5%E5%85%A8/"/>
    <url>/2022/07/13/%E5%91%BD%E4%BB%A4%E8%A1%A5%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<p>source &lt;(kubectl completion bash)</p><p>source &lt;(helm completion bash)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用docker搭建minio集群搭建</title>
    <link href="/2022/07/13/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAminio%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/07/13/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAminio%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p><img src="https://csdnimg.cn/release/blogv2/dist/pc/img/original.png" alt="img"></p><p>工作中需要搭建单独的图像服务器，经过在fastDFS和Minio之间选型，最终选择了Minio，因为是Apache的开源项目，而且实现了Amazon S3协议。以下是搭建的过程，以及可能碰到的坑，做一个备忘：</p><h3 id="第一步，当然是要在虚拟机上安装好docker以及docker-compose。"><a href="#第一步，当然是要在虚拟机上安装好docker以及docker-compose。" class="headerlink" title="第一步，当然是要在虚拟机上安装好docker以及docker-compose。"></a>第一步，当然是要在虚拟机上安装好docker以及docker-compose。</h3><p>1、安装docker比较简单，网络上资料太多，但在Yunos7上面还是会碰到selinux的坑——报错“Error starting daemon: SELinux is not supported with the overlay2 graph driver on this kernel. Either boot into a newer kernel or disabl…nabled&#x3D;false)”，应该是这个Yunos镜像的linux的内核中的SELinux不支持 overlay2 graph driver 。解决方法有两个：</p><p>1）要么启动一个新内核。已经用yum install -y kernel 实践，发现坑很大。升级内核后服务器完全起不来，报“kernel panic - not syncing”错误，所以放弃。</p><p>2）要么就在docker配置文件里面里禁用selinux，–selinux-enabled&#x3D;false。打开&#x2F;etc&#x2F;sysconfig&#x2F;docker 把–selinux-enabled参数设置为false，重新systemctl start docker启动docker服务即可</p><p>3）设置国内镜像。不同linux略有差异。我的是centos，只要在&#x2F;etc&#x2F;docker&#x2F;daemon.json中加入”registry-mirrors”:”<a href="https://registry.docker-cn.com&quot;]”即可。然后“systemctl">https://registry.docker-cn.com&quot;]”即可。然后“systemctl</a> restart docker”。</p><p>2、安装docker compose相对折腾点，网络上有两种方法，一种是直接curl 下载，一种是用pip安装，后一种方法时间长，但比较顺畅。</p><p>1）先从github下载最新版的docker-compose文件 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`<span class="hljs-built_in">uname</span> -s`-`<span class="hljs-built_in">uname</span> -m` -o /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><p>2）如果github太慢，可以从 daocloud下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.1/docker-compose-`<span class="hljs-built_in">uname</span> -s`-`<span class="hljs-built_in">uname</span> -m` -o /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><p>3）添加可执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><h3 id="第二步，可以先起一个单节点的minio试试，具体指令如下："><a href="#第二步，可以先起一个单节点的minio试试，具体指令如下：" class="headerlink" title="第二步，可以先起一个单节点的minio试试，具体指令如下："></a>第二步，可以先起一个单节点的minio试试，具体指令如下：</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run --rm --name myminio -p <span class="hljs-number">9000</span>:<span class="hljs-number">9000</span> -v <span class="hljs-regexp">/home/mi</span>nio<span class="hljs-regexp">/data:/</span>data -v <span class="hljs-regexp">/home/mi</span>nio<span class="hljs-regexp">/config:/</span>root<span class="hljs-regexp">/.minio minio/mi</span>nio server /data<br></code></pre></td></tr></table></figure><p>如果打开浏览器，输入”http:&#x2F;&#x2F;你虚拟机的ip:9000”可以看到minio的登陆界面，说明已经成功。</p><h3 id="第三步，准备minio集群的yml文件，共分4个容器，8个目录。"><a href="#第三步，准备minio集群的yml文件，共分4个容器，8个目录。" class="headerlink" title="第三步，准备minio集群的yml文件，共分4个容器，8个目录。"></a>第三步，准备minio集群的yml文件，共分4个容器，8个目录。</h3><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;3.7&#x27;</span><br><br><br><br> <br><br><br><br><span class="hljs-comment"># starts 4 docker containers running minio server instances. Each</span><br><br><br><br><span class="hljs-comment"># minio server&#x27;s web interface will be accessible on the host at port</span><br><br><br><br><span class="hljs-comment"># 9001 through 9004.</span><br><br><br><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>  <span class="hljs-attribute">minio1</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">minio/minio</span><br><br><br><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data1-1:/data1</span><br><br><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data1-2:/data2</span><br><br><br><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9001:9000&quot;</span><br><br><br><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>      <span class="hljs-attribute">MINIO_ACCESS_KEY</span><span class="hljs-punctuation">:</span> <span class="hljs-string">minioadmin</span><br><br><br><br>      <span class="hljs-attribute">MINIO_SECRET_KEY</span><span class="hljs-punctuation">:</span> <span class="hljs-string">minioadmin</span><br><br><br><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">server http://minio&#123;1...4&#125;/data&#123;1...2&#125;</span><br><br><br><br>    <span class="hljs-attribute">healthcheck</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>      <span class="hljs-attribute">test</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:9000/minio/health/live&quot;]</span><br><br><br><br>      <span class="hljs-attribute">interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">30s</span><br><br><br><br>      <span class="hljs-attribute">timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">20s</span><br><br><br><br>      <span class="hljs-attribute">retries</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3</span><br><br><br><br> <br><br><br><br>  <span class="hljs-attribute">minio2</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">minio/minio</span><br><br><br><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data2-1:/data1</span><br><br><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data2-2:/data2</span><br><br><br><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9002:9000&quot;</span><br><br><br><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>      <span class="hljs-attribute">MINIO_ACCESS_KEY</span><span class="hljs-punctuation">:</span> <span class="hljs-string">minioadmin</span><br><br><br><br>      <span class="hljs-attribute">MINIO_SECRET_KEY</span><span class="hljs-punctuation">:</span> <span class="hljs-string">minioadmin</span><br><br><br><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">server http://minio&#123;1...4&#125;/data&#123;1...2&#125;</span><br><br><br><br>    <span class="hljs-attribute">healthcheck</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>      <span class="hljs-attribute">test</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:9000/minio/health/live&quot;]</span><br><br><br><br>      <span class="hljs-attribute">interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">30s</span><br><br><br><br>      <span class="hljs-attribute">timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">20s</span><br><br><br><br>      <span class="hljs-attribute">retries</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3</span><br><br><br><br> <br><br><br><br>  <span class="hljs-attribute">minio3</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">minio/minio</span><br><br><br><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data3-1:/data1</span><br><br><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data3-2:/data2</span><br><br><br><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9003:9000&quot;</span><br><br><br><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>      <span class="hljs-attribute">MINIO_ACCESS_KEY</span><span class="hljs-punctuation">:</span> <span class="hljs-string">minioadmin</span><br><br><br><br>      <span class="hljs-attribute">MINIO_SECRET_KEY</span><span class="hljs-punctuation">:</span> <span class="hljs-string">minioadmin</span><br><br><br><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">server http://minio&#123;1...4&#125;/data&#123;1...2&#125;</span><br><br><br><br>    <span class="hljs-attribute">healthcheck</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>      <span class="hljs-attribute">test</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:9000/minio/health/live&quot;]</span><br><br><br><br>      <span class="hljs-attribute">interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">30s</span><br><br><br><br>      <span class="hljs-attribute">timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">20s</span><br><br><br><br>      <span class="hljs-attribute">retries</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3</span><br><br><br><br> <br><br><br><br>  <span class="hljs-attribute">minio4</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">minio/minio</span><br><br><br><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data4-1:/data1</span><br><br><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">data4-2:/data2</span><br><br><br><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9004:9000&quot;</span><br><br><br><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>      <span class="hljs-attribute">MINIO_ACCESS_KEY</span><span class="hljs-punctuation">:</span> <span class="hljs-string">minioadmin</span><br><br><br><br>      <span class="hljs-attribute">MINIO_SECRET_KEY</span><span class="hljs-punctuation">:</span> <span class="hljs-string">minioadmin</span><br><br><br><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">server http://minio&#123;1...4&#125;/data&#123;1...2&#125;</span><br><br><br><br>    <span class="hljs-attribute">healthcheck</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>      <span class="hljs-attribute">test</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:9000/minio/health/live&quot;]</span><br><br><br><br>      <span class="hljs-attribute">interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">30s</span><br><br><br><br>      <span class="hljs-attribute">timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">20s</span><br><br><br><br>      <span class="hljs-attribute">retries</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3</span><br><br><br><br> <br><br><br><br><span class="hljs-comment">## By default this config uses default local driver,</span><br><br><br><br><span class="hljs-comment">## For custom volumes replace with volume driver configuration.</span><br><br><br><br><span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>  <span class="hljs-attribute">data1-1</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>  <span class="hljs-attribute">data1-2</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>  <span class="hljs-attribute">data2-1</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>  <span class="hljs-attribute">data2-2</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>  <span class="hljs-attribute">data3-1</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>  <span class="hljs-attribute">data3-2</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>  <span class="hljs-attribute">data4-1</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br><span class="hljs-punctuation"></span><br>  <span class="hljs-attribute">data4-2</span><span class="hljs-punctuation">:</span><br></code></pre></td></tr></table></figure><h3 id="第四步，执行docker-compose命令，启动minio集群"><a href="#第四步，执行docker-compose命令，启动minio集群" class="headerlink" title="第四步，执行docker-compose命令，启动minio集群"></a>第四步，执行docker-compose命令，启动minio集群</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose pull</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">docker-compose up</span><br></code></pre></td></tr></table></figure><p>如果没有报错，并且显示了4台docker容器同时起来，说明minio集群已经成功运行。</p><p>这个时候可以在浏览器中输入“http:&#x2F;&#x2F;你虚拟机的ip:9001”，看是否可以进入登录界面。如果无法访问，说明网络配置存在问题，docker容器和虚拟机之间无法双向通信，需要寻找解决办法。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>minio集群部署不难，而且部署完成后，4台服务器均能自动同步。只要你的服务器保持4&#x2F;2&#x3D;2个以上，就可以正常读写，不用担心文件丢失，如果只剩下2个服务器正常，则只能下载，无法上传。如果只剩下1台服务器运转，那就只能重新部署了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用docker-compose部署confluence，自己的wiki</title>
    <link href="/2022/07/13/%E4%BD%BF%E7%94%A8docker-compose%E9%83%A8%E7%BD%B2confluence%EF%BC%8C%E8%87%AA%E5%B7%B1%E7%9A%84wiki/"/>
    <url>/2022/07/13/%E4%BD%BF%E7%94%A8docker-compose%E9%83%A8%E7%BD%B2confluence%EF%BC%8C%E8%87%AA%E5%B7%B1%E7%9A%84wiki/</url>
    
    <content type="html"><![CDATA[<h1 id="一、搭建过程"><a href="#一、搭建过程" class="headerlink" title="一、搭建过程"></a>一、搭建过程</h1><h2 id="1-1-基础准备"><a href="#1-1-基础准备" class="headerlink" title="1.1 基础准备"></a>1.1 基础准备</h2><h3 id="1-1-1-拉取docker镜像，我们选择的版本是-6-15-1-alpine"><a href="#1-1-1-拉取docker镜像，我们选择的版本是-6-15-1-alpine" class="headerlink" title="1.1.1 拉取docker镜像，我们选择的版本是 6.15.1-alpine"></a>1.1.1 拉取docker镜像，我们选择的版本是 6.15.1-alpine</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span>  ./confluence<br><span class="hljs-built_in">cd</span> ./confluence<br>docker  pull  atlassian/confluence-server:6.15.1-alpine<br>123<br></code></pre></td></tr></table></figure><h3 id="1-1-2-准备好mysql的驱动，我们使用的mysql版本是5-7"><a href="#1-1-2-准备好mysql的驱动，我们使用的mysql版本是5-7" class="headerlink" title="1.1.2 准备好mysql的驱动，我们使用的mysql版本是5.7"></a>1.1.2 准备好mysql的驱动，我们使用的mysql版本是5.7</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget  https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.47/mysql-connector-java-5.1.47.jar<br><br><span class="hljs-comment"># mysql8.0.20驱动： wget  https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.20/mysql-connector-java-8.0.20.jar</span><br>123<br></code></pre></td></tr></table></figure><h3 id="1-1-3-准备好docker-compose-yml"><a href="#1-1-3-准备好docker-compose-yml" class="headerlink" title="1.1.3 准备好docker-compose.yml"></a>1.1.3 准备好docker-compose.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">confluence:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">atlassian/confluence-server:6.15.1-alpine</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">confluence</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8090</span><span class="hljs-string">:8090</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8091</span><span class="hljs-string">:8091</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">traefik</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data:/var/atlassian/application-data/confluence</span>   <span class="hljs-comment"># 主目录</span><br>      <span class="hljs-comment"># - ./atlassian-extras-decoder-v2-3.4.1.jar:/opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.4.1.jar # 如果你有已经坡姐后的jar包，这里直接挂在进去即可启动</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./mysql-connector-java-5.1.47.jar:/opt/atlassian/confluence/confluence/WEB-INF/lib/mysql-connector-java-5.1.47.jar</span><br>      <span class="hljs-comment"># - ./server.xml:/opt/atlassian/confluence/conf/server.xml</span><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">traefik:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="1-1-4-在准备好的-msyql-中创建数据库"><a href="#1-1-4-在准备好的-msyql-中创建数据库" class="headerlink" title="1.1.4 在准备好的 msyql 中创建数据库"></a>1.1.4 在准备好的 msyql 中创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- drop database confluence;</span><br><span class="hljs-keyword">create</span> database confluence <span class="hljs-keyword">DEFAULT</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_bin;<br><br></code></pre></td></tr></table></figure><h3 id="1-1-5-下载好破解工具"><a href="#1-1-5-下载好破解工具" class="headerlink" title="1.1.5 下载好破解工具"></a>1.1.5 下载好破解工具</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 下载链接： </span><br>http://image.baishapu.com/confluence破解工具.zip<br>12<br></code></pre></td></tr></table></figure><h2 id="1-2-部署破解"><a href="#1-2-部署破解" class="headerlink" title="1.2 部署破解"></a>1.2 部署破解</h2><h3 id="1-2-1-启动"><a href="#1-2-1-启动" class="headerlink" title="1.2.1 启动"></a>1.2.1 启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建网卡</span><br>docker network create traefik<br><span class="hljs-comment"># 启动</span><br>docker-compose  up  -d <br><span class="hljs-comment"># 查看日志</span><br>docker logs -tf --<span class="hljs-built_in">tail</span> 300 confluence<br><span class="hljs-comment"># 访问地址：  yourIp:8090</span><br>1234567<br></code></pre></td></tr></table></figure><h3 id="1-2-2-复制出-atlassian-的-jar-包"><a href="#1-2-2-复制出-atlassian-的-jar-包" class="headerlink" title="1.2.2 复制出 atlassian 的 jar 包"></a>1.2.2 复制出 atlassian 的 jar 包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">cp</span>  confluence:/opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.4.1.jar  ./atlassian-extras-2.4.jar<br>1<br></code></pre></td></tr></table></figure><ul><li>注意复制出来的文件名必须为 atlassian-extras-2.4.jar，因为破解工具中指定了此文件名；</li></ul><h3 id="1-2-3-运行工具，如图："><a href="#1-2-3-运行工具，如图：" class="headerlink" title="1.2.3 运行工具，如图："></a>1.2.3 运行工具，如图：</h3><p><img src="https://img-blog.csdnimg.cn/20200918155809719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDAzMjM4NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>成功后，会在原目录下出现atlassian-extras-2.4.back 备份文件，并生成了一个新的破解后的 atlassian-extras-2.4.jar</li></ul><h3 id="1-2-4-复制破解后的jar包回容器中"><a href="#1-2-4-复制破解后的jar包回容器中" class="headerlink" title="1.2.4 复制破解后的jar包回容器中"></a>1.2.4 复制破解后的jar包回容器中</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">cp</span>   ./atlassian-extras-2.4.jar   confluence:/opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.4.1.jar<br><span class="hljs-comment"># 重启</span><br>docker restart confluence<br><br></code></pre></td></tr></table></figure><h3 id="1-2-5-剩下的按照页面提示一步一步设置即可"><a href="#1-2-5-剩下的按照页面提示一步一步设置即可" class="headerlink" title="1.2.5 剩下的按照页面提示一步一步设置即可"></a>1.2.5 剩下的按照页面提示一步一步设置即可</h3><p>注意：mysql连接时，需要设置事务隔离级别 READ-COMMITTED</p><p>参考链接：<a href="https://confluence.atlassian.com/confkb/confluence-fails-to-start-and-throws-mysql-session-isolation-level-repeatable-read-is-no-longer-supported-error-241568536.html">https://confluence.atlassian.com/confkb/confluence-fails-to-start-and-throws-mysql-session-isolation-level-repeatable-read-is-no-longer-supported-error-241568536.html</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># mysql 5</span><br>jdbc:mysql://172.16.244.49:3306/confluence?useSSL=<span class="hljs-literal">false</span>&amp;sessionVariables=tx_isolation=<span class="hljs-string">&#x27;READ-COMMITTED&#x27;</span><br>12<br></code></pre></td></tr></table></figure><h1 id="二、数据备份与迁移"><a href="#二、数据备份与迁移" class="headerlink" title="二、数据备份与迁移"></a>二、数据备份与迁移</h1><h2 id="2-1-参考链接："><a href="#2-1-参考链接：" class="headerlink" title="2.1 参考链接："></a>2.1 参考链接：</h2><p><a href="https://www.cwiki.us/display/CONF6EN/Migrating+Confluence+Between+Servers#space-menu-link-content">https://www.cwiki.us/display/CONF6EN/Migrating+Confluence+Between+Servers#space-menu-link-content</a></p><p><a href="https://confluence.atlassian.com/conf615/migrating-confluence-between-servers-967338806.html">https://confluence.atlassian.com/conf615/migrating-confluence-between-servers-967338806.html</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 我的迁移过程</span><br>1、备份mysql数据库；<br>2、备份mysql驱动；<br>3、备份主目录（本文档安装的挂载目录 “- ./data:/var/atlassian/application-data/confluence”）<br>4、备份server.xml（容器目录： /opt/atlassian/confluence/conf/server.xml）<br>5、在新机器上准备好安装过程需要的东西，以及备份的东西拿过去准备覆盖；<br>6、如果需要迁移数据库，可以直接修改配置文件：&lt;confluence.home&gt;/confluence.cfg.xml <br>1234567<br></code></pre></td></tr></table></figure><ul><li>迁移后，日志显示启动成功，但页面任然无法访问，此过程大概需要几分钟左右</li></ul><h2 id="2-2-关闭confluence自带每日备份任务"><a href="#2-2-关闭confluence自带每日备份任务" class="headerlink" title="2.2 关闭confluence自带每日备份任务"></a>2.2 关闭confluence自带每日备份任务</h2><p><img src="https://img-blog.csdnimg.cn/20200922110228106.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDAzMjM4NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="2-3-手动备份脚本-crontab定时任务"><a href="#2-3-手动备份脚本-crontab定时任务" class="headerlink" title="2.3 手动备份脚本 + crontab定时任务"></a>2.3 手动备份脚本 + crontab定时任务</h2><p>备份数据库，主目录挂载出来即可；</p><h1 id="三、导出PDF"><a href="#三、导出PDF" class="headerlink" title="三、导出PDF"></a>三、导出PDF</h1><p>注意：confluence导出PDF仅支持一种字体，且需要自己手动上传安装；（可以从系统目录C:\Windows\Fonts 中复制出来）</p><p><img src="https://img-blog.csdnimg.cn/20200922110319716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDAzMjM4NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="四、配置邮件服务器"><a href="#四、配置邮件服务器" class="headerlink" title="四、配置邮件服务器"></a>四、配置邮件服务器</h1><p>参考链接：<a href="https://qinjiangbo.com/mail-server-configuration-of-confluence.html">https://qinjiangbo.com/mail-server-configuration-of-confluence.html</a></p><p>说明：25、465端口不行，再试试587端口也是可以的</p><h1 id="五、版本升级"><a href="#五、版本升级" class="headerlink" title="五、版本升级"></a>五、版本升级</h1><h2 id="Confluence7-Mysql8："><a href="#Confluence7-Mysql8：" class="headerlink" title="Confluence7 + Mysql8："></a>Confluence7 + Mysql8：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE xxxxxxConfluence <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_bin;<br><br># 隔离级别的设置， mysql <span class="hljs-number">8</span> 的区别：<br>sessionVariables<span class="hljs-operator">=</span>transaction_isolation<span class="hljs-operator">=</span><span class="hljs-string">&#x27;READ-COMMITTED&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>主力入场的变现</title>
    <link href="/2022/07/13/%E4%B8%BB%E5%8A%9B%E5%85%A5%E5%9C%BA%E7%9A%84%E5%8F%98%E7%8E%B0/"/>
    <url>/2022/07/13/%E4%B8%BB%E5%8A%9B%E5%85%A5%E5%9C%BA%E7%9A%84%E5%8F%98%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20210906201642686.png" alt="image-20210906201642686"></p><h2 id="下跌反抗"><a href="#下跌反抗" class="headerlink" title="下跌反抗"></a>下跌反抗</h2><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20210906202028153.png" alt="image-20210906202028153"></p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20210906202137864.png" alt="image-20210906202137864"></p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20210906202701304.png" alt="image-20210906202701304"></p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20210906202850422.png" alt="image-20210906202850422"></p><p>强反弹</p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20210906203338955.png" alt="image-20210906203338955"></p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20210906204117868.png" alt="image-20210906204117868"></p><h2 id="大阳线形成条件"><a href="#大阳线形成条件" class="headerlink" title="大阳线形成条件"></a>大阳线形成条件</h2><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20210906204224943.png" alt="image-20210906204224943"></p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20210906204646983.png" alt="image-20210906204646983"></p><h2 id="快速发现股票主力"><a href="#快速发现股票主力" class="headerlink" title="快速发现股票主力"></a>快速发现股票主力</h2><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20210906205010315.png" alt="image-20210906205010315"></p><h2 id="主力作用"><a href="#主力作用" class="headerlink" title="主力作用"></a>主力作用</h2><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20210906205246044.png" alt="image-20210906205246044"></p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20210906205456139.png" alt="image-20210906205456139"></p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20210906205757721.png" alt="image-20210906205757721"></p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20210906210435197.png" alt="image-20210906210435197"></p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20210906210507216.png" alt="image-20210906210507216"></p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20210906210703730.png" alt="image-20210906210703730"></p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20210906210727399.png" alt="image-20210906210727399"></p><h2 id="好股票洗盘都不深，洗盘时间都不长"><a href="#好股票洗盘都不深，洗盘时间都不长" class="headerlink" title="好股票洗盘都不深，洗盘时间都不长"></a>好股票洗盘都不深，洗盘时间都不长</h2><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20210906211707334.png" alt="image-20210906211707334"></p><h2 id="小阳建仓选股"><a href="#小阳建仓选股" class="headerlink" title="小阳建仓选股"></a>小阳建仓选股</h2><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20210907212250717.png" alt="image-20210907212250717"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">IF(CLOSE[2]&gt;OPEN[2] AND CLOSE[1]&gt;OPEN[1] AND CLOSE&gt;OPEN AND<br> CLOSE[1]&gt;CLOSE[2] AND CLOSE&gt;CLOSE[1])<br> &#123;RETURN BACKSET(<span class="hljs-string">&quot;colorred&quot;</span>,2);&#125;IF(CLOSE[2]&gt;OPEN[2] AND CLOSE[1]&gt;OPEN[1] AND CLOSE&gt;OPEN AND<br> CLOSE[1]&gt;CLOSE[2] AND CLOSE&gt;CLOSE[1])<br> &#123;RETURN BACKSET(<span class="hljs-string">&quot;colorred&quot;</span>,2);&#125;<br></code></pre></td></tr></table></figure><p>1、 突破20日均线后的6连阳</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>什么是微服务</title>
    <link href="/2022/07/13/%E4%BB%80%E4%B9%88%E6%98%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <url>/2022/07/13/%E4%BB%80%E4%B9%88%E6%98%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>微服务是一种架构模式</p><h2 id="微服务基本介绍"><a href="#微服务基本介绍" class="headerlink" title="微服务基本介绍"></a>微服务基本介绍</h2><h2 id="DDD常用概念"><a href="#DDD常用概念" class="headerlink" title="DDD常用概念"></a>DDD常用概念</h2><p>领域：领域是有范围界限的，也可以说是有边界的</p><p>核心域：核心域是业务系统的核心价值</p><p>通用子域：所有子域的消费者，提供着通用服务</p><p>支撑子域：专注于业务系统的某一重要的业务</p><p>![](C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20211025105816764.png</p><h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20211110165518830.png" alt="image-20211110165518830"></p><h2 id="微服务设计原则"><a href="#微服务设计原则" class="headerlink" title="微服务设计原则"></a>微服务设计原则</h2><p>要领域驱动设计，而不是数据驱动设计，也不是界面驱动设计</p><p>要边界清晰的微服务，而不是泥球小单体</p><p>要能清晰的分层，而不是什么都放的大箩筐</p><p>要自己能hold住的微服务，而不是过度拆分的微服务</p><p>go-micro基础 gRPC和ProtoBuf</p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20211110170411688.png" alt="image-20211110170411688"></p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20211110170536878.png" alt="image-20211110170536878"></p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20211110170545086.png" alt="image-20211110170545086"></p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20211110170605322.png" alt="image-20211110170605322"></p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20211110170918042.png" alt="image-20211110170918042"></p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20211110171347680.png" alt="image-20211110171347680"></p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20211110171327553.png" alt="image-20211110171327553"></p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20211110171239046.png" alt="image-20211110171239046"></p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20211110171407296.png" alt="image-20211110171407296"></p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20211110171518930.png" alt="image-20211110171518930"></p><h2 id="proto文件格式"><a href="#proto文件格式" class="headerlink" title="proto文件格式"></a>proto文件格式</h2><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20211110172016342.png" alt="image-20211110172016342"></p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20211110172057035.png" alt="image-20211110172057035"></p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20211110172129415.png" alt="image-20211110172129415"></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">docker run <span class="hljs-params">--rm</span> -v $<span class="hljs-params">(pwd)</span>:$<span class="hljs-params">(pwd)</span> -w $<span class="hljs-params">(pwd)</span> \<br>znly/protoc  \<br>-I <span class="hljs-string">./</span> <span class="hljs-params">--go_out=</span><span class="hljs-string">./</span> <span class="hljs-params">--micro_out=</span><span class="hljs-string">./</span> <span class="hljs-string">./</span>*<span class="hljs-string">.proto</span><br><br>docker run <span class="hljs-params">--rm</span> -v $<span class="hljs-params">(pwd)</span>:$<span class="hljs-params">(pwd)</span> -w $<span class="hljs-params">(pwd)</span> \<br>znly/protoc \<br>-I <span class="hljs-string">./</span> <span class="hljs-params">--go_out=plugins=grpc</span><span class="hljs-function">:.</span>  <span class="hljs-string">./</span>*<span class="hljs-string">.proto</span><br></code></pre></td></tr></table></figure><h1 id="在-Docker-中生成-ProtoBuffer、gRPC-文件"><a href="#在-Docker-中生成-ProtoBuffer、gRPC-文件" class="headerlink" title="在 Docker 中生成 ProtoBuffer、gRPC 文件"></a>在 Docker 中生成 ProtoBuffer、gRPC 文件</h1><hr><h2 id="Go-语言版"><a href="#Go-语言版" class="headerlink" title="Go 语言版"></a>Go 语言版</h2><h3 id="pb-go-文件"><a href="#pb-go-文件" class="headerlink" title=".pb.go 文件"></a>.pb.go 文件</h3><p>如果说我们想直接生成 .pb.go 文件到proto文件同一个目录下，可以这样写：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">api/v1/my_server.pb.go: api/v1/my_server.proto<br>@docker run --rm --user `id -u $&#123;USER&#125;` -v `pwd`:`pwd` -w `pwd` znly/protoc -I. <br>        --go_out=plugins=grpc:. api/v1/my_server.proto<br></code></pre></td></tr></table></figure><h3 id="pb-文件"><a href="#pb-文件" class="headerlink" title="pb 文件"></a>pb 文件</h3><p>如果说我们要生成一个 .pb 文件到 client 目录下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">client/my_server.pb: api/v1/my_server.proto<br>@docker run --rm --user `id -u $&#123;USER&#125;` -v `pwd`:`pwd` -w `pwd` znly/protoc -I. <br>--include_imports --include_source_info <br>--descriptor_set_out=client/my_server.pb <br>--go_out=plugins=grpc:. api/v1/my_server.proto<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>venus安装后续</title>
    <link href="/2022/07/13/venus%E5%AE%89%E8%A3%85%E5%90%8E%E7%BB%AD/"/>
    <url>/2022/07/13/venus%E5%AE%89%E8%A3%85%E5%90%8E%E7%BB%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="venus安装后续"><a href="#venus安装后续" class="headerlink" title="venus安装后续"></a>venus安装后续</h1><p>设置存储类lables,添加本地存储类的标签</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"> kubectl <span class="hljs-keyword">edit</span> <span class="hljs-keyword">sc</span> openebs-hostpath <br>labels:<br>    ghostcloud.cn/storage-<span class="hljs-keyword">type</span>: <span class="hljs-keyword">local</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>windows远程登录Ubuntu系统-----黑屏解决方案</title>
    <link href="/2022/07/13/ubuntu20.4/"/>
    <url>/2022/07/13/ubuntu20.4/</url>
    
    <content type="html"><![CDATA[<h1 id="ubuntu20-4"><a href="#ubuntu20-4" class="headerlink" title="ubuntu20.4"></a>ubuntu20.4</h1><p>常用配置</p><h2 id="安装ssh"><a href="#安装ssh" class="headerlink" title="安装ssh"></a>安装ssh</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sudo</span> apt update <br>sudo apt install openssh-server<br>sudo systemctl status ssh<br>sudo ufw allow ssh<br>ssh username<span class="hljs-variable">@ip_address</span><br></code></pre></td></tr></table></figure><h1 id="windows远程登录Ubuntu系统—–黑屏解决方案"><a href="#windows远程登录Ubuntu系统—–黑屏解决方案" class="headerlink" title="windows远程登录Ubuntu系统—–黑屏解决方案"></a>windows远程登录Ubuntu系统—–黑屏解决方案</h1><p>此前曾经写一篇文章<a href="https://mp.csdn.net/console/editor/html/107734980">《</a><a href="https://mp.csdn.net/console/editor/html/107734980">Ubuntu 20.04系统中安装vncserver</a><a href="https://mp.csdn.net/console/editor/html/107734980">》</a>，该文章最终配置的图形界面并不是gnome的，对于用习惯了gnome的人来说还是有点不习惯，今天就说一下如何开启gnome远程桌面登录。</p><p>首先安装xrdp：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo add-apt-repository ppa:martinx/xrdp-hwe-18.04<br>sudo apt-get update<br>sudo apt-get install xrdp xorg<br>sudo adduser xrdp ssl-cert<br></code></pre></td></tr></table></figure><p>接下来修改配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/xrdp/startwm.sh<br></code></pre></td></tr></table></figure><p>将该文档最底下的两行（test和exec开头）注释掉，然后添加新的一行</p><p>gnome-session</p><p>随后对gnome进行配置：</p><p>首先安装dconf-editor:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install dconf-editor<br></code></pre></td></tr></table></figure><p>终端输入dconf-editor启动，随后将 org-&gt;gnome-&gt;desktop-&gt;remote access-&gt;require encrytion 关闭</p><p>并开启屏幕共享：</p><p>settings-&gt; Sharing-&gt;Screen Sharing:设置:</p><p><img src="https://img-blog.csdnimg.cn/20200903094120802.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jvb2tsaWppYW4=,size_16,color_FFFFFF,t_70" alt="img"></p><p>最后reboot重启一下即可。</p><p>在windows系统中使用 vncserver ，输入密码即可登录连接，甚是方便。</p><p>需要注意的是：如果一开始安装xrdp的时候，直接简单的使用apt install xrdp 那么远程登录之后很可能会是黑屏一片，无法进行任何操作，所以要注意避免掉入此坑。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu20 配置root用户远程登录</title>
    <link href="/2022/07/13/ubuntu20.04%20%E4%BD%BF%E7%94%A8root%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E7%B3%BB%E7%BB%9F/"/>
    <url>/2022/07/13/ubuntu20.04%20%E4%BD%BF%E7%94%A8root%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="配置网络地址"><a href="#配置网络地址" class="headerlink" title="配置网络地址"></a>配置网络地址</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-comment"># set network</span><br><span class="hljs-built_in">echo</span> No.1 <span class="hljs-built_in">set</span> network<br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&#x27;pls input IPADDRESS netmask gateway :  &#x27;</span> ip netmask gateway dns<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$ip</span> <span class="hljs-variable">$netmask</span> <span class="hljs-variable">$gateway</span> <span class="hljs-variable">$dns</span>&quot;</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&#x27;pls make sure  Y or N: &#x27;</span> input<br>[ <span class="hljs-string">&quot;<span class="hljs-variable">$input</span>&quot;</span> = <span class="hljs-string">&quot;Y&quot;</span> ]||<span class="hljs-built_in">exit</span> 1<br><span class="hljs-built_in">cat</span> &gt; /etc/netplan/01-network-manager-all.yaml&lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">network:</span><br><span class="hljs-string">  ethernets:</span><br><span class="hljs-string">    ens3:</span><br><span class="hljs-string">      dhcp4: false</span><br><span class="hljs-string">      dhcp6: false</span><br><span class="hljs-string">      addresses:</span><br><span class="hljs-string">      - $ip/$netmask</span><br><span class="hljs-string">      gateway4: $gateway</span><br><span class="hljs-string">      nameservers:</span><br><span class="hljs-string">        addresses:</span><br><span class="hljs-string">        - $dns</span><br><span class="hljs-string">EOF</span><br>netplan apply<br></code></pre></td></tr></table></figure><h1 id="修改root密码"><a href="#修改root密码" class="headerlink" title="修改root密码"></a>修改root密码</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">chang root pass<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;root:password&quot;</span> | chpasswd<br></code></pre></td></tr></table></figure><h1 id="开启root远程登录"><a href="#开启root远程登录" class="headerlink" title="开启root远程登录"></a>开启root远程登录</h1><h1 id="enable-root-login"><a href="#enable-root-login" class="headerlink" title="enable root login"></a>enable root login</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> No.2 <span class="hljs-built_in">enable</span> root login<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;greeter-show-manual-login=true</span><br><span class="hljs-string">all-guest=false&quot;</span> &gt;&gt;/usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf<br>sed -i <span class="hljs-string">&#x27;s/^auth.*root*/#&amp;/g&#x27;</span> /etc/pam.d/gdm-autologin<br>grep != /etc/pam.d/gdm-autologin<br>sed -i <span class="hljs-string">&#x27;s/^auth.*root*/#&amp;/g&#x27;</span> /etc/pam.d/gdm-password<br>grep != /etc/pam.d/gdm-password<br>sed -i <span class="hljs-string">&#x27;$c tty -s &amp;&amp; mesg n || true&#x27;</span> /root/.profile<br></code></pre></td></tr></table></figure><h1 id="install-sshd-service"><a href="#install-sshd-service" class="headerlink" title="install sshd service"></a>install sshd service</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br> <span class="hljs-built_in">mv</span> /etc/apt/sources.list /etc/apt/sources.list.bk<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb [trusted=true] &lt;http://192.168.0.8&gt; ./&quot;</span> &gt; /etc/apt/sources.list<br><br><span class="hljs-built_in">echo</span> No.4 install openssh-server<br>apt update<br>apt install -y openssh-server lvm2<br>systemctl <span class="hljs-built_in">enable</span> ssh<br>systemctl start ssh<br></code></pre></td></tr></table></figure><h1 id="enable-root-romte-login"><a href="#enable-root-romte-login" class="headerlink" title="enable root romte login"></a>enable root romte login</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> No.3 <span class="hljs-built_in">enable</span> root romte login<br><br>sed -i <span class="hljs-string">&#x27;s/#PermitRootLogin.*/PermitRootLogin yes/g&#x27;</span> /etc/ssh/sshd_config<br><span class="hljs-built_in">date</span> +%F<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu20.04配置静态ip,ubuntu设置静态ip方法</title>
    <link href="/2022/07/13/ubuntu20.04%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip,ubuntu%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip%E6%96%B9%E6%B3%95/"/>
    <url>/2022/07/13/ubuntu20.04%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip,ubuntu%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="ubuntu20-04配置静态ip-ubuntu设置静态ip方法"><a href="#ubuntu20-04配置静态ip-ubuntu设置静态ip方法" class="headerlink" title="ubuntu20.04配置静态ip,ubuntu设置静态ip方法"></a><a href="https://www.cnblogs.com/ubuntuanzhuang/p/13131138.html">ubuntu20.04配置静态ip,ubuntu设置静态ip方法</a></h1><h2 id="ubuntu-20-04-设置静态ip方法"><a href="#ubuntu-20-04-设置静态ip方法" class="headerlink" title="ubuntu 20.04 设置静态ip方法"></a>ubuntu 20.04 设置静态ip方法</h2><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>本教程将会演示如何设置Ubuntu16.04 Server版和Ubuntu18.04 Server版系统的静态固定IP地址。</p><h2 id="2-确认你要修改的网卡号"><a href="#2-确认你要修改的网卡号" class="headerlink" title="2. 确认你要修改的网卡号"></a>2. 确认你要修改的网卡号</h2><p>先确认你要修改的网卡号，假设你的服务器有多张网卡：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ubuntu2004:</span>~$ <span class="hljs-built_in">ip</span> addr<br></code></pre></td></tr></table></figure><p>我的服务器配置如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="hljs-number">65536</span> qdisc noqueue state UNKNOWN ``group` `default` `qlen <span class="hljs-number">1000</span>``link/loopback <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> brd <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>``inet <span class="hljs-number">127.0.0.1</span>/<span class="hljs-number">8</span> scope host lo``valid_lft forever preferred_lft forever``inet6 ::<span class="hljs-number">1</span>/<span class="hljs-number">128</span> scope host``valid_lft forever preferred_lft forever``<span class="hljs-number">2</span>: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="hljs-number">1500</span> qdisc fq_codel state UP ``group` `default` `qlen <span class="hljs-number">1000</span>``link/ether <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:f1:b5:e1 brd ff:ff:ff:ff:ff:ff``inet <span class="hljs-number">172.16.87.140</span>/<span class="hljs-number">24</span> brd <span class="hljs-number">172.16.87.255</span> scope global dynamic ens33``valid_lft <span class="hljs-number">1500</span>sec preferred_lft <span class="hljs-number">1500</span>sec``inet6 fe80::<span class="hljs-number">20</span>c:<span class="hljs-number">29</span>ff:fef1:b5e1/<span class="hljs-number">64</span> scope link``valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/blog/1024482/201909/1024482-20190926195311926-778081344.png" alt="img"></p><h2 id="3-默认的网卡配置文件"><a href="#3-默认的网卡配置文件" class="headerlink" title="3. 默认的网卡配置文件"></a>3. 默认的网卡配置文件</h2><p>默认情况下，网络使用DHCP</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs d">ubuntu1804:~$ cat /etc/netplan/<span class="hljs-number">50</span>-cloud-init.yaml<span class="hljs-string">``</span>配置文件内容如下<span class="hljs-string">` `</span>network:<span class="hljs-string">``</span>  <span class="hljs-string">``</span>ethernets:<span class="hljs-string">``</span>    <span class="hljs-string">``</span>ens33:<span class="hljs-string">``</span>      <span class="hljs-string">``d</span>hcp4: yes<span class="hljs-string">``</span>      <span class="hljs-string">``</span>addresses: []<span class="hljs-string">` `</span>  <span class="hljs-string">``</span><span class="hljs-keyword">version</span>: <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>　　</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h2 id="4-ubuntu20-04设置静态IP"><a href="#4-ubuntu20-04设置静态IP" class="headerlink" title="4. ubuntu20.04设置静态IP"></a>4. ubuntu20.04设置静态IP</h2><p>需要把配置文件修改为以下内容：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ubuntu1804:~$ sudo vi <span class="hljs-regexp">/etc/</span>netplan/<span class="hljs-number">50</span>-cloud-init.yaml<br></code></pre></td></tr></table></figure><p>假设IP地址修改为192.168.25.51，子网掩码24位即255.255.0.0，网关设置为192.168.0.1，DNS1：223.5.5.5，DNS2：223.6.6.6</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">network:</span><br>    <span class="hljs-attr">ethernets:</span><br>        <span class="hljs-attr">ens3:</span><br>            <span class="hljs-attr">dhcp4:</span> <span class="hljs-literal">no</span><br>            <span class="hljs-attr">addresses:</span> [<span class="hljs-number">192.168</span><span class="hljs-number">.25</span><span class="hljs-number">.51</span><span class="hljs-string">/16</span>]<br>            <span class="hljs-attr">optional:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">gateway4:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>            <span class="hljs-attr">nameservers:</span><br>                    <span class="hljs-attr">addresses:</span> [<span class="hljs-number">223.5</span><span class="hljs-number">.5</span><span class="hljs-number">.5</span>,<span class="hljs-number">223.6</span><span class="hljs-number">.6</span><span class="hljs-number">.6</span>]<br> <br>    <span class="hljs-attr">version:</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>　　</p><p><img src="https://img2020.cnblogs.com/blog/2042026/202006/2042026-20200615151542483-580253433.png" alt="ubuntu20.04配置静态ip"></p><h2 id="5-应用新配置"><a href="#5-应用新配置" class="headerlink" title="5. 应用新配置"></a>5. 应用新配置</h2><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">ubuntu1804:</span>~$ sudo netplan apply<br></code></pre></td></tr></table></figure><p>使用<code>ip addr</code>检查新地址</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ubuntu2004:</span>~$ <span class="hljs-built_in">ip</span> addr<br></code></pre></td></tr></table></figure><p><img src="https://img2020.cnblogs.com/blog/2042026/202006/2042026-20200615151623170-356345339.png" alt="ubuntu20.04设置静态ip"></p><h2 id="6-测试网络连通性"><a href="#6-测试网络连通性" class="headerlink" title="6. 测试网络连通性"></a>6. 测试网络连通性</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ubuntu1804:~$ ping 192.168.1.100<br></code></pre></td></tr></table></figure><p><img src="https://img2020.cnblogs.com/blog/2042026/202006/2042026-20200615151656397-831387808.png" alt="ubuntu20.04配置静态ip"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sed</title>
    <link href="/2022/07/13/sed/"/>
    <url>/2022/07/13/sed/</url>
    
    <content type="html"><![CDATA[<h2 id="sed-取版本号"><a href="#sed-取版本号" class="headerlink" title="sed 取版本号"></a>sed 取版本号</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">echo</span> httpd-<span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">41</span>.tar.bz2|sed -rn &#x27;/^(.*[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>.]+)\.[[:alpha:]]+.*$/\<span class="hljs-number">1</span>/p&#x27;<br></code></pre></td></tr></table></figure><h2 id="取后缀"><a href="#取后缀" class="headerlink" title="取后缀"></a>取后缀</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>traefik 配置超时设置</title>
    <link href="/2022/07/13/traefik%20%E9%85%8D%E7%BD%AE%E8%B6%85%E6%97%B6%E8%AE%BE%E7%BD%AE/"/>
    <url>/2022/07/13/traefik%20%E9%85%8D%E7%BD%AE%E8%B6%85%E6%97%B6%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="traefik-配置超时设置"><a href="#traefik-配置超时设置" class="headerlink" title="traefik 配置超时设置"></a>traefik 配置超时设置</h1><h2 id="配置详解"><a href="#配置详解" class="headerlink" title="配置详解"></a>配置详解</h2><p>traefik 默认没有配置文件，需要自己根据官网参考文件进行整理，下面我根据官网信息，进行整理优化了一个主配置文件，纤细信息如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@trarfik-test config]<span class="hljs-comment"># more traefik.toml</span><br><span class="hljs-comment">##开启debug 模式，Default,false</span><br>debug = <span class="hljs-literal">true</span><br><br></code></pre></td></tr></table></figure><p>  ##日志级别, “DEBUG”, “INFO”, “WARN”, “ERROR”, “FATAL”, “PANIC”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs conf">logLevel = &quot;INFO&quot;<br><br>##Traefik 服务日志，如果不配置，日志将屏幕输出；<br>#traefikLogsFile = &quot;/etc/traefik/log/traefik.log&quot;<br><br>##成功访问日志<br>accessLogsFile = &quot;/etc/traefik/log/access.log&quot;<br><br>##与后端连接保持时间，避免反复与后端服务建立连接，Default,&quot;2s&quot;<br>##ProvidersThrottleDuration = &quot;5s&quot;<br>ProvidersThrottleDuration = 5<br><br>###控制最大空闲连接数，使用net/http模块，试过设置为0 ，则不限制，如果看到&#x27;too many open files&#x27; 报错，建议修改系统层`ulimit`值<br>，Default: 200<br>maxIdleConnsPerHost = 60000<br><br>###如果设置为true，将使用后端服务SSL证书。注意:这禁用中间人***的检测只能用于后端网络安全。Default: false<br>#insecureSkipVerify = true<br><br>###配置默认监听端口<br><br>###配置服务默认监听端口，如果想改变监听端口，可以进行单独配置<br>```conf<br>defaultEntryPoints = [&quot;http&quot;, &quot;https&quot;]<br>[entryPoints]<br>  [entryPoints.http]<br>  address = &quot;:80&quot;<br>  compress = true<br>  [entryPoints.https]<br>  address = &quot;:443&quot;<br>  compress = true<br>###ssl 证书配置<br>    [entryPoints.https.tls]<br>      `entryPoints`.`https`.`tls`.`certificates`<br>      certFile = &quot;/etc/traefik/ssl/www.ptengine.cn.crt&quot;<br>      keyFile = &quot;/etc/traefik/ssl/www.ptengine.cn.key&quot;<br></code></pre></td></tr></table></figure><p>##管理界面监听端口</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[web]</span><br>  <span class="hljs-attr">address</span> = <span class="hljs-string">&quot;:8800&quot;</span><br><br><span class="hljs-comment">##设置 REST API 为只读模式</span><br>  <span class="hljs-attr">ReadOnly</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-comment">##启用详细信息输出，会在管理界面下方打印一些错误信息，提供参考；</span><br>  <span class="hljs-section">[web.statistics]</span><br>  <span class="hljs-attr">RecentErrors</span> = <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h2 id="To-enable-Traefik-to-export-internal-metrics-to-Prometheus"><a href="#To-enable-Traefik-to-export-internal-metrics-to-Prometheus" class="headerlink" title="To enable Traefik to export internal metrics to Prometheus"></a>To enable Traefik to export internal metrics to Prometheus</h2><p>  ##[web.metrics.prometheus]</p><h3 id="Buckets-x3D-0-1-0-3-1-2-5-0"><a href="#Buckets-x3D-0-1-0-3-1-2-5-0" class="headerlink" title="Buckets&#x3D;[0.1,0.3,1.2,5.0]"></a>Buckets&#x3D;[0.1,0.3,1.2,5.0]</h3><h3 id="webui基本认证配置"><a href="#webui基本认证配置" class="headerlink" title="webui基本认证配置"></a>webui基本认证配置</h3><h3 id="密码可以编码在MD5、SHA1和BCrypt-您可以使用htpasswd生成"><a href="#密码可以编码在MD5、SHA1和BCrypt-您可以使用htpasswd生成" class="headerlink" title="密码可以编码在MD5、SHA1和BCrypt:您可以使用htpasswd生成"></a>密码可以编码在MD5、SHA1和BCrypt:您可以使用htpasswd生成</h3><h3 id="用户可以直接在toml指定文件-或间接通过引用一个外部文件-如果两个-两个并存-外部文件内容优先"><a href="#用户可以直接在toml指定文件-或间接通过引用一个外部文件-如果两个-两个并存-外部文件内容优先" class="headerlink" title="用户可以直接在toml指定文件,或间接通过引用一个外部文件;如果两个,两个并存,外部文件内容优先"></a>用户可以直接在toml指定文件,或间接通过引用一个外部文件;如果两个,两个并存,外部文件内容优先</h3><h3 id="测试配置实例"><a href="#测试配置实例" class="headerlink" title="测试配置实例"></a>测试配置实例</h3><h3 id="用户名-x2F-密码-测试和test2-test2码-测试-测试和test2-test2"><a href="#用户名-x2F-密码-测试和test2-test2码-测试-测试和test2-test2" class="headerlink" title="用户名&#x2F;密码: 测试和test2:test2码:测试:测试和test2:test2"></a>用户名&#x2F;密码: 测试和test2:test2码:测试:测试和test2:test2</h3><p>  #[web.auth.basic]<br>  #users &#x3D; [“test:$apr1$H6uskkkW$IgXLP6ewTrSuBkTrqE8wj&#x2F;“, “test2:$apr1$d9hr9HBB$4HxwgUir3HP4EsggP&#x2F;QNo0”]</p><h3 id="指定配置文件"><a href="#指定配置文件" class="headerlink" title="指定配置文件"></a>指定配置文件</h3><h3 id="usersFile-x3D-“-x2F-path-x2F-to-x2F-htpasswd”"><a href="#usersFile-x3D-“-x2F-path-x2F-to-x2F-htpasswd”" class="headerlink" title="usersFile &#x3D; “&#x2F;path&#x2F;to&#x2F;.htpasswd”"></a>usersFile &#x3D; “&#x2F;path&#x2F;to&#x2F;.htpasswd”</h3><h3 id="配置文件扩展，可以加载监视文件内容"><a href="#配置文件扩展，可以加载监视文件内容" class="headerlink" title="配置文件扩展，可以加载监视文件内容"></a>配置文件扩展，可以加载监视文件内容</h3><p>  [file]<br>  ##不支持监听目录，监听文件名要写死<br>  filename &#x3D; “&#x2F;etc&#x2F;traefik&#x2F;config&#x2F;rules.toml”</p><h3 id="监视文件变更"><a href="#监视文件变更" class="headerlink" title="监视文件变更"></a>监视文件变更</h3><p>  watch &#x3D; true</p><p>  ##发送请求重试<br>  [retry]<br>  ##默认只向后端请求一次，不重试，<br>  attempts &#x3D; 3</p>  <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs clean">  <br>  <br>  使用上面的配置文件启动服务，会监听<span class="hljs-number">3</span>个端口， <span class="hljs-number">80</span>：http ，<span class="hljs-number">443</span>：https ，<span class="hljs-number">8800</span>：api ，上面的配置文件我开启了debug 模式，实际生产环境不需要。服务启动后即可访问，api 管理界面查看一下基础信息。<br>  <br>  #### 浏览器访问地址：<br>  http:<span class="hljs-comment">//localhost:8800</span><br>  <br>  <br>  <br>  域名转发配置参考：<br>  <br>  配置信息如下：<br><br>```conf<br>  [root@trarfik-test config]# more rules.toml<br>  ##后端配置<br>  #[backends]<br>  ##发送请求重试<br>  #[retry]<br>  ###默认只向后端请求一次，不重试，<br>  attempts = <span class="hljs-number">3</span><br>    [backends.testptmindcom]<br>      ##后端网络错误率&gt;<span class="hljs-number">0.5</span> 停止转发；<br>      [backends.testptmindcom.circuitbreaker]<br>        expression = <span class="hljs-string">&quot;NetworkErrorRatio() &gt; 0.5&quot;</span><br>  <br>      ##轮训方式，method=drr（加权轮训调度）default：wrr（队列轮转算法）<br>      [backends.testptmindcom.LoadBalancer]<br>        method = <span class="hljs-string">&quot;drr&quot;</span><br>  <br>      ##安全限制，单个主机连接数大于指定值，会提示“max connections reached”<br>      [backends.testptmindcom.maxconn]<br>        amount = <span class="hljs-number">10</span><br>        extractorfunc = <span class="hljs-string">&quot;request.host&quot;</span><br>      ##第一台后端节点<br>      [backends.testptmindcom.servers.server1]<br>        url = <span class="hljs-string">&quot;http://172.16.100.70:80&quot;</span><br>        weight = <span class="hljs-number">1</span><br>  <br>      ##第二台后端节点<br>      [backends.testptmindcom.servers.server2]<br>        url = <span class="hljs-string">&quot;http://172.16.100.71:80&quot;</span><br>        weight = <span class="hljs-number">1</span><br>  ##前端配置<br>  [frontends]<br>    #定义一个接入点的名字<br>    [frontends.testptmindcom]<br>    passHostHeader = true<br>    priority = <span class="hljs-number">10</span><br>    ##定义调用后端名称<br>    backend = <span class="hljs-string">&quot;testptmindcom&quot;</span><br>      ##前端监听域名,可以监听多域名<br>      [frontends.testptmindcom.routes.service]<br>        rule = <span class="hljs-string">&quot;Host:test.ptmind.com,pttest.ptmind.com;&quot;</span><br>  <br>  以上信息参考官方信息进行简单描述，如有疑惑请留言。<br><br><br></code></pre></td></tr></table></figure><h2 id="Traefik-中诡异的502和504问题"><a href="#Traefik-中诡异的502和504问题" class="headerlink" title="Traefik*中诡异的502和504问题"></a>Traefik*中诡异的502和504问题</h2><blockquote><p>我们都知道在 Kubernetes 集群中通常会使用 Ingress 方案来统一代理集群内部的流量，而常用的 Ingress 方案为 <a href="https://docs.traefik.io/">traefik</a> 和 <a href="https://github.com/kubernetes/ingress-nginx">nginx</a>，和传统的 Nginx 作为企业内部的反向代理以及负载设备一样，在不同的场景下可能需要专有的配置才能满足需求，否则会出现奇奇怪怪的异常状态码。本篇文章一起来看下，我们在 <code>traefik</code> 中遇到的 500 和 502 异常。</p></blockquote><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>在开始之前，我们先来看几个在 Nginx 作为反向代理工具中经常遇到的几个异常状态码：</p><ul><li>499: 客户端主动断开连接。通常为一次请求未在客户端指定时间内返回，客户端主动关闭连接，客户端无数据返回 (在 Nginx 中会记录 499)。一般是<code>客户端超时</code></li><li>500: 服务器内部错误。服务器遇到未知错误导致无法完成请求处理，通常由于后端业务逻辑异常导致 (本身 Bug)</li><li>502: 网关错误。通常为网关未从上游服务中获取期望的响应 (<code>上游未返回数据或未按照协议约定返回数据</code>)，网关感觉自己没用了，返回了网关错误。一般是<code>后端服务器宕机</code>或<code>业务逻辑超时</code></li><li>504: 网关超时。表示网关没有及时从上游获取响应数据。一般是 Nginx 网关作为客户端去向上游服务请求响应的过程中，Nginx 网关超时导致，但此时对于上游服务器来将，它会继续执行，直到结束。(<code>Nginx网关作为客户端时的超时</code>)</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br># <span class="hljs-number">499</span> 的实际情况就是，客户端指定超时时间为N秒，但是该请求在服务端实际需要执行M秒(M&gt;N秒)，客户端等的不耐烦了就关闭了# 对于<span class="hljs-number">499</span>状态来讲，解决方式是优化后端代码逻辑或者修改nginx参数$ cat nginx.confproxy_ignore_client_abort    <span class="hljs-keyword">on</span>;$ curl -i -m <span class="hljs-number">3</span> &lt;http://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>/hello.php&gt;# <span class="hljs-number">502</span>的实际情况通常是Nginx网关后端的服务器直接宕机了(所以就拿不到上游的响应了)# 当然也有可能是上游服务器真正的执行逻辑超过了上游服务器的超时时间限制(比如php-fpm.conf设置request_terminate_timeout5s，但是实际的业务逻辑需要<span class="hljs-number">7</span>s才能完成)，此时上游服务器端出现`业务逻辑超时`，给Nginx网关返回了异常的数据造成的# <span class="hljs-number">502</span>时后端的几种错误日志 recv() failed (<span class="hljs-number">104</span>: <span class="hljs-keyword">Connection</span> <span class="hljs-keyword">reset</span> <span class="hljs-keyword">by</span> peer) <span class="hljs-keyword">while</span> reading response <span class="hljs-keyword">header</span> <span class="hljs-keyword">from</span> upstream upstream prematurely closed <span class="hljs-keyword">connection</span> <span class="hljs-keyword">while</span> reading response <span class="hljs-keyword">header</span> <span class="hljs-keyword">from</span> upstream <span class="hljs-keyword">connect</span>() failed (<span class="hljs-number">111</span>: <span class="hljs-keyword">Connection</span> refused) <span class="hljs-keyword">while</span> connecting <span class="hljs-keyword">to</span> upstream# 整体来说<span class="hljs-number">502</span>出现的问题通常是因为后端挂了，或者因为后端负载太高，暂时不可响应# 可以在nginx侧增加proxy_read_timeout来暂时缓解$ cat nginx.confproxy_read_timeout  <span class="hljs-number">20</span>s;# <span class="hljs-number">504</span>的实际情况就是客户端-&gt;Nginx-&gt;Backend，在过程中Nginx需要作为客户端访问Backend服务，但是在Backend还没用执行完成时，Nginx首先超过了自己的客户端超时时间，此时就会出现<span class="hljs-number">504</span>的异常(但是对于客户端来说返回什么呢?)# 对于<span class="hljs-number">504</span>场景而言，通常的做法就是优化Backend的逻辑，适当减少执行时间；另外也可以适当的增加Nginx作为客户端时的超时时间# 要知道，当Nginx作为客户端时，是以一个Proxy的角色存在的，配置如下参数即可$ cat nginx.confuwsgi_connect_timeout <span class="hljs-number">5</span>;uwsgi_send_timeout <span class="hljs-number">5</span>;uwsgi_read_timeout <span class="hljs-number">5</span>;fastcgi_read_timeout <span class="hljs-number">5</span>;fastcgi_send_timeout <span class="hljs-number">5</span>;proxy_connect_timeout      <span class="hljs-number">90</span>;proxy_send_timeout         <span class="hljs-number">90</span>;proxy_read_timeout         <span class="hljs-number">90</span><br><br></code></pre></td></tr></table></figure><h2 id="二、traefik-中诡异的-500-和-502"><a href="#二、traefik-中诡异的-500-和-502" class="headerlink" title="二、traefik 中诡异的 500 和 502"></a>二、traefik 中诡异的 500 和 502</h2><h2 id="traefik-在-Kubernetes-集群中的部署配置"><a href="#traefik-在-Kubernetes-集群中的部署配置" class="headerlink" title="traefik 在 Kubernetes 集群中的部署配置"></a>traefik 在 Kubernetes 集群中的部署配置</h2><p>我们当前集群的 traefik 的配置如下:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><br># traefik的configmap配置文件$ <span class="hljs-keyword">cat</span> traefik-config.yamlapiVersion: v1kind: ConfigMapmetadata:  name: traefik-config  namespace: kube-systemdata:  traefik.toml: |    defaultEntryPoints = [<span class="hljs-string">&quot;http&quot;</span>,<span class="hljs-string">&quot;https&quot;</span>]    <span class="hljs-keyword">debug</span> = false    logLevel = <span class="hljs-string">&quot;INFO&quot;</span>    InsecureSkipVerify = true    [entryPoints]      [entryPoints.http]      address = <span class="hljs-string">&quot;:80&quot;</span>      compress = true      [entryPoints.https]      address = <span class="hljs-string">&quot;:443&quot;</span>        [entryPoints.https.tls]    [web]      address = <span class="hljs-string">&quot;:8080&quot;</span>    [kubernetes]    [metrics]      [metrics.prometheus]      buckets=[<span class="hljs-number">0.1</span>,<span class="hljs-number">0.3</span>,<span class="hljs-number">1.2</span>,<span class="hljs-number">5.0</span>]      entryPoint = <span class="hljs-string">&quot;traefik&quot;</span>    [ping]    entryPoint = <span class="hljs-string">&quot;http&quot;</span># traefik的DaemonSet配置$ <span class="hljs-keyword">cat</span> traefik-<span class="hljs-keyword">ds</span>-v1.<span class="hljs-number">7.16</span>.yaml---apiVersion: v1kind: ServiceAccountmetadata:  name: traefik-ingress-controller  namespace: kube-<span class="hljs-built_in">system</span>---kind: DaemonSetapiVersion: extensions/v1beta1metadata:  name: traefik-ingress-controller  namespace: kube-<span class="hljs-built_in">system</span>  labels:    k8s-app: traefik-ingress-lbspec:  template:    metadata:      labels:        k8s-app: traefik-ingress-<span class="hljs-keyword">lb</span>        name: traefik-ingress-<span class="hljs-keyword">lb</span>    spec:      affinity:        nodeAffinity:          requiredDuringSchedulingIgnoredDuringExecution:            nodeSelectorTerms:            - matchExpressions:              - key: node-role.kubernetes.io/master                operator: DoesNotExist      serviceAccountName: traefik-ingress-controller      terminationGracePeriodSeconds: <span class="hljs-number">30</span>      hostNetwork: true      containers:      - image: traefik:v1.<span class="hljs-number">7.16</span>        name: traefik-ingress-<span class="hljs-keyword">lb</span>        ports:        - name: http          containerPort: <span class="hljs-number">80</span>          hostPort: <span class="hljs-number">80</span>        - name: admin          containerPort: <span class="hljs-number">8080</span>        securityContext:          capabilities:            <span class="hljs-keyword">drop</span>:            - ALL            <span class="hljs-built_in">add</span>:            - NET_BIND_SERVICE        <span class="hljs-keyword">args</span>:        - --api        - --kubernetes        - --logLevel=INFO        - --traefikLog.filePath=/logdata/traefik.<span class="hljs-built_in">log</span>        - --configfile=/config/traefik.toml        - --accesslog.filepath=/logdata/access.<span class="hljs-built_in">log</span>        - --accesslog.bufferingsize=<span class="hljs-number">100</span>        volumeMounts:        - mountPath: /config          name: config        - mountPath: /logdata          name: access-<span class="hljs-built_in">log</span>      volumes:      - configMap:          name: traefik-config        name: config      - name: access-<span class="hljs-built_in">log</span>        hostPath:          path: /<span class="hljs-keyword">opt</span>/logs/ingress/---kind: ServiceapiVersion: v1metadata:  name: traefik-ingress-service  namespace: kube-<span class="hljs-built_in">system</span>  labels:    k8s-app: traefik-ingress-lbspec:  selector:    k8s-app: traefik-ingress-<span class="hljs-keyword">lb</span>  ports:    - protocol: TCP      port: <span class="hljs-number">80</span>      name: web    - protocol: TCP      port: <span class="hljs-number">8080</span>      name: admin<br><br></code></pre></td></tr></table></figure><h4 id="Python-的对外-API-接口"><a href="#Python-的对外-API-接口" class="headerlink" title="Python 的对外 API 接口"></a>Python 的对外 API 接口</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><br># 接口对外的ingress$ kubectl  <span class="hljs-built_in">get</span> ingress -n s-dataNAME                     HOSTS                    ADDRESS   PORTS   AGEdata-api.bgbiao.<span class="hljs-keyword">cn</span>   data-api.bgbiao.<span class="hljs-keyword">cn</span>             <span class="hljs-number">80</span>      <span class="hljs-number">236</span>dops.bgbiao.<span class="hljs-keyword">cn</span>       ops.bgbiao.<span class="hljs-keyword">cn</span>                 <span class="hljs-number">80</span>      <span class="hljs-number">236</span>d# 测试对外接口$ curl data-api.bgbiao.<span class="hljs-keyword">cn</span>  -iHTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">401</span> UnauthorizedAccess-Control-Allow-Headers: Content-Type, <span class="hljs-keyword">X</span>-TOKENAccess-Control-Allow-Origin: *Content-Length: <span class="hljs-number">58</span>Content-Type: application/jsonVary: Accept-EncodingDate: Sun, <span class="hljs-number">28</span> Jun <span class="hljs-number">2020</span> <span class="hljs-number">14</span>:<span class="hljs-number">55</span>:<span class="hljs-number">00</span> GMT# 接口需要登录，那么我们对登录接口进行压测来模拟问题$ curl -<span class="hljs-keyword">X</span> POST  --data <span class="hljs-string">&#x27;@/root/login.json&#x27;</span> -H <span class="hljs-string">&#x27;Content-type:application/json&#x27;</span> &lt;http://data-api.bgbiao.<span class="hljs-keyword">cn</span>/account/users/login/&gt;   -iHTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OKAccess-Control-Allow-Headers: Content-Type, <span class="hljs-keyword">X</span>-TOKENAccess-Control-Allow-Origin: *Content-Length: <span class="hljs-number">250</span>Content-Type: application/jsonVary: Accept-EncodingDate: Sun, <span class="hljs-number">28</span> Jun <span class="hljs-number">2020</span> <span class="hljs-number">14</span>:<span class="hljs-number">56</span>:<span class="hljs-number">33</span> GMT<br><br></code></pre></td></tr></table></figure><h4 id="诡异的-500-和-502"><a href="#诡异的-500-和-502" class="headerlink" title="诡异的 500 和 502"></a>诡异的 500 和 502</h4><p>在服务部署完成后，一切皆正常，但是简单压测后发现服务出现部分请求失败。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><br># 使用<span class="hljs-keyword">ab</span>工具进行压测# 由压测结果可以发现，<span class="hljs-number">20</span>个并发共压测<span class="hljs-number">200</span>个请求，期间出现了<span class="hljs-number">7</span>次失败请求$ <span class="hljs-keyword">ab</span> -<span class="hljs-keyword">c</span> <span class="hljs-number">20</span> -n <span class="hljs-number">200</span>   -T <span class="hljs-string">&#x27;application/json&#x27;</span> -<span class="hljs-keyword">p</span> /root/login.json &lt;http://data-api.bgbiao.<span class="hljs-keyword">cn</span>/account/users/login/...Benchmarking&gt; data-api.bgbiao.<span class="hljs-keyword">cn</span> (<span class="hljs-keyword">be</span> patient)Completed <span class="hljs-number">100</span> requestsCompleted <span class="hljs-number">200</span> requestsFinished <span class="hljs-number">200</span> requestsServer Software:Server Hostname:        data-api.bgbiao.cnServer Port:            <span class="hljs-number">80</span>Document Path:          /account/users/login/Document Length:        <span class="hljs-number">250</span> bytesConcurrency Level:      <span class="hljs-number">20</span>Time taken <span class="hljs-keyword">for</span> tests:   <span class="hljs-number">1.340</span> secondsComplete requests:      <span class="hljs-number">200</span>Failed requests:        <span class="hljs-number">7</span>   (Connect: <span class="hljs-number">0</span>, Receive: <span class="hljs-number">0</span>, Length: <span class="hljs-number">7</span>, Exceptions: <span class="hljs-number">0</span>)Write errors:           <span class="hljs-number">0</span>Non-<span class="hljs-number">2</span>xx responses:      <span class="hljs-number">7</span>Total transferred:      <span class="hljs-number">91371</span> bytesTotal body sent:        <span class="hljs-number">46400</span>HTML transferred:       <span class="hljs-number">48387</span> bytesRequests per second:    <span class="hljs-number">149.21</span> [#/sec] (mean)Time per request:       <span class="hljs-number">134.035</span> [ms] (mean)Time per request:       <span class="hljs-number">6.702</span> [ms] (mean, across <span class="hljs-keyword">all</span> concurrent requests)Transfer rate:          <span class="hljs-number">66.57</span> [Kbytes/sec] received                        <span class="hljs-number">33.81</span> kb/s sent                        <span class="hljs-number">100.38</span> kb/s totalConnection Times (ms)              <span class="hljs-built_in">min</span>  mean[+/-sd] median   maxConnect:        <span class="hljs-number">1</span>    <span class="hljs-number">1</span>   <span class="hljs-number">0.1</span>      <span class="hljs-number">1</span>       <span class="hljs-number">1</span>Processing:     <span class="hljs-number">2</span>  <span class="hljs-number">116</span>  <span class="hljs-number">27.8</span>    <span class="hljs-number">114</span>     <span class="hljs-number">179</span>Waiting:        <span class="hljs-number">2</span>  <span class="hljs-number">116</span>  <span class="hljs-number">27.8</span>    <span class="hljs-number">114</span>     <span class="hljs-number">179</span>Total:          <span class="hljs-number">3</span>  <span class="hljs-number">117</span>  <span class="hljs-number">27.8</span>    <span class="hljs-number">116</span>     <span class="hljs-number">180</span>Percentage of the requests served within <span class="hljs-keyword">a</span> certain time (ms)  <span class="hljs-number">50</span>%    <span class="hljs-number">116</span>  <span class="hljs-number">66</span>%    <span class="hljs-number">121</span>  <span class="hljs-number">75</span>%    <span class="hljs-number">125</span>  <span class="hljs-number">80</span>%    <span class="hljs-number">129</span>  <span class="hljs-number">90</span>%    <span class="hljs-number">154</span>  <span class="hljs-number">95</span>%    <span class="hljs-number">167</span>  <span class="hljs-number">98</span>%    <span class="hljs-number">173</span>  <span class="hljs-number">99</span>%    <span class="hljs-number">175</span> <span class="hljs-number">100</span>%    <span class="hljs-number">180</span> (longest request)# 将压测结果保存到文本中进行简单分析# 简单分析在<span class="hljs-number">200</span>个压测请求中，有<span class="hljs-number">4</span>个请求失败，分别为<span class="hljs-number">2</span>次<span class="hljs-number">500</span>错误和<span class="hljs-number">2</span>次<span class="hljs-number">502</span>错误$ <span class="hljs-keyword">ab</span> -v <span class="hljs-number">10</span> -<span class="hljs-keyword">c</span> <span class="hljs-number">20</span> -n <span class="hljs-number">200</span>   -T <span class="hljs-string">&#x27;application/json&#x27;</span> -<span class="hljs-keyword">p</span> /root/login.json &lt;http://data-api.bgbiao.<span class="hljs-keyword">cn</span>/account/users/login/&gt;  &gt; <span class="hljs-keyword">ab</span>-<span class="hljs-built_in">log</span>.txt$ <span class="hljs-keyword">cat</span> <span class="hljs-keyword">ab</span>-<span class="hljs-built_in">log</span>.txt | <span class="hljs-keyword">grep</span> HTTP | <span class="hljs-keyword">sort</span>| uniq -<span class="hljs-keyword">c</span>    <span class="hljs-number">196</span> HTTP/<span class="hljs-number">1.0</span> <span class="hljs-number">200</span> OK      <span class="hljs-number">2</span> HTTP/<span class="hljs-number">1.0</span> <span class="hljs-number">500</span> Internal Server Error      <span class="hljs-number">2</span> HTTP/<span class="hljs-number">1.0</span> <span class="hljs-number">502</span> Bad Gateway      <span class="hljs-number">1</span> POST /account/users/login/ HTTP/<span class="hljs-number">1.0</span><br><br></code></pre></td></tr></table></figure><h4 id="traefik-中-500-和-502-问题排查"><a href="#traefik-中-500-和-502-问题排查" class="headerlink" title="traefik 中 500 和 502 问题排查"></a>traefik 中 500 和 502 问题排查</h4><p>前面我们提到了在 Nginx 的场景中的 500 和 502 状态码的原因以及相关的解决方式，那么在 Kubernetes 集群中，traefik 起到的作用和 Nginx 的作用也是相似的。</p><p>在开始的时候，我们提到了集群内的 traefik 的配置信息，对于 SRE 来讲，任何生产的服务都必须有相关的可观测性数据，因此，我们也默认将 traefik 的访问日志和进程日志进行了持久化 (分别对应 <code>access.log和traefik.log</code>)，同时也暴露了 traefik 的 prometheus 的 metrics 接口。</p><p>对于上面的压测请求，我们在访问日志里抓到了如下的异常日志:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><br>$ tail -f access.log | <span class="hljs-keyword">grep</span> data-api.bgbiao.cn | <span class="hljs-keyword">grep</span> -v <span class="hljs-string">&#x27;HTTP/1.0&quot; 200&#x27;</span><span class="hljs-number">192.168</span>.<span class="hljs-number">0.23</span> - - [<span class="hljs-number">28</span><span class="hljs-regexp">/Jun/</span><span class="hljs-number">2020</span>:<span class="hljs-number">14</span>:<span class="hljs-number">57</span>:<span class="hljs-number">38</span> +<span class="hljs-number">0000</span>] <span class="hljs-string">&quot;POST /account/users/login/ HTTP/1.0&quot;</span> <span class="hljs-number">500</span> <span class="hljs-number">21</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;ApacheBench/2.3&quot;</span> <span class="hljs-number">122267376</span> <span class="hljs-string">&quot;data-api.bgbiao.cn/&quot;</span> <span class="hljs-string">&quot;http://20.0.41.8:8080&quot;</span> <span class="hljs-number">0</span>ms192.<span class="hljs-number">168.0</span>.<span class="hljs-number">23</span> - - [<span class="hljs-number">28</span><span class="hljs-regexp">/Jun/</span><span class="hljs-number">2020</span>:<span class="hljs-number">14</span>:<span class="hljs-number">57</span>:<span class="hljs-number">38</span> +<span class="hljs-number">0000</span>] <span class="hljs-string">&quot;POST /account/users/login/ HTTP/1.0&quot;</span> <span class="hljs-number">500</span> <span class="hljs-number">21</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;ApacheBench/2.3&quot;</span> <span class="hljs-number">122267385</span> <span class="hljs-string">&quot;data-api.bgbiao.cn/&quot;</span> <span class="hljs-string">&quot;http://20.0.26.9:8080&quot;</span> <span class="hljs-number">1</span>ms192.<span class="hljs-number">168.0</span>.<span class="hljs-number">23</span> - - [<span class="hljs-number">28</span><span class="hljs-regexp">/Jun/</span><span class="hljs-number">2020</span>:<span class="hljs-number">14</span>:<span class="hljs-number">57</span>:<span class="hljs-number">38</span> +<span class="hljs-number">0000</span>] <span class="hljs-string">&quot;POST /account/users/login/ HTTP/1.0&quot;</span> <span class="hljs-number">500</span> <span class="hljs-number">21</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;ApacheBench/2.3&quot;</span> <span class="hljs-number">122267410</span> <span class="hljs-string">&quot;data-api.bgbiao.cn/&quot;</span> <span class="hljs-string">&quot;http://20.0.41.8:8080&quot;</span> <span class="hljs-number">1</span>ms192.<span class="hljs-number">168.0</span>.<span class="hljs-number">23</span> - - [<span class="hljs-number">28</span><span class="hljs-regexp">/Jun/</span><span class="hljs-number">2020</span>:<span class="hljs-number">14</span>:<span class="hljs-number">57</span>:<span class="hljs-number">38</span> +<span class="hljs-number">0000</span>] <span class="hljs-string">&quot;POST /account/users/login/ HTTP/1.0&quot;</span> <span class="hljs-number">500</span> <span class="hljs-number">21</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;ApacheBench/2.3&quot;</span> <span class="hljs-number">122267418</span> <span class="hljs-string">&quot;data-api.bgbiao.cn/&quot;</span> <span class="hljs-string">&quot;http://20.0.41.8:8080&quot;</span> <span class="hljs-number">1</span>ms192.<span class="hljs-number">168.0</span>.<span class="hljs-number">23</span> - - [<span class="hljs-number">28</span><span class="hljs-regexp">/Jun/</span><span class="hljs-number">2020</span>:<span class="hljs-number">14</span>:<span class="hljs-number">57</span>:<span class="hljs-number">38</span> +<span class="hljs-number">0000</span>] <span class="hljs-string">&quot;POST /account/users/login/ HTTP/1.0&quot;</span> <span class="hljs-number">500</span> <span class="hljs-number">21</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;ApacheBench/2.3&quot;</span> <span class="hljs-number">122267484</span> <span class="hljs-string">&quot;data-api.bgbiao.cn/&quot;</span> <span class="hljs-string">&quot;http://20.0.26.9:8080&quot;</span> <span class="hljs-number">1</span>ms192.<span class="hljs-number">168.0</span>.<span class="hljs-number">23</span> - - [<span class="hljs-number">28</span><span class="hljs-regexp">/Jun/</span><span class="hljs-number">2020</span>:<span class="hljs-number">14</span>:<span class="hljs-number">57</span>:<span class="hljs-number">38</span> +<span class="hljs-number">0000</span>] <span class="hljs-string">&quot;POST /account/users/login/ HTTP/1.0&quot;</span> <span class="hljs-number">502</span> <span class="hljs-number">11</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;ApacheBench/2.3&quot;</span> <span class="hljs-number">122267518</span> <span class="hljs-string">&quot;data-api.bgbiao.cn/&quot;</span> <span class="hljs-string">&quot;http://20.0.26.9:8080&quot;</span> <span class="hljs-number">1</span>ms192.<span class="hljs-number">168.0</span>.<span class="hljs-number">23</span> - - [<span class="hljs-number">28</span><span class="hljs-regexp">/Jun/</span><span class="hljs-number">2020</span>:<span class="hljs-number">14</span>:<span class="hljs-number">57</span>:<span class="hljs-number">39</span> +<span class="hljs-number">0000</span>] <span class="hljs-string">&quot;POST /account/users/login/ HTTP/1.0&quot;</span> <span class="hljs-number">500</span> <span class="hljs-number">21</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;ApacheBench/2.3&quot;</span> <span class="hljs-number">122267550</span> <span class="hljs-string">&quot;data-api.bgbiao.cn/&quot;</span> <span class="hljs-string">&quot;http://20.0.26.9:8080&quot;</span> <span class="hljs-number">4</span>ms192.<span class="hljs-number">168.0</span>.<span class="hljs-number">23</span> - - [<span class="hljs-number">28</span><span class="hljs-regexp">/Jun/</span><span class="hljs-number">2020</span>:<span class="hljs-number">15</span>:<span class="hljs-number">02</span>:<span class="hljs-number">06</span> +<span class="hljs-number">0000</span>] <span class="hljs-string">&quot;POST /account/users/login/ HTTP/1.0&quot;</span> <span class="hljs-number">502</span> <span class="hljs-number">11</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;ApacheBench/2.3&quot;</span> <span class="hljs-number">122272696</span> <span class="hljs-string">&quot;data-api.bgbiao.cn/&quot;</span> <span class="hljs-string">&quot;http://20.0.41.8:8080&quot;</span> <span class="hljs-number">2</span>ms192.<span class="hljs-number">168.0</span>.<span class="hljs-number">23</span> - - [<span class="hljs-number">28</span><span class="hljs-regexp">/Jun/</span><span class="hljs-number">2020</span>:<span class="hljs-number">15</span>:<span class="hljs-number">02</span>:<span class="hljs-number">06</span> +<span class="hljs-number">0000</span>] <span class="hljs-string">&quot;POST /account/users/login/ HTTP/1.0&quot;</span> <span class="hljs-number">502</span> <span class="hljs-number">11</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;ApacheBench/2.3&quot;</span> <span class="hljs-number">122272711</span> <span class="hljs-string">&quot;data-api.bgbiao.cn/&quot;</span> <span class="hljs-string">&quot;http://20.0.41.8:8080&quot;</span> <span class="hljs-number">1</span>ms192.<span class="hljs-number">168.0</span>.<span class="hljs-number">23</span> - - [<span class="hljs-number">28</span><span class="hljs-regexp">/Jun/</span><span class="hljs-number">2020</span>:<span class="hljs-number">15</span>:<span class="hljs-number">02</span>:<span class="hljs-number">06</span> +<span class="hljs-number">0000</span>] <span class="hljs-string">&quot;POST /account/users/login/ HTTP/1.0&quot;</span> <span class="hljs-number">500</span> <span class="hljs-number">21</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;ApacheBench/2.3&quot;</span> <span class="hljs-number">122272836</span> <span class="hljs-string">&quot;data-api.bgbiao.cn/&quot;</span> <span class="hljs-string">&quot;http://20.0.26.9:8080&quot;</span> <span class="hljs-number">0</span>ms192.<span class="hljs-number">168.0</span>.<span class="hljs-number">23</span> - - [<span class="hljs-number">28</span><span class="hljs-regexp">/Jun/</span><span class="hljs-number">2020</span>:<span class="hljs-number">15</span>:<span class="hljs-number">02</span>:<span class="hljs-number">06</span> +<span class="hljs-number">0000</span>] <span class="hljs-string">&quot;POST /account/users/login/ HTTP/1.0&quot;</span> <span class="hljs-number">500</span> <span class="hljs-number">21</span> <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;ApacheBench/2.3&quot;</span> <span class="hljs-number">122272837</span> <span class="hljs-string">&quot;data-api.bgbiao.cn/&quot;</span> <span class="hljs-string">&quot;http://20.0.41.8:8080&quot;</span> <span class="hljs-number">0</span>ms<br><br></code></pre></td></tr></table></figure><p>可以看到，和我们压测结果里失败请求的状态码相同，都是 <code>500</code> 和 <code>502</code>，虽然数量上不止 4 个，但这暂时不太重要。</p><p>通常对于大多数人来讲，在代理层看到 500 或者 502 都会下意识的想，肯定是上游服务的问题，不过这种猜测也能很快进行排除，排除的方法基本如下:</p><ul><li>在压测出现 500 和 502 期间，持续去访问上游服务器</li><li>使用同样的压测参数直接压上游服务器</li><li>将上游服务部署在独立的 ECS 上并使用同样参数进行压测</li></ul><p>经过上述三种方式的测试后，我们基本排除了上游服务的问题，因此正式怀疑 traefik 本身是否有性能或者其他参数上的问题。</p><p>修改 traefki 中的日志级别为 <code>DEBUG</code>:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><br>cat traefik-ds-v1.7.6.yaml.<span class="hljs-string">...</span>        args:        - <span class="hljs-params">--api</span>        - <span class="hljs-params">--kubernetes</span>        - <span class="hljs-params">--logLevel=DEBUG</span>.<span class="hljs-string">...</span><br><br></code></pre></td></tr></table></figure><p>然后在日志中看到如下相关信息:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br># <span class="hljs-number">500</span>相关的日志<span class="hljs-type">time</span>=&quot;2020-06-28T15:35:05Z&quot; <span class="hljs-keyword">level</span>=<span class="hljs-keyword">debug</span> msg=&quot;&#x27;500 Internal Server Error&#x27; caused by: http: server closed idle connection&quot;<span class="hljs-type">time</span>=&quot;2020-06-28T15:35:05Z&quot; <span class="hljs-keyword">level</span>=<span class="hljs-keyword">debug</span> msg=&quot;vulcand/oxy/forward/http: Round trip: &lt;http://20.0.26.9:8080&gt;, code: 500, Length: 21, duration: 1.486276ms&quot;# <span class="hljs-number">502</span>相关的日志<span class="hljs-type">time</span>=&quot;2020-06-28T15:35:05Z&quot; <span class="hljs-keyword">level</span>=<span class="hljs-keyword">debug</span> msg=&quot;&#x27;502 Bad Gateway&#x27; caused by: EOF&quot;<span class="hljs-type">time</span>=&quot;2020-06-28T15:35:05Z&quot; <span class="hljs-keyword">level</span>=<span class="hljs-keyword">debug</span> msg=&quot;vulcand/oxy/forward/http: Round trip: &lt;http://20.0.26.9:8080&gt;, code: 502, Length: 11, duration: 1.530677ms&quot;<br><br></code></pre></td></tr></table></figure><p>上面的 500 信息，大概可以看出来是 traefik 的服务进程主动关闭了空闲链接导致的，而下面的 502 是因为 EOF，感觉像是没有读取完响应数据，就被断开了，导致 traefik 返回 502。通常这种情况在 Nginx 中很常见，也很容易调整相关的配置参数 (文章开始有提到)，但是 traefik 的部署模式以及参数调整，还是需要花心思去看相关文档的。</p><p>然后在 github 上去翻 traefik 相关的 issues，发现该问题曾经出现过很多次。</p><ul><li><a href="https://github.com/containous/traefik/issues/4481">Traefik return 500 internal error - no 500 on backend</a></li><li><a href="https://github.com/containous/traefik/issues/3237">Sporadic 502 response only when running through traefik</a></li></ul><p>一个是 500 的 issues，一个是 502 的 issues，但通常这两个问题都是成双出现的。</p><h4 id="500-和-502-问题解决方案"><a href="#500-和-502-问题解决方案" class="headerlink" title="500 和 502 问题解决方案"></a>500 和 502 问题解决方案</h4><p>在上面第一个 issue 中提到，traefik 在 http 的反向代理功能中默认开启了 http 的 keep-alive 功能，但是 python 的应用中未开启 http 的 keep-alive，因为我们上面的测试程序其实也是使用的 python 开发的，先对该参数进行调整。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><br># 在uwsgi.ini中增加keep-alive参数即可$ cat uwsgi.ini[uwsgi]http = <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">8080</span>http-keepalive = <span class="hljs-number">1</span>chdir = <span class="hljs-regexp">/opt/</span>app<span class="hljs-regexp">/wsgi-file = /</span>opt<span class="hljs-regexp">/app/m</span>ain.pycallable = appstats = <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">8081</span>processes = <span class="hljs-number">2</span>threads = <span class="hljs-number">10</span># 重启应用后，再次进行压测# 之前出现的<span class="hljs-number">502</span>和<span class="hljs-number">500</span>错误基本都消失了# 并发<span class="hljs-number">200</span>，共<span class="hljs-number">1</span>万个请求，失败的请求数为<span class="hljs-number">0</span>，总耗时<span class="hljs-number">1</span>min(qps才到<span class="hljs-number">160</span>😸)$ ab  -c <span class="hljs-number">200</span> -n <span class="hljs-number">10000</span>   -T <span class="hljs-string">&#x27;application/json&#x27;</span> -p <span class="hljs-regexp">/root/</span>login.json &lt;http:<span class="hljs-comment">//data-api.bgbiao.cn/account/users/login/........Concurrency&gt; Level:      200Time taken for tests:   59.323 secondsComplete requests:      10000Failed requests:        0Write errors:           0Total transferred:      4670000 bytesTotal body sent:        2320000HTML transferred:       2500000 bytesRequests per second:    168.57 [#/sec] (mean)Time per request:       1186.454 [ms] (mean)Time per request:       5.932 [ms] (mean, across all concurrent requests)Transfer rate:          76.88 [Kbytes/sec] received                        38.19 kb/s sent                        115.07 kb/s totalConnection Times (ms)              min  mean[+/-sd] median   maxConnect:        1    3  38.6      1    1035Processing:   101  942 1457.7    857   32684Waiting:      101  942 1457.7    857   32684Total:        102  945 1458.0    861   32685# p99达到7.3sPercentage of the requests served within a certain time (ms)  50%    861  66%   1033  75%   1136  80%   1191  90%   1886  95%   2281  98%   4209  99%   7399 100%  32685 (longest request)</span><br><br></code></pre></td></tr></table></figure><p>通过对业务层的 http 的 keep-alive 参数的开启，来暂时解决了 500 和 502 的问题，那能否通过 traefik 层的参数来优化该问题呢，上面第二个 issue 中其实也提到了。</p><p>即，通过修改 traefik 的如下几个参数，并重新部署整个 traefik 集群即可:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><br><span class="hljs-comment"># 关闭traefik的keep-alive参数，参数默认为200，如果参数为0，则使用go标准库中的DefaultMaxIdleConnsPerHost参数# keep-alive主要是用来复用链接来减少open files的，但是对于大量的短连接来将这种链接复用就可能出现上述情况</span><br><span class="hljs-comment">--maxidleconnsperhost=-1# 即通过设置重试次数，增加空闲链接的超时时间，增加转发响应的超时时间,默认是0次</span><br><span class="hljs-comment">--retry.attempts=10# 该参数已经替换为--respondingtimeouts.idletimeout参数了，默认为3m0s</span><br><span class="hljs-comment">--idletimeout=60s# 默认是0s</span><br><span class="hljs-comment">--forwardingtimeouts.responseheadertimeout=60s# </span><br>traefik 空闲链接超时<br>$ ./traefik <span class="hljs-comment">--help | grep idletimeout    </span><br><span class="hljs-comment">--idletimeout                                 (Deprecated) maximum amount of time an idle (keep-alive) connection will remain  (default &quot;0s&quot;)    </span><br><span class="hljs-comment">--respondingtimeouts.idletimeout              IdleTimeout is the maximum amount duration an idle (keep-alive) connection will  (default &quot;3m0s&quot;)</span><br><span class="hljs-comment"># 响应超时相关参数 </span><br>$ ./traefik <span class="hljs-comment">--help | grep respondingtimeouts    </span><br><span class="hljs-comment">--respondingtimeouts                          Timeouts for incoming requests to the Traefik instance                           (default &quot;true&quot;)    </span><br><span class="hljs-comment">--respondingtimeouts.idletimeout              IdleTimeout is the maximum amount duration an idle (keep-alive) connection will  (default &quot;3m0s&quot;)    </span><br><span class="hljs-comment">--respondingtimeouts.readtimeout              ReadTimeout is the maximum duration for reading the entire request, including    (default &quot;0s&quot;)    </span><br><span class="hljs-comment">--respondingtimeouts.writetimeout             WriteTimeout is the maximum duration before timing out writes of the response.   (default &quot;0s&quot;)</span><br><span class="hljs-comment"># 转发的超时</span><br>$ ./traefik <span class="hljs-comment">--help | grep forwardingtimeouts    </span><br><span class="hljs-comment">--forwardingtimeouts                          Timeouts for requests forwarded to the backend servers                           (default &quot;true&quot;)    </span><br><span class="hljs-comment">--forwardingtimeouts.dialtimeout              The amount of time to wait until a connection to a backend server can be         (default &quot;30s&quot;)    </span><br><span class="hljs-comment">--forwardingtimeouts.responseheadertimeout    The amount of time to wait for a server&#x27;s response headers after fully writing   (default &quot;0s&quot;)</span><br><br></code></pre></td></tr></table></figure><p>最终修改后的 traefik 的参数如下:</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><br><span class="hljs-comment"># 可以根据实际情况考虑是否要关闭keep</span><span class="hljs-literal">-</span><span class="hljs-comment">alive 即增加参数:</span> <span class="hljs-literal">--</span><span class="hljs-comment">maxidleconnsperhost=</span><span class="hljs-literal">-</span><span class="hljs-comment">1</span>        <span class="hljs-literal">-</span> <span class="hljs-literal">--</span><span class="hljs-comment">api</span>        <span class="hljs-literal">-</span> <span class="hljs-literal">--</span><span class="hljs-comment">kubernetes</span>        <span class="hljs-literal">-</span> <span class="hljs-literal">--</span><span class="hljs-comment">logLevel=INFO</span>        <span class="hljs-literal">-</span> <span class="hljs-literal">--</span><span class="hljs-comment">traefikLog</span><span class="hljs-string">.</span><span class="hljs-comment">filePath=/logdata/traefik</span><span class="hljs-string">.</span><span class="hljs-comment">log</span>        <span class="hljs-literal">-</span> <span class="hljs-literal">--</span><span class="hljs-comment">configfile=/config/traefik</span><span class="hljs-string">.</span><span class="hljs-comment">toml</span>        <span class="hljs-literal">-</span> <span class="hljs-literal">--</span><span class="hljs-comment">accesslog</span><span class="hljs-string">.</span><span class="hljs-comment">filepath=/logdata/access</span><span class="hljs-string">.</span><span class="hljs-comment">log</span>        <span class="hljs-literal">-</span> <span class="hljs-literal">--</span><span class="hljs-comment">accesslog</span><span class="hljs-string">.</span><span class="hljs-comment">bufferingsize=100</span>        <span class="hljs-literal">-</span> <span class="hljs-literal">--</span><span class="hljs-comment">forwardingtimeouts</span><span class="hljs-string">.</span><span class="hljs-comment">responseheadertimeout=60s</span>        <span class="hljs-literal">-</span> <span class="hljs-literal">--</span><span class="hljs-comment">respondingtimeouts</span><span class="hljs-string">.</span><span class="hljs-comment">idletimeout=180s</span>        <span class="hljs-literal">-</span> <span class="hljs-literal">--</span><span class="hljs-comment">retry</span><span class="hljs-string">.</span><span class="hljs-comment">attempts=10</span>        <span class="hljs-literal">-</span> <span class="hljs-literal">--</span><span class="hljs-comment">idletimeout=180s</span><br><br></code></pre></td></tr></table></figure><h2 id="三、SLB-中诡异的-503"><a href="#三、SLB-中诡异的-503" class="headerlink" title="三、SLB 中诡异的 503"></a>三、SLB 中诡异的 503</h2><p>在发现域名直接解析到 traefik 节点上不再出现 502 和 500 后，我们将 traefik 的节点挂载到阿里云的内网 slb 中，但是又开始出现了诡异的 503 问题。</p><p>接入 slb 后的简单压测情况 (内网使用的是免费低配的 slb😹)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment"># client-&gt;ali-slb-&gt;traefik-&gt;pods$ ab -v 10 -c 200 -n 2000   -T &#x27;application/json&#x27; -p postfile.json &lt;http://data-api.soulapp.cn/get_doc&gt; &gt; slb-log.txt$ cat slb-log.txt | grep  &#x27;HTTP/1.1 200&#x27; | wc -l1322$ cat slb-log.txt | grep  &#x27;HTTP/1.1 503&#x27; | wc -l678# client-&gt;traefik-&gt;pods$ ab -v 10 -c 200 -n 2000   -T &#x27;application/json&#x27; -p postfile.json &lt;http://data-api.c.bgbiao.cn/get_doc&gt; &gt; traefik-log.txtCompleted 200 requestsCompleted 400 requestsCompleted 600 requestsCompleted 800 requestsCompleted 1000 requestsCompleted 1200 requestsCompleted 1400 requestsCompleted 1600 requestsCompleted 1800 requestsCompleted 2000 requestsFinished 2000 requests$ cat traefik-log.txt  | grep  &#x27;HTTP/1.0 200&#x27; | wc -l2000</span><br><br></code></pre></td></tr></table></figure><p>后来在阿里云文档中看到如下文档，基本上就是在阿里云的 SLB 侧对不同规格的 SLB 做了一定的限流策略，此时会向客户端返回 503。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>rabbimq</title>
    <link href="/2022/07/13/rabbimq/"/>
    <url>/2022/07/13/rabbimq/</url>
    
    <content type="html"><![CDATA[<p>echo “&#x2F;dev&#x2F;sdb1  &#x2F;data                       xfs     defaults        0 0”&gt;&gt;&#x2F;etc&#x2F;fstab</p><p> mkdir &#x2F;data&#x2F;backup</p><p>cd  &#x2F;data&#x2F;backup</p><p> tar zcvf boot.tgz &#x2F;boot&#x2F; </p><pre><code class="hljs">      ports:        - containerPort: 4369          protocol: TCP        - containerPort: 4369      name: epmd      protocol: TCP    - containerPort: 5672      name: amqp      protocol: TCP    - containerPort: 25672      name: dist      protocol: TCP    - containerPort: 15672      name: stats      protocol: TCP</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>redhat中设置时区</title>
    <link href="/2022/07/13/redhat%E4%B8%AD%E8%AE%BE%E7%BD%AE%E6%97%B6%E5%8C%BA/"/>
    <url>/2022/07/13/redhat%E4%B8%AD%E8%AE%BE%E7%BD%AE%E6%97%B6%E5%8C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="redhat中设置时区"><a href="#redhat中设置时区" class="headerlink" title="redhat中设置时区"></a>redhat中设置时区</h1><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><ul><li>redhat7.0</li><li>设置时区：Asia&#x2F;Shanghai。</li></ul><h1 id="查看时区"><a href="#查看时区" class="headerlink" title="查看时区"></a>查看时区</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># timedatectl status</span><br><span class="hljs-string">---------------------------</span><br>      <span class="hljs-attr">Local time:</span> <span class="hljs-string">Wed</span> <span class="hljs-number">2018-07-25 17:28:01 </span><span class="hljs-string">CST</span><br>  <span class="hljs-attr">Universal time:</span> <span class="hljs-string">Wed</span> <span class="hljs-number">2018-07-25 09:28:01 </span><span class="hljs-string">UTC</span><br>        <span class="hljs-attr">RTC time:</span> <span class="hljs-string">Wed</span> <span class="hljs-number">2018-07-25 09:28:01</span><br>       <span class="hljs-attr">Time zone:</span> <span class="hljs-string">Asia/Shanghai</span> <span class="hljs-string">(CST,</span> <span class="hljs-string">+0800)</span><br> <span class="hljs-attr">Network time on:</span> <span class="hljs-literal">yes</span><br><span class="hljs-attr">NTP synchronized:</span> <span class="hljs-literal">yes</span><br> <span class="hljs-attr">RTC in local TZ:</span> <span class="hljs-literal">no</span><br><span class="hljs-number">123456789</span><br></code></pre></td></tr></table></figure><h1 id="查询时区（shanghai）"><a href="#查询时区（shanghai）" class="headerlink" title="查询时区（shanghai）"></a>查询时区（shanghai）</h1><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"># timedatectl list-timezones | egrep -o &quot;Asia/.*&quot;<br><span class="hljs-section"># timedatectl list-timezones | egrep -o &quot;Asia/Shang.*&quot;</span><br><span class="hljs-section">----------------</span><br>Asia/Shanghai<br><br>12345<br></code></pre></td></tr></table></figure><h1 id="设置时区（中国上海时区）"><a href="#设置时区（中国上海时区）" class="headerlink" title="设置时区（中国上海时区）"></a>设置时区（中国上海时区）</h1><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"># timedatectl <span class="hljs-keyword">set</span>-timezone <span class="hljs-comment">&quot;Asia/Shanghai&quot;</span><br>1<br></code></pre></td></tr></table></figure><h1 id="确认设置结果"><a href="#确认设置结果" class="headerlink" title="确认设置结果"></a>确认设置结果</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># timedatectl status</span><br><span class="hljs-string">----------------------------</span><br>      <span class="hljs-attr">Local time:</span> <span class="hljs-string">Wed</span> <span class="hljs-number">2018-07-25 16:54:17 </span><span class="hljs-string">CST</span><br>  <span class="hljs-attr">Universal time:</span> <span class="hljs-string">Wed</span> <span class="hljs-number">2018-07-25 08:54:17 </span><span class="hljs-string">UTC</span><br>        <span class="hljs-attr">RTC time:</span> <span class="hljs-string">Wed</span> <span class="hljs-number">2018-07-25 08:54:17</span><br>       <span class="hljs-attr">Time zone:</span> <span class="hljs-string">Asia/Shanghai</span> <span class="hljs-string">(CST,</span> <span class="hljs-string">+0800)</span><br> <span class="hljs-attr">Network time on:</span> <span class="hljs-literal">yes</span><br><span class="hljs-attr">NTP synchronized:</span> <span class="hljs-literal">yes</span><br> <span class="hljs-attr">RTC in local TZ:</span> <span class="hljs-literal">no</span><br><span class="hljs-number">123456789</span><br></code></pre></td></tr></table></figure><h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><p><a href="https://www.cnblogs.com/zhi-leaf/p/6282301.html">Linux下使用timedatectl命令时间时区操作详解</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>对象存储</title>
    <link href="/2022/07/13/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/"/>
    <url>/2022/07/13/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="对象存储"><a href="#对象存储" class="headerlink" title="对象存储"></a>对象存储</h1><p>对象存储服务提供了一种海量、安全和高可靠的对象存储服务，支持存储容量和吞吐能力的弹性扩展，适用于海量非结构化数据存储、备份等业务场景。云存储服务提供服务使用、管理、恢复、容灾的全套解决方案，免去用户采购、部署、优化、维护专用存储设备的成本。</p><p>如图所示，</p><p>对象存储采用多Server架构提供高可用，其中Auth Server提供认证系统；Account Service、Container Service、Object Service将账户数据、容器数据以及文件描述性数据（名称、类型、元数据等）存储在数据库中；Object Service 根据存储策略调用相应的Driver将对象内容存储到存储后端（Gluster FS、NFS等）。支持多个存储后端共同存在。</p><p> 主要功能：</p><ol><li></li></ol><p>存储容器管理</p><p>对象存储服务通过存储容器（</p><p>Bucket</p><p>）来进行对象的存储和管理，用户可以创建</p><p>一个或多个容器，</p><p>按照不同的存储内容、用途或文件类型等来对文件进行分别存储和管</p><p>理。并可对容器进行配置修改、规格调整和删除等管理操作。</p><ol start="2"><li></li></ol><p>权限管理</p><p><img src="https://wkbjcloudbos.bdimg.com/v1/docconvert9992/wk/0eec24ad6c59e1ba8518d71eba1ff173/0.png?responseContentType=image/png&responseCacheControl=max-age=3888000&responseExpires=Sat,%2005%20Dec%202020%2011:14:47%20+0800&authorization=bce-auth-v1/fa1126e91489401fa7cc85045ce7179e/2020-10-21T03:14:47Z/3600/host/76defcd41ed1b1b6cab6add99ec518735a7045a47e204db2622b9e2d22d71e50&x-bce-range=59281-83471&token=eyJ0eXAiOiJKSVQiLCJ2ZXIiOiIxLjAiLCJhbGciOiJIUzI1NiIsImV4cCI6MTYwMzI1MzY4NywidXJpIjp0cnVlLCJwYXJhbXMiOlsicmVzcG9uc2VDb250ZW50VHlwZSIsInJlc3BvbnNlQ2FjaGVDb250cm9sIiwicmVzcG9uc2VFeHBpcmVzIiwieC1iY2UtcmFuZ2UiXX0=.ka41Km3a+8/Zehi+NHPd4uLiVUMuPdT3T8OYkslkm5E=.1603253687" alt="img"></p><p>容器访问权限可以分为公开和私密两种。</p><p>公开：</p><p>存储对象没有权限限制，</p><p>只要提供有效的</p><p>URL</p><p>，</p><p>就可以进行对容器内的对</p><p>象的读、写、删除、拷贝、移动等操作。</p><p>私密：</p><p>对这一类存储对象进行操作时需要提供正确的</p><p>URL</p><p>以及</p><p>Token(Token</p><p>是</p><p>云存储服务对账户名及密码进行认证后生成的在一段时间内有效的字符串</p><p>)</p><p>才有权限进</p><p>行读、写、删除、拷贝、移动等操作。</p><ol start="3"><li></li></ol><p>多种存储对象上传下载</p><p>支持多种类型存储对象的上传下载，例如图片、音频、视频、视频流、文本、日</p><p>志、数据库、二进制等。</p><p>支持断点下载。</p><p>支持分片上传。大文件上传时会自动对文件进行分片，按片上传，上传过程出现</p><p>中断时，已经上传完成的部分不必重新上传。</p><p>支持流式追加。</p><p>针对流式文件支持流式追加，</p><p>并可以在追加过程中进行读取操作。</p><ol start="4"><li></li></ol><p>存储对象版本管理</p><p>支持保存同一存储对象的多个历史版本，以便实现重要文件的恢复功能。</p><ol start="5"><li></li></ol><p>文件浏览式</p><p>WEB</p><p>控制台</p><p>提供可视化的文件浏览式管理控制台，</p><p>用户可以通过浏览器方便实现存储对象的</p><p>批量上传</p><p>&#x2F;</p><p>下载、检索、管理等操作。</p><ol start="6"><li></li></ol><p>可视化监控及告警</p><p>支持以数据表格和图表方式展示存储容器的使用量、存储对象数等。并支持针对</p><p>相关指标的阈值告警功能。</p><ol start="7"><li></li></ol><p>行为审计</p><p>记录用户对存储对象的操作时间、操作来源、操作对象等，方便用户行为日志分</p><p>析以及存储对象变更历史追溯。</p><p>进入master1</p><p>vi  &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;grastate.dat</p><p>修改 safe_to_bootstrap: 0 为 safe_to_bootstrap: 1</p><p>重启mysql</p><p> kubectl -n venus-plugin delete po –force –grace-period&#x3D;0</p><p>[root@master1 mysql]# sed -i ‘s#safe_to_bootstrap: 0#safe_to_bootstrap: 1#g’ &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;grastate.dat<br>[root@master1 mysql]# grep boot grastate.dat</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>node-tgz-downloader</title>
    <link href="/2022/07/13/node-tgz-downloader/"/>
    <url>/2022/07/13/node-tgz-downloader/</url>
    
    <content type="html"><![CDATA[<h1 id="node-tgz-downloader"><a href="#node-tgz-downloader" class="headerlink" title="node-tgz-downloader"></a>node-tgz-downloader</h1><p>Downloads all of the tarballs based on one of the following:</p><ul><li>local <code>package-lock.json</code> file</li><li>url to a <code>package-lock.json</code></li><li>name of package</li><li>local <code>package.json</code> file</li><li>url to a <code>package.json</code></li><li>search keyword</li></ul><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">npm install <span class="hljs-keyword">node</span><span class="hljs-title">-tgz-downloader</span> -g<br></code></pre></td></tr></table></figure><h2 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h2><h3 id="package-lock-json"><a href="#package-lock-json" class="headerlink" title="package-lock.json"></a>package-lock.json</h3><p>from local file:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">download-tgz package-<span class="hljs-keyword">lock</span> <span class="hljs-type">path</span>/<span class="hljs-keyword">to</span>/package-<span class="hljs-keyword">lock</span>.json<br></code></pre></td></tr></table></figure><p>from url:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">download-tgz package-lock https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/Meir017/</span>node-tgz-downloader<span class="hljs-regexp">/master/</span>package-lock.json<br></code></pre></td></tr></table></figure><h3 id="package-name"><a href="#package-name" class="headerlink" title="package name"></a>package name</h3><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">download-tgz <span class="hljs-built_in">package</span> @angular/cli <span class="hljs-comment">--devDependencies --peerDependencies</span><br></code></pre></td></tr></table></figure><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>from local file:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">download-tgz package-<span class="hljs-type">json</span> <span class="hljs-keyword">path</span>/<span class="hljs-keyword">to</span>/package.json<br></code></pre></td></tr></table></figure><p>from url:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">download-tgz package-json https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/Meir017/</span>node-tgz-downloader<span class="hljs-regexp">/master/</span>package.json<br></code></pre></td></tr></table></figure><h3 id="search-keyword"><a href="#search-keyword" class="headerlink" title="search keyword"></a>search keyword</h3><p>downloads the packages returned from an npm search query (<a href="https://registry.npmjs.org/-/v1/search">https://registry.npmjs.org/-/v1/search</a>?)</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">download-tgz search tgz</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nexcloud 备份数据增量同步到 nas 备份目录</title>
    <link href="/2022/07/13/nexcloud%20%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%A2%9E%E9%87%8F%E5%90%8C%E6%AD%A5%E5%88%B0%20nas%20%E5%A4%87%E4%BB%BD%E7%9B%AE%E5%BD%95/"/>
    <url>/2022/07/13/nexcloud%20%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%A2%9E%E9%87%8F%E5%90%8C%E6%AD%A5%E5%88%B0%20nas%20%E5%A4%87%E4%BB%BD%E7%9B%AE%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="nexcloud-备份数据增量同步到-nas-备份目录"><a href="#nexcloud-备份数据增量同步到-nas-备份目录" class="headerlink" title="nexcloud 备份数据增量同步到 nas 备份目录"></a>nexcloud 备份数据增量同步到 nas 备份目录</h1><h2 id="安装nfs"><a href="#安装nfs" class="headerlink" title="安装nfs"></a>安装nfs</h2><p>yum install -y nfs-utils rpcbind #创建nexcloud数据备份目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /nas-data/<br></code></pre></td></tr></table></figure><p>nas 备份目录 <code>192.168.0.43:/volume1/develop/backup/confluence</code> 挂载nas 备份目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount -t nfs 192.168.0.43:/volume1/develop/backup/confluence /data/backups/<br></code></pre></td></tr></table></figure><p>开机自动挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;# device             mountpoint  fs-type    options    dump fsckord</span><br><span class="hljs-string">192.168.0.43:/volume1/develop/backup/confluence  /data/backups/ nfs      rw,hard,intr  0     0&quot;</span>&gt;&gt;/etc/fstab<br></code></pre></td></tr></table></figure><h2 id="安装rsync"><a href="#安装rsync" class="headerlink" title="安装rsync"></a>安装rsync</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y   rsync <br></code></pre></td></tr></table></figure><h2 id="备份脚本"><a href="#备份脚本" class="headerlink" title="备份脚本"></a>备份脚本</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>nexcloud-backup.sh<br><span class="hljs-comment">#!/bin/bash</span><br>export PATH=<span class="hljs-variable">$&#123;PATH&#125;</span><br>set -x<br><br><span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/rsync -avz  /</span>var<span class="hljs-regexp">/www/</span>nextcloud /nas-data <br></code></pre></td></tr></table></figure><h2 id="配置定时增量备份数据同步任务"><a href="#配置定时增量备份数据同步任务" class="headerlink" title="配置定时增量备份数据同步任务"></a>配置定时增量备份数据同步任务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">0 1 * * *   /bin/sh /usr/local/bin/nexcloud-backup.sh<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux非交互式修改密码（仅限root）</title>
    <link href="/2022/07/13/linux%E9%9D%9E%E4%BA%A4%E4%BA%92%E5%BC%8F%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81%EF%BC%88%E4%BB%85%E9%99%90root%EF%BC%89/"/>
    <url>/2022/07/13/linux%E9%9D%9E%E4%BA%A4%E4%BA%92%E5%BC%8F%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81%EF%BC%88%E4%BB%85%E9%99%90root%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="linux非交互式修改密码（仅限root）"><a href="#linux非交互式修改密码（仅限root）" class="headerlink" title="linux非交互式修改密码（仅限root）"></a>linux非交互式修改密码（仅限root）</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># chpasswd命令使用起来很简洁</span><br>[root<span class="hljs-variable">@host_221</span>-<span class="hljs-number">81</span> ~]<span class="hljs-comment"># echo &quot;root:l%t99QiK$rR0$MAD&quot; | chpasswd</span><br> <br><span class="hljs-comment"># 使用passwd命令，也可以实现非交互式修改密码</span><br>[root<span class="hljs-variable">@host_221</span>-<span class="hljs-number">81</span> ~]<span class="hljs-comment"># echo &#x27;l%t99QiK$rR0$MAD&#x27; | passwd --stdin &quot;root&quot;</span><br>Changing password <span class="hljs-keyword">for</span> user qa.<br><span class="hljs-symbol">passwd:</span> all authentication tokens updated successfully.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>harbor配置https访问</title>
    <link href="/2022/07/13/harbor%E9%85%8D%E7%BD%AEhttps%E8%AE%BF%E9%97%AE/"/>
    <url>/2022/07/13/harbor%E9%85%8D%E7%BD%AEhttps%E8%AE%BF%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="harbor配置https访问"><a href="#harbor配置https访问" class="headerlink" title="harbor配置https访问"></a><a href="https://www.cnblogs.com/cjwnb/p/13441071.html">harbor配置https访问</a></h1><p>参考文档：</p><p><a href="https://goharbor.io/docs/1.10/install-config/configure-https/">https://goharbor.io/docs/1.10/install-config/configure-https/</a></p><p><a href="https://goharbor.io/docs/1.10/install-config/troubleshoot-installation/#https">https://goharbor.io/docs/1.10/install-config/troubleshoot-installation/#https</a></p><p>默认情况下，Harbor不附带证书。可以在没有安全性的情况下部署Harbor，以便您可以通过HTTP连接到它。但是，只有在没有外部网络连接的空白测试或开发环境中，才可以使用HTTP。在没有空隙的环境中使用HTTP会使您遭受中间人攻击。在生产环境中，请始终使用HTTPS。如果启用Content Trust with Notary来正确签名所有图像，则必须使用HTTPS。</p><p>要配置HTTPS，必须创建SSL证书。您可以使用由受信任的第三方CA签名的证书，也可以使用自签名证书</p><h2 id="1-生成证书颁发机构证书"><a href="#1-生成证书颁发机构证书" class="headerlink" title="1. 生成证书颁发机构证书"></a>1. 生成证书颁发机构证书</h2><p>在生产环境中，您应该从CA获得证书。在测试或开发环境中，您可以生成自己的CA。要生成CA证书，请运行以下命令。</p><h3 id="1-1-生成CA证书私钥。"><a href="#1-1-生成CA证书私钥。" class="headerlink" title="1.1 生成CA证书私钥。"></a>1.1 生成CA证书私钥。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl genrsa -out ca.key 4096<br></code></pre></td></tr></table></figure><h3 id="1-2-生成CA证书"><a href="#1-2-生成CA证书" class="headerlink" title="1.2 生成CA证书"></a>1.2 生成CA证书</h3><p>调整<code>-subj</code>选项中的值以反映您的组织。如果使用FQDN连接Harbor主机，则必须将其指定为通用名称（<code>CN</code>）属性。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl req -x509 -new -nodes -sha512 -days 3650 \<br> -subj <span class="hljs-string">&quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=harbor.od.com&quot;</span> \<br> -key ca.key \<br> -out ca.crt<br></code></pre></td></tr></table></figure><p>如果是ip访问， 将 <code>harbor.od.com</code> 改成 ip地址</p><h2 id="2-生成服务器证书"><a href="#2-生成服务器证书" class="headerlink" title="2. 生成服务器证书"></a>2. 生成服务器证书</h2><p>证书通常包含一个<code>.crt</code>文件和一个<code>.key</code>文件</p><h3 id="2-1-生成私钥"><a href="#2-1-生成私钥" class="headerlink" title="2.1 生成私钥"></a>2.1 生成私钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl genrsa -out harbor.od.com.key 4096<br></code></pre></td></tr></table></figure><h3 id="2-2-生成证书签名请求（CSR）"><a href="#2-2-生成证书签名请求（CSR）" class="headerlink" title="2.2 生成证书签名请求（CSR）"></a>2.2 生成证书签名请求（CSR）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl req -sha512 -new \<br>    -subj <span class="hljs-string">&quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=harbor.od.com&quot;</span> \<br>    -key harbor.od.com.key \<br>    -out harbor.od.com.csr<br></code></pre></td></tr></table></figure><p>如果是ip访问， 将 <code>harbor.od.com</code> 改成 ip地址</p><h3 id="2-3-生成一个x509-v3扩展文件"><a href="#2-3-生成一个x509-v3扩展文件" class="headerlink" title="2.3 生成一个x509 v3扩展文件"></a>2.3 生成一个x509 v3扩展文件</h3><p>无论您使用FQDN还是IP地址连接到Harbor主机，都必须创建此文件，以便可以为您的Harbor主机生成符合主题备用名称（SAN）和x509 v3的证书扩展要求。替换<code>DNS</code>条目以反映您的域</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt; v3.ext &lt;&lt;-<span class="hljs-string">EOF</span><br><span class="hljs-string">authorityKeyIdentifier=keyid,issuer</span><br><span class="hljs-string">basicConstraints=CA:FALSE</span><br><span class="hljs-string">keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span><br><span class="hljs-string">extendedKeyUsage = serverAuth</span><br><span class="hljs-string">subjectAltName = @alt_names</span><br><span class="hljs-string"></span><br><span class="hljs-string">[alt_names]</span><br><span class="hljs-string">DNS.1=harbor.od.com</span><br><span class="hljs-string">DNS.2=harbor.od.com</span><br><span class="hljs-string">DNS.3=harbor.od.com</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><ul><li>如果是ip访问</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt; v3.ext &lt;&lt;-<span class="hljs-string">EOF</span><br><span class="hljs-string">authorityKeyIdentifier=keyid,issuer</span><br><span class="hljs-string">basicConstraints=CA:FALSE</span><br><span class="hljs-string">keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span><br><span class="hljs-string">extendedKeyUsage = serverAuth</span><br><span class="hljs-string">subjectAltName = IP:192.168.31.200</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="2-4-使用该v3-ext文件为您的Harbor主机生成证书"><a href="#2-4-使用该v3-ext文件为您的Harbor主机生成证书" class="headerlink" title="2.4 使用该v3.ext文件为您的Harbor主机生成证书"></a>2.4 使用该<code>v3.ext</code>文件为您的Harbor主机生成证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl x509 -req -sha512 -days 3650 \<br>    -extfile v3.ext \<br>    -CA ca.crt -CAkey ca.key -CAcreateserial \<br>    -<span class="hljs-keyword">in</span> harbor.od.com.csr \<br>    -out harbor.od.com.crt<br></code></pre></td></tr></table></figure><p>如果是ip访问， 将 <code>harbor.od.com</code> 改成 ip地址</p><h2 id="3-提供证书给Harbor和Docker"><a href="#3-提供证书给Harbor和Docker" class="headerlink" title="3. 提供证书给Harbor和Docker"></a>3. 提供证书给Harbor和Docker</h2><p>生成后<code>ca.crt</code>，<code>harbor.od.com.crt</code>和<code>harbor.od.com.key</code>文件，必须将它们提供给<code>Harbor</code>和<code>docker</code>，重新配置它们</p><h3 id="3-1-将服务器证书和密钥复制到Harbor主机上的-data-cert-文件夹中"><a href="#3-1-将服务器证书和密钥复制到Harbor主机上的-data-cert-文件夹中" class="headerlink" title="3.1 将服务器证书和密钥复制到Harbor主机上的/data/cert/文件夹中"></a>3.1 将服务器证书和密钥复制到Harbor主机上的<code>/data/cert/</code>文件夹中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /data/cert/<br><span class="hljs-built_in">cp</span> harbor.od.com.crt /data/cert/<br><span class="hljs-built_in">cp</span> harbor.od.com.key /data/cert/<br></code></pre></td></tr></table></figure><h3 id="3-2-转换harbor-od-com-crt为harbor-od-com-cert，供Docker使用"><a href="#3-2-转换harbor-od-com-crt为harbor-od-com-cert，供Docker使用" class="headerlink" title="3.2 转换harbor.od.com.crt为harbor.od.com.cert，供Docker使用"></a>3.2 转换<code>harbor.od.com.crt</code>为<code>harbor.od.com.cert</code>，供Docker使用</h3><p>Docker守护程序将<code>.crt</code>文件解释为CA证书，并将<code>.cert</code>文件解释为客户端证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl x509 -inform PEM -<span class="hljs-keyword">in</span> harbor.od.com.crt -out harbor.od.com.cert<br></code></pre></td></tr></table></figure><h3 id="3-3-将服务器证书，密钥和CA文件复制到Harbor主机上的Docker证书文件夹中。您必须首先创建适当的文件夹"><a href="#3-3-将服务器证书，密钥和CA文件复制到Harbor主机上的Docker证书文件夹中。您必须首先创建适当的文件夹" class="headerlink" title="3.3 将服务器证书，密钥和CA文件复制到Harbor主机上的Docker证书文件夹中。您必须首先创建适当的文件夹"></a>3.3 将服务器证书，密钥和CA文件复制到Harbor主机上的Docker证书文件夹中。您必须首先创建适当的文件夹</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /etc/docker/certs.d/harbor.od.com/<br><span class="hljs-built_in">cp</span> harbor.od.com.cert /etc/docker/certs.d/harbor.od.com/<br><span class="hljs-built_in">cp</span> harbor.od.com.key /etc/docker/certs.d/harbor.od.com/<br><span class="hljs-built_in">cp</span> ca.crt /etc/docker/certs.d/harbor.od.com/<br></code></pre></td></tr></table></figure><p>如果将默认<code>nginx</code>端口443 映射到其他端口，请创建文件夹<code>/etc/docker/certs.d/yourdomain.com:port</code>或<code>/etc/docker/certs.d/harbor_IP:port</code></p><h3 id="3-4-重新启动Docker-Engine"><a href="#3-4-重新启动Docker-Engine" class="headerlink" title="3.4 重新启动Docker Engine"></a>3.4 重新启动Docker Engine</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl restart docker<br></code></pre></td></tr></table></figure><h3 id="3-5-证书的目录结构"><a href="#3-5-证书的目录结构" class="headerlink" title="3.5 证书的目录结构"></a>3.5 证书的目录结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">/etc/docker/certs.d/<br>└── harbor.od.com<br>    ├── ca.crt<br>    ├── harbor.od.com.cert<br>    └── harbor.od.com.key<br></code></pre></td></tr></table></figure><h2 id="4-部署或重新配置Harbor"><a href="#4-部署或重新配置Harbor" class="headerlink" title="4. 部署或重新配置Harbor"></a>4. 部署或重新配置Harbor</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs dts">harbor.yml<br><span class="hljs-symbol">hostname:</span> harbor.od.com<br><span class="hljs-symbol">http:</span><br><span class="hljs-symbol"> port:</span> <span class="hljs-number">80</span><br><span class="hljs-symbol">https:</span><br><span class="hljs-symbol">  port:</span> <span class="hljs-number">443</span><br><span class="hljs-symbol">  certificate:</span> <span class="hljs-keyword">/data/</span>cert/harbor.od.com.crt <br><span class="hljs-symbol">  private_key:</span> <span class="hljs-keyword">/data/</span>cert/harbor.od.com.key<br><span class="hljs-symbol">external_url:</span> https:<span class="hljs-comment">//harbor.od.com</span><br><span class="hljs-symbol">harbor_admin_password:</span> Harbor12345<br><span class="hljs-symbol">database:</span><br><span class="hljs-symbol">  password:</span> root123<br><span class="hljs-symbol">  max_idle_conns:</span> <span class="hljs-number">50</span><br><span class="hljs-symbol">  max_open_conns:</span> <span class="hljs-number">100</span><br><span class="hljs-symbol">data_volume:</span> <span class="hljs-keyword">/data/</span>harbor<br><span class="hljs-symbol">clair:</span><br><span class="hljs-symbol">  updaters_interval:</span> <span class="hljs-number">12</span><br><span class="hljs-symbol">jobservice:</span><br><span class="hljs-symbol">  max_job_workers:</span> <span class="hljs-number">10</span><br><span class="hljs-symbol">notification:</span><br><span class="hljs-symbol">  webhook_job_max_retry:</span> <span class="hljs-number">10</span><br><span class="hljs-symbol">chart:</span><br><span class="hljs-symbol">  absolute_url:</span> disabled<br><span class="hljs-symbol">log:</span><br><span class="hljs-symbol">  level:</span> info<br><span class="hljs-symbol">  local:</span><br><span class="hljs-symbol">    rotate_count:</span> <span class="hljs-number">50</span><br><span class="hljs-symbol">    rotate_size:</span> <span class="hljs-number">200</span>M<br><span class="hljs-symbol">    location:</span> <span class="hljs-keyword">/data/</span>harbor/logs<br><span class="hljs-symbol">_version:</span> <span class="hljs-number">1.10</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">proxy:</span><br><span class="hljs-symbol">  http_proxy:</span><br><span class="hljs-symbol">  https_proxy:</span><br><span class="hljs-symbol">  no_proxy:</span><br><span class="hljs-symbol">  components:</span><br>    - core<br>    - jobservice<br>    - clair<br></code></pre></td></tr></table></figure><h4 id="4-1-运行prepare脚本以启用HTTPS"><a href="#4-1-运行prepare脚本以启用HTTPS" class="headerlink" title="4.1 运行prepare脚本以启用HTTPS"></a>4.1 运行<code>prepare</code>脚本以启用HTTPS</h4><p>Harbor将<code>nginx</code>实例用作所有服务的反向代理。您可以使用<code>prepare</code>脚本来配置<code>nginx</code>为使用HTTPS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./prepare<br></code></pre></td></tr></table></figure><h3 id="4-2-如果Harbor正在运行，请停止并删除现有实例"><a href="#4-2-如果Harbor正在运行，请停止并删除现有实例" class="headerlink" title="4.2 如果Harbor正在运行，请停止并删除现有实例"></a>4.2 如果Harbor正在运行，请停止并删除现有实例</h3><p>您的图像数据保留在文件系统中，因此不会丢失任何数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose down -v<br></code></pre></td></tr></table></figure><h3 id="4-3-重启docker"><a href="#4-3-重启docker" class="headerlink" title="4.3 重启docker"></a>4.3 重启docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose up -d<br></code></pre></td></tr></table></figure><h2 id="5-验证HTTPS连接"><a href="#5-验证HTTPS连接" class="headerlink" title="5. 验证HTTPS连接"></a>5. 验证HTTPS连接</h2><p>打开浏览器，然后输入<a href="https://harbor.od.com/">https://harbor.od.com</a>。它应该显示Harbor界面</p><p><img src="https://img2020.cnblogs.com/blog/1659259/202008/1659259-20200805164940054-522052746.png" alt="img"></p><p><img src="https://img2020.cnblogs.com/blog/1659259/202008/1659259-20200805165007587-652532731.png" alt="img"></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>然后登陆推送镜像测试， 如果服务器要推送代码到harbor， 必须在docker的配置文件的目录 <code>/etc/docker/certs.d/harbor.od.com/</code> 配置 服务器证书（<code>harbor.od.com.cert</code>），密钥（<code>harbor.od.com.key</code>）和CA文件（<code>ca.crt</code>）</p><p>分类: <a href="https://www.cnblogs.com/cjwnb/category/1625934.html">docker</a></p><p>2</p><p>0</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>devops 修改授权</title>
    <link href="/2022/07/13/devops%20%E4%BF%AE%E6%94%B9%E6%8E%88%E6%9D%83/"/>
    <url>/2022/07/13/devops%20%E4%BF%AE%E6%94%B9%E6%8E%88%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<p>IHsibW9kdWxlcyI6WyIvZGFzaGJvYXJkIiwiL2NvZGUiLCIvcGlwZUxpbmUiLCIvdGVzdFBsYW4iXSwidmFsaWRpdHkiOiIyMDIxLTEtMjAifQ&#x3D;&#x3D;</p><p>&#96;&#96;&#96;</p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20201231150304302.png" alt="image-20201231150304302"></p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20201231150319918.png" alt="image-20201231150319918"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python 面向对象编程</title>
    <link href="/2022/07/13/python%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <url>/2022/07/13/python%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="python-面向对象编程1"><a href="#python-面向对象编程1" class="headerlink" title="python 面向对象编程1"></a>python 面向对象编程1</h1><h1 id="面向过程与面向对象"><a href="#面向过程与面向对象" class="headerlink" title="面向过程与面向对象"></a>面向过程与面向对象</h1><h2 id="产生背景"><a href="#产生背景" class="headerlink" title="产生背景"></a>产生背景</h2><ol><li><p>科学计算为目标的必然产物<br>鸡兔同笼：</p><ol><li>先假设全部为鸡</li><li></li></ol></li><li><p>软件应用领域的扩张和系统膨胀之后运而生</p></li><li></li></ol><h2 id="编程方法"><a href="#编程方法" class="headerlink" title="编程方法"></a>编程方法</h2><pre><code class="hljs">1. 自顶向下2. 自底向上</code></pre><h2 id="代码主体结构"><a href="#代码主体结构" class="headerlink" title="代码主体结构"></a>代码主体结构</h2><pre><code class="hljs">1. 面向过程由变量加上数据、算法2. 面向对象由对象+交互</code></pre><h2 id="数据操作主体"><a href="#数据操作主体" class="headerlink" title="数据操作主体"></a>数据操作主体</h2><pre><code class="hljs">1. </code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows Server 2012 R2运行卡顿，访问加载速度慢</title>
    <link href="/2022/07/13/Windows%20Server%202012%20R2%E8%BF%90%E8%A1%8C%E5%8D%A1%E9%A1%BF%EF%BC%8C%E8%AE%BF%E9%97%AE%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6%E6%85%A2/"/>
    <url>/2022/07/13/Windows%20Server%202012%20R2%E8%BF%90%E8%A1%8C%E5%8D%A1%E9%A1%BF%EF%BC%8C%E8%AE%BF%E9%97%AE%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6%E6%85%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="Windows-Server-2012-R2运行卡顿，访问加载速度慢"><a href="#Windows-Server-2012-R2运行卡顿，访问加载速度慢" class="headerlink" title="Windows Server 2012 R2运行卡顿，访问加载速度慢"></a><a href="https://www.cnblogs.com/wangjinxing1994/p/13678598.html">Windows Server 2012 R2运行卡顿，访问加载速度慢</a></h1><h2 id="现象描述"><a href="#现象描述" class="headerlink" title="现象描述"></a>现象描述</h2><hr><ul><li>系统运行卡顿</li><li>CPU、内存时高时低</li><li>内部部署平台web访问速度慢，加载半天</li><li>删除系统垃圾仍旧卡顿</li><li>重启无效</li></ul><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><hr><ol><li><p>WIN+R键打开运行输入“cmd”打开系统命令行</p></li><li><p>输入命令<strong>netsh int tcp show global</strong>，查看ECN功能开启状态</p></li><li><p>输入命令<strong>netsh int tcp set global ecn&#x3D;disable</strong>，关闭ECN功能</p></li><li><p>输入命令<strong>netsh int tcp show global</strong>，查看ECN功能是否关闭</p></li></ol><h1 id="windows系统卡顿解决方案"><a href="#windows系统卡顿解决方案" class="headerlink" title="windows系统卡顿解决方案"></a>windows系统卡顿解决方案</h1><p>   当发现windows系统运行速度变慢或突然出现网络卡顿中断的情况，则可能是主机的带宽和CPU利用率过高导致。Windows系统带宽流量过高或CPU利用率高，可以采用如下步骤进行排查：</p><p>   <strong>问题定位：</strong>定位影响win系统带宽和CPU利用率高的进程。</p><p>   Windows操作系统本身提供了较多工具可以定位问题，包括任务管理器、性能监视器(Performance Monitor)、资监视器(Resource Monitor)、Process Explorer、Xperf (Windows server 2008 以后)和抓取系统Full Memory Dump检查。在流量大的情况下，您还可以使用Wireshark抓取一段时间的网络包，分析流量使用情况。</p><p>   <strong>问题处理：</strong>排查进程是否正常，并分类进行处理。</p><ol><li><ul><li>正常进程：优化程序，或变更服务器的配置。</li><li>异常进程：建议您手动关闭进程，您也可以借助第三方工具关闭进程。</li></ul></li></ol><h2 id="问题定位步骤"><a href="#问题定位步骤" class="headerlink" title="问题定位步骤"></a>问题定位步骤</h2><p>   打开“运行”窗口，输入“perfmon -res”。</p><p>   在“资源监视器”中，单击“CPU”或“网络”，查看CPU占用或率带宽使用情况。<br>   <img src="https://weixin.aisoutu.com/cunchu4/4/2022-02-23/4_16456305790556035.png" alt="img"></p><p>   查看CPU和带宽占用率较高的进程ID和进程名。</p><p>   打开“Windows任务管理器”，在任务管理器中打开PID，找到进程的具体位置，核对是否异常进程。</p><ol><li><ol><li>选择“详细信息”选项卡。</li><li>单击PID进行排序。</li><li>在查找到的CPU或带宽占用率高的进程上右键单击“打开文件位置”。</li><li>定位进程是否是正常或是否为恶意程序。</li></ol></li></ol><h2 id="分析处理"><a href="#分析处理" class="headerlink" title="分析处理"></a>分析处理</h2><p>   在采取措施处理问题前，首先需要判断影响CPU或带宽占用率高的进程是正常进程还是异常进程。</p><p>   正常进程分析处理建议</p><p>   如果你的操作系统是Windows 2008&#x2F;Windows 2012，请检查内存大小，看是否内存不足，建议内存配置在4GB以上；</p><p>   检查win系统是否有执行Windows Update的行为。</p><p>   核对云服务器运行的应用程序中是否有对网络和CPU要求高的需求，如果是，建议您变更云服务器的配置或修改带宽。</p><p>   如果云主机配置已经比较高，建议考虑云主机上应用场景的分离部署，例如将数据库和应用分开部署。</p><p>异常进程分析处理建议</p><p>   如果是CPU或带宽利用率高由于病毒、木马入侵等这些异常进程导致的，那么需要手动结束进程。建议的处理顺序如下：</p><p>   另外提醒下，若服务器或站点遭受DDOS攻击或CC攻击等，短期内产生大量的访问需求。还可以购买安全防护产品。</p><p>   本文来自网络或网友投稿，如有侵犯您的权益请联系邮箱:<a href="mailto:&#x77;&#x79;&#x6c;&#56;&#x36;&#x30;&#50;&#x31;&#x31;&#64;&#x71;&#113;&#x2e;&#x63;&#x6f;&#109;">&#x77;&#x79;&#x6c;&#56;&#x36;&#x30;&#50;&#x31;&#x31;&#64;&#x71;&#113;&#x2e;&#x63;&#x6f;&#109;</a>,我们将第一时间删除。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker 开启远程访问</title>
    <link href="/2022/07/13/VSCode%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8BDocker%E8%BF%9B%E8%A1%8C%E6%9E%84%E5%BB%BApush%20%E9%98%BF%E9%87%8C%E4%BA%91docker%20hub/"/>
    <url>/2022/07/13/VSCode%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8BDocker%E8%BF%9B%E8%A1%8C%E6%9E%84%E5%BB%BApush%20%E9%98%BF%E9%87%8C%E4%BA%91docker%20hub/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-开启远程访问"><a href="#Docker-开启远程访问" class="headerlink" title="Docker 开启远程访问"></a>Docker 开启远程访问</h1><h3 id="背景：centos7"><a href="#背景：centos7" class="headerlink" title="背景：centos7"></a>背景：centos7</h3><p>\1. vi &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service 修改 <strong>[Service]的ExecStart，ExecStart&#x3D; 一定要加</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Service]</span><br><br><span class="hljs-attr">Type</span>=notify<br><br><span class="hljs-comment"># the default is not to use systemd for cgroups because the delegate issues still</span><br><span class="hljs-comment"># exists and systemd currently does not support the cgroup feature set required</span><br><span class="hljs-comment"># for containers run by docker</span><br><br><span class="hljs-attr">ExecStart</span>=<br><span class="hljs-attr">ExecStart</span>=/usr/bin/dockerd -H tcp://<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">2375</span> -H unix://var/run/docker.sock<br></code></pre></td></tr></table></figure><p>\2. 刷新配置文件，重启docker</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl daemon-reload<br><span class="hljs-params">system</span>ctl restart docker<br></code></pre></td></tr></table></figure><p>\3. 查看docker进程是否监听</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># netstat -ano | grep 2375</span><br>tcp6       <span class="hljs-number">0</span>      <span class="hljs-number">0</span> ::<span class="hljs-symbol">:</span><span class="hljs-number">2375</span>                 ::<span class="hljs-symbol">:*</span>                    <span class="hljs-title class_">LISTEN</span>      off (<span class="hljs-number">0.00</span>/<span class="hljs-number">0</span>/<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>4.查看系统网络端口2375是否被docker所监听</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs elixir">[root<span class="hljs-variable">@localhost</span> ~]<span class="hljs-comment"># netstat -tulp</span><br><span class="hljs-title class_">Active</span> <span class="hljs-title class_">Internet</span> connections (only servers)<br><span class="hljs-title class_">Proto</span> <span class="hljs-title class_">Recv</span>-Q <span class="hljs-title class_">Send</span>-Q <span class="hljs-title class_">Local</span> <span class="hljs-title class_">Address</span>           <span class="hljs-title class_">Foreign</span> <span class="hljs-title class_">Address</span>         <span class="hljs-title class_">State</span>       <span class="hljs-title class_">PID</span>/<span class="hljs-title class_">Program</span> name    <br>tcp        <span class="hljs-number">0</span>      <span class="hljs-number">0</span> <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-symbol">:ssh</span>             <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-symbol">:*</span>               <span class="hljs-title class_">LISTEN</span>      <span class="hljs-number">3124</span>/sshd           <br>tcp        <span class="hljs-number">0</span>      <span class="hljs-number">0</span> <span class="hljs-symbol">localhost:</span>smtp          <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-symbol">:*</span>               <span class="hljs-title class_">LISTEN</span>      <span class="hljs-number">3379</span>/master         <br>tcp6       <span class="hljs-number">0</span>      <span class="hljs-number">0</span> [::]<span class="hljs-symbol">:</span><span class="hljs-number">2375</span>               [::]<span class="hljs-symbol">:*</span>                  <span class="hljs-title class_">LISTEN</span>      <span class="hljs-number">13964</span>/dockerd       <br>      <br></code></pre></td></tr></table></figure><p>5.添加防火墙2375&#x2F;tcp ，并重载防火墙</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@localhost ~]#  firewall-cmd --zone=public --add-port=2375/tcp --permanent<br><span class="hljs-keyword">success</span><br><span class="hljs-keyword"></span>[root@localhost ~]# firewall-cmd --reload<br>success<br></code></pre></td></tr></table></figure><p>\6. 使用idea测试连接docker， 看到Connection successful说明连接成功</p><p><img src="https://img-blog.csdnimg.cn/20190310225356633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NDIzMTA1,size_16,color_FFFFFF,t_70" alt="img"></p><p>启动该Docker就可以运行容器了</p><p><img src="https://img-blog.csdnimg.cn/20190310225436370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NDIzMTA1,size_16,color_FFFFFF,t_70" alt="img"></p><hr><p><em><strong>Time the study pain is temporary, has not learned the pain is life-long.</strong></em></p><h2 id="VSCode配置远程Docker进行构建push-阿里云docker-hub"><a href="#VSCode配置远程Docker进行构建push-阿里云docker-hub" class="headerlink" title="VSCode配置远程Docker进行构建push 阿里云docker hub"></a>VSCode配置远程Docker进行构建push 阿里云docker hub</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用VSCode进行docker的镜像构建时，安装docker插件默认会安装docker desktop桌面端，也会安装一个linux虚拟机进行交互，在虚拟机启动后对系统的占用还是挺高的，为了节约本地的资源，我把docker放到了单独的linux服务器上面，通过远程连接，执行响应的docker命令，禁用本地的docker虚拟机启动</p><h2 id="安装VSCode-Docker插件"><a href="#安装VSCode-Docker插件" class="headerlink" title="安装VSCode Docker插件"></a>安装VSCode Docker插件</h2><p><a href="https://www.ilt.me/content/uploadfile/202009/fe8b1598959512.png"><img src="https://www.ilt.me/content/uploadfile/202009/fe8b1598959512.png" alt="未命名图片.png"></a></p><p>安装之后系统会自动安装Docker Desktop，无脑下一步安装即可，安装的目的是为了获取docker的可执行文件</p><h2 id="配置插件远程docker地址"><a href="#配置插件远程docker地址" class="headerlink" title="配置插件远程docker地址"></a>配置插件远程docker地址</h2><p><a href="https://www.ilt.me/content/uploadfile/202009/fe8b1598959710.png"><img src="https://www.ilt.me/content/uploadfile/202009/fe8b1598959710.png" alt="未命名图片.png"></a></p><h2 id="切换到远程docker节点"><a href="#切换到远程docker节点" class="headerlink" title="切换到远程docker节点"></a>切换到远程docker节点</h2><p>docker context create remote-docker –docker “host&#x3D;<a href="http://192.168.6.9:2375&quot;">http://192.168.6.9:2375&quot;</a></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">docker context <span class="hljs-built_in">create</span> dev-docker <span class="hljs-comment">--docker &quot;host=http://192.168.43.101:2375&quot;</span><br><br>docker context <span class="hljs-built_in">create</span> remote-docker <span class="hljs-comment">--docker &quot;host=http://192.168.1.101:2375&quot;</span><br>docker context <span class="hljs-built_in">create</span> <span class="hljs-built_in">local</span>-docker  <span class="hljs-comment">--docker &quot;host=http://172.0.0.1:2375&quot;</span><br><br></code></pre></td></tr></table></figure><h2 id="使用远程节点"><a href="#使用远程节点" class="headerlink" title="使用远程节点"></a>使用远程节点</h2><p>docker context use remote-docker</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">docker <span class="hljs-keyword">context</span> <span class="hljs-keyword">use</span> remote-docker<br><br>docker <span class="hljs-keyword">context</span> <span class="hljs-keyword">use</span> remote-docker<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>RESTful API接口设计标准及规范</title>
    <link href="/2022/07/13/RESTful%20API%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E6%A0%87%E5%87%86%E5%8F%8A%E8%A7%84%E8%8C%83/"/>
    <url>/2022/07/13/RESTful%20API%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E6%A0%87%E5%87%86%E5%8F%8A%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h1 id="RESTful-API接口设计标准及规范"><a href="#RESTful-API接口设计标准及规范" class="headerlink" title="RESTful API接口设计标准及规范"></a>RESTful API接口设计标准及规范</h1><p>RESTful发展背景及简介<br>网络应用程序，分为前端和后端两个部分。当前的发展趋势，就是前端设备层出不穷（手机、平板、桌面电脑、其他专用设备…）。因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信。这导致API构架的流行，甚至出现”APIFirst”的设计思想。RESTful API是目前比较成熟的一套互联网应用程序的API设计理论。</p><p>REST（Representational State Transfer）表述性状态转换，REST指的是一组架构约束条件和原则。 如果一个架构符合REST的约束条件和原则，我们就称它为RESTful架构。REST本身并没有创造新的技术、组件或服务，而隐藏在RESTful背后的理念就是使用Web的现有特征和能力， 更好地使用现有Web标准中的一些准则和约束。虽然REST本身受Web技术的影响很深， 但是理论上REST架构风格并不是绑定在HTTP上，只不过目前HTTP是唯一与REST相关的实例。</p><ol><li>URI<br>URI 表示资源，资源一般对应服务器端领域模型中的实体类。</li></ol><p>URI规范<br>不用大写；<br>用中杠-不用下杠_；<br>参数列表要encode；<br>URI中的名词表示资源集合，使用复数形式。</p><p>资源集合 vs 单个资源<br>URI表示资源的两种方式：资源集合、单个资源。</p><p>资源集合：</p><p>&#x2F;zoos &#x2F;&#x2F;所有动物园<br>&#x2F;zoos&#x2F;1&#x2F;animals &#x2F;&#x2F;id为1的动物园中的所有动物<br>1<br>2<br>单个资源：</p><p>&#x2F;zoos&#x2F;1 &#x2F;&#x2F;id为1的动物园<br>&#x2F;zoos&#x2F;1;2;3 &#x2F;&#x2F;id为1，2，3的动物园<br>1<br>2<br>避免层级过深的URI<br>&#x2F;在url中表达层级，用于按实体关联关系进行对象导航，一般根据id导航。</p><p>过深的导航容易导致url膨胀，不易维护，如 GET &#x2F;zoos&#x2F;1&#x2F;areas&#x2F;3&#x2F;animals&#x2F;4，尽量使用查询参数代替路径中的实体导航，如GET &#x2F;animals?zoo&#x3D;1&amp;area&#x3D;3；</p><p>对Composite资源的访问<br>服务器端的组合实体必须在uri中通过父实体的id导航访问。</p><p>组合实体不是first-class的实体，它的生命周期完全依赖父实体，无法独立存在，在实现上通常是对数据库表中某些列的抽象，不直接对应表，也无id。一个常见的例子是 User — Address，Address是对User表中zipCode&#x2F;country&#x2F;city三个字段的简单抽象，无法独立于User存在。必须通过User索引到Address：GET &#x2F;user&#x2F;1&#x2F;addresses</p><ol start="2"><li>Request<br>HTTP方法<br>通过标准HTTP方法对资源CRUD：</li></ol><p>GET：查询</p><p>GET &#x2F;zoos<br>GET &#x2F;zoos&#x2F;1<br>GET &#x2F;zoos&#x2F;1&#x2F;employees</p><p>POST：创建单个资源。POST一般向“资源集合”型uri发起</p><p>POST &#x2F;animals  &#x2F;&#x2F;新增动物<br>POST &#x2F;zoos&#x2F;1&#x2F;employees &#x2F;&#x2F;为id为1的动物园雇佣员工</p><p>PUT：更新单个资源（全量），客户端提供完整的更新后的资源。与之对应的是 PATCH，PATCH 负责部分更新，客户端提供要更新的那些字段。PUT&#x2F;PATCH一般向“单个资源”型uri发起</p><p>PUT &#x2F;animals&#x2F;1<br>PUT &#x2F;zoos&#x2F;1</p><p>DELETE：删除</p><p>DELETE &#x2F;zoos&#x2F;1&#x2F;employees&#x2F;2<br>DELETE &#x2F;zoos&#x2F;1&#x2F;employees&#x2F;2;4;5<br>DELETE &#x2F;zoos&#x2F;1&#x2F;animals  &#x2F;&#x2F;删除id为1的动物园内的所有动物</p><p>HEAD &#x2F; OPTION 用的不多，就不多解释了。</p><p>安全性和幂等性<br>安全性：不会改变资源状态，可以理解为只读的；<br>幂等性：执行1次和执行N次，对资源状态改变的效果是等价的。<br>.安全性幂等性<br>GET√√<br>POST××<br>PUT×√<br>DELETE×√<br>安全性和幂等性均不保证反复请求能拿到相同的response。以 DELETE 为例，第一次DELETE返回200表示删除成功，第二次返回404提示资源不存在，这是允许的。</p><p>复杂查询<br>查询可以捎带以下参数：</p><p>.示例备注<br>过滤条件?type&#x3D;1&amp;age&#x3D;16允许一定的uri冗余，如&#x2F;zoos&#x2F;1与&#x2F;zoos?id&#x3D;1<br>排序?sort&#x3D;age,desc<br>投影?whitelist&#x3D;id,name,email<br>分页?limit&#x3D;10&amp;offset&#x3D;3<br>Bookmarker<br>经常使用的、复杂的查询标签化，降低维护成本。</p><p>如：</p><p>GET &#x2F;trades?status&#x3D;closed&amp;sort&#x3D;created,desc<br>快捷方式：</p><p>GET &#x2F;trades#recently-closed<br>或者<br>GET &#x2F;trades&#x2F;recently-closed</p><p>Format<br>只用以下常见的3种body format：</p><p>1.Content-Type: application&#x2F;json</p><p>POST &#x2F;v1&#x2F;animal HTTP&#x2F;1.1<br>Host: api.example.org<br>Accept: application&#x2F;json<br>Content-Type: application&#x2F;json<br>Content-Length: 24</p><p>{<br>  “name”: “Gir”,<br>  “animalType”: “12”<br>}</p><p>2.Content-Type: application&#x2F;x-www-form-urlencoded (浏览器POST表单用的格式)</p><p>POST &#x2F;login HTTP&#x2F;1.1<br>Host: example.com<br>Content-Length: 31<br>Accept: text&#x2F;html<br>Content-Type: application&#x2F;x-www-form-urlencoded</p><p>username&#x3D;root&amp;password&#x3D;Zion0101</p><p>Content-Type: multipart&#x2F;form-data; boundary&#x3D;—-RANDOM_jDMUxq4Ot5 (表单有文件上传时的格式)</p><p>Content Negotiation<br>资源可以有多种表示方式，如json、xml、pdf、excel等等，客户端可以指定自己期望的格式，通常有两种方式：</p><p>1.http header Accept：</p><p>Accept:application&#x2F;xml;q&#x3D;0.6,application&#x2F;atom+xml;q&#x3D;1.0</p><p>q为各项格式的偏好程度</p><p>2.url中加文件后缀：&#x2F;zoo&#x2F;1.json</p><ol start="6"><li>Response<br>不要包装：<br>response 的 body 直接就是数据，不要做多余的包装。错误示例：</li></ol><p>​    </p><p>​      </p><p>​       </p><p>​      </p><p>​      </p><p>​       </p><pre><code class="hljs">    &#123;</code></pre><p>​      </p><p>​      </p><p>​       </p><p>​      </p><p>​      </p><p>​<br>        “success”:<br>        true,</p><p>​      </p><p>​      </p><p>​       </p><p>​      </p><p>​      </p><p>​<br>        “data”:{<br>        “id”:<br>        1,<br>        “name”:<br>        “xiaotuan”},</p><p>​      </p><p>​      </p><p>​       </p><p>​      </p><p>​      </p><p>​       </p><pre><code class="hljs">    &#125;</code></pre><p>​      </p><p>1<br>各HTTP方法成功处理后的数据格式：</p><p>·response 格式<br>GET单个对象、集合<br>POST新增成功的对象<br>PUT&#x2F;PATCH更新成功的对象<br>DELETE空<br>json格式的约定：</p><p>时间用长整形(毫秒数)，客户端自己按需解析（moment.js）<br>不传null字段<br>分页response<br>{<br>    “paging”:{“limit”:10,”offset”:0,”total”:729},<br>    “data”:[{},{},{}…]<br>}<br>错误处理<br>不要发生了错误但给2xx响应，客户端可能会缓存成功的http请求；<br>正确设置http状态码，不要自定义；<br>Response body 提供 1) 错误的代码（日志&#x2F;问题追查）；2) 错误的描述文本（展示给用户）。<br>对第三点的实现稍微多说一点：</p><p>Java 服务器端一般用异常表示 RESTful API 的错误。API 可能抛出两类异常：业务异常和非业务异常。业务异常由自己的业务代码抛出，表示一个用例的前置条件不满足、业务规则冲突等，比如参数校验不通过、权限校验失败。非业务类异常表示不在预期内的问题，通常由类库、框架抛出，或由于自己的代码逻辑错误导致，比如数据库连接失败、空指针异常、除0错误等等。</p><p>业务类异常必须提供2种信息：</p><p>如果抛出该类异常，HTTP 响应状态码应该设成什么；<br>异常的文本描述；<br>在Controller层使用统一的异常拦截器：</p><p>设置 HTTP 响应状态码：对业务类异常，用它指定的 HTTP code；对非业务类异常，统一500；<br>Response Body 的错误码：异常类名<br>Response Body 的错误描述：对业务类异常，用它指定的错误文本；对非业务类异常，线上可以统一文案如“服务器端错误，请稍后再试”，开发或测试环境中用异常的 stacktrace，服务器端提供该行为的开关。<br>常用的http状态码及使用场景：</p><p>状态码使用场景<br>400 bad request常用在参数校验<br>401 unauthorized未经验证的用户，常见于未登录。如果经过验证后依然没权限，应该 403（即 authentication 和 authorization 的区别）。<br>403 forbidden无权限<br>404 not found资源不存在<br>500 internal server error非业务类异常<br>503 service unavaliable由容器抛出，自己的代码不要抛这个异常<br>8. 服务型资源<br>除了资源简单的CRUD，服务器端经常还会提供其他服务，这些服务无法直接用上面提到的URI映射。如：</p><p>按关键字搜索；<br>1.计算地球上两点间的距离；<br>2.批量向用户推送消息<br>3.可以把这些服务看成资源，计算的结果是资源的presentation，按服务属性选择合适的HTTP方法。</p><p>例：</p><p>GET &#x2F;search?q&#x3D;filter?category&#x3D;file  搜索<br>GET &#x2F;distance-calc?lats&#x3D;47.480&amp;lngs&#x3D;-122.389&amp;late&#x3D;37.108&amp;lnge&#x3D;-122.448<br>POST &#x2F;batch-publish-msg<br>[{“from”:0,”to”:1,”text”:”abc”},{},{}…]</p><ol start="9"><li>异步任务<br>对耗时的异步任务，服务器端接受客户端传递的参数后，应返回创建成功的任务资源，其中包含了任务的执行状态。客户端可以轮训该任务获得最新的执行进度。</li></ol><p>提交任务：<br>POST &#x2F;batch-publish-msg<br>[{“from”:0,”to”:1,”text”:”abc”},{},{}…]</p><p>返回：<br>{“taskId”:3,”createBy”:”Anonymous”,”status”:”running”}</p><p>GET &#x2F;task&#x2F;3<br>{“taskId”:3,”createBy”:”Anonymous”,”status”:”success”}</p><p>如果任务的执行状态包括较多信息，可以把“执行状态”抽象成组合资源，客户端查询该状态资源了解任务的执行情况。</p><p>提交任务：<br>POST &#x2F;batch-publish-msg<br>[{“from”:0,”to”:1,”text”:”abc”},{},{}…]</p><p>返回：<br>{“taskId”:3,”createBy”:”Anonymous”}</p><p>GET &#x2F;task&#x2F;3&#x2F;status<br>{“progress”:”50%”,”total”:18,”success”:8,”fail”:1}<br>API的演进<br>版本<br>常见的三种方式：</p><p>1.在uri中放版本信息：GET &#x2F;v1&#x2F;users&#x2F;1<br>2.Accept Header：Accept: application&#x2F;json+v1<br>3.自定义 Header：X-Api-Version: 1<br>用第一种，虽然没有那么优雅，但最明显最方便。</p><p>URI失效<br>随着系统发展，总有一些API失效或者迁移，对失效的API，返回404 not found 或 410 gone；对迁移的API，返回 301 重定向。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NGINX服务器转发配置</title>
    <link href="/2022/07/13/NGINX%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/07/13/NGINX%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="NGINX服务器转发配置"><a href="#NGINX服务器转发配置" class="headerlink" title="NGINX服务器转发配置"></a>NGINX服务器转发配置</h1><h2 id="备份当前配置"><a href="#备份当前配置" class="headerlink" title="备份当前配置"></a>备份当前配置</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stata">Last login: Tue <span class="hljs-keyword">Dec</span>  7 17:29:06 2021 from 10.0.1.30<br>[root@localhost ~]# <span class="hljs-keyword">cd</span> /usr/<span class="hljs-keyword">local</span>/nginx/<span class="hljs-keyword">conf</span><br>[root@localhost <span class="hljs-keyword">conf</span>]# <span class="hljs-keyword">pwd</span><br>/usr/<span class="hljs-keyword">local</span>/nginx/<span class="hljs-keyword">conf</span><br>[root@localhost <span class="hljs-keyword">conf</span>]# ll<br>总用量 1028<br>-rw-r--r--  1 nginx nginx 47798 12月  7 17:11 nginx.<span class="hljs-keyword">conf</span><br><br>cp  nginx.<span class="hljs-keyword">conf</span> nginx.<span class="hljs-keyword">conf</span>-20211215.bk<br><br><br></code></pre></td></tr></table></figure><h2 id="修改转发地址"><a href="#修改转发地址" class="headerlink" title="修改转发地址"></a>修改转发地址</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br></pre></td><td class="code"><pre><code class="hljs conf"># For more information on configuration, see:<br>#   * Official English Documentation: http://nginx.org/en/docs/<br>#   * Official Russian Documentation: http://nginx.org/ru/docs/<br><br>user nginx;<br>worker_processes auto;<br>error_log /var/log/nginx/error.log;<br>pid /usr/local/nginx/logs/nginx.pid;<br><br># Load dynamic modules. See /usr/share/nginx/README.dynamic.<br>include /usr/share/nginx/modules/*.conf;<br><br>events &#123;<br>    worker_connections 1024;<br>&#125;<br><br>http &#123;<br>    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;<br>                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;<br>                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;<br><br>    access_log  /var/log/nginx/access.log  main;<br>    server_tokens           off;<br><br>    sendfile            on;<br>    tcp_nopush          on;<br>    tcp_nodelay         on;<br>    keepalive_timeout   65;<br>    types_hash_max_size 2048;<br>client_max_body_size          1000m;<br><br> #   include             /etc/nginx/mime.types;<br>    default_type        application/octet-stream;<br><br>    # Load modular configuration files from the /etc/nginx/conf.d directory.<br>    # See http://nginx.org/en/docs/ngx_core_module.html#include<br>    # for more information.<br><br>    include /etc/nginx/conf.d/*.conf;<br>  <br>  gzip  on;<br>  gzip_min_length 1k;<br>  gzip_buffers 4 16k;<br>  #gzip_http_version 1.0;<br>  gzip_comp_level 5;<br>  gzip_types text/plain text/css application/xml application/x-javascript application/javascript application/json<br>  gzip_vary off;<br>    server &#123;<br><br>    listen 80 default_server;<br>    listen 443 ssl;<br>            ssl_certificate ssl/20211201/6743332_www.tianfucredit.com.pem;<br>        ssl_certificate_key ssl/20211201/6743332_www.tianfucredit.com.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br><br>    #   deny    all;<br>      server_name _;<br>    location / &#123;<br>root /usr/local/nginx/html;<br>index index.html index.htm;<br>&#125;<br>      <br><br># location / &#123;<br>#             proxy_pass http://10.10.11.187;<br>#         &#125;<br>    <br>    #  return 404;<br><br>&#125;<br><br><br>    # tianfucredit.com<br><br>    server &#123;<br>        listen 443 ssl;<br>listen 80;<br>        server_name  tianfucredit.com  www.tianfucredit.com;<br>        ssl_certificate ssl/20211201/6743332_www.tianfucredit.com.pem;<br>        ssl_certificate_key ssl/20211201/6743332_www.tianfucredit.com.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://www.tianfucredit.com/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.162:32028;<br>        &#125;<br>    &#125;<br><br><br><br>   # yzd.tianfucredit.cn<br><br>    server &#123;<br>        #listen 443 ssl;<br>listen 80;<br>        server_name  yzd.tianfucredit.cn;<br>        #ssl_certificate ssl/3775771_yzd.tianfucredit.cn.pem;<br>        #ssl_certificate_key ssl/3775771_yzd.tianfucredit.cn.key;<br>        #ssl_session_timeout 5m;<br>        #ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>#ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        #ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot;   http://yzd.tianfucredit.cn/istui/#/login  break;<br>    &#125;<br>            proxy_pass http://10.10.11.162:31028;<br>        &#125;<br>            #配置Nginx支持webSocket开始<br>        proxy_set_header Host $http_host;<br><br>        proxy_http_version 1.1;<br>        proxy_set_header Upgrade $http_upgrade;<br>        proxy_set_header Connection &quot;upgrade&quot;;<br>    &#125;<br><br><br><br># ms.tianfucredit.com<br><br>    server &#123;       <br>listen 443 ssl;<br>listen 80;<br>        server_name  ms.tianfucredit.com;<br>        ssl_certificate ssl/20211201/6741762_ms.tianfucredit.com.pem;<br>        ssl_certificate_key ssl/20211201/6741762_ms.tianfucredit.com.key;<br>ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br><br>         location / &#123;<br>if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://ms.tianfucredit.com/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.167:32028;<br>        &#125;<br>    &#125;<br><br># ga.tianfucredit.com<br><br>    server &#123;       <br>listen 443 ssl;<br>listen 80;<br>        server_name  ga.tianfucredit.com;<br>ssl_certificate ssl/20211201/6744570_ga.tianfucredit.com.pem;<br>        ssl_certificate_key ssl/20211201/6744570_ga.tianfucredit.com.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br><br>         location / &#123;<br>if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://ga.tianfucredit.com/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.164:32028;<br>        &#125;<br>    &#125;<br><br># ga.tianfucredit.cn<br><br>    server &#123;       <br>listen 443 ssl;<br>listen 80;<br>        server_name  ga.tianfucredit.cn;<br>        ssl_certificate ssl/20211201/6706844_ga.tianfucredit.cn.pem;<br>        ssl_certificate_key ssl/20211201/6706844_ga.tianfucredit.cn.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br><br>         location / &#123;<br>if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://ga.tianfucredit.cn/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.164:32028;<br>        &#125;<br>    &#125;<br><br><br>    server &#123;       <br>listen 443 ssl;<br>listen 80;<br>        server_name  ga.tianfucredit.net;<br>        ssl_certificate ssl/20211201/6743411_ga.tianfucredit.net.pem;<br>        ssl_certificate_key ssl/20211201/6743411_ga.tianfucredit.net.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br><br>         location / &#123;<br>if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://ga.tianfucredit.net/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.164:32028;<br>        &#125;<br>    &#125;<br><br># cd.tianfucredit.com<br><br>    server &#123;<br>        listen 443 ssl;<br>listen 80;<br>        server_name  cd.tianfucredit.com;<br>        ssl_certificate ssl/20211201/6743706_cd.tianfucredit.com.pem;<br>        ssl_certificate_key ssl/20211201/6743706_cd.tianfucredit.com.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://cd.tianfucredit.com/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.165:32028;<br>        &#125;<br>    &#125;<br><br><br># gy.tianfucredit.com<br><br>    server &#123;<br>    listen 443 ssl;<br>        listen       80;<br>        server_name  gy.tianfucredit.com;<br>ssl_certificate ssl/20211201/6741755_gy.tianfucredit.com.pem;<br>ssl_certificate_key ssl/20211201/6741755_gy.tianfucredit.com.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://gy.tianfucredit.com/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.166:32028;<br>        &#125;<br>    &#125;<br><br># dz.tianfucredit.com<br><br>    server &#123;<br><br>listen       80;<br>listen 443 ssl;<br>        server_name  dz.tianfucredit.com;<br>ssl_certificate ssl/20211201/6742058_dz.tianfucredit.com.pem;<br>ssl_certificate_key ssl/20211201/6742058_dz.tianfucredit.com.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://dz.tianfucredit.com/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.168:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br><br>listen       80;<br>listen 443 ssl;<br>        server_name  bz.tianfucredit.com;<br>ssl_certificate ssl/20211201/6741636_bz.tianfucredit.com.pem;<br>ssl_certificate_key ssl/20211201/6741636_bz.tianfucredit.com.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://bz.tianfucredit.com/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.169:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br><br>listen 443 ssl;<br>listen 80;<br>       server_name  my.tianfucredit.com;<br>       ssl_certificate ssl/20211201/6742060_my.tianfucredit.com.pem;<br>       ssl_certificate_key ssl/20211201/6742060_my.tianfucredit.com.key;<br>       ssl_session_timeout 5m;<br>       ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br><br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://my.tianfucredit.com/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.170:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br><br>listen       80;<br>listen 443 ssl;<br>        server_name  lsz.tianfucredit.com;<br>ssl_certificate ssl/20211201/6744457_lsz.tianfucredit.com.pem;<br>        ssl_certificate_key ssl/20211201/6744457_lsz.tianfucredit.com.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://lsz.tianfucredit.com/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.183:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>listen 443 ssl;<br>        server_name  gz.tianfucredit.com;<br>ssl_certificate ssl/20211201/6743861_gz.tianfucredit.com.pem;<br>ssl_certificate_key ssl/20211201/6743861_gz.tianfucredit.com.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://gz.tianfucredit.com/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.182:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>listen 443 ssl;<br>        server_name  ab.tianfucredit.com;<br>ssl_certificate ssl/20211201/6744438_ab.tianfucredit.com.pem;<br>ssl_certificate_key ssl/20211201/6744438_ab.tianfucredit.com.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://ab.tianfucredit.com/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.181:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br><br>        server_name  ya.tianfucredit.com;<br>listen 443 ssl;<br>ssl_certificate ssl/20211201/6743514_ya.tianfucredit.com.pem;<br>ssl_certificate_key ssl/20211201/6743514_ya.tianfucredit.com.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://ya.tianfucredit.com/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.180:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  nc.tianfucredit.com;<br>listen 443 ssl;<br>ssl_certificate ssl/20211201/6744378_nc.tianfucredit.com.pem;<br>ssl_certificate_key ssl/20211201/6744378_nc.tianfucredit.com.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://nc.tianfucredit.com/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.179:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  yb.tianfucredit.com;<br>        listen 443 ssl;<br>ssl_certificate ssl/20211201/6742813_yb.tianfucredit.com.pem;<br>ssl_certificate_key ssl/20211201/6742813_yb.tianfucredit.com.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://yb.tianfucredit.com/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.178:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  zy.tianfucredit.com;<br>listen 443 ssl;<br>ssl_certificate ssl/20211201/6743511_zy.tianfucredit.com.pem;<br>ssl_certificate_key ssl/20211201/6743511_zy.tianfucredit.com.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://zy.tianfucredit.com/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.177:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  lss.tianfucredit.com;<br>listen 443 ssl;<br>ssl_certificate ssl/20211201/6741905_lss.tianfucredit.com.pem;<br>ssl_certificate_key ssl/20211201/6741905_lss.tianfucredit.com.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://lss.tianfucredit.com/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.176:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  nj.tianfucredit.com;<br>listen 443 ssl;<br>ssl_certificate ssl/20211201/6743708_nj.tianfucredit.com.pem;<br>ssl_certificate_key ssl/20211201/6743708_nj.tianfucredit.com.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://nj.tianfucredit.com/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.175:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  dy.tianfucredit.com;<br>listen 443 ssl;<br>ssl_certificate ssl/20211201/6741764_dy.tianfucredit.com.pem;<br>ssl_certificate_key ssl/20211201/6741764_dy.tianfucredit.com.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://dy.tianfucredit.com/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.174:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  lz.tianfucredit.com;<br>listen 443 ssl;<br>ssl_certificate ssl/20211201/6744551_lz.tianfucredit.com.pem;<br>ssl_certificate_key ssl/20211201/6744551_lz.tianfucredit.com.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://lz.tianfucredit.com/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.173:32028;<br>        &#125;<br>    &#125;<br><br><br>server &#123;<br>        listen       80;<br>        server_name  pzh.tianfucredit.com;<br>listen 443 ssl;<br>ssl_certificate ssl/20211201/6742069_pzh.tianfucredit.com.pem;<br>ssl_certificate_key ssl/20211201/6742069_pzh.tianfucredit.com.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://pzh.tianfucredit.com/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.172:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  zg.tianfucredit.com;<br>listen 443 ssl;<br>ssl_certificate ssl/20211201/6744498_zg.tianfucredit.com.pem;<br>ssl_certificate_key ssl/20211201/6744498_zg.tianfucredit.com.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://zg.tianfucredit.com/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.171:32028;<br>        &#125;<br>    &#125;<br><br># tianfucredit.cn<br><br>    server &#123;<br> listen 443 ssl;<br> listen 80;<br>         server_name  tianfucredit.cn   www.tianfucredit.cn;<br>         ssl_certificate ssl/20211201/6706833_www.tianfucredit.cn.pem;<br>         ssl_certificate_key ssl/20211201/6706833_www.tianfucredit.cn.key;<br>         ssl_session_timeout 5m;<br>         ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br> ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>         ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://www.tianfucredit.cn/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.162:32028;<br>        &#125;<br>    &#125;<br><br>    # cd.tianfucredit.cn<br><br>    server &#123;<br><br>        listen 443 ssl;<br>listen 80;<br>        server_name  cd.tianfucredit.cn;<br>        ssl_certificate ssl/20211201/6706826_cd.tianfucredit.cn.pem;<br>        ssl_certificate_key ssl/20211201/6706826_cd.tianfucredit.cn.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://cd.tianfucredit.cn/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.165:32028;<br>        &#125;<br>    &#125;<br>    # xrtong.cn<br><br>    server &#123;<br>         listen 443 ssl;<br> listen 80;<br>         server_name  www.xrtong.cn xrtong.cn;<br>#        ssl on;<br>         ssl_certificate ssl/20211201/6706796_www.xrtong.cn.pem;<br>         ssl_certificate_key ssl/20211201/6706796_www.xrtong.cn.key;<br>         ssl_session_timeout 5m;<br>         ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br> ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>         ssl_prefer_server_ciphers on;<br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://www.xrtong.cn/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.163:32028;<br>        &#125;<br>        #配置Nginx支持webSocket开始<br>        proxy_set_header Host $http_host;<br><br>        proxy_http_version 1.1;<br>        proxy_set_header Upgrade $http_upgrade;<br>        proxy_set_header Connection &quot;upgrade&quot;;<br>    &#125;<br><br># ms.tianfucredit.cn<br><br>    server &#123;<br>        <br>listen 443 ssl;<br>listen 80;<br>        server_name  ms.tianfucredit.cn;<br>        ssl_certificate ssl/20211201/6706683_ms.tianfucredit.cn.pem;<br>        ssl_certificate_key ssl/20211201/6706683_ms.tianfucredit.cn.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br><br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://ms.tianfucredit.cn/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.167:32028;<br>        &#125;<br>    &#125;<br><br># gy.tianfucredit.cn<br><br>    server &#123;<br>        listen       80;<br>listen 443 ssl;<br>        server_name  gy.tianfucredit.cn;<br>ssl_certificate ssl/20211201/6706862_gy.tianfucredit.cn.pem;<br>        ssl_certificate_key ssl/20211201/6706862_gy.tianfucredit.cn.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://gy.tianfucredit.cn/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.166:32028;<br>        &#125;<br>    &#125;<br><br># dz.tianfucredit.cn<br><br>    server &#123;<br>        listen       80;<br>listen 443 ssl;<br>        server_name  dz.tianfucredit.cn;<br>ssl_certificate ssl/20211201/6706700_dz.tianfucredit.cn.pem;<br>        ssl_certificate_key ssl/20211201/6706700_dz.tianfucredit.cn.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://dz.tianfucredit.cn/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.168:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  bz.tianfucredit.cn;<br>listen 443 ssl;<br>ssl_certificate ssl/20211201/6706579_bz.tianfucredit.cn.pem;<br>        ssl_certificate_key ssl/20211201/6706579_bz.tianfucredit.cn.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://bz.tianfucredit.cn/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.169:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br><br>listen 443 ssl;<br>listen 80;<br>        server_name  my.tianfucredit.cn;<br>ssl_certificate ssl/20211201/6706788_my.tianfucredit.cn.pem;<br>ssl_certificate_key ssl/20211201/6706788_my.tianfucredit.cn.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://my.tianfucredit.cn/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.170:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br><br>listen 443 ssl;<br>listen 80;<br>        server_name  lsz.tianfucredit.cn;<br>        ssl_certificate ssl/20211201/6707049_lsz.tianfucredit.cn.pem;<br>        ssl_certificate_key ssl/20211201/6707049_lsz.tianfucredit.cn.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://lsz.tianfucredit.cn/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.183:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>listen 443 ssl;<br>        server_name  gz.tianfucredit.cn;<br>ssl_certificate ssl/20211201/6707044_gz.tianfucredit.cn.pem;<br>        ssl_certificate_key ssl/20211201/6707044_gz.tianfucredit.cn.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://gz.tianfucredit.cn/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.182:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br><br><br>listen 80;<br>        server_name  ab.tianfucredit.cn;<br>listen 443 ssl;<br>        ssl_certificate ssl/20211201/6706449_ab.tianfucredit.cn.pem;<br>        ssl_certificate_key ssl/20211201/6706449_ab.tianfucredit.cn.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://ab.tianfucredit.cn/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.181:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  ya.tianfucredit.cn;<br>listen 443 ssl;<br>        ssl_certificate ssl/20211201/6706691_ya.tianfucredit.cn.pem;<br>        ssl_certificate_key ssl/20211201/6706691_ya.tianfucredit.cn.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://ya.tianfucredit.cn/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.180:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  nc.tianfucredit.cn;<br>listen 443 ssl;<br>        ssl_certificate ssl/20211201/6706695_nc.tianfucredit.cn.pem;<br>        ssl_certificate_key ssl/20211201/6706695_nc.tianfucredit.cn.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://nc.tianfucredit.cn/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.179:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  yb.tianfucredit.cn;<br>listen 443 ssl;<br>        ssl_certificate ssl/20211201/6706702_yb.tianfucredit.cn.pem;<br>        ssl_certificate_key ssl/20211201/6706702_yb.tianfucredit.cn.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://yb.tianfucredit.cn/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.178:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  zy.tianfucredit.cn;<br>listen 443 ssl;<br>        ssl_certificate ssl/20211201/6706693_zy.tianfucredit.cn.pem;<br>        ssl_certificate_key ssl/20211201/6706693_zy.tianfucredit.cn.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://zy.tianfucredit.cn/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.177:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  lss.tianfucredit.cn;<br>listen 443 ssl;<br>        ssl_certificate ssl/20211201/6706692_lss.tianfucredit.cn.pem;<br>        ssl_certificate_key ssl/20211201/6706692_lss.tianfucredit.cn.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://lss.tianfucredit.cn/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.176:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br><br>listen 443 ssl;<br>listen 80;<br>        server_name  nj.tianfucredit.cn;<br>        ssl_certificate ssl/20211201/6706894_nj.tianfucredit.cn.pem;<br>        ssl_certificate_key ssl/20211201/6706894_nj.tianfucredit.cn.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://nj.tianfucredit.cn/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.175:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br><br>        listen 443 ssl;<br>listen 80;<br>        server_name  dy.tianfucredit.cn;<br>        ssl_certificate ssl/20211201/6706834_dy.tianfucredit.cn.pem;<br>        ssl_certificate_key ssl/20211201/6706834_dy.tianfucredit.cn.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://dy.tianfucredit.cn/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.174:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br><br>listen 443 ssl;<br>listen 80;<br>        server_name  lz.tianfucredit.cn;<br>        ssl_certificate ssl/20211201/6706820_lz.tianfucredit.cn.pem;<br>        ssl_certificate_key ssl/20211201/6706820_lz.tianfucredit.cn.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://lz.tianfucredit.cn/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.173:32028;<br>        &#125;<br>    &#125;<br><br><br>server &#123;<br><br>        listen 443 ssl;<br>listen 80;<br>        server_name  pzh.tianfucredit.cn;<br>ssl_certificate ssl/20211201/6706824_pzh.tianfucredit.cn.pem;<br>ssl_certificate_key ssl/20211201/6706824_pzh.tianfucredit.cn.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://pzh.tianfucredit.cn/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.172:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br><br>        listen 443 ssl;<br>listen 80;<br>        server_name  zg.tianfucredit.cn;<br>        ssl_certificate ssl/20211201/6706847_zg.tianfucredit.cn.pem;<br>        ssl_certificate_key ssl/20211201/6706847_zg.tianfucredit.cn.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://zg.tianfucredit.cn/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.171:32028;<br>        &#125;<br>    &#125;<br><br><br><br>server &#123;<br><br>        listen 443 ssl;<br>listen 80;<br>        server_name  cy.tianfucredit.cn;<br>        ssl_certificate ssl/20211201/6707067_cy.tianfucredit.cn.pem;<br>        ssl_certificate_key ssl/20211201/6707067_cy.tianfucredit.cn.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://cy.tianfucredit.cn/cui/#/home break;<br>        rewrite &quot;/&quot; https://cy.tianfucredit.cn/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.186:32028;<br>        &#125;<br>    &#125;<br><br><br><br># tianfucredit.net<br><br>    server &#123;<br>         listen    443    ssl;<br> listen 80;<br>         server_name  tianfucredit.net  www.tianfucredit.net;<br>         ssl_certificate ssl/20211201/6743515_www.tianfucredit.net.pem;<br>         ssl_certificate_key ssl/20211201/6743515_www.tianfucredit.net.key;<br>         ssl_session_timeout 5m;<br>         ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>         ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<br>         ssl_prefer_server_ciphers on;<br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://www.tianfucredit.net/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.162:32028;<br>        &#125;<br>    &#125;<br><br><br>    <br># cd.tianfucredit.net<br><br>    server &#123;<br>         listen    443    ssl;<br> listen 80;<br>         server_name  cd.tianfucredit.net;<br>         ssl_certificate ssl/20211201/6744435_cd.tianfucredit.net.pem;<br>         ssl_certificate_key ssl/20211201/6744435_cd.tianfucredit.net.key;<br>         ssl_session_timeout 5m;<br>         ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>         ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<br>         ssl_prefer_server_ciphers on;        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>         rewrite &quot;/&quot; https://cd.tianfucredit.net/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.165:32028;<br>        &#125;<br>    &#125;<br># ms.tianfucredit.net<br><br>    server &#123;<br><br>listen 443 ssl;<br>listen 80;<br>        server_name  ms.tianfucredit.net;<br>        ssl_certificate ssl/20211201/6744456_ms.tianfucredit.net.pem;<br>        ssl_certificate_key ssl/20211201/6744456_ms.tianfucredit.net.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://ms.tianfucredit.net/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.167:32028;<br>        &#125;<br>    &#125;<br><br><br># gy.tianfucredit.net<br><br>    server &#123;<br>        listen       80;<br>listen 443 ssl;<br>        server_name  gy.tianfucredit.net;<br>        ssl_certificate ssl/20211201/6743512_gy.tianfucredit.net.pem;<br>        ssl_certificate_key ssl/20211201/6743512_gy.tianfucredit.net.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://gy.tianfucredit.net/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.166:32028;<br>        &#125;<br>    &#125;<br><br># dz.tianfucredit.net<br><br>    server &#123;<br><br>listen       80;<br>listen 443 ssl;<br>        server_name  dz.tianfucredit.net;<br>ssl_certificate ssl/20211201/6744430_dz.tianfucredit.net.pem;<br>        ssl_certificate_key ssl/20211201/6744430_dz.tianfucredit.net.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://dz.tianfucredit.net/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.168:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  bz.tianfucredit.net;<br>listen 443 ssl;<br>        ssl_certificate ssl/20211201/6746351_bz.tianfucredit.net.pem;<br>        ssl_certificate_key ssl/20211201/6746351_bz.tianfucredit.net.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://bz.tianfucredit.net/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.169:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br><br>listen 443 ssl;<br>listen 80;<br>        server_name  my.tianfucredit.net;<br>        ssl_certificate ssl/20211201/6744484_my.tianfucredit.net.pem;<br>        ssl_certificate_key ssl/20211201/6744484_my.tianfucredit.net.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://my.tianfucredit.net/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.170:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  lsz.tianfucredit.net;<br>listen 443 ssl;<br>        ssl_certificate ssl/20211201/6744583_lsz.tianfucredit.net.pem;<br>        ssl_certificate_key ssl/20211201/6744583_lsz.tianfucredit.net.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://lsz.tianfucredit.net/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.183:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  gz.tianfucredit.net;<br>listen 443 ssl;<br>        ssl_certificate ssl/20211201/6744621_gz.tianfucredit.net.pem;<br>        ssl_certificate_key ssl/20211201/6744621_gz.tianfucredit.net.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://gz.tianfucredit.net/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.182:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  ab.tianfucredit.net;<br>listen 443 ssl;<br>        ssl_certificate ssl/20211201/6744597_ab.tianfucredit.net.pem;<br>        ssl_certificate_key ssl/20211201/6744597_ab.tianfucredit.net.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://ab.tianfucredit.net/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.181:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  ya.tianfucredit.net;<br>listen 443 ssl;<br>        ssl_certificate ssl/20211201/6743508_ya.tianfucredit.net.pem;<br>        ssl_certificate_key ssl/20211201/6743508_ya.tianfucredit.net.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://ya.tianfucredit.net/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.180:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  nc.tianfucredit.net;<br>listen 443 ssl;<br>        ssl_certificate ssl/20211201/6743510_nc.tianfucredit.net.pem;<br>        ssl_certificate_key ssl/20211201/6743510_nc.tianfucredit.net.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://nc.tianfucredit.net/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.179:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  yb.tianfucredit.net;<br>listen 443 ssl;<br>        ssl_certificate ssl/20211201/6744428_yb.tianfucredit.net.pem;<br>        ssl_certificate_key ssl/20211201/6744428_yb.tianfucredit.net.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://yb.tianfucredit.net/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.178:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  zy.tianfucredit.net;<br>listen 443 ssl;<br>        ssl_certificate ssl/20211201/6743513_zy.tianfucredit.net.pem;<br>        ssl_certificate_key ssl/20211201/6743513_zy.tianfucredit.net.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://zy.tianfucredit.net/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.177:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  lss.tianfucredit.net;<br>listen 443 ssl;<br>        ssl_certificate ssl/20211201/6743709_lss.tianfucredit.net.pem;<br>        ssl_certificate_key ssl/20211201/6743709_lss.tianfucredit.net.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://lss.tianfucredit.net/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.176:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  nj.tianfucredit.net;<br>listen 443 ssl;<br>        ssl_certificate ssl/20211201/6744486_nj.tianfucredit.net.pem;<br>        ssl_certificate_key ssl/20211201/6744486_nj.tianfucredit.net.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://nj.tianfucredit.net/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.175:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  dy.tianfucredit.net;<br>listen 443 ssl;<br>        ssl_certificate ssl/20211201/6743509_dy.tianfucredit.net.pem;<br>        ssl_certificate_key ssl/20211201/6743509_dy.tianfucredit.net.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://dy.tianfucredit.net/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.174:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  lz.tianfucredit.net;<br>listen 443 ssl;<br>        ssl_certificate ssl/20211201/6744100_lz.tianfucredit.net.pem;<br>        ssl_certificate_key ssl/20211201/6744100_lz.tianfucredit.net.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://lz.tianfucredit.net/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.173:32028;<br>        &#125;<br>    &#125;<br><br><br>server &#123;<br>        listen       80;<br>        server_name  pzh.tianfucredit.net;<br>listen 443 ssl;<br>        ssl_certificate ssl/20211201/6744483_pzh.tianfucredit.net.pem;<br>        ssl_certificate_key ssl/20211201/6744483_pzh.tianfucredit.net.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://pzh.tianfucredit.net/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.172:32028;<br>        &#125;<br>    &#125;<br><br>server &#123;<br>        listen       80;<br>        server_name  zg.tianfucredit.net;<br>listen 443 ssl;<br>        ssl_certificate ssl/20211201/6744423_zg.tianfucredit.net.pem;<br>        ssl_certificate_key ssl/20211201/6744423_zg.tianfucredit.net.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> <br>    if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot; https://zg.tianfucredit.net/cui/#/home break;<br>    &#125;<br>            proxy_pass http://10.10.11.171:32028;<br>        &#125;<br>    &#125;<br><br>    #admin.tianfucredit.com<br><br>    server &#123;<br>        listen 443 ssl;<br>listen 80;<br>        server_name  admin.tianfucredit.com;<br>        ssl_certificate ssl/4141651_admin.tianfucredit.com.pem;<br>        ssl_certificate_key ssl/4141651_admin.tianfucredit.com.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot;   https://admin.tianfucredit.com/ui/#/login  break;<br>    &#125;<br>            proxy_pass http://10.10.11.162:31028;<br>        &#125;<br>            #配置Nginx支持webSocket开始<br>        proxy_set_header Host $http_host;<br><br>        proxy_http_version 1.1;<br>        proxy_set_header Upgrade $http_upgrade;<br>        proxy_set_header Connection &quot;upgrade&quot;;<br>    &#125;<br><br><br>    #admin.tianfucredit.cn<br><br>    server &#123;<br>        listen 443 ssl;<br>listen 80;<br>        server_name  admin.tianfucredit.cn;<br>        ssl_certificate ssl/4141605_admin.tianfucredit.cn.pem;<br>        ssl_certificate_key ssl/4141605_admin.tianfucredit.cn.key;<br>        ssl_session_timeout 5m;<br>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <br>ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>        ssl_prefer_server_ciphers on;<br>        <br>         location / &#123;<br> if ( $request_uri = &quot;/&quot; ) &#123;<br>        rewrite &quot;/&quot;   https://admin.tianfucredit.cn/ui/#/login  break;<br>    &#125;<br>            proxy_pass http://10.10.11.162:31028;<br>        &#125;<br>            #配置Nginx支持webSocket开始<br>        proxy_set_header Host $http_host;<br><br>        proxy_http_version 1.1;<br>        proxy_set_header Upgrade $http_upgrade;<br>        proxy_set_header Connection &quot;upgrade&quot;;<br>    &#125;<br><br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><p>修改每个服务的转发地址为新的地址</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">11.175</span>:<span class="hljs-number">32028</span>;<br></code></pre></td></tr></table></figure><p>生效配置 nginx -s reload</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">nginx -s reload</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NGINX 日志分割</title>
    <link href="/2022/07/13/NGINX%20%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2/"/>
    <url>/2022/07/13/NGINX%20%E6%97%A5%E5%BF%97%E5%88%86%E5%89%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="NGINX-日志分割"><a href="#NGINX-日志分割" class="headerlink" title="NGINX 日志分割"></a>NGINX 日志分割</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#设置日志文件存放目录</span><br>LOG_HOME=<span class="hljs-string">&quot;/var/log/nginx/&quot;</span><br><span class="hljs-comment">#备分文件名称</span><br>LOG_PATH_BAK=<span class="hljs-string">&quot;<span class="hljs-subst">$(date -d yesterday +%Y%m%d%H%M)</span>&quot;</span><br><span class="hljs-comment">#重命名日志文件</span><br><span class="hljs-built_in">mv</span> <span class="hljs-variable">$&#123;LOG_HOME&#125;</span>/access.log <span class="hljs-variable">$&#123;LOG_HOME&#125;</span>/<span class="hljs-variable">$&#123;LOG_PATH_BAK&#125;</span>.access.log<br><span class="hljs-comment">#向nginx主进程发信号重新打开日志 </span><br><span class="hljs-built_in">kill</span> -USR1 `<span class="hljs-built_in">cat</span> /usr/local/nginx/logs/nginx.pid`<br><br><span class="hljs-comment">#find /var/log/nginx/ -type f -mtime +90 -delete</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux 系统优化相关经验总结</title>
    <link href="/2022/07/13/Linux%20%E7%B3%BB%E7%BB%9F%E4%BC%98%E5%8C%96%E7%9B%B8%E5%85%B3%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    <url>/2022/07/13/Linux%20%E7%B3%BB%E7%BB%9F%E4%BC%98%E5%8C%96%E7%9B%B8%E5%85%B3%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-系统优化相关经验总结"><a href="#Linux-系统优化相关经验总结" class="headerlink" title="Linux 系统优化相关经验总结"></a>Linux 系统优化相关经验总结</h1><p>一、背景<br>我们在系统运维过程中，尤其业务负载高或复杂的场景中，可能出现系统瓶颈影响业务运行的情况，甚至造成系统宕机等风险，这是我们必要情况需要对系统参数进行优化处理来缓解这种压力和风险，本文即对日常运维过程常见的维护经验总结汇总，以供后续工作参考。</p><p>二、优化处理<br>2.1、关于内核参数的优化<br>1）swap优化<br>如果服务器上有运行数据库服务或消息中间件服务，请关闭交换分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> “vm.swappiness = 0” &gt;&gt; /etc/sysctl.conf<br>sysctl -p<br></code></pre></td></tr></table></figure><p>2）OOM 误Killer优化<br>什么是OOM？ Linux 内核有个机制叫OOM killer（Out-Of-Memory killer），该机制会监控那些占用内存过大，尤其是瞬间很快消耗大量内存的进程，为了防止内存耗尽而内核会把该进程杀掉。Linux中，每个程序申请的物理内存都是共享的；例如物理内存只有1g，启动2个程序各申请1g是可以的，linux通过这种过度分配的方式来达到内存的充分利用，当程序实际使用内存超出物理内存时，会被系统按照优先级，杀掉一部分程序以确保其它程序的正常运行；为了避免核心服务触发(OOM)机制而被杀死，可以将进程文件设置为最高优先级（参考参看）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs \">echo -17 &gt; /proc/KaTeX parse error: Expected &#x27;EOF&#x27;, got &#x27;#&#x27; at position 23: …_score_adj #̲数值越小越不容易被杀，-17表…PID/oom_adj #默认值为0，新版linux已经使用oom_score_adj来代替旧版的oom_score<br></code></pre></td></tr></table></figure><p>A much more powerful interface, &#x2F;proc&#x2F;<pid>&#x2F;oom_score_adj, was<br>introduced with the oom killer rewrite that allows users to increase or<br>decrease the badness() score linearly.  This interface will replace<br>&#x2F;proc&#x2F;<pid>&#x2F;oom_adj.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sysctl -w vm.<span class="hljs-attribute">panic_on_oom</span>=1<br></code></pre></td></tr></table></figure><p> #彻底关闭；当panic_on_oom为1时，直接panic；当panic_on_oom为0时内核将通过oom killer杀掉部分进程（默认是为0的）。<br>或在sysctl.conf后追加vm.panic_on_oom &#x3D; 1 &#x2F;&#x2F;1表示关闭，默认为0表示开启OOM</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysctl -p<br>或：<br><span class="hljs-comment">#echo “vm.panic_on_oom=1” &gt;&gt; /etc/sysctl.conf</span><br><span class="hljs-comment">#sysctl -w kernel.panic=10</span><br><span class="hljs-comment">#echo “kernel.panic=10” &gt;&gt; /etc/sysctl.conf //kernel panic </span><br></code></pre></td></tr></table></figure><p>10秒后自动重启系统</p><p>#sysctl -w vm.overcommit_memory&#x3D;2 &#x2F;&#x2F; 即不超分内存vm.overcommit_memory 表示内核在分配内存时候做检查的方式。这个变量可以取到0,1,2三个值。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">echo</span> “<span class="hljs-keyword">vm</span>.overcommit_memory=<span class="hljs-number">2</span>” &gt;&gt; /etc/sysctl.<span class="hljs-keyword">conf</span> <br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;不超分配内存就不会返回错误，永远也不能达到内存被耗尽状态，OOM也就不会有影响了。</p><p>0：当用户空间请求更多的的内存时，内核尝试估算出剩余可用的内存。此时宏为 OVERCOMMIT_GUESS，内核计算：NR_FILE_PAGES 总量+SWAP总量+slab中可以释放的内存总量，如果申请空间超过此数值，则将此数值与空闲内存总量减掉 totalreserve_pages(?) 的总量相加。如果申请空间依然超过此数值，则分配失败。<br>1：当这个参数值为1时，宏为 OVERCOMMIT_ALWAYS，内核允许超量使用内存直到用完为止，主要用于科学计算。<br>2：当这个参数值为2时，此时宏为 OVERCOMMIT_NEVER，内核会使用一个决不过量使用内存的算法，即系统整个内存地址空间不能超过swap+50%的RAM值，50%参数的设定是在overcommit_ratio中设定，内核计算：内存总量×vm.overcommit_ratio&#x2F;100＋SWAP 的总量，如果申请空间超过此数值，则分配失败。vm.overcommit_ratio 的默认值为50。</p><p>   以上为粗略描述，在实际计算时，如果非root进程，则在计算时候会保留3%的空间，而root进程则没有该限制。</p><p>典型案例： 一台机器突然ssh远程登录不了，但能ping通，说明不是网络的故障，原因是sshd进程被OOM killer杀掉了（多次遇到这样的假死状况）。重启机器后查看系统日志&#x2F;var&#x2F;log&#x2F;messages会发现Out of Memory: Kill process 1865（sshd）类似的错误信息。</p><p>为防止重要的系统进程触发(OOM)机制而被杀死，内核会通过特定的算法给每个进程计算一个分数来决定杀哪个进程，每个进程的oom分数可以在&#x2F;proc&#x2F;PID&#x2F;oom_score中找到。每个进程都有一个oom_score的属性，oom killer会杀死oom_score较大的进程，当oom_score为0时禁止内核杀死该进程。在用户空间可以通过操作每个进程的 oom_adj 内核参数来调整进程的分数，这个分数也可以通过 oom_score 这个内核参数看到。</p><p>注：oom_adj的可调值为15到-16，其中15最大-16最小，-17为禁止使用OOM。oom_score为2的n次方计算出来的，其中n就是进程的oom_adj值，所以n越小，oom_score的分数越小，高的就越会被内核优先杀掉。</p><p>检测脚本：将下述脚本可用来打印当前系统上 oom_score 分数最高（最容易被 OOM Killer 杀掉）的进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-keyword">for</span> proc <span class="hljs-keyword">in</span> $(find /proc -maxdepth 1 -regex <span class="hljs-string">&#x27;/proc/[0-9]+&#x27;</span>); <span class="hljs-keyword">do</span><br><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%2d %5d %s\n&quot;</span> \<br><span class="hljs-string">&quot;<span class="hljs-subst">$(cat $proc/oom_score)</span>&quot;</span> \<br><span class="hljs-string">&quot;<span class="hljs-subst">$(basename $proc)</span>&quot;</span> \<br><span class="hljs-string">&quot;<span class="hljs-subst">$(cat $proc/cmdline | tr &#x27;\0&#x27; &#x27; &#x27; | head -c 50)</span>&quot;</span><br><span class="hljs-keyword">done</span> 2&gt;/dev/null | <span class="hljs-built_in">sort</span> -nr | <span class="hljs-built_in">head</span> -n 10<br></code></pre></td></tr></table></figure><p>测试验证：测试触发OOM的方法，可以把某个进程的oom_adj设置到15（最大值），执行：<br>echo f &gt; &#x2F;proc&#x2F;sysrq-trigger &#x2F;&#x2F;-f调用 oom_kill 来终止内存占用进程，这样15的那个进程就会报出OOM错误，需要注意的是这个测试，只是模拟OOM，不会真正杀掉进程；如下所示：</p><p>总结： 子进程会继承父进程的oom_adj。OOM不适合于解决内存泄漏(Memory leak)的问题。有时free查看还有充足的内存，但还是会触发OOM，是因为该进程可能占用了特殊的内存地址空间（更多详情参看）。</p><p>扩展： Java中，常见有java.lang.OutOfMemoryError；关于这类OOM的原因多为以下两点：</p><p>1）本身程序分配的少：比如虚拟机本身可使用的内存（一般通过启动时的VM参数指定）太少。</p><p>2）应用用的太多，并且用完没释放，导致后续进程无法使用。此时就会造成内存泄露或者内存溢出。</p><p>内存泄露：申请使用完的内存没有释放，导致jvm虚拟机不能再次使用该内存，此时这段内存就泄露了，因为申请者不用了，而又不能被jvm虚拟机分配给别人用。大量的内存泄露最终会导致内存溢出。</p><p>内存溢出：申请的内存超出了JVM能提供的内存大小，此时称之为溢出。</p><p>Java程序最常见的OOM情况有以下三种：（更多单击参考引用）</p><p>A、java.lang.OutOfMemoryError: Java heap space ——&gt;java堆内存溢出，此种情况最常见，一般由于内存泄露或者堆的大小设置不当引起。对于内存泄露，需要通过内存监控软件查找程序中的泄露代码，而堆大小可以通过虚拟机参数-Xms,-Xmx等修改。</p><p>B、java.lang.OutOfMemoryError: PermGen space ——&gt;java永久代溢出，即方法区溢出了，一般出现于大量Class或者jsp页面，或者采用cglib等反射机制的情况，因为上述情况会产生大量的Class信息存储于方法区。此种情况可以通过更改方法区的大小来解决，使用类似-XX:PermSize&#x3D;64m -XX:MaxPermSize&#x3D;256m的形式修改。另外，过多的常量尤其是字符串也会导致方法区溢出。</p><p>C、java.lang.StackOverflowError ——&gt; 不会抛OOM error，但也是比较常见的Java内存溢出。JAVA虚拟机栈溢出，一般是由于程序中存在死循环或者深度递归调用造成的，栈大小设置太小也会出现此种溢出。可以通过虚拟机参数-Xss来设置栈的大小。</p><p>更多参见 OOM 常见原因及解决；2；</p><p>3）TCP参数优化</p><p>net.ipv4.tcp_syn_retries &#x2F;&#x2F;默认值为6，参考值为2。主机作为客户端，对外发起TCP连接时，即三次握手的第一步，内核发送SYN报文的重试次数，超过这个次数后放弃连接。内网环境通信良好，因此可以适度降低此值</p><p>net.ipv4.tcp_synack_retries &#x2F;&#x2F;默认值为5，参考值为2。主机作为服务端，接受TCP连接时，在三次握手的第二步，向客户端发送SYN+ACK报文的重试次数，超过这个次数后放弃连接。内网环境中可适度降低此值</p><p>net.ipv4.tcp_timestamps &#x2F;&#x2F;是否开启时间戳，开启后可以更精确地计算RTT，一些其他特性也依赖时间戳字段。</p><p>net.ipv4.tcp_tw_reuse &#x2F;&#x2F;默认值为0，建议值为1。是否允许将处于TIME_WAIT状态的socket用于新的TCP连接。这对于降低TIME_WAIT数量很有效。该参数只有在开启tcp_timestamps的情况下才会生效。</p><p>net.ipv4.tcp_tw_recycle &#x2F;&#x2F;是否开启TIME_WAIT套接字的快速回收，这是比tcp_tw_reuse更激进的一种方式，它同样依赖tcp_timestamps选项。强烈建议不要开启tcp_tw_recycle，原因有两点，一是TIME_WAIT是十分必要的状态，避免关闭中的连接与新建连接之间的数据混淆，二是tcp_tw_recycle选项在 NAT环境下会导致一些新建连接被拒绝，因为NAT下每个主机存在时差，这体现在套接字中的时间戳字段，服务端会发现某个IP上的本应递增的时间戳出现降低的情况，时间戳相对降低的报文将被丢弃</p><p>net.core.somaxconn &#x2F;&#x2F;默认值为128，参考值为2048。定义了系统中每一个端口上最大的监听队列的长度。当服务端监听了某个端口时，操作系统内部完成对客户端连接请求的三次握手。这些已建立的连接存储在一个队列中，等待accept调用取走。本选项就是定义这个队列的长度。调大该值，可降低高并发场景下服务端的reject次数。</p><p>net.ipv4.tcp_max_syn_backlog &#x2F;&#x2F;客户端的请求在服务端由两个队列进行管理，一种是与客户端完成连接建立后，等待accept的放到一个队列，这个队列的长度由somaxconn参数控制；另一种是正在建立但未完成的连接单独存放一个队列，这个队列的长度由tcp_max_syn_backlog控制；默认128，调到至8192.</p><p>net.ipv4.tcp_max_tw_buckets &#x2F;&#x2F;默认值为4096，参考值为100000。定义系统同时保持TIME_WAIT套接字的最大数量，如果超过这个数，则TIME_WAIT套接字将立刻被清除并打印警告信息。如果系统被TIME_WAIT过多问题困扰，则可以调节tcp_max_tw_buckets、tcp_tw_reuse、tcp_timestamps三个选项来缓解。TIME_WAIT状态产生在TCP会话关闭时主动关闭的一端，如果想从根本上解决问题，则让客户端主动关闭连接，而非服务端。</p><p>扩展：<br>1）为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？</p><p>答：虽然按道理，四个报文都发送完毕，我们可以直接进入CLOSE状态了，但是我们必须假象网络是不可靠的，有可以最后一个ACK丢失。所以TIME_WAIT状态就是用来重发可能丢失的ACK报文。在Client发送出最后的ACK回复，但该ACK可能丢失。Server如果没有收到ACK，将不断重复发送FIN片段。所以Client不能立即关闭，它必须确认Server接收到了该ACK。Client会在发送出ACK之后进入到TIME_WAIT状态。Client会设置一个计时器，等待2MSL的时间。如果在该时间内再次收到FIN，那么Client会重发ACK并再次等待2MSL。所谓的2MSL是两倍的MSL(Maximum Segment Lifetime)。MSL指一个片段在网络中最大的存活时间，2MSL就是一个发送和一个回复所需的最大时间。如果直到2MSL，Client都没有再次收到FIN，那么Client推断ACK已经被成功接收，则结束TCP连接。</p><p>2）为什么不能用两次握手进行连接？</p><p>答：3次握手完成两个重要的功能，既要双方做好发送数据的准备工作(双方都知道彼此已准备好)，也要允许双方就初始序列号进行协商，这个序列号在握手过程中被发送和确认。<br>现在把三次握手改成仅需要两次握手，死锁是可能发生的。作为例子，考虑计算机S和C之间的通信，假定C给S发送一个连接请求分组，S收到了这个分组，并 送了确认应答分组。按照两次握手的协定，S认为连接已经成功地建立了，可以开始发送数据分组。可是，C在S的应答分组在传输中被丢失的情况下，将不知道S 是否已准备好，不知道S建立什么样的序列号，C甚至怀疑S是否收到自己的连接请求分组。在这种情况下，C认为连接还未建立成功，将忽略S发来的任何数据分 组，只等待连接确认应答分组。而S在再发出的数据分组超时后，重复发送同样的分组。这样就形成了死锁。</p><p>3）如果已经建立了连接，但是客户端突然出现故障了怎么办？</p><p>TCP还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会reset这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒就再发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接（更多参看）。</p><p>4）page cache优化<br>page cache即系统脏页，是系统的io缓存，当数据写入磁盘前会先写入page cache中，然后异步刷入磁盘；写缓存可以提升IO的访问速度，但同时也会增加丢失数据的风险。</p><p>从page cache刷到磁盘有以下三种时机：</p><p>可用物理内存低于特定阈值时，为了给系统腾出空闲内存；<br>脏页驻留时间超过特定阈值时，为了避免脏页无限期驻留内存；<br>被用户的sync（）或fsync（）触发。<br>由系统执行的刷盘有两种写入策略：</p><p>异步执行刷盘，不阻塞用户I&#x2F;O；<br>同步执行刷盘，用户I&#x2F;O被阻塞，直到脏页低于某个阈值。<br>在一般情况下，系统先执行第一种策略，当脏页数据量过大，异步执行来不及完成刷盘时，切换到同步方式。</p><p>我们可以通过内核参数调整脏数据的刷盘阈值：</p><p>vm.dirty_background_ratio &#x2F;&#x2F;默认值为10。该参数定义了一个百分比。当内存中的脏数据超过这个百分比后，系统使用异步方式刷盘。</p><p>vm.dirty_ratio &#x2F;&#x2F;默认值为30。同样定义了一个百分比，当内存中的脏数据超过这个百分比后，系统使用同步方式刷盘，写请求被阻塞，直到脏数据低于dirty_ratio。如果还高于dirty_background_ratio，则切换到异步方式刷盘。因此 dirty_ratio 应高于dirty_background_ratio。除了通过百分比控制，还可以指定过期时间：vm.dirty_expire_centisecs，默认值为3000（30秒），单位为百分之1秒，超过这个时间后，脏数据被异步刷盘。</p><p>可以通过下面的命令查看系统当前的脏页数量：<br>cat &#x2F;proc&#x2F;vmstat |egrep “dirty|writeback” &#x2F;&#x2F;输出如下所示</p><p>nr_dirty 951<br>nr_writeback 0<br>nr_writeback_temp 0</p><p>上述结果显示：输出显示有951个脏页等待写到磁盘。默认情况下每页大小为4KB。另外，也可以在&#x2F;proc&#x2F;meminfo文件中看到这些信息。</p><p>如果数据安全性要求没有那么高，想要多“cache”一些数据，让读取更容易命中cache，则可以增加脏数据占比和过期时间：</p><p>vm.dirty_background_ratio &#x3D; 30<br>vm.dirty_ratio &#x3D; 60<br>vm.dirty_expire_centisecs &#x3D; 6000</p><p>如果不希望因为刷盘导致io被阻，可适当减少异步刷盘的数值，这样可以让io更加平滑：</p><p>vm.dirty_background_ratio &#x3D; 5<br>vm.dirty_ratio &#x3D; 60</p><p>2.2、Mysql运行环境优化(Linux系统)<br>1）修改Linux默认的IO调度算法.<br>linux默认的IO调度算法为cfq,需要修改为dealine,如果是SSD或者PCIe-SSD设备,需要修改为noop,可以使用下面两种修改方式。</p><p>echo “deadline” &gt; &#x2F;sys&#x2F;block&#x2F;sda&#x2F;queue&#x2F;scheduler &#x2F;&#x2F;在线动态修改,重启失效</p><p>修改&#x2F;etc&#x2F;grub.conf,永久生效。修改&#x2F;etc&#x2F;grub.conf配置文件,在kernel那行增加一个配置,这里主要关注elevator这个参数,设置内核的话需要重启系统才能生效,例如:</p><p>ernel &#x2F;vmlinuz-2.6.32-279.el6.x86_64 ro root&#x3D;UUID&#x3D;e01d6bb4-bd74-404f-855a-0f700fad4de0 rd_NO_LUKS rd_NO_LVM LANG&#x3D;en_US.UTF-8 rd_NO_MD SYSFONT&#x3D;latarcyrheb-sun1<br>6 crashkernel&#x3D;auto  KEYBOARDTYPE&#x3D;pc KEYTABLE&#x3D;us rd_NO_DM elevator&#x3D;deadline rhgb quiet<br>1<br>2<br>2）扩大文件描述符<br>ulimit -n 51200 &#x2F;&#x2F;动态修改,重启失效,只能使用root,并且当前session有效<br>nprocess &#x2F;etc&#x2F;security&#x2F;limits.conf &#x2F;&#x2F;扩大可开启进程数</p><p>永久生效,在&#x2F;etc&#x2F;security&#x2F;limits.conf配置文件中增加一行:</p><ul><li><pre><code class="hljs">   hard    nofile           51200</code></pre><p>1<br>&#x2F;etc&#x2F;security&#x2F;limits.conf配置文件中增加一行:</p></li><li><pre><code class="hljs">   hard    nproc           51200</code></pre><p>1<br>修改&#x2F;etc&#x2F;pam.d&#x2F;login文件添加:<br>session required &#x2F;lib64&#x2F;security&#x2F;pam_limits.so</p></li></ul><p>重启系统以后使用 ulimit -a 命令查看是否生效。</p><p>3）禁用numa特性<br>新一代架构的NUMA不适合跑数据库,它本意是为了提高内存利用率,但是实际效果不好,反而可能导致一CPU的内存尚有剩余,但是另外一个不够用,发生swap的问题,因此建议关闭或者修改NUMA的调度机制。</p><p>1）修改&#x2F;etc&#x2F;grub.conf关闭NUMA,重启后生效。<br>kernel &#x2F;vmlinuz-2.6.32-279.el6.x86_64 ro root&#x3D;UUID&#x3D;e01d6bb4-bd74-404f-855a-0f700fad4de0 rd_NO_LUKS rd_NO_LVM LANG&#x3D;en_US.UTF-8 rd_NO_MD SYSFONT&#x3D;latarcyrheb-sun1 6 crashkernel&#x3D;auto KEYBOARDTYPE&#x3D;pc KEYTABLE&#x3D;us rd_NO_DM elevator&#x3D;deadline numa&#x3D;off rhgb quiet</p><p>2）修改&#x2F;etc&#x2F;init.d&#x2F;mysql或者mysqld_safe脚本,设置启动mysqld进程时的NUMA调度机制,例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> <span class="hljs-literal">true</span> &amp;&amp; <span class="hljs-built_in">test</span> <span class="hljs-variable">$numa_interleave</span> -eq 1<br><span class="hljs-keyword">then</span><br><br><span class="hljs-comment"># Locate numactl, ensure it exists.</span><br><br><span class="hljs-keyword">if</span> ! my_which numactl &gt; /dev/null 2&gt;&amp;1<br><span class="hljs-keyword">then</span><br>log_error “numactl <span class="hljs-built_in">command</span> not found, required <span class="hljs-keyword">for</span> –numa-interleave”<br><span class="hljs-built_in">exit</span> 1<br><br><span class="hljs-comment"># Attempt to run a command, ensure it works.</span><br><br><span class="hljs-keyword">elif</span> ! numactl –interleave=all <span class="hljs-literal">true</span><br><span class="hljs-keyword">then</span><br>log_error “numactl failed, check <span class="hljs-keyword">if</span> numactl is properly installed”<br><span class="hljs-keyword">fi</span>  <span class="hljs-comment"># Launch mysqld with numactl.</span><br>cmd=”<span class="hljs-variable">$cmd</span> numactl –interleave=all”<br><span class="hljs-keyword">elif</span> <span class="hljs-built_in">test</span> <span class="hljs-variable">$numa_interleave</span> -eq 1<br><span class="hljs-keyword">then</span><br>log_error “–numa-interleave is not supported on this platform”<br><span class="hljs-built_in">exit</span> 1<br></code></pre></td></tr></table></figure><p>4）修改swappiness设置<br>swappiness是linux的一个内核参数,用来控制物理内存交换出去的策略.它允许一个百分比的值,最小的为0,最大的为100,改值默认是60.</p><p>#sysctl -a | grep swappiness<br>vm.swappiness &#x3D; 60</p><p>说明：vm.swappiness设置为0表示尽量少使用swap,100表示尽量将inactive的内存页（inactive内存的意思是程序映射着，但是”长时间”不用的内存。）交换到swap里或者释放cache(cache类似于预读的文件)。可用如下命令查看inactive：vmstat -a 1</p><p>在Centos7之前,这个值建议设置为0，但是在新版本的内核里面,这样设置可能导致OOM(内存溢出),然后kernel会杀掉使用内存最多的mysqld进程。<br>所以现在这个值推荐设置为1,在&#x2F;etc&#x2F;sysctl.conf文件中增加一行：</p><p>vm.swappiness &#x3D; 1<br>#sysctl -p</p><p>5）优化文件系统挂载参数<br>文件系统挂载参数是在&#x2F;etc&#x2F;fstab文件中修改,重启时候生效。<br>noatime表示不记录访问时间,nodiratime不记录目录的访问时间。<br>barrier&#x3D;0,表示关闭barrier功能.barrier的主要目的是为了保证磁盘写数据的安全性,但是会降低性能。如果有BBU之类的电池备份电源保证控制卡不瞬间掉电,那么这个功能就可以放心大胆的关闭。</p><p>验证：cat &#x2F;proc&#x2F;mounts</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux 磁盘空间被吃掉了？这样排查不背锅</title>
    <link href="/2022/07/13/Linux%20%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E8%A2%AB%E5%90%83%E6%8E%89%E4%BA%86%EF%BC%9F%E8%BF%99%E6%A0%B7%E6%8E%92%E6%9F%A5%E4%B8%8D%E8%83%8C%E9%94%85%EF%BC%81/"/>
    <url>/2022/07/13/Linux%20%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E8%A2%AB%E5%90%83%E6%8E%89%E4%BA%86%EF%BC%9F%E8%BF%99%E6%A0%B7%E6%8E%92%E6%9F%A5%E4%B8%8D%E8%83%8C%E9%94%85%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-磁盘空间被吃掉了？这样排查不背锅！"><a href="#Linux-磁盘空间被吃掉了？这样排查不背锅！" class="headerlink" title="Linux 磁盘空间被吃掉了？这样排查不背锅！"></a>Linux 磁盘空间被吃掉了？这样排查不背锅！</h1><p>在服务器运维过程中，我们时常会遇到这样的情况，收到服务器磁盘空间告警</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/N0RwZkmJkSMQRKWWNedTIIxddgJPnGjicY33RvjUorVd9bF1ib1sibQPkt2nibbicF8Tvl40ic4BiaG91XH4LqQ35w5ibQ/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"><img src="https://mmbiz.qpic.cn/mmbiz_png/N0RwZkmJkSMQRKWWNedTIIxddgJPnGjicUJCCrmypPbkrrEWoZYAI2kv0iau5gxEtStbwG1OWn2ic0hib6MciapuvqQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>登录服务器，通过df -Hl查看</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/N0RwZkmJkSMQRKWWNedTIIxddgJPnGjicY33RvjUorVd9bF1ib1sibQPkt2nibbicF8Tvl40ic4BiaG91XH4LqQ35w5ibQ/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"><img src="https://mmbiz.qpic.cn/mmbiz_png/N0RwZkmJkSMQRKWWNedTIIxddgJPnGjic116AljICPwKGeibU9gfFCN9z0K8aM61dicn2OYC8AkSic4CDE3owUn2sA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>和告警信息一致，接着我们就是要找到导致磁盘空间满的目录或文件</p><p>如何找到占用空间大的目录或文件？</p><p>一种比较笨的方法是，在根目录下，通过du -hs命令，列出各目录所占空间大小</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/N0RwZkmJkSMQRKWWNedTIIxddgJPnGjicyYKaNTWLnbicHOnJqERmNJcL95ONtqfuaRLN2E3MIWdmlwmTnhpicPew/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>之后再用同样的方法继续到对应目录下去找</p><p>再相对高效一点的方法是通过du的-d参数，或–max-depth，设置查询的目录深度，目录深度增加，所查询的目录，展示出来会很多，这个时候可以通过grep进行过滤</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">du -h -d <span class="hljs-number">2</span>|<span class="hljs-keyword">grep</span> [GT] |<span class="hljs-keyword">sort</span> -nr<br>du -h --<span class="hljs-built_in">max</span>-depth=<span class="hljs-number">2</span>|<span class="hljs-keyword">grep</span> [GT] |<span class="hljs-keyword">sort</span> -nr<br></code></pre></td></tr></table></figure><p>通过这样的方式，可以搜出以G或者T为单位的占用磁盘空间的大目录，并排序</p><p>或者可以通过find来查询</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">find</span> / -<span class="hljs-built_in">type</span> f -<span class="hljs-built_in">size</span> +<span class="hljs-number">1</span>G -<span class="hljs-built_in">exec</span> du -h &#123;&#125; \;<br></code></pre></td></tr></table></figure><p>从效率上来说，find要比du要更快速、灵活</p><p>通过这两种方法，我们可以快速找到占用磁盘空间的罪魁祸首</p><p>你以为就这么简单？很多时候，你会发现，通过find或du查半天，发现所有加起来的占用空间，和df看到的磁盘空间占用，相差很大，就比如我上面的两张图</p><p>通过df查看，磁盘使用37G，但是在根目录下通过du -hs 查看，总共加起来差不多10G，没有隐藏目录，那空间被谁吃了？</p><p>很明显，有空间被已删除文件占用，文件删除了，但是资源没释放</p><p>之前介绍过一个很好用的命令：lsof，我们可以通过以下命令去查看</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">lsof</span> +L1<br></code></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/N0RwZkmJkSMQRKWWNedTIIxddgJPnGjic4ut6JYVL9AuIs83hwkZsO2bULaRKlSrXEg4nDPiaOvyJnHNwT3HibB7g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>从结果可以看出，有一个28G左右的大日志文件，删除了，但是空间没释放，这是很常见的一种情况</p><p>对应的解决方法就是，重启tomcat应用，释放空间</p><p>磁盘空间莫名被吃？</p><p>还有一种经常有人问的问题，就是，通过df查看到的磁盘</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/N0RwZkmJkSMQRKWWNedTIIxddgJPnGjicusgRW0LknnnWL5FauDm2t6G1af8AbnWSCYpibn7MK7EPtXy5mHAgiaIQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>会发现，Used和Avail加起来不够Size，莫名被吃掉一部分</p><p>其实这是Linux文件系统的一种安全策略，它默认会为root用户保留5%的磁盘空间，留作紧急情况使用。这样能保证有些关键应用（比如数据库）在硬盘满的时候有点余地，不致于马上就 crash</p><p>我们可以通过tune2fs修改预留空间的比例</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">tune2fs -m <span class="hljs-number">1</span> <span class="hljs-regexp">/dev/</span>vda1<br></code></pre></td></tr></table></figure><p>通过下图可以看到前后对比</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/N0RwZkmJkSMQRKWWNedTIIxddgJPnGjicY33RvjUorVd9bF1ib1sibQPkt2nibbicF8Tvl40ic4BiaG91XH4LqQ35w5ibQ/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"><img src="https://mmbiz.qpic.cn/mmbiz_png/N0RwZkmJkSMQRKWWNedTIIxddgJPnGjicibz0aRmoGGMJeSPRTibXZUJXIXEsC4sQpUFl4riaoz6CdnOJNDUV7QKTw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>这样被吃掉的空间，就吐出来了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>GlusterFS常用维护操作命令</title>
    <link href="/2022/07/13/GlusterFS%E5%B8%B8%E7%94%A8%E7%BB%B4%E6%8A%A4%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/07/13/GlusterFS%E5%B8%B8%E7%94%A8%E7%BB%B4%E6%8A%A4%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="GlusterFS常用维护操作命令"><a href="#GlusterFS常用维护操作命令" class="headerlink" title="GlusterFS常用维护操作命令"></a>GlusterFS常用维护操作命令</h1><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-number">1</span>.启动<span class="hljs-regexp">/关闭/</span>查看glusterd服务<br># <span class="hljs-regexp">/etc/i</span>nit.d/glusterd start<br># <span class="hljs-regexp">/etc/i</span>nit.d/glusterd stop<br># <span class="hljs-regexp">/etc/i</span>nit.d/glusterd status<br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="开机自动启动glusterd服务"><a href="#开机自动启动glusterd服务" class="headerlink" title="开机自动启动glusterd服务"></a>开机自动启动glusterd服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">chkconfig glusterd on <span class="hljs-comment"># Red Hat</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">update-rc.d glusterd defaults <span class="hljs-comment"># Debian</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;glusterd&quot;</span> &gt;&gt;/etc/rc.local <span class="hljs-comment"># Others</span></span><br></code></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="查看卷信息"><a href="#查看卷信息" class="headerlink" title="查看卷信息"></a>查看卷信息</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">gluster</span> volume <span class="hljs-literal">info</span><br></code></pre></td></tr></table></figure><h4 id="-2"><a href="#-2" class="headerlink" title=""></a></h4><h4 id="为存储池添加-x2F-移除服务器节点"><a href="#为存储池添加-x2F-移除服务器节点" class="headerlink" title="为存储池添加&#x2F;移除服务器节点"></a>为存储池添加&#x2F;移除服务器节点</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">在其中一个节点上操作即可：<br><span class="hljs-comment"># gluster peer probe &lt;SERVER&gt;</span><br><span class="hljs-comment"># gluster peer detach &lt;SERVER&gt;</span><br>注意，移除节点时，需要提前将该节点上的<span class="hljs-keyword">Brick移除。</span><br><span class="hljs-keyword"></span><br>查看所有节点的基本状态（显示的时候不包括本节点）：<br><span class="hljs-comment"># gluster peer status</span><br></code></pre></td></tr></table></figure><h4 id="-3"><a href="#-3" class="headerlink" title=""></a></h4><h4 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># mount -t ext4 <span class="hljs-regexp">/dev/</span>sdd1 <span class="hljs-regexp">/mnt/</span>brick1<br></code></pre></td></tr></table></figure><h4 id="-4"><a href="#-4" class="headerlink" title=""></a></h4><h4 id="创建-x2F-启动-x2F-停止-x2F-删除卷"><a href="#创建-x2F-启动-x2F-停止-x2F-删除卷" class="headerlink" title="创建&#x2F;启动&#x2F;停止&#x2F;删除卷"></a>创建&#x2F;启动&#x2F;停止&#x2F;删除卷</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta"># gluster volume create <span class="hljs-string">&lt;NEW-VOLNAME&gt;</span>[stripe <span class="hljs-string">&lt;COUNT&gt;</span> | replica <span class="hljs-string">&lt;COUNT&gt;</span>] [transport [tcp | rdma | tcp,rdma]] <span class="hljs-string">&lt;NEW-BRICK1&gt;</span> <span class="hljs-string">&lt;NEW-BRICK2&gt;</span> <span class="hljs-string">&lt;NEW-BRICK3&gt;</span> <span class="hljs-string">&lt;NEW-BRICK4&gt;</span>...</span><br><span class="hljs-meta"># gluster volume start <span class="hljs-string">&lt;VOLNAME&gt;</span></span><br><span class="hljs-meta"># gluster volume stop <span class="hljs-string">&lt;VOLNAME&gt;</span></span><br><span class="hljs-meta"># gluster volume delete <span class="hljs-string">&lt;VOLNAME&gt;</span></span><br><br>注意，删除卷的前提是先停止卷。<br></code></pre></td></tr></table></figure><h4 id="-5"><a href="#-5" class="headerlink" title=""></a></h4><h4 id="客户端以glusterfs方式挂载"><a href="#客户端以glusterfs方式挂载" class="headerlink" title="客户端以glusterfs方式挂载"></a>客户端以glusterfs方式挂载</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># mount -t glusterfs &lt;SERVER&gt;:/&lt;VOLNAME&gt;&lt;MOUNTDIR&gt;</span><br>对于OpenStack，计算和控制节点都要挂载<span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/nova/i</span>nstances，控制节点还要挂载<span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/glance/im</span>ages。<br></code></pre></td></tr></table></figure><h4 id="-6"><a href="#-6" class="headerlink" title=""></a></h4><h4 id="查看卷信息-1"><a href="#查看卷信息-1" class="headerlink" title="查看卷信息"></a>查看卷信息</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs applescript">列出集群中的所有卷：<br><span class="hljs-comment"># gluster volume list</span><br><br>查看集群中的卷信息：<br><span class="hljs-comment"># gluster volume info [all]</span><br><br>查看集群中的卷状态：<br><span class="hljs-comment"># gluster volume status [all]</span><br><span class="hljs-comment"># gluster volume status &lt;VOLNAME&gt; [detail| clients | mem | inode | fd]</span><br><br>查看本节点的文件系统信息：<br><span class="hljs-comment"># df -h [&lt;MOUNT-PATH&gt;]</span><br><br>查看本节点的磁盘信息：<br><span class="hljs-comment"># fdisk -l</span><br></code></pre></td></tr></table></figure><h4 id="-7"><a href="#-7" class="headerlink" title=""></a></h4><h4 id="配置卷"><a href="#配置卷" class="headerlink" title="配置卷"></a>配置卷</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta"># gluster volume set <span class="hljs-string">&lt;VOLNAME&gt;</span> <span class="hljs-string">&lt;OPTION&gt;</span> <span class="hljs-string">&lt;PARAMETER&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="-8"><a href="#-8" class="headerlink" title=""></a></h4><h4 id="扩展卷"><a href="#扩展卷" class="headerlink" title="扩展卷"></a>扩展卷</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># gluster volume <span class="hljs-keyword">add</span>-brick &lt;VOLNAME&gt; &lt;<span class="hljs-built_in">NEW</span>-BRICK&gt;<br>注意，如果是复制卷或者条带卷，则每次添加的Brick数必须是<span class="hljs-keyword">replica</span>或者stripe的整数倍。<br></code></pre></td></tr></table></figure><h4 id="-9"><a href="#-9" class="headerlink" title=""></a></h4><h4 id="收缩卷"><a href="#收缩卷" class="headerlink" title="收缩卷"></a>收缩卷</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">先将数据迁移到其它可用的Brick，迁移结束后才将该Brick移除：<br># gluster volume remove-brick &lt;VOLNAME&gt; &lt;BRICK&gt; <span class="hljs-keyword">start</span><br><br>在执行了<span class="hljs-keyword">start</span>之后，可以使用status命令查看移除进度：<br># gluster volume remove-brick &lt;VOLNAME&gt; &lt;BRICK&gt; status<br><br>不进行数据迁移，直接删除该Brick：<br># gluster volume remove-brick &lt;VOLNAME&gt; &lt;BRICK&gt; <span class="hljs-keyword">commit</span><br><br>注意，如果是复制卷或者条带卷，则每次移除的Brick数必须是<span class="hljs-keyword">replica</span>或者stripe的整数倍。<br></code></pre></td></tr></table></figure><h4 id="迁移卷"><a href="#迁移卷" class="headerlink" title="迁移卷"></a>迁移卷</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp">使用start命令开始进行迁移：<br><span class="hljs-meta"># gluster volume replace-brick <span class="hljs-string">&lt;VOLNAME&gt;</span> <span class="hljs-string">&lt;BRICK&gt;</span> <span class="hljs-string">&lt;NEW-BRICK&gt;</span> start</span><br><br>在数据迁移过程中，可以使用pause命令暂停迁移：<br><span class="hljs-meta"># gluster volume replace-brick <span class="hljs-string">&lt;VOLNAME&gt;</span> <span class="hljs-string">&lt;BRICK&gt;</span> <span class="hljs-string">&lt;NEW-BRICK&gt;</span> pause</span><br><br>在数据迁移过程中，可以使用abort命令终止迁移：<br><span class="hljs-meta"># gluster volume replace-brick <span class="hljs-string">&lt;VOLNAME&gt;</span> <span class="hljs-string">&lt;BRICK&gt;</span> <span class="hljs-string">&lt;NEW-BRICK&gt;</span> abort</span><br><br>在数据迁移过程中，可以使用status命令查看迁移进度：<br><span class="hljs-meta"># gluster volume replace-brick <span class="hljs-string">&lt;VOLNAME&gt;</span> <span class="hljs-string">&lt;BRICK&gt;</span> <span class="hljs-string">&lt;NEW-BRICK&gt;</span> status</span><br><br>在数据迁移结束后，执行commit命令来进行Brick替换：<br><span class="hljs-meta"># gluster volume replace-brick <span class="hljs-string">&lt;VOLNAME&gt;</span> <span class="hljs-string">&lt;BRICK&gt;</span> <span class="hljs-string">&lt;NEW-BRICK&gt;</span> commit</span><br></code></pre></td></tr></table></figure><h4 id="-10"><a href="#-10" class="headerlink" title=""></a></h4><h4 id="重新均衡卷"><a href="#重新均衡卷" class="headerlink" title="重新均衡卷"></a>重新均衡卷</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs applescript">不迁移数据：<br><br><span class="hljs-comment"># gluster volume rebalance &lt;VOLNAME&gt; lay-outstart</span><br><span class="hljs-comment"># gluster volume rebalance &lt;VOLNAME&gt; start</span><br><span class="hljs-comment"># gluster volume rebalance &lt;VOLNAME&gt; startforce</span><br><span class="hljs-comment"># gluster volume rebalance &lt;VOLNAME&gt; status</span><br><span class="hljs-comment"># gluster volume rebalance &lt;VOLNAME&gt; stop</span><br></code></pre></td></tr></table></figure><h4 id="-11"><a href="#-11" class="headerlink" title=""></a></h4><h4 id="系统扩展维护"><a href="#系统扩展维护" class="headerlink" title="系统扩展维护"></a>系统扩展维护</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vim">开启/关闭系统配额：<br># gluster volume quota <span class="hljs-symbol">&lt;VOLNAME&gt;</span> enable | disable<br><br>设置目录配额：<br># gluster volume quota <span class="hljs-symbol">&lt;VOLNAME&gt;</span> limit-usage <span class="hljs-symbol">&lt;DIR&gt;</span> <span class="hljs-symbol">&lt;VALUE&gt;</span><br><br>查看配额：<br># gluster volume quota <span class="hljs-symbol">&lt;VOLNAME&gt;</span> <span class="hljs-keyword">list</span> [<span class="hljs-symbol">&lt;DIR&gt;</span>]<br><br>地域复制（geo-replication）：<br># gluster volume geo-replication <span class="hljs-symbol">&lt;MASTER&gt;</span> <span class="hljs-symbol">&lt;SLAVE&gt;</span> start | status | <span class="hljs-keyword">stop</span><br><br>IO信息查看：<br># gluster volume <span class="hljs-keyword">profile</span> <span class="hljs-symbol">&lt;VOLNAME&gt;</span> start | info | <span class="hljs-keyword">stop</span><br><br>Top监控：<br>Top命令允许你查看Brick的性能，例如：<span class="hljs-keyword">read</span>,<span class="hljs-keyword">write</span>, <span class="hljs-keyword">file</span> <span class="hljs-keyword">open</span> calls, <span class="hljs-keyword">file</span> <span class="hljs-keyword">read</span> calls, <span class="hljs-keyword">file</span> <span class="hljs-keyword">write</span> calls, directory opencalls, <span class="hljs-built_in">and</span> directory real calls。所有的查看都可以设置 top数，默认<span class="hljs-number">100</span>。<br><br>查看打开的 fd：<br># gluster volume top <span class="hljs-symbol">&lt;VOLNAME&gt;</span> <span class="hljs-keyword">open</span>[brick <span class="hljs-symbol">&lt;BRICK&gt;</span>] [<span class="hljs-keyword">list</span>-cnt <span class="hljs-symbol">&lt;COUNT&gt;</span>]<br><br>其中，<span class="hljs-keyword">open</span>可以替换为<span class="hljs-keyword">read</span>, <span class="hljs-keyword">write</span>, opendir, readdir等。<br>查看每个 Brick 的读性能：<br><br># gluster volume top <span class="hljs-symbol">&lt;VOLNAME&gt;</span> <span class="hljs-keyword">read</span>-perf [bs <span class="hljs-symbol">&lt;BLOCK-SIZE&gt;</span> <span class="hljs-built_in">count</span> <span class="hljs-symbol">&lt;COUNT&gt;</span>] [brick <span class="hljs-symbol">&lt;BRICK&gt;</span>] [<span class="hljs-keyword">list</span>-cnt <span class="hljs-symbol">&lt;COUNT&gt;</span>]<br><br>其中，<span class="hljs-keyword">read</span>-perf可以替换为<span class="hljs-keyword">write</span>-perf等。<br></code></pre></td></tr></table></figure><h4 id="-12"><a href="#-12" class="headerlink" title=""></a></h4><h4 id="GlusterFS优化"><a href="#GlusterFS优化" class="headerlink" title="GlusterFS优化"></a>GlusterFS优化</h4><figure class="highlight rsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rsl"><span class="hljs-meta"># 设置 cache 大小, 默认32MB</span><br>gluster <span class="hljs-keyword">volume</span> <span class="hljs-title class_">set</span> senyint<span class="hljs-keyword">volume</span> <span class="hljs-title class_">performance</span>.cache-size <span class="hljs-number">4</span>GB<br><br><span class="hljs-meta"># 设置 io 线程, 太大会导致进程崩溃</span><br>gluster <span class="hljs-keyword">volume</span> <span class="hljs-title class_">set</span> senyint<span class="hljs-keyword">volume</span> <span class="hljs-title class_">performance</span>.io-thread-count <span class="hljs-number">16</span><br><br><span class="hljs-meta"># 设置 网络检测时间, 默认42s</span><br>gluster <span class="hljs-keyword">volume</span> <span class="hljs-title class_">set</span> senyint<span class="hljs-keyword">volume</span> <span class="hljs-title class_">network</span>.ping-timeout <span class="hljs-number">10</span><br><br><span class="hljs-meta"># 设置 写缓冲区的大小, 默认1M</span><br>gluster <span class="hljs-keyword">volume</span> <span class="hljs-title class_">set</span> senyint<span class="hljs-keyword">volume</span> <span class="hljs-title class_">performance</span>.write-behind-window-size <span class="hljs-number">1024</span>MB<br><br><span class="hljs-meta"># 开启 指定 volume 的配额，不使用</span><br>gluster <span class="hljs-keyword">volume</span> <span class="hljs-title class_">quota</span> k8s-<span class="hljs-keyword">volume</span> <span class="hljs-title class_">enable</span><br><br><span class="hljs-meta"># 限制 指定 volume 的配额，不使用</span><br>gluster <span class="hljs-keyword">volume</span> <span class="hljs-title class_">quota</span> k8s-<span class="hljs-keyword">volume</span> <span class="hljs-title class_">limit</span>-usage / <span class="hljs-number">1</span>TB<br></code></pre></td></tr></table></figure><h4 id="-13"><a href="#-13" class="headerlink" title=""></a></h4><h4 id="操作示例"><a href="#操作示例" class="headerlink" title="操作示例"></a>操作示例</h4><ul><li>强制创建卷</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">gluster volume create testvol ip:<span class="hljs-regexp">/date/</span>brick1 ip:<span class="hljs-regexp">/date/</span>brick2 force<br></code></pre></td></tr></table></figure><ul><li>磁盘限额</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">to</span> quota glusterfs<br>主要是对挂载点下的某个目录进行空间限额（对客户端下某个目录限制，而不是对组成的空间进行的限制 如：server1目录、server2目录）<br><br><span class="hljs-comment">#gluster volume quota test-volume enable 激活quota功能</span><br><br><span class="hljs-comment">#gluster volume quota test-volume disable 关闭quota功能</span><br><br><span class="hljs-comment">#gluster volume quota test-volume limit-usage /data 10GB           ---/exp2/data 目录限制</span><br><br><span class="hljs-comment">#gluster volume quota test-volume list         ---quota信息列表</span><br><br><span class="hljs-comment">#gluster volume set test-volume features.quota-timeout 5  设置信息的超时时间</span><br><br><span class="hljs-comment">#gluster volume quota test-volume remove  /data  删除某个目录的quota设置</span><br></code></pre></td></tr></table></figure><ul><li>添加存储节点</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#gluster peer probe server4   向turst pool  添加新server4</span><br><br><span class="hljs-comment">#gluster volume add-brick test-volume server4:/server4  卷组添加新空间</span><br><br><span class="hljs-attribute">gluster</span> volume <span class="hljs-literal">info</span> 查看当前所有volume状态<br><br><span class="hljs-comment">#gluster volume rebalance test-volume start          对扩容后的卷组进行rebalance</span><br><br><span class="hljs-comment">#gluster volume rebalance test-volume status</span><br><br><span class="hljs-comment">#gluster volume rebalance test-volume stop</span><br></code></pre></td></tr></table></figure><ul><li>glusterfs的参数进行设置优化</li></ul><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">#gluserfs volume <span class="hljs-built_in">set</span> test<span class="hljs-params">-volume</span> performance.<span class="hljs-keyword">cache</span><span class="hljs-params">-size</span> <span class="hljs-number">256</span>M<br></code></pre></td></tr></table></figure><ul><li>删除GlusterFS磁盘：</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># gluster volume stop datavolume1</span><br><span class="hljs-comment"># gluster volume delete datavolume1</span><br></code></pre></td></tr></table></figure><ul><li>卸载GlusterFS磁盘：</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># gluster peer detach idc1-server4</span><br></code></pre></td></tr></table></figure><ul><li>ACL访问控制：</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># gluster volume set datavolume1 auth.allow 10.100.1.*,10.200.1.*</span><br></code></pre></td></tr></table></figure><ul><li>添加GlusterFS节点：</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># gluster peer probe idc1-server5<br><br># gluster peer probe idc1-server6<br><br># gluster volume add-brick datavolume1 idc1-server5:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/share/</span>datavolume1 idc1-server6:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/share/</span>datavolume1<br></code></pre></td></tr></table></figure><ul><li>迁移GlusterFS磁盘数据：</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># gluster volume remove-brick datavolume1 idc1-server1:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/share/</span>datavolume1 idc1-server5:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/share/</span>datavolume1 start<br><br># gluster volume remove-brick datavolume1 idc1-server1:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/share/</span>datavolume1 idc1-server5:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/share/</span>datavolume1 status<br><br># gluster volume remove-brick datavolume1 idc1-server1:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/share/</span>datavolume1 idc1-server5:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/share/</span>datavolume1 commit<br></code></pre></td></tr></table></figure><ul><li>数据重新分配：</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># gluster volume rebalance datavolume1 start</span><br><br><span class="hljs-comment"># gluster volume rebalance datavolume1 status</span><br><br><span class="hljs-comment"># gluster volume rebalance datavolume1 stop</span><br></code></pre></td></tr></table></figure><ul><li>修复GlusterFS磁盘数据（例如在idc1-server1宕机的情况下）：</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># gluster volume replace-brick datavolume1 idc1-server1:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/share/</span>datavolume1 idc1-server5:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/share/</span>datavolume1 commit -force<br><br># gluster volume heal datavolume1 full<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>GitLab基础：新版本下使用gitlab-rake进行备份和恢复</title>
    <link href="/2022/07/13/GitLab%20%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/"/>
    <url>/2022/07/13/GitLab%20%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="GitLab基础：新版本下使用gitlab-rake进行备份和恢复"><a href="#GitLab基础：新版本下使用gitlab-rake进行备份和恢复" class="headerlink" title="GitLab基础：新版本下使用gitlab-rake进行备份和恢复"></a>GitLab基础：新版本下使用gitlab-rake进行备份和恢复</h1><h1 id="gitlab管理员账号"><a href="#gitlab管理员账号" class="headerlink" title="gitlab管理员账号"></a>gitlab管理员账号</h1><p><a href="mailto:&#97;&#x64;&#x6d;&#105;&#110;&#x40;&#101;&#x78;&#x61;&#109;&#112;&#108;&#101;&#x2e;&#x63;&#x6f;&#109;">&#97;&#x64;&#x6d;&#105;&#110;&#x40;&#101;&#x78;&#x61;&#109;&#112;&#108;&#101;&#x2e;&#x63;&#x6f;&#109;</a></p><p><img src="https://img-blog.csdnimg.cn/20200719101629711.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdW1pYW9jbg==,size_16,color_FFFFFF,t_70#pic_center#pic_center" alt="在这里插入图片描述"></p><p>从GitLab12.1开始，可以直接使用rake进行备份，如果之前的项目中使用的gitlab-rake进行备份和恢复的方式是否可用这个观点进行了如下实验，通过本文进行简单记录。</p><h1 id="备份源环境准备"><a href="#备份源环境准备" class="headerlink" title="备份源环境准备"></a>备份源环境准备</h1><p>容器化方式，直接使用docker-compose，启动如下服务</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yml">[<span class="hljs-string">root@host131</span> <span class="hljs-string">gitlab</span>]<span class="hljs-comment"># cat docker-compose.yml </span><br><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;2&#x27;</span>    <br><span class="hljs-attr">services:</span><br>  <span class="hljs-comment"># Version Control service: Gitlab</span><br>  <span class="hljs-attr">gitlab:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">gitlab/gitlab-ce:12.10.5-ce.0</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;32001:80&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;30022:22&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;30443:443&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./log/:/var/log/gitlab</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/:/var/opt/gitlab</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./conf/:/etc/gitlab</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">&quot;no&quot;</span><br>[<span class="hljs-string">root@host131</span> <span class="hljs-string">gitlab</span>]<span class="hljs-comment"># </span><br><span class="hljs-number">12345678910111213141516</span><br></code></pre></td></tr></table></figure><p>修改root用户，并创建如下项目<br><img src="https://img-blog.csdnimg.cn/20200812093346161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdW1pYW9jbg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="同步数据"><a href="#同步数据" class="headerlink" title="同步数据"></a>同步数据</h1><p>使用rsync将各数据卷拷贝至备份目标机器，首先同步数据目录</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs applescript">[root@host131 ~]<span class="hljs-comment"># rsync -r gitlab/data 192.168.163.132:/root/gitlab/data</span><br>root@<span class="hljs-number">192.168</span><span class="hljs-number">.163</span><span class="hljs-number">.132</span>&#x27;s password: <br>skipping non-regular <span class="hljs-built_in">file</span> <span class="hljs-string">&quot;data/gitaly/gitaly.socket&quot;</span><br>skipping non-regular <span class="hljs-built_in">file</span> <span class="hljs-string">&quot;data/gitaly/internal_sockets/internal.sock&quot;</span><br>skipping non-regular <span class="hljs-built_in">file</span> <span class="hljs-string">&quot;data/gitaly/internal_sockets/ruby.0&quot;</span><br>skipping non-regular <span class="hljs-built_in">file</span> <span class="hljs-string">&quot;data/gitaly/internal_sockets/ruby.1&quot;</span><br>skipping non-regular <span class="hljs-built_in">file</span> <span class="hljs-string">&quot;data/gitlab-rails/sockets/gitlab.socket&quot;</span><br>skipping non-regular <span class="hljs-built_in">file</span> <span class="hljs-string">&quot;data/gitlab-workhorse/socket&quot;</span><br>skipping non-regular <span class="hljs-built_in">file</span> <span class="hljs-string">&quot;data/grafana/conf&quot;</span><br>skipping non-regular <span class="hljs-built_in">file</span> <span class="hljs-string">&quot;data/grafana/public&quot;</span><br>skipping non-regular <span class="hljs-built_in">file</span> <span class="hljs-string">&quot;data/nginx/logs&quot;</span><br>skipping non-regular <span class="hljs-built_in">file</span> <span class="hljs-string">&quot;data/postgresql/.s.PGSQL.5432&quot;</span><br>skipping non-regular <span class="hljs-built_in">file</span> <span class="hljs-string">&quot;data/redis/redis.socket&quot;</span><br>[root@host131 ~]<span class="hljs-comment">#</span><br><span class="hljs-number">1234567891011121314</span><br></code></pre></td></tr></table></figure><p>注意事前需要在host132备份目标机器创建对应根目录</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@host132</span> ~]<span class="hljs-meta"># pwd</span><br>/root<br>[root<span class="hljs-symbol">@host132</span> ~]<span class="hljs-meta"># ls</span><br>anaconda-ks.cfg<br>[root<span class="hljs-symbol">@host132</span> ~]<span class="hljs-meta"># mkdir gitlab</span><br>[root<span class="hljs-symbol">@host132</span> ~]<span class="hljs-meta"># ls gitlab/</span><br>[root<span class="hljs-symbol">@host132</span> ~]<span class="hljs-meta">#</span><br><span class="hljs-number">1234567</span><br></code></pre></td></tr></table></figure><p>不然同步数据的时候会出现类似如下错误提示信息</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript">[root@host131 ~]<span class="hljs-comment"># rsync -r gitlab/data 192.168.163.132:/root/gitlab/data</span><br>root@<span class="hljs-number">192.168</span><span class="hljs-number">.163</span><span class="hljs-number">.132</span>&#x27;s password: <br>rsync: mkdir <span class="hljs-string">&quot;/root/gitlab/data&quot;</span> failed: No such <span class="hljs-built_in">file</span> <span class="hljs-keyword">or</span> directory (<span class="hljs-number">2</span>)<br>rsync <span class="hljs-keyword">error</span>: <span class="hljs-keyword">error</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">file</span> IO (code <span class="hljs-number">11</span>) <span class="hljs-keyword">at</span> main.c(<span class="hljs-number">657</span>) [Receiver=<span class="hljs-number">3.1</span><span class="hljs-number">.2</span>]<br>[root@host131 ~]<span class="hljs-comment"># </span><br><span class="hljs-number">12345</span><br></code></pre></td></tr></table></figure><ul><li>同步配置数据</li></ul><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@host131</span> ~]<span class="hljs-comment"># rsync -r gitlab/conf 192.168.163.132:/root/gitlab/conf</span><br>root<span class="hljs-meta">@192.168.163.132&#x27;s</span> password: <br>[root<span class="hljs-meta">@host131</span> ~]<span class="hljs-comment"># </span><br>123<br></code></pre></td></tr></table></figure><ul><li>同步日志数据</li></ul><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@host131</span> ~]<span class="hljs-comment"># rsync -r gitlab/log 192.168.163.132:/root/gitlab/log</span><br>root<span class="hljs-meta">@192.168.163.132&#x27;s</span> password: <br>skipping non-regular file <span class="hljs-string">&quot;log/gitlab-rails/sidekiq.log&quot;</span><br>[root<span class="hljs-meta">@host131</span> ~]<span class="hljs-comment"># </span><br>1234<br></code></pre></td></tr></table></figure><p>PS： 其实也不用这么费劲，直接打个打的tar扔过去就可以了</p><h1 id="启动备份目标侧GitLab服务"><a href="#启动备份目标侧GitLab服务" class="headerlink" title="启动备份目标侧GitLab服务"></a>启动备份目标侧GitLab服务</h1><p>使用docker-compose启动之后，界面显示如下，看起来和没有数据的方式一样<br><img src="https://img-blog.csdnimg.cn/20200812095840147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdW1pYW9jbg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="使用gitlab-rake备份数据"><a href="#使用gitlab-rake备份数据" class="headerlink" title="使用gitlab-rake备份数据"></a>使用gitlab-rake备份数据</h1><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@host131 ~]# docker exec -it gitlab_gitlab_1 sh<br># gitlab-rake gitlab:backup:create<br>2020<span class="hljs-string">-08</span><span class="hljs-string">-11</span> 23:26:51 <span class="hljs-string">+0000</span> -- Dumping database ... <br>Dumping PostgreSQL database gitlabhq_production ... [DONE]<br>2020<span class="hljs-string">-08</span><span class="hljs-string">-11</span> 23:26:56 <span class="hljs-string">+0000</span> -- done<br>2020<span class="hljs-string">-08</span><span class="hljs-string">-11</span> 23:26:56 <span class="hljs-string">+0000</span> -- Dumping repositories ...<br> * root/testproject (@hashed/6b/86/6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b) ... [SKIPPED]<br>[SKIPPED] Wiki<br>2020<span class="hljs-string">-08</span><span class="hljs-string">-11</span> 23:26:57 <span class="hljs-string">+0000</span> -- done<br>2020<span class="hljs-string">-08</span><span class="hljs-string">-11</span> 23:26:57 <span class="hljs-string">+0000</span> -- Dumping uploads ... <br>2020<span class="hljs-string">-08</span><span class="hljs-string">-11</span> 23:26:57 <span class="hljs-string">+0000</span> -- done<br>2020<span class="hljs-string">-08</span><span class="hljs-string">-11</span> 23:26:57 <span class="hljs-string">+0000</span> -- Dumping builds ... <br>2020<span class="hljs-string">-08</span><span class="hljs-string">-11</span> 23:26:57 <span class="hljs-string">+0000</span> -- done<br>2020<span class="hljs-string">-08</span><span class="hljs-string">-11</span> 23:26:57 <span class="hljs-string">+0000</span> -- Dumping artifacts ... <br>2020<span class="hljs-string">-08</span><span class="hljs-string">-11</span> 23:26:57 <span class="hljs-string">+0000</span> -- done<br>2020<span class="hljs-string">-08</span><span class="hljs-string">-11</span> 23:26:57 <span class="hljs-string">+0000</span> -- Dumping pages ... <br>2020<span class="hljs-string">-08</span><span class="hljs-string">-11</span> 23:26:57 <span class="hljs-string">+0000</span> -- done<br>2020<span class="hljs-string">-08</span><span class="hljs-string">-11</span> 23:26:57 <span class="hljs-string">+0000</span> -- Dumping lfs objects ... <br>2020<span class="hljs-string">-08</span><span class="hljs-string">-11</span> 23:26:57 <span class="hljs-string">+0000</span> -- done<br>2020<span class="hljs-string">-08</span><span class="hljs-string">-11</span> 23:26:57 <span class="hljs-string">+0000</span> -- Dumping container registry images ... <br>2020<span class="hljs-string">-08</span><span class="hljs-string">-11</span> 23:26:57 <span class="hljs-string">+0000</span> -- [DISABLED]<br>Creating backup archive: 1597188417_2020_08_11_12.10.5_gitlab_backup.tar ... done<br>Uploading backup archive to remote storage  ... skipped<br>Deleting tmp directories ... done<br>done<br>done<br>done<br>done<br>done<br>done<br>done<br>Deleting old backups ... skipping<br>Warning: Your gitlab.rb and gitlab-secrets.json files contain sensitive data <br>and are not included in this backup. You will need these files to restore a backup.<br>Please back them up manually.<br>Backup task is done.<br># <br># cd /var/opt/gitlab/backups<br># ls<br>1597188417_2020_08_11_12.10.5_gitlab_backup.tar<br># du -k *.tar<br>1721597188417_2020_08_11_12.10.5_gitlab_backup.tar<br># <br>12345678910111213141516171819202122232425262728293031323334353637383940414243<br></code></pre></td></tr></table></figure><p>可以看到数据较少，只有170K，而且提示了一个Warning信息，说一些包含敏感数据的文件gitlab.rb和gitlab-secrets.json文件不再备份之中，需要手动备份和恢复。</p><h1 id="执行恢复"><a href="#执行恢复" class="headerlink" title="执行恢复"></a>执行恢复</h1><p>使用restore执行恢复，提示如下错误信息：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs applescript">[root@host132 backups]<span class="hljs-comment"># docker exec -it gitlab_gitlab_1 sh</span><br><span class="hljs-comment"># cd /var/opt/gitlab/backups</span><br><span class="hljs-comment"># ls</span><br><span class="hljs-number">1597188417</span>_2020_08_11_12<span class="hljs-number">.10</span><span class="hljs-number">.5</span>_gitlab_backup.tar<br><span class="hljs-comment"># gitlab-rake gitlab:backup:restore BACKUP=1597188417</span><br>The backup <span class="hljs-built_in">file</span> <span class="hljs-number">1597188417</span>_gitlab_backup.tar <span class="hljs-keyword">does</span> <span class="hljs-keyword">not</span> exist!<br><span class="hljs-comment">#</span><br><span class="hljs-number">1234567</span><br></code></pre></td></tr></table></figure><p>这是因为后续tar文件名的格式发生了变化，里面加入了GitLab的版本号，所以之前的命令早不到用于恢复的备份文件，修改文件名如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cp</span> 1597188417_2020_08_11_12.10.5_gitlab_backup.tar 1597188417_gitlab_backup.tar</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash">12</span><br></code></pre></td></tr></table></figure><p>PS：更为简单的方式是使用如下命令</p><blockquote><p>执行命令：gitlab-rake gitlab:backup:restore BACKUP&#x3D;1597188417_2020_08_11_12.10.5</p></blockquote><p>在恢复之前需要首先停止服务</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># gitlab-ctl stop</span><br><span class="hljs-attribute">ok</span>: down: alertmanager: <span class="hljs-number">0</span>s, normally up<br><span class="hljs-attribute">ok</span>: down: gitaly: <span class="hljs-number">0</span>s, normally up<br><span class="hljs-attribute">ok</span>: down: gitlab-exporter: <span class="hljs-number">1</span>s, normally up<br><span class="hljs-attribute">ok</span>: down: gitlab-workhorse: <span class="hljs-number">0</span>s, normally up<br><span class="hljs-attribute">ok</span>: down: grafana: <span class="hljs-number">1</span>s, normally up<br><span class="hljs-attribute">ok</span>: down: logrotate: <span class="hljs-number">0</span>s, normally up<br><span class="hljs-attribute">ok</span>: down: nginx: <span class="hljs-number">1</span>s, normally up<br><span class="hljs-attribute">ok</span>: down: postgres-exporter: <span class="hljs-number">0</span>s, normally up<br><span class="hljs-attribute">ok</span>: down: postgresql: <span class="hljs-number">0</span>s, normally up<br><span class="hljs-attribute">ok</span>: down: prometheus: <span class="hljs-number">1</span>s, normally up<br><span class="hljs-attribute">ok</span>: down: redis: <span class="hljs-number">0</span>s, normally up<br><span class="hljs-attribute">ok</span>: down: redis-exporter: <span class="hljs-number">1</span>s, normally up<br><span class="hljs-attribute">ok</span>: down: sidekiq: <span class="hljs-number">0</span>s, normally up<br><span class="hljs-attribute">ok</span>: down: sshd: <span class="hljs-number">0</span>s, normally up<br><span class="hljs-attribute">ok</span>: down: unicorn: <span class="hljs-number">0</span>s, normally up<br><span class="hljs-comment"># </span><br><span class="hljs-attribute">1234567891011121314151617</span><br></code></pre></td></tr></table></figure><p>导入的时候需要注意权限是否正确否则容易出现如下错误</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-comment"># gitlab-rake gitlab:backup:restore BACKUP=1597188417</span><br>Unpacking backup ... tar: <span class="hljs-number">1597188417</span>_gitlab_backup.tar: Cannot open: Permission denied<br>tar: <span class="hljs-built_in">Error</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> recoverable: exiting now<br>unpacking backup failed<br><span class="hljs-comment">#</span><br><span class="hljs-number">12345</span><br></code></pre></td></tr></table></figure><p>这是因为rsync同步时的文件权限受umask影响的缺省设定，修改即可</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tap"><span class="hljs-comment"># ls -lrt</span><br>total 344<br>-rw-------<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 174080 </span>Aug<span class="hljs-number"> 12 </span>01:23 1597188417_2020_08_11_12.10.5_gitlab_backup.tar<br>-rw-------<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 174080 </span>Aug<span class="hljs-number"> 12 </span>01:26 1597188417_gitlab_backup.tar<br><span class="hljs-comment"># chmod 644 *</span><br><span class="hljs-comment">#</span><br>123456<br></code></pre></td></tr></table></figure><p>执行备份恢复出现如下错误：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># gitlab-rake gitlab:backup:restore BACKUP=1597188417</span><br>Unpacking backup <span class="hljs-built_in">..</span>. done<br>Before restoring the database, we will <span class="hljs-built_in">remove</span> all existing<br>tables <span class="hljs-keyword">to</span> avoid future<span class="hljs-built_in"> upgrade </span>problems. Be aware that <span class="hljs-keyword">if</span> you have<br>custom tables <span class="hljs-keyword">in</span> the GitLab database these tables <span class="hljs-keyword">and</span> all data will be<br>removed.<br><br><span class="hljs-keyword">Do</span> you want <span class="hljs-keyword">to</span> continue (<span class="hljs-literal">yes</span>/<span class="hljs-literal">no</span>)? <span class="hljs-literal">yes</span><br>Removing all tables. Press `Ctrl-C` within 5 seconds <span class="hljs-keyword">to</span> abort<br>2020-08-12 01:28:07 +0000 -- Cleaning the database <span class="hljs-built_in">..</span>. <br>rake aborted!<br>PG::ConnectionBad: could <span class="hljs-keyword">not</span> connect <span class="hljs-keyword">to</span> server: <span class="hljs-literal">No</span> such file <span class="hljs-keyword">or</span> directory<br>Is the<span class="hljs-built_in"> server </span>running locally <span class="hljs-keyword">and</span> accepting<br>connections on Unix domain socket <span class="hljs-string">&quot;/var/opt/gitlab/postgresql/.s.PGSQL.5432&quot;</span>?<br>/opt/gitlab/embedded/service/gitlab-rails/lib/tasks/gitlab/db.rake:27<span class="hljs-keyword">:in</span> `block (3 levels) <span class="hljs-keyword">in</span> &lt;top (required)&gt;<span class="hljs-string">&#x27;</span><br><span class="hljs-string">/opt/gitlab/embedded/service/gitlab-rails/lib/tasks/gitlab/backup.rake:64:in `block (3 levels) in &lt;top (required)&gt;&#x27;</span><br>/opt/gitlab/embedded/bin/bundle:23<span class="hljs-keyword">:in</span> `load<span class="hljs-string">&#x27;</span><br><span class="hljs-string">/opt/gitlab/embedded/bin/bundle:23:in `&lt;main&gt;&#x27;</span><br>Tasks: TOP =&gt; gitlab:db:drop_tables<br>(See full trace by running task with --trace)<br><span class="hljs-comment"># </span><br>123456789101112131415161718192021<br></code></pre></td></tr></table></figure><p>提示信息显示无法连接数据库，理论上来说把PostgreSQL启动起来可以继续，这里干脆全部启动</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs subunit"># gitlab-ctl start<br>ok: run: alertmanager: (pid 3009) 1s<br>ok: run: gitaly: (pid 3017) 0s<br>ok: run: gitlab-exporter: (pid 3030) 1s<br>ok: run: gitlab-workhorse: (pid 3033) 0s<br>ok: run: grafana: (pid 3042) 1s<br>ok: run: logrotate: (pid 3050) 0s<br>ok: run: nginx: (pid 3056) 0s<br>ok: run: postgres-exporter: (pid 3062) 1s<br>ok: run: postgresql: (pid 3078) 0s<br>ok: run: prometheus: (pid 3088) 1s<br>ok: run: redis: (pid 3096) 0s<br>ok: run: redis-exporter: (pid 3101) 1s<br>ok: run: sidekiq: (pid 3106) 0s<br>ok: run: sshd: (pid 3112) 1s<br>ok: run: unicorn: (pid 3114) 0s<br># <br># gitlab-rake gitlab:backup:restore BACKUP=1597188417<br>Unpacking backup ... done<br>Before restoring the database, we will remove all existing<br>tables to avoid future upgrade problems. Be aware that if you have<br>custom tables in the GitLab database these tables and all data will be<br>removed.<br><br>Do you want to continue (yes/no)? yes<br>Removing all tables. Press `Ctrl-C` within 5 seconds to abort<br>2020<span class="hljs-string">-08</span><span class="hljs-string">-12</span> 02:27:25 <span class="hljs-string">+0000</span> -- Cleaning the database ... <br>2020<span class="hljs-string">-08</span><span class="hljs-string">-12</span> 02:27:34 <span class="hljs-string">+0000</span> -- done<br>2020<span class="hljs-string">-08</span><span class="hljs-string">-12</span> 02:27:34 <span class="hljs-string">+0000</span> -- Restoring database ... <br>Restoring PostgreSQL database gitlabhq_production ... SET<br>SET<br>SET<br>SET<br>SET<br> set_config <br>------------<br> <br>(1 row)<br><br>SET<br>SET<br>SET<br>SET<br><span class="hljs-keyword">ERROR:  </span>relation &quot;public.u2f_registrations&quot; does not exist<br><span class="hljs-keyword">ERROR:  </span>relation &quot;public.timelogs&quot; does not exist<br>...省略<br>ALTER TABLE<br>[DONE]<br>2020<span class="hljs-string">-08</span><span class="hljs-string">-12</span> 02:28:19 <span class="hljs-string">+0000</span> -- done<br>2020<span class="hljs-string">-08</span><span class="hljs-string">-12</span> 02:28:19 <span class="hljs-string">+0000</span> -- Restoring repositories ...<br> * root/testproject ... [DONE]<br>2020<span class="hljs-string">-08</span><span class="hljs-string">-12</span> 02:28:20 <span class="hljs-string">+0000</span> -- done<br>2020<span class="hljs-string">-08</span><span class="hljs-string">-12</span> 02:28:20 <span class="hljs-string">+0000</span> -- Restoring uploads ... <br>2020<span class="hljs-string">-08</span><span class="hljs-string">-12</span> 02:28:20 <span class="hljs-string">+0000</span> -- done<br>2020<span class="hljs-string">-08</span><span class="hljs-string">-12</span> 02:28:20 <span class="hljs-string">+0000</span> -- Restoring builds ... <br>2020<span class="hljs-string">-08</span><span class="hljs-string">-12</span> 02:28:20 <span class="hljs-string">+0000</span> -- done<br>2020<span class="hljs-string">-08</span><span class="hljs-string">-12</span> 02:28:20 <span class="hljs-string">+0000</span> -- Restoring artifacts ... <br>2020<span class="hljs-string">-08</span><span class="hljs-string">-12</span> 02:28:20 <span class="hljs-string">+0000</span> -- done<br>2020<span class="hljs-string">-08</span><span class="hljs-string">-12</span> 02:28:20 <span class="hljs-string">+0000</span> -- Restoring pages ... <br>2020<span class="hljs-string">-08</span><span class="hljs-string">-12</span> 02:28:20 <span class="hljs-string">+0000</span> -- done<br>2020<span class="hljs-string">-08</span><span class="hljs-string">-12</span> 02:28:20 <span class="hljs-string">+0000</span> -- Restoring lfs objects ... <br>2020<span class="hljs-string">-08</span><span class="hljs-string">-12</span> 02:28:20 <span class="hljs-string">+0000</span> -- done<br>This task will now rebuild the authorized_keys file.<br>You will lose any data stored in the authorized_keys file.<br>Do you want to continue (yes/no)? yes<br><br>Warning: Your gitlab.rb and gitlab-secrets.json files contain sensitive data <br>and are not included in this backup. You will need to restore these files manually.<br>Restore task is done.<br># <br>12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970<br></code></pre></td></tr></table></figure><p>整个过程中数据库数据导入最开始提示了relation不不存在的错误和需要手工处理gitlab.rb等文件的Warning，其余均显示正常完成。首先在目标备份机上的登录，可以看到已经不再提示需要进行密码修改了，输入备份侧的用户名和密码信息点击登录按钮<br><img src="https://img-blog.csdnimg.cn/20200812104055625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdW1pYW9jbg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>可以看到刚刚在host131的GitLab服务上创建的工程项目信息也已经成功恢复了<br><img src="https://img-blog.csdnimg.cn/20200812104242130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdW1pYW9jbg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>git update master branch</title>
    <link href="/2022/07/13/Git%20%E5%A6%82%E4%BD%95%E6%8A%8Amaster%E7%9A%84%E5%86%85%E5%AE%B9%E6%9B%B4%E6%96%B0%E5%88%B0%E5%88%86%E6%94%AF/"/>
    <url>/2022/07/13/Git%20%E5%A6%82%E4%BD%95%E6%8A%8Amaster%E7%9A%84%E5%86%85%E5%AE%B9%E6%9B%B4%E6%96%B0%E5%88%B0%E5%88%86%E6%94%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="Git-如何把master的内容更新到分支"><a href="#Git-如何把master的内容更新到分支" class="headerlink" title="Git 如何把master的内容更新到分支"></a><a href="https://www.cnblogs.com/revel171226/p/8580369.html">Git 如何把master的内容更新到分支</a></h1><p>Background：</p><p>　　当有人对master进行更新之后，你想让已经创建的分支内容更新到master的最新状态，</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs awk">bpan@<span class="hljs-number">5</span>CG7022BM2 MINGW64 <span class="hljs-regexp">/d/</span>GitRep/JIRA_Extensions (master)<br>$ git checkout <span class="hljs-number">20180315</span>  <span class="hljs-regexp">//</span>切换到分支下<br>Switched to branch <span class="hljs-string">&#x27;20180315&#x27;</span><br>Your branch is behind <span class="hljs-string">&#x27;origin/master&#x27;</span> by <span class="hljs-number">17</span> commits, and can be fast-forwarded.<br>  (use <span class="hljs-string">&quot;git pull&quot;</span> to update your local branch)<br><br>bpan@<span class="hljs-number">5</span>CG7022BM2 MINGW64 <span class="hljs-regexp">/d/</span>GitRep/JIRA_Extensions (<span class="hljs-number">20180315</span>)<br>$ git merge master  <span class="hljs-regexp">//</span>合并master到分支，<br>Updating cee69ca..<span class="hljs-number">8</span>b0ec9a<br>Fast-forward<br> .gitignore                                         |   <span class="hljs-number">2</span> +<br> ...<span class="hljs-regexp">/functions/</span>ExtractGroupMembersToExcelFile.java  | <span class="hljs-number">225</span> +++++++++++++++++++++<br> <span class="hljs-number">2</span> files changed, <span class="hljs-number">227</span> insertions(+)<br> create mode <span class="hljs-number">100644</span> src<span class="hljs-regexp">/main/</span>java<span class="hljs-regexp">/com/</span>nokia<span class="hljs-regexp">/jira/</span>functions/ExtractGroupMembersToExcelFile.java<br><br>bpan@<span class="hljs-number">5</span>CG7022BM2 MINGW64 <span class="hljs-regexp">/d/</span>GitRep/JIRA_Extensions (<span class="hljs-number">20180315</span>)<br>$ git status<br>On branch <span class="hljs-number">20180315</span><br>Your branch is up-to-date with <span class="hljs-string">&#x27;origin/master&#x27;</span>.<br>nothing to commit, working tree clean<br><br>bpan@<span class="hljs-number">5</span>CG7022BM2 MINGW64 <span class="hljs-regexp">/d/</span>GitRep/JIRA_Extensions (<span class="hljs-number">20180315</span>)<br>$ git push origin <span class="hljs-number">20180315</span>  <span class="hljs-regexp">//</span>push到远程分支<br>fatal: HttpRequestException encountered.<br>   An error occurred <span class="hljs-keyword">while</span> sending the request.<br>Username <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;https://github.com&#x27;</span>: <span class="hljs-number">962720900</span><br>Total <span class="hljs-number">0</span> (delta <span class="hljs-number">0</span>), reused <span class="hljs-number">0</span> (delta <span class="hljs-number">0</span>)<br>To https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/962720900/</span>JiraExtensionFunctions.git<br>   e713274..<span class="hljs-number">8</span>b0ec9a  <span class="hljs-number">20180315</span> -&gt; <span class="hljs-number">20180315</span><br></code></pre></td></tr></table></figure><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>3.0版播放器登录信息</title>
    <link href="/2022/07/13/3.0%E7%89%88%E6%92%AD%E6%94%BE%E5%99%A8%E7%99%BB%E5%BD%95%E4%BF%A1%E6%81%AF%20%E7%BD%91%E6%A0%A1%E5%90%8D%E7%A7%B0%EF%BC%9A%E4%B8%80%E4%BC%91%E7%BD%91%E6%A0%A1%20%E8%B4%A6%E5%8F%B7%E5%B9%B3%E5%93%A5%20%E5%AF%86%E7%A0%81570451/"/>
    <url>/2022/07/13/3.0%E7%89%88%E6%92%AD%E6%94%BE%E5%99%A8%E7%99%BB%E5%BD%95%E4%BF%A1%E6%81%AF%20%E7%BD%91%E6%A0%A1%E5%90%8D%E7%A7%B0%EF%BC%9A%E4%B8%80%E4%BC%91%E7%BD%91%E6%A0%A1%20%E8%B4%A6%E5%8F%B7%E5%B9%B3%E5%93%A5%20%E5%AF%86%E7%A0%81570451/</url>
    
    <content type="html"><![CDATA[<p>网校名称：一休网校 账号:平哥 密码:570451</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/07/13/hello-world/"/>
    <url>/2022/07/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker-compose 部署prometheus-grafana监控esxi与linux服务器</title>
    <link href="/2022/07/13/docker-compose-%E9%83%A8%E7%BD%B2prm/"/>
    <url>/2022/07/13/docker-compose-%E9%83%A8%E7%BD%B2prm/</url>
    
    <content type="html"><![CDATA[<h1 id="docker-compose-部署prometheus"><a href="#docker-compose-部署prometheus" class="headerlink" title="docker-compose 部署prometheus"></a>docker-compose 部署prometheus</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="vmware-exporter-yaml"><a href="#vmware-exporter-yaml" class="headerlink" title="vmware_exporter.yaml"></a>vmware_exporter.yaml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-attr">groups:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">vmware</span> <span class="hljs-string">status</span><br>      <span class="hljs-attr">rules:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">HighNumberOfSnapshots</span> <span class="hljs-comment">#大量快照模板</span><br>        <span class="hljs-attr">expr:</span> <span class="hljs-string">vmware_vm_snapshots</span> <span class="hljs-string">&gt;</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">for:</span> <span class="hljs-string">30m</span><br>        <span class="hljs-attr">labels:</span><br>          <span class="hljs-attr">severity:</span> <span class="hljs-string">warning</span><br>        <span class="hljs-attr">annotations:</span><br>          <span class="hljs-attr">summary:</span> <span class="hljs-string">High</span> <span class="hljs-string">Number</span> <span class="hljs-string">of</span> <span class="hljs-string">Snapshots</span> <span class="hljs-string">(instance</span> &#123;&#123; <span class="hljs-string">$labels.instance</span> &#125;&#125;<span class="hljs-string">)</span><br>          <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;High snapshots number on <span class="hljs-template-variable">&#123;&#123; $labels.instance &#125;&#125;</span>: <span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>n  Num = <span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>n  VMware_Name = <span class="hljs-template-variable">&#123;&#123; $labels.vm_name &#125;&#125;</span>&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">VirtualMachineMemoryWarning</span>  <span class="hljs-comment">#虚拟机内存警告模板</span><br>        <span class="hljs-attr">expr:</span> <span class="hljs-string">vmware_vm_mem_usage_average</span> <span class="hljs-string">/</span> <span class="hljs-number">100</span> <span class="hljs-string">&gt;=</span> <span class="hljs-number">80</span> <span class="hljs-string">and</span> <span class="hljs-string">vmware_vm_mem_usage_average</span> <span class="hljs-string">/</span> <span class="hljs-number">100</span> <span class="hljs-string">&lt;</span> <span class="hljs-number">50</span><br>        <span class="hljs-attr">for:</span> <span class="hljs-string">30m</span><br>        <span class="hljs-attr">labels:</span><br>          <span class="hljs-attr">severity:</span> <span class="hljs-string">warning</span><br>        <span class="hljs-attr">annotations:</span><br>          <span class="hljs-attr">summary:</span> <span class="hljs-string">Virtual</span> <span class="hljs-string">Machine</span> <span class="hljs-string">Memory</span> <span class="hljs-string">Warning</span> <span class="hljs-string">(instance</span> &#123;&#123; <span class="hljs-string">$labels.instance</span> &#125;&#125;<span class="hljs-string">)</span><br>          <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;High memory usage on <span class="hljs-template-variable">&#123;&#123; $labels.instance &#125;&#125;</span>: <span class="hljs-template-variable">&#123;&#123; $value | printf &quot;%.2f&quot;&#125;&#125;</span>%n  VALUE = <span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>n  VMware_Name = <span class="hljs-template-variable">&#123;&#123; $labels.vm_name &#125;&#125;</span>&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">VirtualMachineMemoryCritical</span> <span class="hljs-comment">#虚拟机内存严重模板</span><br>        <span class="hljs-attr">expr:</span> <span class="hljs-string">vmware_vm_mem_usage_average</span> <span class="hljs-string">/</span> <span class="hljs-number">100</span> <span class="hljs-string">&gt;=</span> <span class="hljs-number">90</span><br>        <span class="hljs-attr">for:</span> <span class="hljs-string">30m</span><br>        <span class="hljs-attr">labels:</span><br>          <span class="hljs-attr">severity:</span> <span class="hljs-string">error</span><br>        <span class="hljs-attr">annotations:</span><br>          <span class="hljs-attr">summary:</span> <span class="hljs-string">Virtual</span> <span class="hljs-string">Machine</span> <span class="hljs-string">Memory</span> <span class="hljs-string">Critical</span> <span class="hljs-string">(instance</span> &#123;&#123; <span class="hljs-string">$labels.instance</span> &#125;&#125;<span class="hljs-string">)</span><br>          <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;High memory usage on <span class="hljs-template-variable">&#123;&#123; $labels.instance &#125;&#125;</span>: <span class="hljs-template-variable">&#123;&#123; $value | printf &quot;%.2f&quot;&#125;&#125;</span>%n  VALUE = <span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>n  VMware_Name = <span class="hljs-template-variable">&#123;&#123; $labels.vm_name &#125;&#125;</span>&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">OutdatedSnapshots</span>  <span class="hljs-comment">#过时的快照模板 (单位是舔)</span><br>        <span class="hljs-attr">expr:</span> <span class="hljs-string">(time()</span> <span class="hljs-bullet">-</span> <span class="hljs-string">vmware_vm_snapshot_timestamp_seconds)</span> <span class="hljs-string">/</span> <span class="hljs-string">(60</span> <span class="hljs-string">*</span> <span class="hljs-number">60</span> <span class="hljs-string">*</span> <span class="hljs-number">24</span><span class="hljs-string">)</span> <span class="hljs-string">&gt;=</span> <span class="hljs-number">90</span><br>        <span class="hljs-attr">for:</span> <span class="hljs-string">30m</span><br>        <span class="hljs-attr">labels:</span><br>          <span class="hljs-attr">severity:</span> <span class="hljs-string">warning</span><br>        <span class="hljs-attr">annotations:</span><br>          <span class="hljs-attr">summary:</span> <span class="hljs-string">Outdated</span> <span class="hljs-string">Snapshots</span> <span class="hljs-string">(instance</span> &#123;&#123; <span class="hljs-string">$labels.instance</span> &#125;&#125;<span class="hljs-string">)</span><br>          <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;Outdated snapshots on <span class="hljs-template-variable">&#123;&#123; $labels.instance &#125;&#125;</span>: <span class="hljs-template-variable">&#123;&#123; $value | printf &quot;%.0f&quot;&#125;&#125;</span> daysn  VALUE = <span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>n  VMware_Name = <span class="hljs-template-variable">&#123;&#123; $labels.vm_name &#125;&#125;</span>&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">EsxiHostMemoryCritical</span>  <span class="hljs-comment">#esxi内存使用百分比模板</span><br>        <span class="hljs-attr">expr:</span> <span class="hljs-string">((vmware_host_memory_usage</span> <span class="hljs-string">/</span> <span class="hljs-string">vmware_host_memory_max)</span> <span class="hljs-string">*</span> <span class="hljs-number">100</span><span class="hljs-string">)</span> <span class="hljs-string">&gt;</span> <span class="hljs-number">50</span><br>        <span class="hljs-attr">for:</span> <span class="hljs-string">5m</span><br>        <span class="hljs-attr">labels:</span><br>          <span class="hljs-attr">severity:</span> <span class="hljs-string">warning</span><br>        <span class="hljs-attr">annotations:</span><br>          <span class="hljs-attr">summary:</span>  <span class="hljs-string">Esxi</span> <span class="hljs-string">Host</span> <span class="hljs-string">Memory</span> <span class="hljs-string">Warning</span> <span class="hljs-string">(instance</span> &#123;&#123; <span class="hljs-string">$labels.instance</span> &#125;&#125;<span class="hljs-string">)</span><br>          <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;Outdated Host Esxi Memory on <span class="hljs-template-variable">&#123;&#123; $labels.instance &#125;&#125;</span>: <span class="hljs-template-variable">&#123;&#123; $value | printf &quot;%.0f&quot;&#125;&#125;</span> %n  VALUE = <span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>n  VMware_Name = <span class="hljs-template-variable">&#123;&#123; $labels.host_name &#125;&#125;</span>&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">EsxiHostCPUCritical</span>  <span class="hljs-comment">#esxi cpu 百分比</span><br>        <span class="hljs-attr">expr:</span> <span class="hljs-string">((vmware_host_cpu_usage</span> <span class="hljs-string">/</span> <span class="hljs-string">vmware_host_cpu_max)</span> <span class="hljs-string">*</span> <span class="hljs-number">100</span><span class="hljs-string">)</span> <span class="hljs-string">&gt;</span> <span class="hljs-number">50</span><br>        <span class="hljs-attr">for:</span> <span class="hljs-string">5m</span><br>        <span class="hljs-attr">labels:</span><br>          <span class="hljs-attr">severity:</span> <span class="hljs-string">warning</span><br>        <span class="hljs-attr">annotations:</span><br>          <span class="hljs-attr">summary:</span>  <span class="hljs-string">Esxi</span> <span class="hljs-string">Host</span> <span class="hljs-string">CPU</span> <span class="hljs-string">Warning</span> <span class="hljs-string">(instance</span> &#123;&#123; <span class="hljs-string">$labels.instance</span> &#125;&#125;<span class="hljs-string">)</span><br>          <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;Outdated Host Esxi CPU on <span class="hljs-template-variable">&#123;&#123; $labels.instance &#125;&#125;</span>: <span class="hljs-template-variable">&#123;&#123; $value | printf &quot;%.0f&quot;&#125;&#125;</span> %n  VALUE = <span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>n  VMware_Name = <span class="hljs-template-variable">&#123;&#123; $labels.host_name &#125;&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><h3 id="prometheus-yaml"><a href="#prometheus-yaml" class="headerlink" title="prometheus.yaml"></a>prometheus.yaml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># my global config</span><br><span class="hljs-attr">global:</span><br>  <span class="hljs-attr">scrape_interval:</span> <span class="hljs-string">15s</span> <span class="hljs-comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span><br>  <span class="hljs-attr">evaluation_interval:</span> <span class="hljs-string">15s</span> <span class="hljs-comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span><br>  <span class="hljs-comment"># scrape_timeout is set to the global default (10s).</span><br><br><span class="hljs-comment"># Alertmanager configuration</span><br><span class="hljs-attr">alerting:</span><br>  <span class="hljs-attr">alertmanagers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">static_configs:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span><br>          <span class="hljs-comment"># - alertmanager:9093</span><br><br><span class="hljs-comment"># Load rules once and periodically evaluate them according to the global &#x27;evaluation_interval&#x27;.</span><br><span class="hljs-attr">rule_files:</span><br>  <span class="hljs-comment"># - &quot;first_rules.yml&quot;</span><br>  <span class="hljs-comment"># - &quot;second_rules.yml&quot;</span><br><br><span class="hljs-comment"># A scrape configuration containing exactly one endpoint to scrape:</span><br><span class="hljs-comment"># Here it&#x27;s Prometheus itself.</span><br><span class="hljs-attr">scrape_configs:</span><br>  <span class="hljs-comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&quot;prometheus&quot;</span><br><br>    <span class="hljs-comment"># metrics_path defaults to &#x27;/metrics&#x27;</span><br>    <span class="hljs-comment"># scheme defaults to &#x27;http&#x27;.</span><br><br>    <span class="hljs-attr">static_configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&quot;localhost:9090&quot;</span>]<br>  <span class="hljs-comment"># - job_name: linux</span><br>  <span class="hljs-comment">#   metrics_path: &#x27;/metrics&#x27;</span><br>  <span class="hljs-comment">#   static_configs:</span><br>  <span class="hljs-comment">#     - targets: [&#x27;132.16.10.241:9101&#x27;] #服务器ip地址，可添加多台服务器以,分割（node_exporter就放在该服务器当中运行）</span><br>  <span class="hljs-comment">#       labels:</span><br>  <span class="hljs-comment">#         instance: 132.16.10.241</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">server</span><br>    <span class="hljs-attr">metrics_path:</span> <span class="hljs-string">&#x27;/metrics&#x27;</span><br>    <span class="hljs-attr">static_configs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&#x27;172.16.3.149:9101&#x27;</span>] <span class="hljs-comment">#服务器ip地址，可添加多台服务器以,分割（node_exporter就放在该服务器当中运行）</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">instance:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.3</span><span class="hljs-number">.149</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&#x27;172.16.3.148:9101&#x27;</span>] <span class="hljs-comment">#服务器ip地址，可添加多台服务器以,分割（node_exporter就放在该服务器当中运行）</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">instance:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.3</span><span class="hljs-number">.148</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;vmware_vcenter&#x27;</span><br>    <span class="hljs-attr">metrics_path:</span> <span class="hljs-string">&#x27;/metrics&#x27;</span><br>    <span class="hljs-attr">static_configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;172.16.3.233&#x27;</span><br>    <span class="hljs-attr">relabel_configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__address__</span>]<br>        <span class="hljs-attr">target_label:</span> <span class="hljs-string">__param_target</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">source_labels:</span> [<span class="hljs-string">__param_target</span>]<br>        <span class="hljs-attr">target_label:</span> <span class="hljs-string">instance</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">target_label:</span> <span class="hljs-string">__address__</span><br>        <span class="hljs-attr">replacement:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.3</span><span class="hljs-number">.149</span><span class="hljs-string">:9272</span><br><br><br></code></pre></td></tr></table></figure><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs yml"><br><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">prometheus:</span> <span class="hljs-comment"># 容器名, 有个性化需求的同学可以修改</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">prom</span> <br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span> <span class="hljs-comment"># 启动方式</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">prom/prometheus</span><br>    <span class="hljs-attr">ports:</span>  <span class="hljs-comment"># 端口映射</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">9090</span><span class="hljs-string">:9090</span><br>    <span class="hljs-attr">volumes:</span> <span class="hljs-comment"># 磁盘映射</span><br>      <span class="hljs-comment"># 这个镜像将 workspace 设置为了 /app, 我们需要将它持久化到宿主机上 </span><br>      <span class="hljs-comment"># exp: /usr/local/docker/hexo/hexo-starter:/app:rw</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./prometheus:/etc/prometheus:rw</span><br>    <span class="hljs-comment"># privileged: true</span><br>  <span class="hljs-attr">grafana:</span> <br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">grafana</span> <br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span> <br>    <span class="hljs-attr">image:</span> <span class="hljs-string">grafana/grafana</span><br>    <span class="hljs-attr">ports:</span>  <br>      <span class="hljs-bullet">-</span> <span class="hljs-number">3001</span><span class="hljs-string">:3000</span><br>    <span class="hljs-attr">volumes:</span> <br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./grafana-storage:/var/lib/grafana</span><br>    <span class="hljs-comment"># privileged: true</span><br>  <span class="hljs-attr">vmware-exporter:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">pryorda/vmware_exporter:v0.11.1</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">vmware-exporter</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br>    <span class="hljs-attr">ports:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;9272:9272&#x27;</span><br>    <span class="hljs-attr">expose:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-number">9272</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">VSPHERE_HOST:</span> <span class="hljs-string">&quot;172.16.3.233&quot;</span><br>      <span class="hljs-attr">VSPHERE_IGNORE_SSL:</span> <span class="hljs-string">&quot;True&quot;</span><br>      <span class="hljs-attr">VSPHERE_USER:</span> <span class="hljs-string">&quot;administrator@vsphere.local&quot;</span><br>      <span class="hljs-attr">VSPHERE_PASSWORD:</span> <span class="hljs-string">&quot;P@ssw0rd&quot;</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">org.label-schema.group:</span> <span class="hljs-string">&quot;monitoring&quot;</span><br>  <span class="hljs-attr">prometheus-node-exporter:</span> <br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">prom-no-ex</span> <br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">prom/node-exporter</span><br>    <span class="hljs-attr">ports:</span> <br>      <span class="hljs-bullet">-</span> <span class="hljs-number">9101</span><span class="hljs-string">:9100</span><br>    <span class="hljs-attr">volumes:</span> <br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/proc:/host/proc:ro</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/sys:/host/sys:ro</span><br>    <span class="hljs-comment"># privileged: true</span><br><br></code></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose up -d<br><br>[+] Running 4/4<br> ⠿ Container prom-no-ex         Started   1.8s<br> ⠿ Container prom             Started   1.8s<br> ⠿ Container grafana           Started   1.6s<br> ⠿ Container vmware-exporter      Started   1.7s  <br> <br> docker-compose ps<br>NAME      COMMAND         SERVICE  STATUS      PORTS<br>grafana    <span class="hljs-string">&quot;/run.sh&quot;</span>       grafana   running   0.0.0.0:3001-&gt;3000/tcp, :::3001-&gt;3000/tcp<br>prom     <span class="hljs-string">&quot;/bin/…&quot;</span>        prometheus running   0.0.0.0:9090-&gt;9090/tcp, :::9090-&gt;9090/tcp<br>prom-no-ex <span class="hljs-string">&quot;/bin/...&quot;</span>      node-exporter  running  0.0.0.0:9101-&gt;9100/tcp, :::9101-&gt;9100/tcp<br>vmware-exporter  <span class="hljs-string">&quot;/usr/…&quot;</span>   vmware-exporter  running   0.0.0.0:9272-&gt;9272/tcp, :::9272-&gt;9272/tcp<br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>prometheus监控VShereClient7.0_EXSi7.0主机状态</title>
    <link href="/2022/07/13/prometheus%E7%9B%91%E6%8E%A7VShereClient7.0_EXSi7.0%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81/"/>
    <url>/2022/07/13/prometheus%E7%9B%91%E6%8E%A7VShereClient7.0_EXSi7.0%E4%B8%BB%E6%9C%BA%E7%8A%B6%E6%80%81/</url>
    
    <content type="html"><![CDATA[<h1 id="prometheus监控VShereClient7-0-EXSi7-0主机状态"><a href="#prometheus监控VShereClient7-0-EXSi7-0主机状态" class="headerlink" title="prometheus监控VShereClient7.0_EXSi7.0主机状态"></a>prometheus监控VShereClient7.0_EXSi7.0主机状态</h1><h2 id="编写docker-compose"><a href="#编写docker-compose" class="headerlink" title="编写docker-compose"></a>编写docker-compose</h2><p>docker-compose.yaml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">vmware-exporter:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">pryorda/vmware_exporter:v0.11.1</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">vmware-exporter</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br>    <span class="hljs-attr">ports:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;9272:9272&#x27;</span><br>    <span class="hljs-attr">expose:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-number">9272</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">VSPHERE_HOST:</span> <span class="hljs-string">&quot;10.0.10.210&quot;</span><br>      <span class="hljs-attr">VSPHERE_IGNORE_SSL:</span> <span class="hljs-string">&quot;True&quot;</span><br>      <span class="hljs-attr">VSPHERE_USER:</span> <span class="hljs-string">&quot;administrator@vsphere.local&quot;</span><br>      <span class="hljs-attr">VSPHERE_PASSWORD:</span> <span class="hljs-string">&quot;1qazXSW@&quot;</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">org.label-schema.group:</span> <span class="hljs-string">&quot;monitoring&quot;</span><br><span class="hljs-string">```</span>      <br><span class="hljs-comment">## 运行服务</span><br><span class="hljs-string">使用docker-compose将该容器运维起来。docker</span> <span class="hljs-string">ps</span> <span class="hljs-string">查询该容器是否运行起来。如果没有请自行排查原因。</span><br><span class="hljs-string">```bash</span><br><span class="hljs-string">docker-compose</span> <span class="hljs-string">up</span> <span class="hljs-string">-d</span><br></code></pre></td></tr></table></figure><h2 id="浏览该问监控所在服务器的ip-端口。"><a href="#浏览该问监控所在服务器的ip-端口。" class="headerlink" title="浏览该问监控所在服务器的ip+端口。"></a>浏览该问监控所在服务器的ip+端口。</h2><p>访问ip+端口发现vmware_exporter可以正常采集到数据，说明这就成功了80%了，剩下的就是配置监控项报警规则。</p><h2 id="Prometheus-添加监控项"><a href="#Prometheus-添加监控项" class="headerlink" title="Prometheus 添加监控项"></a>Prometheus 添加监控项</h2><p>vmware_exporter 安装完成只是第一步，我们需要在 Prometheus 中添加针对 VMware_exporter 信息的收集</p><p>修改 Prometheus 配置文件</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">$ cd /etc/prometheus/</span><br><span class="hljs-attribute">$ vim prometheus.yml</span><br><span class="hljs-attribute">```bash</span><br><span class="hljs-attribute">#添加下面的配置</span><br><span class="hljs-attribute">```yml</span><br><span class="hljs-attribute">  - job_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;vmware_vcenter&#x27;</span><br>    <span class="hljs-attribute">metrics_path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;/metrics&#x27;</span><br>    <span class="hljs-attribute">static_configs</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">targets:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;esxi.frps.cn&#x27;</span><br>    <span class="hljs-attribute">relabel_configs</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [__address__]</span><br>        <span class="hljs-attribute">target_label</span><span class="hljs-punctuation">:</span> <span class="hljs-string">__param_target</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">source_labels: [__param_target]</span><br>        <span class="hljs-attribute">target_label</span><span class="hljs-punctuation">:</span> <span class="hljs-string">instance</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">target_label: __address__</span><br>        <span class="hljs-attribute">replacement</span><span class="hljs-punctuation">:</span> <span class="hljs-string">dsm.frps.cn:9272</span><br><span class="hljs-comment">#targets 在Prometheus中显示的名称</span><br><span class="hljs-comment">#replacement VMware_exporter地址</span><br><span class="hljs-comment">#relabel_configs中配置了自动发现</span><br></code></pre></td></tr></table></figure><h2 id="配置监控项报警规则"><a href="#配置监控项报警规则" class="headerlink" title="配置监控项报警规则"></a>配置监控项报警规则</h2><p>添加监控项，并浏览器查看，满足监控规则就会报警。报警途径有许多请自行设置。</p><p>#注意格式，格式错误会让prometheus无法启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ vim /etc/prometheus/rules/vmware_exporter.yaml<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">groups:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">vmware</span> <span class="hljs-string">status</span><br>      <span class="hljs-attr">rules:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">HighNumberOfSnapshots</span> <span class="hljs-comment">#大量快照模板</span><br>        <span class="hljs-attr">expr:</span> <span class="hljs-string">vmware_vm_snapshots</span> <span class="hljs-string">&gt;</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">for:</span> <span class="hljs-string">30m</span><br>        <span class="hljs-attr">labels:</span><br>          <span class="hljs-attr">severity:</span> <span class="hljs-string">warning</span><br>        <span class="hljs-attr">annotations:</span><br>          <span class="hljs-attr">summary:</span> <span class="hljs-string">High</span> <span class="hljs-string">Number</span> <span class="hljs-string">of</span> <span class="hljs-string">Snapshots</span> <span class="hljs-string">(instance</span> &#123;&#123; <span class="hljs-string">$labels.instance</span> &#125;&#125;<span class="hljs-string">)</span><br>          <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;High snapshots number on <span class="hljs-template-variable">&#123;&#123; $labels.instance &#125;&#125;</span>: <span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>n  Num = <span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>n  VMware_Name = <span class="hljs-template-variable">&#123;&#123; $labels.vm_name &#125;&#125;</span>&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">VirtualMachineMemoryWarning</span>  <span class="hljs-comment">#虚拟机内存警告模板</span><br>        <span class="hljs-attr">expr:</span> <span class="hljs-string">vmware_vm_mem_usage_average</span> <span class="hljs-string">/</span> <span class="hljs-number">100</span> <span class="hljs-string">&gt;=</span> <span class="hljs-number">80</span> <span class="hljs-string">and</span> <span class="hljs-string">vmware_vm_mem_usage_average</span> <span class="hljs-string">/</span> <span class="hljs-number">100</span> <span class="hljs-string">&lt;</span> <span class="hljs-number">50</span><br>        <span class="hljs-attr">for:</span> <span class="hljs-string">30m</span><br>        <span class="hljs-attr">labels:</span><br>          <span class="hljs-attr">severity:</span> <span class="hljs-string">warning</span><br>        <span class="hljs-attr">annotations:</span><br>          <span class="hljs-attr">summary:</span> <span class="hljs-string">Virtual</span> <span class="hljs-string">Machine</span> <span class="hljs-string">Memory</span> <span class="hljs-string">Warning</span> <span class="hljs-string">(instance</span> &#123;&#123; <span class="hljs-string">$labels.instance</span> &#125;&#125;<span class="hljs-string">)</span><br>          <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;High memory usage on <span class="hljs-template-variable">&#123;&#123; $labels.instance &#125;&#125;</span>: <span class="hljs-template-variable">&#123;&#123; $value | printf &quot;%.2f&quot;&#125;&#125;</span>%n  VALUE = <span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>n  VMware_Name = <span class="hljs-template-variable">&#123;&#123; $labels.vm_name &#125;&#125;</span>&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">VirtualMachineMemoryCritical</span> <span class="hljs-comment">#虚拟机内存严重模板</span><br>        <span class="hljs-attr">expr:</span> <span class="hljs-string">vmware_vm_mem_usage_average</span> <span class="hljs-string">/</span> <span class="hljs-number">100</span> <span class="hljs-string">&gt;=</span> <span class="hljs-number">90</span><br>        <span class="hljs-attr">for:</span> <span class="hljs-string">30m</span><br>        <span class="hljs-attr">labels:</span><br>          <span class="hljs-attr">severity:</span> <span class="hljs-string">error</span><br>        <span class="hljs-attr">annotations:</span><br>          <span class="hljs-attr">summary:</span> <span class="hljs-string">Virtual</span> <span class="hljs-string">Machine</span> <span class="hljs-string">Memory</span> <span class="hljs-string">Critical</span> <span class="hljs-string">(instance</span> &#123;&#123; <span class="hljs-string">$labels.instance</span> &#125;&#125;<span class="hljs-string">)</span><br>          <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;High memory usage on <span class="hljs-template-variable">&#123;&#123; $labels.instance &#125;&#125;</span>: <span class="hljs-template-variable">&#123;&#123; $value | printf &quot;%.2f&quot;&#125;&#125;</span>%n  VALUE = <span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>n  VMware_Name = <span class="hljs-template-variable">&#123;&#123; $labels.vm_name &#125;&#125;</span>&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">OutdatedSnapshots</span>  <span class="hljs-comment">#过时的快照模板 (单位是舔)</span><br>        <span class="hljs-attr">expr:</span> <span class="hljs-string">(time()</span> <span class="hljs-bullet">-</span> <span class="hljs-string">vmware_vm_snapshot_timestamp_seconds)</span> <span class="hljs-string">/</span> <span class="hljs-string">(60</span> <span class="hljs-string">*</span> <span class="hljs-number">60</span> <span class="hljs-string">*</span> <span class="hljs-number">24</span><span class="hljs-string">)</span> <span class="hljs-string">&gt;=</span> <span class="hljs-number">90</span><br>        <span class="hljs-attr">for:</span> <span class="hljs-string">30m</span><br>        <span class="hljs-attr">labels:</span><br>          <span class="hljs-attr">severity:</span> <span class="hljs-string">warning</span><br>        <span class="hljs-attr">annotations:</span><br>          <span class="hljs-attr">summary:</span> <span class="hljs-string">Outdated</span> <span class="hljs-string">Snapshots</span> <span class="hljs-string">(instance</span> &#123;&#123; <span class="hljs-string">$labels.instance</span> &#125;&#125;<span class="hljs-string">)</span><br>          <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;Outdated snapshots on <span class="hljs-template-variable">&#123;&#123; $labels.instance &#125;&#125;</span>: <span class="hljs-template-variable">&#123;&#123; $value | printf &quot;%.0f&quot;&#125;&#125;</span> daysn  VALUE = <span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>n  VMware_Name = <span class="hljs-template-variable">&#123;&#123; $labels.vm_name &#125;&#125;</span>&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">EsxiHostMemoryCritical</span>  <span class="hljs-comment">#esxi内存使用百分比模板</span><br>        <span class="hljs-attr">expr:</span> <span class="hljs-string">((vmware_host_memory_usage</span> <span class="hljs-string">/</span> <span class="hljs-string">vmware_host_memory_max)</span> <span class="hljs-string">*</span> <span class="hljs-number">100</span><span class="hljs-string">)</span> <span class="hljs-string">&gt;</span> <span class="hljs-number">50</span><br>        <span class="hljs-attr">for:</span> <span class="hljs-string">5m</span><br>        <span class="hljs-attr">labels:</span><br>          <span class="hljs-attr">severity:</span> <span class="hljs-string">warning</span><br>        <span class="hljs-attr">annotations:</span><br>          <span class="hljs-attr">summary:</span>  <span class="hljs-string">Esxi</span> <span class="hljs-string">Host</span> <span class="hljs-string">Memory</span> <span class="hljs-string">Warning</span> <span class="hljs-string">(instance</span> &#123;&#123; <span class="hljs-string">$labels.instance</span> &#125;&#125;<span class="hljs-string">)</span><br>          <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;Outdated Host Esxi Memory on <span class="hljs-template-variable">&#123;&#123; $labels.instance &#125;&#125;</span>: <span class="hljs-template-variable">&#123;&#123; $value | printf &quot;%.0f&quot;&#125;&#125;</span> %n  VALUE = <span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>n  VMware_Name = <span class="hljs-template-variable">&#123;&#123; $labels.host_name &#125;&#125;</span>&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">EsxiHostCPUCritical</span>  <span class="hljs-comment">#esxi cpu 百分比</span><br>        <span class="hljs-attr">expr:</span> <span class="hljs-string">((vmware_host_cpu_usage</span> <span class="hljs-string">/</span> <span class="hljs-string">vmware_host_cpu_max)</span> <span class="hljs-string">*</span> <span class="hljs-number">100</span><span class="hljs-string">)</span> <span class="hljs-string">&gt;</span> <span class="hljs-number">50</span><br>        <span class="hljs-attr">for:</span> <span class="hljs-string">5m</span><br>        <span class="hljs-attr">labels:</span><br>          <span class="hljs-attr">severity:</span> <span class="hljs-string">warning</span><br>        <span class="hljs-attr">annotations:</span><br>          <span class="hljs-attr">summary:</span>  <span class="hljs-string">Esxi</span> <span class="hljs-string">Host</span> <span class="hljs-string">CPU</span> <span class="hljs-string">Warning</span> <span class="hljs-string">(instance</span> &#123;&#123; <span class="hljs-string">$labels.instance</span> &#125;&#125;<span class="hljs-string">)</span><br>          <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;Outdated Host Esxi CPU on <span class="hljs-template-variable">&#123;&#123; $labels.instance &#125;&#125;</span>: <span class="hljs-template-variable">&#123;&#123; $value | printf &quot;%.0f&quot;&#125;&#125;</span> %n  VALUE = <span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>n  VMware_Name = <span class="hljs-template-variable">&#123;&#123; $labels.host_name &#125;&#125;</span>&quot;</span><br>          <br></code></pre></td></tr></table></figure><p>VsphereAlert.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">groups:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">EXSi主机状态监控告警</span><br>      <span class="hljs-attr">rules:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">EXSi主机状态</span><br>        <span class="hljs-attr">expr:</span> <span class="hljs-string">vmware_host_power_state</span> <span class="hljs-string">==0</span><br>        <span class="hljs-attr">for:</span> <span class="hljs-string">5m</span><br>        <span class="hljs-attr">labels:</span><br>          <span class="hljs-attr">type:</span> <span class="hljs-string">lost</span><br>          <span class="hljs-attr">severity:</span> <span class="hljs-string">fatal</span><br>        <span class="hljs-attr">annotations:</span><br>          <span class="hljs-attr">summary:</span> <span class="hljs-string">&quot;EXSi主机 <span class="hljs-template-variable">&#123;&#123;$labels.host_name&#125;&#125;</span> 失联&quot;</span><br>          <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;EXSi任务 <span class="hljs-template-variable">&#123;&#123;$labels.job&#125;&#125;</span> 下的主机 <span class="hljs-template-variable">&#123;&#123;$labels.host_name&#125;&#125;</span> 已经超过五分钟没有数据了.&quot;</span><br>          <span class="hljs-attr">monitor_url:</span> <span class="hljs-string">&quot;http://10.0.10.120:3000/d/q1yCDNbWz/vmware-stats?orgId=1&quot;</span><br> <br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">EXSi主机CPU使用情况</span><br>        <span class="hljs-attr">expr:</span> <span class="hljs-string">(vmware_host_cpu_usage</span> <span class="hljs-string">/</span> <span class="hljs-string">vmware_host_cpu_max)</span> <span class="hljs-string">*</span> <span class="hljs-number">100</span> <span class="hljs-string">&gt;80</span><br>        <span class="hljs-attr">for:</span> <span class="hljs-string">5m</span><br>        <span class="hljs-attr">labels:</span><br>          <span class="hljs-attr">type:</span> <span class="hljs-string">cpu</span><br>          <span class="hljs-attr">severity:</span> <span class="hljs-string">warning</span><br>        <span class="hljs-attr">annotations:</span><br>          <span class="hljs-attr">summary:</span> <span class="hljs-string">&quot;EXSi主机 <span class="hljs-template-variable">&#123;&#123; $labels.host_name &#125;&#125;</span> 的 CPU 使用率告警&quot;</span><br>          <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;EXSi主机 <span class="hljs-template-variable">&#123;&#123; $labels.host_name &#125;&#125;</span> CPU 使用率超过 80%, 当前值为： <span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>&quot;</span><br>          <span class="hljs-attr">monitor_url:</span> <span class="hljs-string">&quot;http://10.0.10.120:3000/d/q1yCDNbWz/vmware-stats?orgId=1&quot;</span><br> <br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">EXSi主机内存使用</span><br>        <span class="hljs-attr">expr:</span> <span class="hljs-string">(vmware_host_memory_usage/</span> <span class="hljs-string">vmware_host_memory_max)</span> <span class="hljs-string">*</span> <span class="hljs-number">100</span> <span class="hljs-string">&gt;85</span><br>        <span class="hljs-attr">for:</span> <span class="hljs-string">5m</span><br>        <span class="hljs-attr">labels:</span><br>          <span class="hljs-attr">type:</span> <span class="hljs-string">mem</span><br>          <span class="hljs-attr">severity:</span> <span class="hljs-string">warning</span><br>        <span class="hljs-attr">annotations:</span><br>          <span class="hljs-attr">summary:</span> <span class="hljs-string">&quot;EXSi主机 <span class="hljs-template-variable">&#123;&#123; $labels.host_name &#125;&#125;</span> 的内存使用率告警&quot;</span><br>          <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;EXSi主机 <span class="hljs-template-variable">&#123;&#123; $labels.host_name &#125;&#125;</span> 的内存使用率超过 85%, 当前值为： <span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>&quot;</span><br>          <span class="hljs-attr">monitor_url:</span> <span class="hljs-string">&quot;http://10.0.10.120:3000/d/q1yCDNbWz/vmware-stats?orgId=1&quot;</span><br> <br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">EXSi主机磁盘容量</span><br>        <span class="hljs-attr">expr:</span> <span class="hljs-string">((vmware_datastore_capacity_size-</span> <span class="hljs-string">vmware_datastore_freespace_size)</span> <span class="hljs-string">/</span> <span class="hljs-string">vmware_datastore_capacity_size)</span> <span class="hljs-string">*</span> <span class="hljs-number">100</span>  <span class="hljs-string">&gt;70</span><br>        <span class="hljs-attr">for:</span> <span class="hljs-string">5m</span><br>        <span class="hljs-attr">labels:</span><br>          <span class="hljs-attr">type:</span> <span class="hljs-string">cpu</span><br>          <span class="hljs-attr">severity:</span> <span class="hljs-string">warning</span><br>        <span class="hljs-attr">annotations:</span><br>          <span class="hljs-attr">summary:</span> <span class="hljs-string">&quot;EXSi主机 <span class="hljs-template-variable">&#123;&#123; $labels.host_name &#125;&#125;</span> 的磁盘使用率告警&quot;</span><br>          <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;EXSi主机 <span class="hljs-template-variable">&#123;&#123; $labels.host_name &#125;&#125;</span> 的磁盘使用率超过 70%, 挂载点: <span class="hljs-template-variable">&#123;&#123; $labels.mountpoint &#125;&#125;</span> 当前值为：<span class="hljs-template-variable">&#123;&#123; $value &#125;&#125;</span>%&quot;</span><br>          <span class="hljs-attr">monitor_url:</span> <span class="hljs-string">&quot;http://10.0.10.120:3000/d/q1yCDNbWz/vmware-stats?orgId=1&quot;</span><br><br></code></pre></td></tr></table></figure><h2 id="添加Grafana展示模板。"><a href="#添加Grafana展示模板。" class="headerlink" title="添加Grafana展示模板。"></a>添加Grafana展示模板。</h2><p>请自行添加模板（连接地址<a href="https://grafana.com/grafana/dashboards/11243%EF%BC%89%E6%A8%A1%E6%9D%BFID%EF%BC%9A11243%EF%BC%8C%E6%B7%BB%E5%8A%A0%E6%97%B6%E6%A8%A1%E6%9D%BF%E6%95%B0%E6%8D%AE%E6%BA%90%E9%80%89%E6%8B%A9promethus%E3%80%82%E6%9C%80%E7%BB%88%E5%B1%95%E7%A4%BA%E5%A6%82%E4%B8%8B%E5%9B%BE%E3%80%82">https://grafana.com/grafana/dashboards/11243）模板ID：11243，添加时模板数据源选择promethus。最终展示如下图。</a></p><p>这是报警截图。</p>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker 部署监控grafana+prometheus 监控服务器资源</title>
    <link href="/2022/07/13/docker-%E9%83%A8%E7%BD%B2%E7%9B%91%E6%8E%A7/"/>
    <url>/2022/07/13/docker-%E9%83%A8%E7%BD%B2%E7%9B%91%E6%8E%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="grafana-prometheus-监控服务器资源"><a href="#grafana-prometheus-监控服务器资源" class="headerlink" title="grafana+prometheus 监控服务器资源"></a>grafana+prometheus 监控服务器资源</h1><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><p>Prometheus 是一套开源的监控 + 预警 + 时间序列数据库的组合，现在越来越多的公司或组织开始采用 Prometheus，现在常见的 kubernetes 容器管理系统，也会搭配 Prometheus 来进行监控。<br>Prometheus 本身不具备收集监控数据功能，需要使用 http 接口来获取不同的 export 收集的数据，存储到时序数据库中。<br>————————————————————————————————<br>环境搭建简介：<br>Prometheus： 普罗米修斯的主服务器,端口号9090<br>NodeExporter：负责收集Host硬件信息和操作系统信息，端口号9100<br>MySqld_Exporter：负责收集mysql数据信息收集，端口号9104<br>cAdvisor：负责收集Host上运行的docker容器信息,端口号占用8080<br>Grafana：负责展示普罗米修斯监控界面，端口号3000<br>altermanager：等待接收prometheus发过来的告警信息，altermanager再发送给定义的收件人<br>————————————————————————————————</p><p>容器的基本操作方法<br>1.查看docker下所有镜像<br>    docker images</p><p>2.docker下查看容器<br>    docker ps # 已启动的容器<br>    docker ps -a # 所有容器</p><p>3.停止运行的容器<br>      docker stop 容器id&amp;容器名称</p><p>4.启动停止的容器<br>      docker start 容器id&amp;容器名称</p><p>5.重启容器<br>    docker restart 容器id&amp;容器名称</p><p>6.删除容器<br>    docker rm -f 容器id&amp;容器名称</p><p>7.进入容器内部<br>    docker exec -itu root 容器id&amp;容器名称 &#x2F;bin&#x2F;sh</p><p>8.容器中解压文件<br>    unzip xxx文件名</p><p>9.从宿主机拷贝文件到容器当中<br>    docker cp &#x2F;Users&#x2F;songpeilun&#x2F;PycharmProjects&#x2F;zh-cnProject.zip hungry_wu:&#x2F;zh_work<br>说明：<br>    &#x2F;Users&#x2F;songpeilun&#x2F;PycharmProjects&#x2F;zh-cnProject.zip# 宿主机文件全路径<br>    hungry_wu:&#x2F;zh_work  # 容器名称:容器的目录</p><p>10.查看容器内jenkins登录密码<br>    cat &#x2F;var&#x2F;jenkins_home&#x2F;secrets&#x2F;initialAdminPassword<br>说明：<br>      &#x2F;var&#x2F;jenkins_home# 容器目录地址</p><p>11.查看映射本地jenkins密码<br>    cat &#x2F;Users&#x2F;songpeilun&#x2F;jenkins_home&#x2F;secrets&#x2F;initialAdminPassword<br>说明：<br>      &#x2F;Users&#x2F;songpeilun&#x2F;jenkins_home# 本地目录地址</p><p>12.上传文件<br>    rz # 上传本地文件到linux服务器<br> docker  ps -a |grep jenkins</p><p>!! 启动镜像时 如果本地自动生成的文件夹没有权限需要收到给文件夹赋予权限chmod 777 xxx目录名称</p><h2 id="Docker下安装Prometheus"><a href="#Docker下安装Prometheus" class="headerlink" title="Docker下安装Prometheus"></a>Docker下安装Prometheus</h2><h3 id="1-1-docker下查看prometheus镜像"><a href="#1-1-docker下查看prometheus镜像" class="headerlink" title="1.1 docker下查看prometheus镜像"></a>1.1 docker下查看prometheus镜像</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker search prometheus</span><br></code></pre></td></tr></table></figure><h3 id="1-2-docker下拉取prometheus"><a href="#1-2-docker下拉取prometheus" class="headerlink" title="1.2 docker下拉取prometheus"></a>1.2 docker下拉取prometheus</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull prom/prometheus<br></code></pre></td></tr></table></figure><h3 id="查看已经docker下已经拉取的镜像"><a href="#查看已经docker下已经拉取的镜像" class="headerlink" title="查看已经docker下已经拉取的镜像"></a>查看已经docker下已经拉取的镜像</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker images</span><br></code></pre></td></tr></table></figure><h3 id="1-3-启动prometheus容器"><a href="#1-3-启动prometheus容器" class="headerlink" title="1.3 启动prometheus容器"></a>1.3 启动prometheus容器</h3><p>使用下面方法修改宿主机文件，直接同步到&#x2F;etc&#x2F;prometheus&#x2F;目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1.启动容器</span><br>docker run -itd --name docker_prometheus prom/prometheus<br><br><span class="hljs-comment"># 2.复制容器内部的配置文件到宿主机，不用事先创建$PWD/prometheus目录</span><br>docker <span class="hljs-built_in">cp</span> -a docker_prometheus:/etc/prometheus/ <span class="hljs-variable">$PWD</span>/prometheus<br><br><span class="hljs-comment"># 3.删除容器</span><br>docker <span class="hljs-built_in">rm</span> -f docker_prometheus<br><br><span class="hljs-comment"># 4.启动容器 设置端口</span><br>docker run -itd --name=docker_prometheus --restart=always -p 9090:9090 prom/prometheus<br><br><span class="hljs-comment"># docker run运行</span><br><span class="hljs-comment"># --name 容器的名称</span><br><span class="hljs-comment"># -p 指定容器的端口映射</span><br><span class="hljs-comment"># --restart  容器重启策略 no不重启，always 退出时总是重启</span><br><span class="hljs-comment"># prom/prometheus  选择镜像名称启动容器（默认镜像后面会加latest  如果拉取自己创建的镜像后面要加自己的版本号）</span><br><br>查看容器是否启动成功<br><br>docker ps<br><br></code></pre></td></tr></table></figure><p>浏览器输入<a href="http://132.16.10.241:9090/targets%E8%BF%9B%E5%85%A5%E9%A1%B5%E9%9D%A2">http://132.16.10.241:9090/targets进入页面</a></p><p><img src="/images/pasted-7.png" alt="upload successful"></p><h2 id="Docker下安装Grafana"><a href="#Docker下安装Grafana" class="headerlink" title="Docker下安装Grafana"></a>Docker下安装Grafana</h2><h3 id="2-1-docker下查看grafana"><a href="#2-1-docker下查看grafana" class="headerlink" title="2.1 docker下查看grafana"></a>2.1 docker下查看grafana</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker search grafana</span><br></code></pre></td></tr></table></figure><h3 id="2-2-docker下拉取grafana"><a href="#2-2-docker下拉取grafana" class="headerlink" title="2.2 docker下拉取grafana"></a>2.2 docker下拉取grafana</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#拉取grafana</span><br>docker pull grafana/grafana<br></code></pre></td></tr></table></figure><h3 id="2-3启动grafana"><a href="#2-3启动grafana" class="headerlink" title="2.3启动grafana"></a>2.3启动grafana</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -d --name grafana -p 3000:3000 grafana/grafana grafana<br><br>docker <span class="hljs-built_in">run</span> -itd <span class="hljs-attribute">--name</span>=grafana <span class="hljs-attribute">--restart</span>=always -p 3000:3000 -v <span class="hljs-variable">$PWD</span>/grafana-storage:/var/lib/grafana grafana/grafana<br><br><span class="hljs-comment"># docker run运行</span><br><span class="hljs-comment"># --name 容器的名称</span><br><span class="hljs-comment"># -p 指定容器的端口映射</span><br><span class="hljs-comment"># -v：挂载宿主机目录和 docker容器中的目录 $PWD/grafana-storage 本地宿主机绝对目录;/var/lib/grafana 容器目录（将容器目录挂载到本地）</span><br><span class="hljs-comment"># --restart  容器重启策略 no不重启，always 退出时总是重启</span><br><span class="hljs-comment"># grafana/grafana  选择镜像名称启动容器（默认镜像后面会加latest  如果拉取自己创建的镜像后面要加自己的版本号）</span><br></code></pre></td></tr></table></figure><p>浏览器输入http:&#x2F;&#x2F;<ip>:3000进入页面</p><h2 id="安装node-export"><a href="#安装node-export" class="headerlink" title="安装node_export"></a>安装node_export</h2><p>node_export 是 Prometheus 的一个 export，主要是用来收集服务器硬件资源使用情况的。所以这个往往会部署再被监控的服务器上。即：grafana、Prometheus 会独立部署在一台机器上，node_export 则被部署在被监控的服务器上，收集被监控的服务器资源数据，给 Prometheus，然后再通过 grafana 展示出来。</p><p>node_export 部署在被监控的服务器上，可以根据服务器的实际情况，选择直接安装，还是用 docker 安装。</p><p>服务器上安装node_export</p><h3 id="方法一：服务器上直接安装（解压包安装）"><a href="#方法一：服务器上直接安装（解压包安装）" class="headerlink" title="方法一：服务器上直接安装（解压包安装）"></a>方法一：服务器上直接安装（解压包安装）</h3><p>首先，用浏览器访问：node_export下载 这里能获得 node_export 所有的发布版本，可以根据自己服务器的实际情况，选择要下载的包。<br>下载包后，上传到被监控的服务器上，解压<br>进入解压文件夹，启动.&#x2F;node_exporter</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 新建文件夹 </span><br><span class="hljs-built_in">mkdir</span> node_exporter<br><span class="hljs-comment"># 进入目录</span><br><span class="hljs-built_in">cd</span> node_exporter/<br><span class="hljs-comment"># 将本地下载到解压包上传到服务器</span><br>rz<br><span class="hljs-comment"># 解压文件</span><br>unzip xxx.zip<br><span class="hljs-comment"># 启动 node_exporter</span><br>./node_exporter<br><br><span class="hljs-built_in">nohup</span> ./node_exporter --web.listen-address=<span class="hljs-string">&quot;:9100&quot;</span>&amp;<br><br><span class="hljs-comment"># 查看服务9100 服务是否开启</span><br>netstat -ntlp<br></code></pre></td></tr></table></figure><p>问题： 在服务器当中直接使用 .&#x2F;node_exporter 启动的话，关闭终端后采集器就不会上报数据！<br>建议使用以下命令启动服务 nohup .&#x2F;node_exporter –web.listen-address&#x3D;”:9100”&amp;</p><h3 id="方法二：服务器上用-docker-安装-node-export（推荐）"><a href="#方法二：服务器上用-docker-安装-node-export（推荐）" class="headerlink" title="方法二：服务器上用 docker 安装 node_export（推荐）"></a>方法二：服务器上用 docker 安装 node_export（推荐）</h3><h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker pull prom/<span class="hljs-keyword">node</span><span class="hljs-title">-exporter</span><br></code></pre></td></tr></table></figure><h4 id="启动node-exporter"><a href="#启动node-exporter" class="headerlink" title="启动node-exporter"></a>启动node-exporter</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker run -d --name <span class="hljs-keyword">node</span><span class="hljs-title">-exporter</span> --<span class="hljs-attr">restart=</span>always -p <span class="hljs-number">9100</span>:<span class="hljs-number">9100</span> -v <span class="hljs-string">&quot;/proc:/host/proc:ro&quot;</span> -v <span class="hljs-string">&quot;/sys:/host/sys:ro&quot;</span> -v <span class="hljs-string">&quot;/:/rootfs:ro&quot;</span> prom/<span class="hljs-keyword">node</span><span class="hljs-title">-exporter</span><br></code></pre></td></tr></table></figure><p>查看服务器端口是否开放</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">netstat -ntlp</span><br></code></pre></td></tr></table></figure><p>访问页面浏览器输入http:&#x2F;&#x2F;<ip>:9100&#x2F;metrics查看服务器是否有数据收集</p><h2 id="配置-Prometheus-node-exporter数据收集"><a href="#配置-Prometheus-node-exporter数据收集" class="headerlink" title="配置 Prometheus+node_exporter数据收集"></a>配置 Prometheus+node_exporter数据收集</h2><p>说明：prometheus 本身没有数据收集功能，需要用 node_exporter 收集，他们俩之间如何连接在一起呢？要修改 Prometheus 的配置文件，这个文件在 Prometheus 容器的&#x2F;etc&#x2F;prometheus&#x2F;prometheus.yml</p><p>配置 vi prometheus&#x2F;prometheus.yml文件（本地的文件）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># my global config</span><br><span class="hljs-attr">global:</span><br>  <span class="hljs-attr">scrape_interval:</span> <span class="hljs-string">15s</span> <span class="hljs-comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span><br>  <span class="hljs-attr">evaluation_interval:</span> <span class="hljs-string">15s</span> <span class="hljs-comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span><br>  <span class="hljs-comment"># scrape_timeout is set to the global default (10s).</span><br><br><span class="hljs-comment"># Alertmanager configuration</span><br><span class="hljs-attr">alerting:</span><br>  <span class="hljs-attr">alertmanagers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">static_configs:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span><br>          <span class="hljs-comment"># - alertmanager:9093</span><br><br><span class="hljs-comment"># Load rules once and periodically evaluate them according to the global &#x27;evaluation_interval&#x27;.</span><br><span class="hljs-attr">rule_files:</span><br>  <span class="hljs-comment"># - &quot;first_rules.yml&quot;</span><br>  <span class="hljs-comment"># - &quot;second_rules.yml&quot;</span><br><br><span class="hljs-comment"># A scrape configuration containing exactly one endpoint to scrape:</span><br><span class="hljs-comment"># Here it&#x27;s Prometheus itself.</span><br><span class="hljs-attr">scrape_configs:</span><br>  <span class="hljs-comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&quot;prometheus&quot;</span><br><br>    <span class="hljs-comment"># metrics_path defaults to &#x27;/metrics&#x27;</span><br>    <span class="hljs-comment"># scheme defaults to &#x27;http&#x27;.</span><br><br>    <span class="hljs-attr">static_configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&quot;localhost:9090&quot;</span>]<span class="hljs-comment"># 本机地址</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">linux</span><br>    <span class="hljs-attr">static_configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&#x27;47.99.99.251:9100&#x27;</span>] <span class="hljs-comment">#服务器ip地址，可添加多台服务器以,分割（node_exporter就放在该服务器当中运行）</span><br>        <span class="hljs-attr">labels:</span><br>          <span class="hljs-attr">instance:</span> <span class="hljs-string">localhost</span><br></code></pre></td></tr></table></figure><p>重启Prometheus 容器后 修改后的文件直接同步到容器&#x2F;etc&#x2F;prometheus&#x2F;中<br>docker restart docker_prometheus</p><p>重启后可在docker中查看文件是否同步到容器当中<br>（1）进入容器 docker exec -it docker_prometheus &#x2F;bin&#x2F;sh<br>（2）查看配置文件信息 cat &#x2F;etc&#x2F;prometheus&#x2F;prometheus.yml</p><p>完成后在http:&#x2F;&#x2F;<ip>:9090&#x2F;targets中查看是否有刚刚配置的job_name: linux信息出现</p><h2 id="配置Granfana数据面板展示"><a href="#配置Granfana数据面板展示" class="headerlink" title="配置Granfana数据面板展示"></a>配置Granfana数据面板展示</h2><h3 id="5-1-登录granfana-用户名密码默认为admin"><a href="#5-1-登录granfana-用户名密码默认为admin" class="headerlink" title="5.1 登录granfana 用户名密码默认为admin"></a>5.1 登录granfana 用户名密码默认为admin</h3><p><img src="/images/pasted-3.png" alt="upload successful"></p><h3 id="5-2-设置–数据源–添加数据源"><a href="#5-2-设置–数据源–添加数据源" class="headerlink" title="5.2 设置–数据源–添加数据源"></a>5.2 设置–数据源–添加数据源</h3><p><img src="/images/pasted-4.png" alt="upload successful"></p><p><img src="/images/pasted-5.png" alt="upload successful"></p><h3 id="5-3-选择Prometheus并添加http-x2F-x2F-9090"><a href="#5-3-选择Prometheus并添加http-x2F-x2F-9090" class="headerlink" title="5.3 选择Prometheus并添加http:&#x2F;&#x2F;:9090"></a>5.3 选择Prometheus并添加http:&#x2F;&#x2F;<ip>:9090</h3><p><img src="/images/pasted-6.png" alt="upload successful"></p><h3 id="5-4-选择数据展示模版，添加模版"><a href="#5-4-选择数据展示模版，添加模版" class="headerlink" title="5.4 选择数据展示模版，添加模版"></a>5.4 选择数据展示模版，添加模版</h3>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>conflunce</title>
    <link href="/2022/07/12/conflunce/"/>
    <url>/2022/07/12/conflunce/</url>
    
    <content type="html"><![CDATA[<hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><br><br><br>AABIQ0ODAoPeJxtkMtqwzAQRff6CkHXNn40CQ0IalsqNfUjxA60S1UdNwJHDnqE5u/rxPamdDXM6<br>M7hjB7ao8MUBI5DHD5uo802CnHWtDgKogBRMELLs5WDItmgut6BEoAqd/oEXXcHA9oQL0SZBn4LU<br>W6B3Da9MPLicT4oy4Wt+AmIACvCAIkR448zeQFitYMlw0ou+zn0PBVfKMQuvHd3Nul4b2DaL6QAZ<br>aC9nuHOzuqyZPssTwo0YpQFxUdP9nOW+jo5xfHm5hStJsByQdY7Y0FXwxcYEqCGVeSjPuAyeWO4Z<br>DjBTULxLqlo4qNaf3MlzSQzX9OAvoDOKUnX69ZL07T0qtdV470/rV/QbDm+Fjlduv+ldk6LIzfw5<br>wN/AYE8hCIwLAIUHpf40ogUXW6HZvPCB24plQru3woCFBmpJltOJ3o6hw+79vhAzMLyq0HbX02ei<br><br>AAABIQ0ODAoPeJxtkMtqwzAQRff6CkHXNn40CQ0IalsqNfUjxA60S1UdNwJHDnqE5u/rxPamdDXM6<br>M7hjB7ao8MUBI5DHD5uo802CnHWtDgKogBRMELLs5WDItmgut6BEoAqd/oEXXcHA9oQL0SZBn4LU<br>W6B3Da9MPLicT4oy4Wt+AmIACvCAIkR448zeQFitYMlw0ou+zn0PBVfKMQuvHd3Nul4b2DaL6QAZ<br>aC9nuHOzuqyZPssTwo0YpQFxUdP9nOW+jo5xfHm5hStJsByQdY7Y0FXwxcYEqCGVeSjPuAyeWO4Z<br>DjBTULxLqlo4qNaf3MlzSQzX9OAvoDOKUnX69ZL07T0qtdV470/rV/QbDm+Fjlduv+ldk6LIzfw5<br>wN/AYE8hCIwLAIUHpf40ogUXW6HZvPCB24plQru3woCFBmpJltOJ3o6hw+79vhAzMLyq0HbX02ei<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux服务器上访问无报错， 在win10下访问出现错误</title>
    <link href="/2022/07/12/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E8%AE%BF%E9%97%AE%E6%97%A0%E6%8A%A5%E9%94%99%EF%BC%8C%20%E5%9C%A8win10%E4%B8%8B%E8%AE%BF%E9%97%AE%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/"/>
    <url>/2022/07/12/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E8%AE%BF%E9%97%AE%E6%97%A0%E6%8A%A5%E9%94%99%EF%BC%8C%20%E5%9C%A8win10%E4%B8%8B%E8%AE%BF%E9%97%AE%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<hr><p>问题：Linux服务器上访问无报错， 在win10下访问出现错误：</p><p><img src="/images/pasted-1.png" alt="upload successful"></p><p>解决办法：设置IE浏览器&gt;&gt;Internet选项&gt;&gt;高级&gt;&gt;将“使用被动FTP（用于防火墙和DSL调制解调器的兼容）”选项去掉&gt;&gt;确定即可</p><p><img src="/images/pasted-2.png" alt="upload successful"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>git配置用户</title>
    <link href="/2022/07/12/git%E9%85%8D%E7%BD%AE%E7%94%A8%E6%88%B7/"/>
    <url>/2022/07/12/git%E9%85%8D%E7%BD%AE%E7%94%A8%E6%88%B7/</url>
    
    <content type="html"><![CDATA[<p>git config –global user.email “<a href="mailto:&#x34;&#48;&#50;&#x32;&#x33;&#x39;&#x33;&#x39;&#57;&#64;&#113;&#x71;&#46;&#99;&#x6f;&#109;">&#x34;&#48;&#50;&#x32;&#x33;&#x39;&#x33;&#x39;&#57;&#64;&#113;&#x71;&#46;&#99;&#x6f;&#109;</a>“<br>git config –global user.name “liyupin”</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>精通Python自动化脚本-运维人员宝典</title>
    <link href="/2022/07/12/%E7%B2%BE%E9%80%9APython%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC-%E8%BF%90%E7%BB%B4%E4%BA%BA%E5%91%98%E5%AE%9D%E5%85%B8/"/>
    <url>/2022/07/12/%E7%B2%BE%E9%80%9APython%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC-%E8%BF%90%E7%BB%B4%E4%BA%BA%E5%91%98%E5%AE%9D%E5%85%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="第一章-Python脚本概述"><a href="#第一章-Python脚本概述" class="headerlink" title="第一章 Python脚本概述"></a>第一章 Python脚本概述</h1><h2 id="技术要求"><a href="#技术要求" class="headerlink" title="技术要求"></a>技术要求</h2><p>在学习本书前，你应该了解一些 Python 编程的基础知识，比如基础语法、变量类型、元组数据类型、列表字典、函数、字符串和方法。在python.org&#x2F;downloads&#x2F;上有3.7.2和2.7.15两个版本可供下载。本书中我们将使用3.7这一版本来作为代表示例和包的安装。</p><p>译者注：预计 Python 3.7还会发展较长时间，而 Python2则长期止步于 Python2.7了，但小版本号都在不断变化</p><p>本章的示例和源代码可通过 <a href="https://github.com/alanhou/python-scripting">GitHub 仓库</a>进行获取。</p><h2 id="为什么选择Python？"><a href="#为什么选择Python？" class="headerlink" title="为什么选择Python？"></a>为什么选择Python？</h2><p>Python有非常丰富的开源库用于数据分析工具、网站框架、测试等等。Python是一种可在不同平台上使用的编程语言（Windows, Mac, Linux和Linux嵌入式硬件，如树莓派Raspberry Pi）。它也用于开发桌面应用和网页应用。</p><p>开发人员如果使用Python可以编写更少行数的代码。原型制作非常快速，因为在解释器系统中运行。Python可被看成是面向对象、面向过程或函数式编程。</p><p>Python可以完成各种任务，比如创建网页应用。它和软件一起使用来创建工作流，它连接数据库系统、处理文件、处理大数据并执行复杂数学运算。</p><h2 id="Python语法与其它编程语言的对比"><a href="#Python语法与其它编程语言的对比" class="headerlink" title="Python语法与其它编程语言的对比"></a>Python语法与其它编程语言的对比</h2><p>Python编写的代码可读性很强，因为它和英语本身非常相近。要完成一个命令，Python使用新的一行来完成。</p><p>Python有一个很棒的特性：缩进。使用缩进我们可以定义决策语句作用域，for循环和while循环、函数和类。</p><h2 id="Python安装"><a href="#Python安装" class="headerlink" title="Python安装"></a>Python安装</h2><p>这一部分中我们将学习在不同平台上Python的安装，比如Linux和Windows。</p><h3 id="Linux平台上的安装"><a href="#Linux平台上的安装" class="headerlink" title="Linux平台上的安装"></a>Linux平台上的安装</h3><p>大部分Linux发行版本都默认安装了Python 2。有些则直接包含了Python 3。</p><p>译者注：目前大部分 CentOS 中默认安装的是 Python 2，而 Ubuntu 中则内置了 Python 3</p><p>要在Debian系Linux系统中安装Python 3，在命令行终端中可运行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install python3<br></code></pre></td></tr></table></figure><p>要在CentOS 系统中安装Python 3，在命令行终端中可运行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum install python3<br></code></pre></td></tr></table></figure><p>如无法使用以上命令安装Python，请从<a href="https://www.python.org/downloads/">官方网站</a>上下载Python并按照指示进行安装。</p><p>译者注：本博客有一篇<a href="https://alanhou.org/python37-installation/">如何安装Python3.7</a>也可供参考</p><h3 id="Windows平台上的安装"><a href="#Windows平台上的安装" class="headerlink" title="Windows平台上的安装"></a>Windows平台上的安装</h3><p>在Microsoft Windows上安装Python，我们需要从python.org上下载可执行安装包并执行安装。从<a href="https://www.python.org/downloads/">官网下载页面</a>下载python.exe文件并选择想要在电脑上安装的Python版本。然后双击所下载的 exe 文件来安装Python。有安装引导页面中，有一个Add Python to the path的复选框，勾选并按照提示一步一步的安装Python 3。</p><h4 id="Pip安装以及使用pip安装Python包"><a href="#Pip安装以及使用pip安装Python包" class="headerlink" title="Pip安装以及使用pip安装Python包"></a>Pip安装以及使用pip安装Python包</h4><p>在 Linux 中安装pip命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install python-pip <span class="hljs-comment"># 安装 Python 2的 pipsudo </span><br>apt install python3-pip <span class="hljs-comment"># 安装 Python 3的 pip</span><br></code></pre></td></tr></table></figure><p>译者注：以上为 Ubuntu 中的命令，原书作者使用的均为 Ubuntu，CentOS 中将 apt 修改为 yum 即可</p><p>Windows中, 使用如下命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -m pip install pip<br></code></pre></td></tr></table></figure><h3 id="Mac上的安装"><a href="#Mac上的安装" class="headerlink" title="Mac上的安装"></a>Mac上的安装</h3><p>要安装 Python 3，我们要在系统中安装brew。运行如下命令来在系统中安装brew：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/bin/ruby -e <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>通过运行以上命令，brew就安装好了。现在使用brew来安装 Python 3：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install python3<br></code></pre></td></tr></table></figure><h3 id="安装Jupyter-notebook"><a href="#安装Jupyter-notebook" class="headerlink" title="安装Jupyter notebook"></a>安装Jupyter notebook</h3><p>要安装Jupyter Notebook，先下载Anaconda。</p><p>安装所下载的Anaconda版本，按照向导中的指示进行安装即可。</p><p>使用pip安装Jupyter：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install jupyter<br></code></pre></td></tr></table></figure><p>3在 Linux 中，pip install jupyter安装的是Python 2 的Jupyter。如果想要安装Python 3 的Jupyter，运行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install jupyter<br></code></pre></td></tr></table></figure><h3 id="安装和使用虚拟环境"><a href="#安装和使用虚拟环境" class="headerlink" title="安装和使用虚拟环境"></a>安装和使用虚拟环境</h3><p>下面我们就来看如何安装虚拟环境以及如何进行激活。</p><p>在Linux中安装虚拟环境，执行步骤如下：</p><p>1、首先检查是否安装了pip。我们来安装Python 3的pip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install python3-pip<br></code></pre></td></tr></table></figure><p>2、使用pip3安装虚拟环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pip3 install virtualenv<br></code></pre></td></tr></table></figure><p>3、现在我们来创建虚拟环境。你可以选择任意名称，这里我们使用pythonenv：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">virtualenv pythonenv<br></code></pre></td></tr></table></figure><p>4、激活虚拟环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> pythonenv/bin/activate<br></code></pre></td></tr></table></figure><p>5、在完成操作之后，还可通过以下命令来关闭virtualenv：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">deactivate<br></code></pre></td></tr></table></figure><p>在Windows中， 运行pip install virtualenv命令来安装虚拟环境。virtualenv的安装步骤与Linux相同。</p><p>译者注：在安装了virtualenv之后，还可安装 Virtualenv Wrapper来更方便管理虚拟环境，关于环境搭建还可参见本博客<a href="https://alanhou.org/django/">Django环境搭建及开发</a></p><h3 id="安装Geany和PyCharm"><a href="#安装Geany和PyCharm" class="headerlink" title="安装Geany和PyCharm"></a>安装Geany和PyCharm</h3><p>通过<a href="https://www.geany.org/download/releases%E4%B8%8B%E8%BD%BDGeany%E5%B9%B6%E4%B8%8B%E8%BD%BD%E6%89%80%E9%9C%80%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E3%80%82%E6%A0%B9%E6%8D%AE%E6%8C%87%E7%A4%BA%E6%9D%A5%E8%BF%9B%E8%A1%8C%E5%AE%89%E8%A3%85%E3%80%82">https://www.geany.org/download/releases下载Geany并下载所需的二进制文件。根据指示来进行安装。</a></p><p>通过<a href="https://www.jetbrains.com/pycharm/download/%E4%B8%8B%E8%BD%BDPyCharm%E5%B9%B6%E6%A0%B9%E6%8D%AE%E6%8C%87%E7%A4%BA%E6%9D%A5%E8%BF%9B%E8%A1%8C%E5%AE%89%E8%A3%85%E3%80%82">https://www.jetbrains.com/pycharm/download/下载PyCharm并根据指示来进行安装。</a></p><h2 id="Python-解释器"><a href="#Python-解释器" class="headerlink" title="Python 解释器"></a>Python 解释器</h2><p>Python是一种解释性语言。有一个称为Python解释器或Python shell的交互式终端。这个shell可供我们无需创建脚本来逐行执行程序。</p><p>我们可以在这个Python交互式终端中访问Python的内置函数和库、安装模块和命令执行历史。这个终端为我们提供了研究Python的机会。你可以将准备好的代码拷贝到脚本中。</p><h4 id="Python和Bash脚本的区别"><a href="#Python和Bash脚本的区别" class="headerlink" title="Python和Bash脚本的区别"></a>Python和Bash脚本的区别</h4><p>这一部分中，我们将学习Python和Bash脚本的区别。它们的区别如下：</p><ul><li>Python是一种脚本语言，而Bash是一种用于进入和执行命令的shell</li><li>使用Python更易于处理更大的程序</li><li>Python中大部分的事可通过导入模块来使用一行代码调用函数</li></ul><h3 id="开启交互终端"><a href="#开启交互终端" class="headerlink" title="开启交互终端"></a>开启交互终端</h3><p>我们可以在已安装了Python的电脑上访问Python交互终端。运行如下命令来开启Python交互终端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python<br></code></pre></td></tr></table></figure><p>译者注：在 Linux 中#号提示符为 root 用户，其它用户为$</p><p>以上命令将启动默认的Python交互终端。</p><p>Linux中如果在终端中写入 python，开启的是python2.7的终端。如果你想要启动python3的终端，则在终端中输入python3并按下 Enter 键。</p><p>在Windows中，我们可以在Command命令行中输入 python，就会在终端中启动所下载的Python版本。</p><h3 id="使用Python交互终端编写脚本"><a href="#使用Python交互终端编写脚本" class="headerlink" title="使用Python交互终端编写脚本"></a>使用Python交互终端编写脚本</h3><p>Python交互终端的起始提示符为&gt;&gt;&gt;。在该终端中可输入Python命令，在&gt;&gt;&gt;之后进行编写。如以下截图所示：</p><p><a href="http://alanhou.org/homepage/wp-content/uploads/2019/02/2019021602502453.jpg"><img src="http://alanhou.org/homepage/wp-content/uploads/2019/02/2019021602502453.jpg" alt="Python自动化脚本-运维人员宝典第一章 Python脚本概述"></a></p><p>现在，我们来看如何为变量赋值，示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>name = <span class="hljs-string">&#x27;John&#x27;</span><br></code></pre></td></tr></table></figure><p>这时我们为name变量赋了一个字符串值John。按下Enter进入了一个以&gt;&gt;&gt;提示符开头的新行：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">name = <span class="hljs-string">&#x27;John&#x27;</span>&gt;&gt;&gt;</span><br></code></pre></td></tr></table></figure><p>现在，我们来看一个为变量赋值的示例并执行数学运算来获取值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>num1 = <span class="hljs-number">5000</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>num2 = <span class="hljs-number">3500</span> <span class="hljs-comment"># 可在一行中进行赋值num1, num2 = 5000, 3500</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>num3 = num1 + num2<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(num3)<span class="hljs-number">8500</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>num4 = num3 - <span class="hljs-number">2575</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(num4)<span class="hljs-number">5925</span><br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>这里我们对不同的变量进行赋值，对两个变量进行相加，并将其和存储在了第三个变量中，还在终端(Terminal)中打印出了和。然后，我们对结果变量进行了减法运算，将输出存到了第四个变量中。接着我们将差在终端中进行了打印。这告诉我们可以使用 Python 解释器作为计算器来进行使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">509</span> / <span class="hljs-number">2223.136363636363637</span><br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>以上，我们执行了除法运算。509除以22并得到了商23.136363636363637。</p><h3 id="多行模式"><a href="#多行模式" class="headerlink" title="多行模式"></a>多行模式</h3><p>在Python解释器中编写多行代码时（比如 if 语句、 for循环、while 循环和函数），解释器会使用三个点(…) 作为二级提示符来延续代码行。要退出这些行，我们需要连续按下两次 Enter 键。我们来看看如下的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>val1 = <span class="hljs-number">2500</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>val2 = <span class="hljs-number">2400</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> val1 &gt; val2:...   <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;val1大于val2&quot;</span>)... <span class="hljs-keyword">else</span>:...   <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;val2大于val1&quot;</span>)...val1大于val2<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>本例中，我们对两个变量val1和val2进行了整数值的赋值，并检查val1是否大于val2。上例中val1大于val2，因此 if 代码块中的语句执行了打印。注意 if 和 else 代码块中的语句需要进行缩进。如果不使用缩进，就会得到如下报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> val1 &gt; val2:... <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;val1大于val2&quot;</span>) File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">2</span>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;val1大于val2&quot;</span>)    ^IndentationError: expected an indented block<br></code></pre></td></tr></table></figure><h3 id="通过Python解释器导入模块"><a href="#通过Python解释器导入模块" class="headerlink" title="通过Python解释器导入模块"></a>通过Python解释器导入模块</h3><p>如果你导入任何模块，Python解释器会检查该模块是否存在。我们可通过 import 语句来进行实现。如果该模块存在，在按下 Enter 键之后就可以看到&gt;&gt;&gt; 前置提示符。这表示执行成功。如果该模块不存在，则会在Python解释器中显示报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> time<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>在导入time模块之后，我们获得了&gt;&gt;&gt; 前置提示符，这表示该模块存在并且这条命令成功执行了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> matplotlib<br></code></pre></td></tr></table></figure><p>如果模块不存在，就会返回Traceback的报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Traceback (most recent call last): File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line 1, <span class="hljs-keyword">in</span> &lt;module&gt;ImportError: No module named <span class="hljs-string">&#x27;matplotlib&#x27;</span><br></code></pre></td></tr></table></figure><p>这里matplotlib不可用，因此给出了报错：ImportError: No module named ‘matplotlib’。</p><p>要解决这一报错，我们需要安装matplotlib（译者注：pip3 install matplotlib）然后再次导入matplotlib。在安装matplotlib之后，就能够导入这一模块了，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> matplotlib<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><h3 id="退出Python终端"><a href="#退出Python终端" class="headerlink" title="退出Python终端"></a>退出Python终端</h3><p>在Python终端有两种方式可以退出：</p><ul><li>快捷键: Ctrl + D</li><li>使用quit()或exit()函数</li></ul><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p>使用快捷键Ctrl + D将会得到如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>val1 = <span class="hljs-number">5000</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>val2 = <span class="hljs-number">2500</span><br>&gt;&gt;&gt;&gt;&gt;&gt; val3 = val1 - val2<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> (val3)<span class="hljs-number">2500</span><br>&gt;&gt;&gt;vagrant@ubuntu-xenial:~$<br></code></pre></td></tr></table></figure><h4 id="使用quit-或exit-函数"><a href="#使用quit-或exit-函数" class="headerlink" title="使用quit()或exit() 函数"></a>使用quit()或exit() 函数</h4><p>使用quit()可退出Python交互终端，会回到原来的命令终端：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>Lion = <span class="hljs-string">&#x27;Simba&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>quit()<br>vagrant@ubuntu-xenial:~$<br></code></pre></td></tr></table></figure><h3 id="缩进和制表符Tab"><a href="#缩进和制表符Tab" class="headerlink" title="缩进和制表符Tab"></a>缩进和制表符Tab</h3><p>在Python中编写代码块必须使用缩进。缩进有助于编写函数、决策语句、循环语句和类。这让Python程序的读取更为容易。</p><p>我们使用缩进来表示Python程序的代码块。对代码块的缩进，可以使用空格或制表符（tab）。参见如下示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> val1 &gt; val2: <br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;val1大于val2&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这部分代码没有进行缩进&quot;</span>)<br></code></pre></td></tr></table></figure><p>在上例中，我们对print语句进行了缩进，因为它位于 if 代码块中。第二个print语句不在 if 代码块中，所以没有对其进行缩进。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>类似一些其它编程语言，Python 中无需事先声明变量。Python 中可以想一个任意名称来作为变量名并进行赋值（译者注：仅能使用字母、数字和下划线且不能以数字开头）。可以在我们的程序中使用该变量。因此，Python 中我们可以在任何需使用的时候声明变量。</p><p>Python 中变量的值以及类型都可以在程序的执行过程中进行修改。以下代码中我们对变量赋值100：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>n = <span class="hljs-number">100</span> <span class="hljs-comment"># 这里我们对变量 n 赋值100，并在下面对n 的值加1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>n = n + <span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(n)<span class="hljs-number">101</span><br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>以下为在执行过程中变量类型可进行改变的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">50</span> <span class="hljs-comment"># 数据类型被隐式地设置为整型</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">50</span> + <span class="hljs-number">9.50</span> <span class="hljs-comment"># 数据类型被修改为浮点型</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-string">&quot;Seventy&quot;</span> <span class="hljs-comment"># 现在变成了字符串类型</span><br></code></pre></td></tr></table></figure><p>Python处理不同数据类型的展现，也即不同类型的值会存储在不同的内存空间中。变量是我们用于赋值的名称：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>msg = <span class="hljs-string">&#x27;And now for something completely different&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">20</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>pi = <span class="hljs-number">3.1415926535897932</span><br></code></pre></td></tr></table></figure><p>上例中进行了三次赋值。第一次将一个字符串赋值为名为msg的变量。第二次将一个整型赋值为名为a的变量，最后一次是一个圆周率pi的赋值。</p><p>变量的类型为它所引用的值的类型，查看以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(msg)&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span><br>&gt;&gt;&gt;&gt; <span class="hljs-built_in">type</span>(a)&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span><br>&gt;&gt;&gt;&gt; <span class="hljs-built_in">type</span>(pi)&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;float&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="创建变量和赋值"><a href="#创建变量和赋值" class="headerlink" title="创建变量和赋值"></a>创建变量和赋值</h4><p>在Python中，变量无需显式地进行声明来保留内存空间。在对变量进行赋值时即会自动完成声明。Python中单个等号&#x3D;用于为变量赋值。</p><p>思考如下示例的执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br>name = <span class="hljs-string">&#x27;John&#x27;</span><br>age = <span class="hljs-number">25</span><br>address = <span class="hljs-string">&#x27;USA&#x27;</span><br>percentage = <span class="hljs-number">85.5</span><br><span class="hljs-built_in">print</span>(name)<br><span class="hljs-built_in">print</span>(age)<br><span class="hljs-built_in">print</span>(address)<br><span class="hljs-built_in">print</span>(percentage) <br><span class="hljs-comment">#输出如下：</span><br>John<br><span class="hljs-number">25</span><br>USA<br><span class="hljs-number">85.5</span><br></code></pre></td></tr></table></figure><p>在上例中，我们将John赋值给变量name、25赋值给变量age、USA赋值给变量address以及将85.5赋值给变量percentage。</p><p>我们无需像在其它编程语言中那样事先声明变量。因此，查看值的解释器可获得变量的类型。在前例中，name和address是字符串类型，age是整型，percentage是浮点类型。</p><p>使用同一值进行多个变量的赋值可以这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">x = y = z = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>上例中我们创建了三个变量并使用整数1为它们赋值，会为这三个变量分配同一个内存地址。</p><p>在Python中，我们还可以在同一行中对多个变量赋多个值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">x, y, z = <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>这里我们声明一个字符串变量y，将John赋值给它，以及两个整型变量x和z，分别用10和80为它们赋值。</p><h3 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h3><p>Python解释器也可发挥计算器的作用。只需输入表达式，它就会返回值。括号( )用于进行分组，如下例所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">5</span> + <span class="hljs-number">510</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">100</span> - <span class="hljs-number">5</span>*<span class="hljs-number">575</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>(<span class="hljs-number">100</span> - <span class="hljs-number">5</span>*<span class="hljs-number">5</span>) / <span class="hljs-number">155.0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">8</span> / <span class="hljs-number">51.6</span><br></code></pre></td></tr></table></figure><p>整型数值是int类型，小数部分是float类型。</p><blockquote><p>ℹ️在Python中，除法(&#x2F;) 运算符总是返回浮点值。向下取整运算符(&#x2F;&#x2F;)获取的是整型结果。%运算符用于计算余数。</p></blockquote><p>思考如下示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">14</span>/<span class="hljs-number">34.666666666666667</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">14</span>//<span class="hljs-number">34</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">14</span>%<span class="hljs-number">32</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">4</span>*<span class="hljs-number">3</span>+<span class="hljs-number">214</span><br></code></pre></td></tr></table></figure><p>计算幂值（指数运算），Python使用运算符，如下例所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">83512</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">5778125</span><br></code></pre></td></tr></table></figure><p>等号(&#x3D;)用于对变量赋值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>m = <span class="hljs-number">50</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>n = <span class="hljs-number">8</span> * <span class="hljs-number">8</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>m * n3200<br></code></pre></td></tr></table></figure><p>如果变量不存在，而我们还是使用该变量，那么解释器会显示错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>kTraceback (most recent call last): File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;NameError: name <span class="hljs-string">&#x27;k&#x27;</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> defined&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>如果运算符连接不同类型的操作数，那么得到的值将会是浮点数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">5</span> * <span class="hljs-number">4.75</span> - <span class="hljs-number">122.75</span><br></code></pre></td></tr></table></figure><p>在Python交互终端中，_ 包含上一次打印过的表达式值，如下例所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">18.5</span> / <span class="hljs-number">100</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>b = <span class="hljs-number">150.50</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a * b27<span class="hljs-number">.8425</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>b + _178<span class="hljs-number">.3425</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">round</span>(_, <span class="hljs-number">2</span>)<span class="hljs-number">178.34</span><br></code></pre></td></tr></table></figure><p>数值数据类型存储数字，这是一种不可变的数据类型。如果进行改变，Python会为修改的数据类型分配一个新的对象。</p><p>我们可以通过赋值来创建数值对象，示例如下：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">num1 = <span class="hljs-number">50</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">num2 = <span class="hljs-number">25</span></span><br></code></pre></td></tr></table></figure><p>del语句用于删除单个或多个变量。参考如下示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>num = num_a = num_b = <span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">del</span> num<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">del</span> num_a, num_b<br></code></pre></td></tr></table></figure><h4 id="数值类型转换"><a href="#数值类型转换" class="headerlink" title="数值类型转换"></a>数值类型转换</h4><p>在一些情况下，我们需要显式地将数字从一种类型转换为另一种类型来满足一些要求。Python在一个表达式中内部实现。</p><ul><li>输入int(a)来将a转换为整型</li><li>输入float(a)来将a转换为浮点数</li><li>输入complex(a)来将a转换复数，实部为a，虚部为0</li><li>输入complex(a, b)来将a和 b转换为实部为a，虚部为b 的复数。a和 b为数字表达式</li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>和数值类型类似，字符串也是Python中一种数据结构。Python可以操作字符串。字符串可通过如下方式表示：</p><ul><li>包含在单引号(‘…’)中</li><li>包含在双引号(“…”)中</li></ul><p>参见如下示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;Hello Python&#x27;</span><span class="hljs-string">&#x27;Hello Python&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;Hello Python&quot;</span><span class="hljs-string">&#x27;Hello Python&#x27;</span><br></code></pre></td></tr></table></figure><p>字符串是一组字符。我们可以像下面这样一次访问一个字符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>city = <span class="hljs-string">&#x27;delhi&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>letter = city[<span class="hljs-number">1</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>letter = city[-<span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><p>在第二条语句中，我们从city中选择数字为1的字符并将其赋值给letter。方括号中的数字为索引。索引表示要访问的字符，它从0开始。因此在前例中执行在赋值后输入 letter，将得到如下输出：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">cityd e l h i <br>索引0 1 2 3 4<span class="hljs-string">-5</span> <span class="hljs-string">-4</span> <span class="hljs-string">-3</span> <span class="hljs-string">-2</span> <span class="hljs-string">-1</span> <br>输出：el<br></code></pre></td></tr></table></figure><h4 id="字符串拼接-和重复"><a href="#字符串拼接-和重复" class="headerlink" title="字符串拼接(+)和重复(*)"></a>字符串拼接(+)和重复(*)</h4><p>下一步我们来进行字符串的拼接和重复。参照如下代码：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-number">3</span> * <span class="hljs-string">&#x27;hi&#x27;</span> + <span class="hljs-string">&#x27;hello&#x27;</span><span class="hljs-string">&#x27;hihihihello&#x27;</span></span><br></code></pre></td></tr></table></figure><p>上例中，我们进行字符串拼接和重复。3 * ‘hi’表示打印hi三次，使用+符号，我们在hi之后连接了字符串hello。</p><p>我们可以通过把字符串连续放在一起自动拼接两个字符串。这两个字符串必须包含在引号之间，如下所示：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-string">&#x27;he&#x27;</span> <span class="hljs-string">&#x27;llo&#x27;</span><span class="hljs-string">&#x27;hello&#x27;</span></span><br></code></pre></td></tr></table></figure><p>这一特性在字符串很长又想要分开输入时非常有用，示例如下：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">str</span> = (<span class="hljs-string">&#x27;Several strings&#x27;</span>... <span class="hljs-string">&#x27; joining them together.&#x27;</span>)</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">st<span class="hljs-string">r&#x27;Several strings joining them together.&#x27;</span></span><br></code></pre></td></tr></table></figure><h4 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h4><p>字符串支持切片(slice)操作，这表示从字符串获取指定范围的字符。我们来看看下面的例子。注意起始的索引值是包含在内的，而结束值则排除在外。</p><p>假设字符串为str &#x3D; “Programming”：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>]<span class="hljs-string">&#x27;Pr&#x27;</span>&gt;&gt;&gt; <span class="hljs-built_in">str</span>[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]<span class="hljs-string">&#x27;ogr&#x27;</span></span><br></code></pre></td></tr></table></figure><p>默认省略不写的第一个索引为0（省略第二个索引默认获取第一个索引到最后的所有字符），如下例所示：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;Python&quot;</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">str</span>[:<span class="hljs-number">2</span>] + <span class="hljs-built_in">str</span>[<span class="hljs-number">2</span>:]<span class="hljs-string">&#x27;Python&#x27;</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">str</span>[:<span class="hljs-number">4</span>] + <span class="hljs-built_in">str</span>[<span class="hljs-number">4</span>:]<span class="hljs-string">&#x27;Python&#x27;</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">str</span>[:<span class="hljs-number">2</span>]<span class="hljs-string">&#x27;Py&#x27;</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">str</span>[<span class="hljs-number">4</span>:]<span class="hljs-string">&#x27;on&#x27;</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">str</span>[-<span class="hljs-number">2</span>:]<span class="hljs-string">&#x27;on&#x27;</span></span><br></code></pre></td></tr></table></figure><h4 id="访问字符串中的值"><a href="#访问字符串中的值" class="headerlink" title="访问字符串中的值"></a>访问字符串中的值</h4><p>我们可以通过方括号使用切片来访问字符串中的字符。我们还可以访问字符串中指定范围内的字符。参照如下示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br>str1 = <span class="hljs-string">&#x27;Hello Python!&#x27;</span><br>str2 = <span class="hljs-string">&quot;Object Oriented Programming&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;str1[0]: &quot;</span>, str1[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;str2[1:5]: &quot;</span>, str2[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>]) <br><span class="hljs-comment">#输出：</span><br>str1[<span class="hljs-number">0</span>]: H<br>str2[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>]: bjec<br></code></pre></td></tr></table></figure><h4 id="更新字符串"><a href="#更新字符串" class="headerlink" title="更新字符串"></a>更新字符串</h4><p>我们可以对一个指定索引重新赋新值来更新字符串。参照如下示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br>str1 = <span class="hljs-string">&#x27;Hello Python!&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Updated String: - &quot;</span>, str1[:<span class="hljs-number">6</span>] + <span class="hljs-string">&#x27;John&#x27;</span>) <br><span class="hljs-comment">#输出：</span><br>Updated String: - Hello John<br></code></pre></td></tr></table></figure><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><p>Python 支持不可打印的转义字符（escape character），可通过反斜线标记来进行展示。转义字符在单引号和双引号字符串中均可进行解析：</p><table><thead><tr><th align="left">标记</th><th align="left">十六进制字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">a</td><td align="left">0x07</td><td align="left">响铃或警告</td></tr><tr><td align="left">b</td><td align="left">0x08</td><td align="left">退格（Backspace）</td></tr><tr><td align="left">cx</td><td align="left"></td><td align="left">Control-x</td></tr><tr><td align="left">n</td><td align="left">0x0a</td><td align="left">新起一行</td></tr><tr><td align="left">C-x</td><td align="left"></td><td align="left">Control-x</td></tr><tr><td align="left">e</td><td align="left">0x1b</td><td align="left">转义</td></tr><tr><td align="left">f</td><td align="left">0x0c</td><td align="left">换页</td></tr><tr><td align="left">s</td><td align="left">0x20</td><td align="left">空格</td></tr><tr><td align="left">M-C-x</td><td align="left"></td><td align="left">Meta-control-x</td></tr><tr><td align="left">x</td><td align="left"></td><td align="left">字符x</td></tr><tr><td align="left">nnn</td><td align="left"></td><td align="left">八进行标记，n为0到7范围内的值</td></tr><tr><td align="left">r</td><td align="left">0x0d</td><td align="left">回车</td></tr><tr><td align="left">xnn</td><td align="left"></td><td align="left">十六进制标记，n为0-9, a-f或A-F范围内的值</td></tr><tr><td align="left">t</td><td align="left">0x09</td><td align="left">Tab制表符</td></tr><tr><td align="left">v</td><td align="left">0x0b</td><td align="left">垂直制表符</td></tr></tbody></table><h4 id="特殊的字符串运算符"><a href="#特殊的字符串运算符" class="headerlink" title="特殊的字符串运算符"></a>特殊的字符串运算符</h4><p>下表中显示了字符串的特殊运算符，假定a为Hello，b为World：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">拼接：将运算符两边的值相加</td><td align="left">a + b将得到HelloWorld</td></tr><tr><td align="left">[]</td><td align="left">切片：得到给定索引的字符串</td><td align="left">a[7]将得到r</td></tr><tr><td align="left">[ : ]</td><td align="left">范围切片：得到指定范围内的字符</td><td align="left">a[1:4]将得到ell</td></tr><tr><td align="left">*</td><td align="left">重复：创建新的字符串，将相同字符串的多个拷贝进行拼接</td><td align="left">a*2将得到HelloHello</td></tr><tr><td align="left">not in</td><td align="left">成员：如果字符不在字符串中返回true</td><td align="left">Z not in a将得到1</td></tr><tr><td align="left">in</td><td align="left">成员：如果字符在字符串中返回true</td><td align="left">H in a将得到1</td></tr><tr><td align="left">%</td><td align="left">格式化：执行字符串格式化</td><td align="left"></td></tr></tbody></table><h4 id="字符串格式化运算符"><a href="#字符串格式化运算符" class="headerlink" title="%字符串格式化运算符"></a>%字符串格式化运算符</h4><p>%是Python中的一个字符串格式化运算符。参照如下示例：</p><table><thead><tr><th>12345</th><th>#!&#x2F;usr&#x2F;bin&#x2F;python3print(“Hello this is %s and my age is %d !” % (‘John’, 25)) 输出：Hello this is John and my age is 25 !</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>下表显示了配合%使用的符号列表：</p><table><thead><tr><th align="left">序号</th><th align="left">格式符号和转化</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">%c – 字符</td></tr><tr><td align="left">2</td><td align="left">%s – 在格式化之前通过str()转换的字符串</td></tr><tr><td align="left">3</td><td align="left">%i – 有符号十进制整数</td></tr><tr><td align="left">4</td><td align="left">%d – 有符号十进制整数</td></tr><tr><td align="left">5</td><td align="left">%u – 无符号十进制整数</td></tr><tr><td align="left">6</td><td align="left">%o – 八进制整数</td></tr><tr><td align="left">7</td><td align="left">%x – 十六进制整数（小写字母）</td></tr><tr><td align="left">8</td><td align="left">%X –十六进制整数（大写字母）</td></tr><tr><td align="left">9</td><td align="left">%e – 指数标记（使用小写 e）</td></tr><tr><td align="left">10</td><td align="left">%E –指数标记（使用大写 E）</td></tr><tr><td align="left">11</td><td align="left">%f – 浮点实数</td></tr></tbody></table><h4 id="Python中的三引号"><a href="#Python中的三引号" class="headerlink" title="Python中的三引号"></a>Python中的三引号</h4><p>Python对字符串使用三引号的表示可跨越多行，包括新行和制表符。三引号的语法包含三个连续的单引号或双引号。参照如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br>para_str = <span class="hljs-string">&quot;&quot;&quot;Python is a scripting language which was created byGuido van Rossum in 1991, which is used in various sectors such as GameDevelopment, GIS Programming, Software Development, web development,Data Analytics and Machine learning, System Scripting etc.&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span> (para_str) <br><span class="hljs-comment">#输出内容：</span><br>Python <span class="hljs-keyword">is</span> a scripting language which was created byGuido van Rossum <span class="hljs-keyword">in</span> <span class="hljs-number">1991</span>, which <span class="hljs-keyword">is</span> used <span class="hljs-keyword">in</span> various sectors such <span class="hljs-keyword">as</span> GameDevelopment, GIS Programming, Software Development, web development,Data Analytics <span class="hljs-keyword">and</span> Machine learning, System Scripting etc.<br></code></pre></td></tr></table></figure><h4 id="字符串是不可变的"><a href="#字符串是不可变的" class="headerlink" title="字符串是不可变的"></a>字符串是不可变的</h4><p>字符串是不可变的，表示我们不能修改它的值。参照如下示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>welcome = <span class="hljs-string">&#x27;Hello, John!&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>welcome[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;Y&#x27;</span>Traceback (most recent call last): File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;TypeError: <span class="hljs-string">&#x27;str&#x27;</span> <span class="hljs-built_in">object</span> does <span class="hljs-keyword">not</span> support item assignment<br></code></pre></td></tr></table></figure><p>因为字符串是不可变的（immutable），我们不能修改现有字符串。但我们可以创建一个与原来不同的新字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>str1 = <span class="hljs-string">&#x27;Hello John&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>new_str = <span class="hljs-string">&#x27;Welcome&#x27;</span> + str1[<span class="hljs-number">5</span>:]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(str1)<br>Hello John<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(new_str)<br>Welcome John<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><h2 id="理解列表"><a href="#理解列表" class="headerlink" title="理解列表"></a>理解列表</h2><p>Python支持一种称为列表（list）的数据结构，它是一个可变和有序的元素序列。列表中的每个元素称为列表项。列表通过在方括号[ ]之间插入值定义。列中的每个元素都会给定一个数值，称们称之为位置或索引。索引从0开始，也即，第一个索引为0，第二个索引为1，以此类推。我们可对列表进行如下运算：索引、切片、相加、相乘以及检查是否为列表成员。</p><p>Python内置的len函数返回列表的长度。Python还有查找列表中最大项（max）和最小项（min）的函数。列表可以是数值列表、字符串列表或混合列表。</p><p>以下是创建列表的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>l = <span class="hljs-built_in">list</span>()<br><span class="hljs-meta">&gt;&gt;&gt; </span>numbers = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>animals = [<span class="hljs-string">&#x27;Dog&#x27;</span>, <span class="hljs-string">&#x27;Tiger&#x27;</span>, <span class="hljs-string">&#x27;Lion&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>list1 = [<span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-number">5.5</span>, <span class="hljs-number">500</span>, [<span class="hljs-number">100</span>, <span class="hljs-number">450</span>]]<br></code></pre></td></tr></table></figure><p>这里我们创建了三个列表：第一个是numbers，第二个是animals，第三个是list1。列表中有另一个列表称为嵌套列表。list1是一个嵌套列表。不包含任何元素的列表称为空列表，可通过空的中括号[]来创建空列表。</p><p>你可能已经猜到，可将列表赋值给变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>cities = [<span class="hljs-string">&#x27;Mumbai&#x27;</span>, <span class="hljs-string">&#x27;Pune&#x27;</span>, <span class="hljs-string">&#x27;Chennai&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>numbers_list = [<span class="hljs-number">75</span>, <span class="hljs-number">857</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>empty_list = []<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(cities, numbers_list, empty_list)<br>[<span class="hljs-string">&#x27;Mumbai&#x27;</span>, <span class="hljs-string">&#x27;Pune&#x27;</span>, <span class="hljs-string">&#x27;Chennai&#x27;</span>] [<span class="hljs-number">75</span>, <span class="hljs-number">857</span>] []<br></code></pre></td></tr></table></figure><h3 id="访问列表中的值"><a href="#访问列表中的值" class="headerlink" title="访问列表中的值"></a>访问列表中的值</h3><p>我们可以使用索引值来访问列表中的值。我们将索引数字放在[ 和 ]之间。索引从0开始。参见如下示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br>cities = [<span class="hljs-string">&#x27;Mumbai&#x27;</span>, <span class="hljs-string">&#x27;Bangalore&#x27;</span>, <span class="hljs-string">&#x27;Chennai&#x27;</span>, <span class="hljs-string">&#x27;Pune&#x27;</span>]<br>numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br><span class="hljs-built_in">print</span>(cities[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(numbers[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>]) <br>输出结果：<br>Mumbai[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><h3 id="更新列表"><a href="#更新列表" class="headerlink" title="更新列表"></a>更新列表</h3><p>可以更新列表中的元素，如以下代码所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br>cities = [<span class="hljs-string">&#x27;Mumbai&#x27;</span>, <span class="hljs-string">&#x27;Bangalore&#x27;</span>, <span class="hljs-string">&#x27;Chennai&#x27;</span>, <span class="hljs-string">&#x27;Pune&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Original Value: &#x27;</span>, cities[<span class="hljs-number">3</span>])cities[<span class="hljs-number">3</span>] = <span class="hljs-string">&#x27;Delhi&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;New value: &#x27;</span>, cities[<span class="hljs-number">3</span>]) <br>输出结果：<br>Original Value: Pune<br>New value: Delhi<br></code></pre></td></tr></table></figure><h3 id="删除列表元素"><a href="#删除列表元素" class="headerlink" title="删除列表元素"></a>删除列表元素</h3><p>要删除列表中元素，如果知道要具体删除的元素可使用del语句。如果不知道具体要删除的列表项索引可使用remove()。参见如下示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#/usr/bin/python3</span><br>cities = [<span class="hljs-string">&#x27;Mumbai&#x27;</span>, <span class="hljs-string">&#x27;Bangalore&#x27;</span>, <span class="hljs-string">&#x27;Chennai&#x27;</span>, <span class="hljs-string">&#x27;Pune&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Before deleting: &quot;</span>, cities)<span class="hljs-keyword">del</span> cities[<span class="hljs-number">2</span>]<span class="hljs-comment"># cities.remove(&quot;Chennai&quot;) # 相同效果的补充</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;After deleting: &quot;</span>, cities) <br>输出结果：<br>Before deleting: [<span class="hljs-string">&#x27;Mumbai&#x27;</span>, <span class="hljs-string">&#x27;Bangalore&#x27;</span>, <span class="hljs-string">&#x27;Chennai&#x27;</span>, <span class="hljs-string">&#x27;Pune&#x27;</span>]After deleting: [<span class="hljs-string">&#x27;Mumbai&#x27;</span>, <span class="hljs-string">&#x27;Bangalore&#x27;</span>, <span class="hljs-string">&#x27;Pune&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="基本列表运算"><a href="#基本列表运算" class="headerlink" title="基本列表运算"></a>基本列表运算</h3><p>有五种基本列表运算：</p><ul><li>拼接</li><li>重复</li><li>取长度</li><li>成员关系</li><li>迭代</li></ul><table><thead><tr><th align="left">描述</th><th align="left">表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">拼接</td><td align="left">[30, 50, 60] + [‘Hello’, 75, 66]</td><td align="left">[30, 50, 60, ‘Hello’, 75, 66]</td></tr><tr><td align="left">成员</td><td align="left">45 in [45, 58, 99, 65]</td><td align="left">TRUE</td></tr><tr><td align="left">迭代</td><td align="left">for x in [45, 58, 99]: print(x, end&#x3D;’ ‘)</td><td align="left">45 58 99</td></tr><tr><td align="left">重复</td><td align="left">[‘Python’] * 3</td><td align="left">[‘Python’, ‘Python’, ‘Python’]</td></tr><tr><td align="left">取长度</td><td align="left">len([45, 58, 99, 65])</td><td align="left">4</td></tr></tbody></table><h3 id="列表运算"><a href="#列表运算" class="headerlink" title="列表运算"></a>列表运算</h3><p>在这一部分中，我们将学习基本列表运算：拼接和重复。</p><p>+运算符将列表进行拼接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = [<span class="hljs-number">30</span>, <span class="hljs-number">50</span>, <span class="hljs-number">60</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>b = [<span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-number">75</span>, <span class="hljs-number">66</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>c = a + b<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(c)[<span class="hljs-number">30</span>, <span class="hljs-number">50</span>, <span class="hljs-number">60</span>, <span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-number">75</span>, <span class="hljs-number">66</span>]<br></code></pre></td></tr></table></figure><p>相似地，*运算符以给定次数重复列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>[<span class="hljs-number">0</span>] * <span class="hljs-number">4</span>[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>[<span class="hljs-string">&#x27;Python&#x27;</span>] * <span class="hljs-number">3</span>[<span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;Python&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="索引、切片和矩阵"><a href="#索引、切片和矩阵" class="headerlink" title="索引、切片和矩阵"></a>索引、切片和矩阵</h3><p>列表索引与字符串索引的运作方式相同。列表值可通过索引来访问。如果尝试将不存在的元素写入列表，会得到IndexError。如果索引为负值，会从列表的最后开始倒数。</p><p>现在我们创建一个名为cities的列表并查看列表的索引运算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cities = [<span class="hljs-string">&#x27;Mumbai&#x27;</span>, <span class="hljs-string">&#x27;Bangalore&#x27;</span>, <span class="hljs-string">&#x27;Chennai&#x27;</span>, <span class="hljs-string">&#x27;Pune&#x27;</span>]<br></code></pre></td></tr></table></figure><table><thead><tr><th>描述</th><th>表达式</th><th>结果</th></tr></thead><tbody><tr><td>索引从0开始</td><td>cities[2]</td><td>‘Chennai’</td></tr><tr><td>切片：获取一个片段</td><td>cities[1:]</td><td>[‘Bangalore’, ‘Chennai’, ‘Pune’]</td></tr><tr><td>负数：从右开始数</td><td>cities[-3]</td><td>‘Bangalore’</td></tr></tbody></table><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>Python 的元组(tuple)数据结构是不可变的，这表示不能修改元组中的元素。 基本上，元组是一个以逗号分隔的值的序列，以括号( )进行包裹。和列表类似，元组是一个有序的元素序列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">t1 = <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span><br></code></pre></td></tr></table></figure><p>元组以括号( )进行包裹：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">t1 = (<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>)<br></code></pre></td></tr></table></figure><p>我们还可以创建一个只有一个元素的元组，仅需在元组的最后加一个逗号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>t1 = <span class="hljs-string">&#x27;h&#x27;</span>,<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(t1)&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;tuple&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>把值放到括号中并不是元组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>t1 = (<span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(t1)&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>我们可以使用tuple()函数来创建空的元组：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">t1 = <span class="hljs-built_in">tuple</span>()</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(t1)()</span><br></code></pre></td></tr></table></figure><p>如果该函数的参数是一个序列（字符串、列表或元组），结果是这个序列元素组成的元组：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">t = <span class="hljs-built_in">tuple</span>(<span class="hljs-string">&#x27;mumbai&#x27;</span>)</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(t)(<span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>)</span><br></code></pre></td></tr></table></figure><p>元组的值在括号( ) 中以逗号分隔：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">t = (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>)</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(t[<span class="hljs-number">0</span>])a</span><br></code></pre></td></tr></table></figure><p>切片运算符选取一个范围内的元素。</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(t[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>)</span><br></code></pre></td></tr></table></figure><h4 id="访问元组中的值"><a href="#访问元组中的值" class="headerlink" title="访问元组中的值"></a>访问元组中的值</h4><p>要访问元组中的值，使用方括号切片与单个或多个索引结合来获取对应索引的值，如下例所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br>cities = (<span class="hljs-string">&#x27;Mumbai&#x27;</span>, <span class="hljs-string">&#x27;Bangalore&#x27;</span>, <span class="hljs-string">&#x27;Chennai&#x27;</span>, <span class="hljs-string">&#x27;Pune&#x27;</span>)<br>numbers = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>)<br><span class="hljs-built_in">print</span>(cities[<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(numbers[<span class="hljs-number">1</span>:<span class="hljs-number">6</span>]) <br><span class="hljs-comment">#输出结果：</span><br><span class="hljs-comment">#Pune(2, 3, 4, 5, 6)</span><br></code></pre></td></tr></table></figure><h4 id="更新元组"><a href="#更新元组" class="headerlink" title="更新元组"></a>更新元组</h4><p>在Python中元组是不可更新的，因为元组是不可变的。但是我们通过当前元组来新建一个元组，如下例所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br>cities = (<span class="hljs-string">&#x27;Mumbai&#x27;</span>, <span class="hljs-string">&#x27;Bangalore&#x27;</span>, <span class="hljs-string">&#x27;Chennai&#x27;</span>, <span class="hljs-string">&#x27;Pune&#x27;</span>)<br>numbers = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>)<br>tuple1 = cities + numbers<br><span class="hljs-built_in">print</span>(tuple1) <br><span class="hljs-comment">#输出结果：</span><br><span class="hljs-comment">#(&#x27;Mumbai&#x27;, &#x27;Bangalore&#x27;, &#x27;Chennai&#x27;, &#x27;Pune&#x27;, 1, 2, 3, 4, 5, 6, 7)</span><br></code></pre></td></tr></table></figure><h3 id="删除元组元素"><a href="#删除元组元素" class="headerlink" title="删除元组元素"></a>删除元组元素</h3><p>我们不能删除单个数据元组。因此要显式地删除整个元组，使用del语句。参照如下示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br>cities = (<span class="hljs-string">&#x27;Mumbai&#x27;</span>, <span class="hljs-string">&#x27;Bangalore&#x27;</span>, <span class="hljs-string">&#x27;Chennai&#x27;</span>, <span class="hljs-string">&#x27;Pune&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Before deleting: &quot;</span>, cities)<br><span class="hljs-keyword">del</span> citiesprint(<span class="hljs-string">&quot;After deleting: &quot;</span>, cities) <br><span class="hljs-comment">#输出结果：</span><br><span class="hljs-comment">#Before deleting: (&#x27;Mumbai&#x27;, &#x27;Bangalore&#x27;, &#x27;Chennai&#x27;, &#x27;Pune&#x27;)Traceback (most recent call last): File &quot;test.py&quot;, line 5, in &lt;module&gt;  print(&quot;After deleting: &quot;, cities)NameError: name &#x27;cities&#x27; is not defined</span><br></code></pre></td></tr></table></figure><h3 id="基本元组运算"><a href="#基本元组运算" class="headerlink" title="基本元组运算"></a>基本元组运算</h3><p>和列表相似，有五种基本元组运算：</p><ul><li>拼接</li><li>重复</li><li>取长度</li><li>成员关系</li><li>迭代</li></ul><table><thead><tr><th align="left">描述</th><th align="left">表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">拼接</td><td align="left">(30, 50, 60) + (‘Hello’, 75, 66)</td><td align="left">(30,50,60,’Hello’,75,66)</td></tr><tr><td align="left">成员</td><td align="left">45 in (45, 58, 99, 65)</td><td align="left">TRUE</td></tr><tr><td align="left">迭代</td><td align="left">for x in (45, 58, 99): print(x, end&#x3D;’ ‘)</td><td align="left">45 58 99</td></tr><tr><td align="left">重复</td><td align="left">(‘Python’) * 3</td><td align="left">(‘Python’, ‘Python’, ‘Python’)</td></tr><tr><td align="left">取长度</td><td align="left">len((45, 58, 99, 65))</td><td align="left">4</td></tr></tbody></table><h3 id="索引、切片和矩阵-1"><a href="#索引、切片和矩阵-1" class="headerlink" title="索引、切片和矩阵"></a>索引、切片和矩阵</h3><p>元组索引的运作方式和列表相同。使用索引可访问元组的值。如果尝试读取或写入不存在的元素，会报出IndexError。如果索引为负值，则从元组的最后向前数。</p><p>现在我们创建一个名为cities的元组并查看列表的索引运算：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">cities</span> = (<span class="hljs-string">&#x27;Mumbai&#x27;</span>, <span class="hljs-string">&#x27;Bangalore&#x27;</span>, <span class="hljs-string">&#x27;Chennai&#x27;</span>, <span class="hljs-string">&#x27;Pune&#x27;</span>)<br></code></pre></td></tr></table></figure><table><thead><tr><th>描述</th><th>表达式</th><th>结果</th></tr></thead><tbody><tr><td>索引从0开始</td><td>cities[2]</td><td>‘Chennai’</td></tr><tr><td>切片：获取一个片段</td><td>cities[1:]</td><td>(‘Bangalore’, ‘Chennai’, ‘Pune’)</td></tr><tr><td>负数：从右开始数</td><td>cities[-3]</td><td>‘Bangalore’</td></tr></tbody></table><h4 id="max-和min"><a href="#max-和min" class="headerlink" title="max()和min()"></a>max()和min()</h4><p>使用max()和min()函数，我们可以查找元组中的最大值和最小值。这两个函数让我们可以找到量化数据的相关信息。我们来看看下面这个例子：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">numbers = (<span class="hljs-number">50</span>, <span class="hljs-number">80</span>, <span class="hljs-number">98</span>, <span class="hljs-number">110.5</span>, <span class="hljs-number">75</span>, <span class="hljs-number">150.58</span>)</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(numbers))</span><br>150.58<br></code></pre></td></tr></table></figure><p>使用max()可以获取元组中的最大值。相似地，我们可以使用min()函数：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">numbers = (<span class="hljs-number">50</span>, <span class="hljs-number">80</span>, <span class="hljs-number">98</span>, <span class="hljs-number">110.5</span>, <span class="hljs-number">75</span>, <span class="hljs-number">150.58</span>)</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>(numbers))</span><br>50<br></code></pre></td></tr></table></figure><p>因此这里我们获取到了最小值。</p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合（set）是一个无序且无重复值的元素集。集合的基本用法是检查成员关系和删除重复项。这些集合对象支持数学运算，如并集、交集、差集以及对等差分。我们可以使用大括号{}或函数set()来创建集合。如果想要创建一个空的集合，使用set()而不是{}。</p><p>以下是一个简单的演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>fruits = &#123;<span class="hljs-string">&#x27;Mango&#x27;</span>, <span class="hljs-string">&#x27;Apple&#x27;</span>, <span class="hljs-string">&#x27;Mango&#x27;</span>, <span class="hljs-string">&#x27;Watermelon&#x27;</span>, <span class="hljs-string">&#x27;Apple&#x27;</span>, <span class="hljs-string">&#x27;Orange&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(fruits)&#123;<span class="hljs-string">&#x27;Orange&#x27;</span>, <span class="hljs-string">&#x27;Apple&#x27;</span>, <span class="hljs-string">&#x27;Watermelon&#x27;</span>, <span class="hljs-string">&#x27;Mango&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;Orange&#x27;</span> <span class="hljs-keyword">in</span> fruitsTrue<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;Onion&#x27;</span> <span class="hljs-keyword">in</span> fruitsFalse<br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;abracadabra&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>b = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;alacazam&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>a&#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>a - b&#123;<span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>a \| b&#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>a &amp; b&#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>a ^ b&#123;<span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>译者注：因集合是无序的，所以读者在执行相同代码时得到的结果顺序可能会略有不同</p><p>Python 中还支持集合推导式(set comprehension)，参见如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = &#123;x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;abracadabra&#x27;</span> <span class="hljs-keyword">if</span> x <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;abc&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>a&#123;<span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>字典（dictionary）是Python中的一种数据类型，它由键值对组成并包裹在大括号{}中。字典是无序的并通过键进行索引，且每个键必须是唯一的。这些键必须为不可变类型。元组在包含字符串、数字或元组时可作为字典的键。</p><p>仅仅使用一对大括号{}会创建一个空的字典。字典的主要运算是使用某些键来存储值并通过给定的键来提取值。同样可以使用 del 来删除一个键值对。如果使用了已有的键进行存储，就会抹除该键原来关联的值。使用不存在的键来提取值会报错。以下是使用字典的一个小例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>student = &#123;<span class="hljs-string">&#x27;Name&#x27;</span>:<span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>:<span class="hljs-number">25</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>student[<span class="hljs-string">&#x27;Address&#x27;</span>] = <span class="hljs-string">&#x27;Mumbai&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>student&#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;Address&#x27;</span>: <span class="hljs-string">&#x27;Mumbai&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-number">25</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>student[<span class="hljs-string">&#x27;Age&#x27;</span>]<span class="hljs-number">25</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">del</span> student[<span class="hljs-string">&#x27;Address&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>student&#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-number">25</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(student.keys())<br>[<span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">sorted</span>(student.keys())<br>[<span class="hljs-string">&#x27;Age&#x27;</span>, <span class="hljs-string">&#x27;Name&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;Name&#x27;</span> <span class="hljs-keyword">in</span> studentTrue<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;Age&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> studentFalse<br></code></pre></td></tr></table></figure><p>自选的键值表达式配合字典推导式可用于创建字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>&#123;x: x2 <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> (<span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>)&#125;<br>&#123;<span class="hljs-number">4</span>: <span class="hljs-number">16</span>, <span class="hljs-number">6</span>: <span class="hljs-number">36</span>, <span class="hljs-number">8</span>: <span class="hljs-number">64</span>&#125;<br></code></pre></td></tr></table></figure><p>在键是简单的字符串时，使用关键字参数的方式指定键值对更为容易：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">dict</span>(John=<span class="hljs-number">25</span>, Nick=<span class="hljs-number">27</span>, Jack=<span class="hljs-number">28</span>)<br>&#123;<span class="hljs-string">&#x27;Nick&#x27;</span>: <span class="hljs-number">27</span>, <span class="hljs-string">&#x27;Jack&#x27;</span>: <span class="hljs-number">28</span>, <span class="hljs-string">&#x27;John&#x27;</span>: <span class="hljs-number">25</span>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">字典的基础使用和练习</span><br><span class="hljs-string">author: gxcuizy</span><br><span class="hljs-string">date: 2018-10-18</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 程序主入口</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 定义一个空字典</span><br>    dict_none = &#123;&#125;<br>    <span class="hljs-built_in">print</span>(dict_none)<br><br>    <span class="hljs-comment"># 定义一个非空字典</span><br>    score_dict = &#123;<span class="hljs-string">&#x27;math&#x27;</span>: <span class="hljs-number">96</span>, <span class="hljs-string">&#x27;english&#x27;</span>: <span class="hljs-number">97</span>, <span class="hljs-string">&#x27;chinese&#x27;</span>: <span class="hljs-number">98</span>&#125;<br>    <span class="hljs-built_in">print</span>(score_dict)<br><br>    <span class="hljs-comment"># 使用使用dict()创建字典</span><br>    tuple_math = (<span class="hljs-string">&#x27;math&#x27;</span>, <span class="hljs-string">&#x27;96&#x27;</span>)<br>    tuple_english = (<span class="hljs-string">&#x27;english&#x27;</span>, <span class="hljs-string">&#x27;97&#x27;</span>)<br>    tuple_chinese = (<span class="hljs-string">&#x27;chinese&#x27;</span>, <span class="hljs-string">&#x27;98&#x27;</span>)<br>    dict_a = <span class="hljs-built_in">dict</span>([tuple_math, tuple_english, tuple_chinese])<br>    <span class="hljs-built_in">print</span>(dict_a)<br><br>    <span class="hljs-comment"># 使用zip()合并两个列表分别作为字典的key和value</span><br>    list_key = [<span class="hljs-string">&#x27;math&#x27;</span>, <span class="hljs-string">&#x27;english&#x27;</span>, <span class="hljs-string">&#x27;chinese&#x27;</span>]<br>    list_value = [<span class="hljs-number">96</span>, <span class="hljs-number">97</span>, <span class="hljs-number">98</span>]<br>    score = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>(list_key, list_value))<br>    <span class="hljs-built_in">print</span>(score)<br><br>    <span class="hljs-comment"># 读取字典的value</span><br>    <span class="hljs-built_in">print</span>(score_dict[<span class="hljs-string">&#x27;math&#x27;</span>])<br><br>    <span class="hljs-comment"># 修改字典的value</span><br>    score_dict[<span class="hljs-string">&#x27;chinese&#x27;</span>] = <span class="hljs-number">100</span><br>    <span class="hljs-built_in">print</span>(score_dict)<br><br>    <span class="hljs-comment"># keys()获取字典所有的key</span><br>    dict_key = score_dict.keys()<br>    <span class="hljs-built_in">print</span>(dict_key)<br><br>    <span class="hljs-comment"># values()获取字典所有的value</span><br>    dict_value = score_dict.values()<br>    <span class="hljs-built_in">print</span>(dict_value)<br><br>    <span class="hljs-comment"># 使用get()获取key值对应的value</span><br>    math_value = score_dict.get(<span class="hljs-string">&#x27;math&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(math_value)<br><br>    <span class="hljs-comment"># in 和 not in 判断key在字典中是否存在</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;math&#x27;</span> <span class="hljs-keyword">in</span> score_dict)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;history&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> score_dict)<br><br>    <span class="hljs-comment"># 使用items()把字典的对应的key和value组成一个元组返回一个列表</span><br>    score_list = score_dict.items()<br>    <span class="hljs-built_in">print</span>(score_list)<br><br>    <span class="hljs-comment"># 使用copy()复制一个字典</span><br>    score_copy = score_dict.copy()<br>    <span class="hljs-built_in">print</span>(score_copy)<br><br>    <span class="hljs-comment"># 使用clear()清空字典所有元素</span><br>    score_copy.clear()<br>    <span class="hljs-built_in">print</span>(score_copy)<br><br>    <span class="hljs-comment"># pop()删除一个key对应的元素，key存在，返回对应的value，可以指定不存在时的默认返回值</span><br>    pop_result = score_dict.pop(<span class="hljs-string">&#x27;english&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(pop_result)<br>    pop_result = score_dict.pop(<span class="hljs-string">&#x27;history&#x27;</span>, <span class="hljs-string">&#x27;不存在&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(pop_result)<br><br>    <span class="hljs-comment"># 使用update()更新字典，也就是追加元素的意思</span><br>    score_dict.update(&#123;<span class="hljs-string">&#x27;history&#x27;</span>: <span class="hljs-number">95</span>&#125;)<br>    <span class="hljs-built_in">print</span>(score_dict)<br><br>    <span class="hljs-comment"># 使用fromkyes()创建一个新的字典，key来自序列，value来自自定义（默认为None）</span><br>    score_new = score_copy.fromkeys([<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>], <span class="hljs-number">100</span>)<br>    <span class="hljs-built_in">print</span>(score_new)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!usr/bin/env python</span><br><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">@author:liyupi</span><br><span class="hljs-string">@file: for_dict-1.py</span><br><span class="hljs-string">@time: 2022/03/25</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-string">&quot;循环字典的key和value&quot;</span><br><br><span class="hljs-comment"># 程序主入口</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 定义一个字典</span><br>    score_dict = &#123;<span class="hljs-string">&#x27;math&#x27;</span>: <span class="hljs-number">96</span>, <span class="hljs-string">&#x27;english&#x27;</span>: <span class="hljs-number">97</span>, <span class="hljs-string">&#x27;chinese&#x27;</span>: <span class="hljs-number">98</span>&#125;<br><br>    <span class="hljs-comment"># 循环获取key</span><br>    key: <span class="hljs-built_in">str</span><br>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> score_dict:<br>        <span class="hljs-built_in">print</span>(key)<br><br>    <span class="hljs-comment"># 循环获取value</span><br>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> score_dict:<br>        <span class="hljs-built_in">print</span>(score_dict[key])<br><br>    <span class="hljs-comment"># 循环获取key和value</span><br>    <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> score_dict.items():<br>        <span class="hljs-built_in">print</span>(key, value)<br><br></code></pre></td></tr></table></figure><h2 id="解析命令行参数"><a href="#解析命令行参数" class="headerlink" title="解析命令行参数"></a>解析命令行参数</h2><p>在这一部分中，我们将学习参数的解析以及用于解析参数的模块。</p><h4 id="Python-中的命令行参数"><a href="#Python-中的命令行参数" class="headerlink" title="Python 中的命令行参数"></a>Python 中的命令行参数</h4><p>我们可以在命令行中添加额外的参数来启动程序。Python的程序可通过命令行参数来启动。让我们来看看下面这个例子：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ python program_name<span class="hljs-selector-class">.py</span> <span class="hljs-selector-tag">img</span>.jpg<br></code></pre></td></tr></table></figure><p>这里program_name.py和img.jpg都是参数。我们将使用模块来获取这些参数：</p><table><thead><tr><th>模块</th><th>用法</th><th>Python版本</th></tr></thead><tbody><tr><td>optparse</td><td>已淘汰</td><td>&lt; 2.7</td></tr><tr><td>sys</td><td>所有sys.argv中的参数 (基本)</td><td>所有版本</td></tr><tr><td>argparse</td><td>创建一个命令行接口</td><td>&gt;&#x3D; 2.3</td></tr><tr><td>fire</td><td>自动生成命令行接口(CLI)</td><td>All</td></tr><tr><td>docopt</td><td>创建CLI接口</td><td>&gt;&#x3D; 2.5</td></tr></tbody></table><h4 id="Sys-argv"><a href="#Sys-argv" class="headerlink" title="Sys.argv"></a>Sys.argv</h4><p>sys模块用于访问命令行参数。len(sys.argv) 函数包含参数的数量。要打印所有的参数，只需执行str(sys.argv)。让们来看看下面这个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 01.py</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Number of arguments: &#x27;</span>, <span class="hljs-built_in">len</span>(sys.argv))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Argument list: &#x27;</span>, <span class="hljs-built_in">str</span>(sys.argv)) <br><span class="hljs-comment"># 运行</span><br>python3 <span class="hljs-number">01.</span>py img<br><span class="hljs-comment"># 执行结果Number of arguments: 2Argument list: [&#x27;01.py&#x27;, &#x27;img&#x27;]</span><br></code></pre></td></tr></table></figure><h2 id="决策制定"><a href="#决策制定" class="headerlink" title="决策制定"></a>决策制定</h2><p>当我们想要在条件为true时执行一个代码时，就需要使用到决策制定（译者注：流程控制语句）了。if…elif…else语句在Python中用于决策制定。</p><h3 id="Python的if语句语法"><a href="#Python的if语句语法" class="headerlink" title="Python的if语句语法"></a>Python的if语句语法</h3><p>以下是if语句的语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> test expression:    <br>    statement(s)<br></code></pre></td></tr></table></figure><p>这里，程序运行了test 表达式并仅在该表达式为true时才执行下面的语句。如果表达式为false，则不会执行语句。</p><p>Python中if语句的主体通过缩进来表示。语句主体通过缩进来表示第一行的开始，通过取消缩进表示主体的结束。我们来看看下面这个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">10</span><br><span class="hljs-keyword">if</span> a &gt; <span class="hljs-number">0</span>:    <br>    <span class="hljs-built_in">print</span>(a, <span class="hljs-string">&quot;is a positive number.&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This statement is always printed.&quot;</span>) <br>a = -<span class="hljs-number">10</span><br><span class="hljs-keyword">if</span> a &gt; <span class="hljs-number">0</span>:    <br>    <span class="hljs-built_in">print</span>(a, <span class="hljs-string">&quot;is a positive number.&quot;</span>) <br><span class="hljs-comment">#输出结果：</span><br><span class="hljs-comment">#10 is a positive number.This statement is always printed.</span><br></code></pre></td></tr></table></figure><h3 id="Python的if…else语句语法"><a href="#Python的if…else语句语法" class="headerlink" title="Python的if…else语句语法"></a>Python的if…else语句语法</h3><p>在这一部分，我们将学习if..else 语句。else代码块仅在if条件为false时执行。参见如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> test expression:<br>        <span class="hljs-keyword">if</span> block<br><span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">else</span> block<br></code></pre></td></tr></table></figure><p>if..else语句运行test表达式，仅在test条件为true时运行主体内容。如果条件为false，else中的主体内容会被执行。缩进用于分割代码块。参见如下示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">10</span><br><span class="hljs-keyword">if</span> a &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Positive number&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Negative number&quot;</span>)<br> <br> <br>输出结果：<br>Positive number<br></code></pre></td></tr></table></figure><h3 id="Python的if…elif…else语句语法"><a href="#Python的if…elif…else语句语法" class="headerlink" title="Python的if…elif…else语句语法"></a>Python的if…elif…else语句语法</h3><p>elif语句从多条语句中检查true值。只要运行的值为 true 就执行相应的代码块。参见如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> test expression:<br>        <span class="hljs-keyword">if</span> block statements<br><span class="hljs-keyword">elif</span> test expression:<br>        <span class="hljs-keyword">elif</span> block statements<br><span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">else</span> block statements<br></code></pre></td></tr></table></figure><p>elif是else if的简写，让我们可以检查多个表达式。如果if语句中的条件为false，它会检查下一个elif代码块的条件，以此类推。如果所有条件均为false，else中的主体内容会被执行。</p><p>if…elif…else中仅会根据条件执行其中一个代码块。if代码块仅能带有一个else代码块，但可以有多个elif代码块。我们来看看以下的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">10</span><br><span class="hljs-keyword">if</span> a &gt; <span class="hljs-number">50</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a is greater than 50&quot;</span>)<br><span class="hljs-keyword">elif</span> a == <span class="hljs-number">10</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a is equal to 10&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a is negative&quot;</span>)<br> <br>输出结果：<br>a <span class="hljs-keyword">is</span> equal to <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>要处理脚本中的所有循环需求，Python支持两类循环：</p><ul><li>for 循环</li><li>while 循环</li></ul><p>下面我们就来学习for 循环和while 循环。</p><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>for循环遍历序列或其它可迭代对象中的每一项，并每次执行for代码块中的语句。参照如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> sequence:    <br>    <span class="hljs-keyword">for</span> loop body<br></code></pre></td></tr></table></figure><p>此处i 为在每次迭代时获取序列中各项值的变量。在到达序列最后一项之前循环会一直执行。下图中进行了描述：</p><p><a href="http://alanhou.org/homepage/wp-content/uploads/2019/02/2019021707562267.jpg"><img src="http://alanhou.org/homepage/wp-content/uploads/2019/02/2019021707562267.jpg" alt="Python自动化脚本-运维人员宝典第一章 Python脚本概述"></a></p><p>参见如下示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">numbers = [<span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>]<br><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> numbers:<br>        <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> + i<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The sum is&quot;</span>, <span class="hljs-built_in">sum</span>)<br> <br>输出结果：<br>The <span class="hljs-built_in">sum</span> <span class="hljs-keyword">is</span> <span class="hljs-number">6</span><br>The <span class="hljs-built_in">sum</span> <span class="hljs-keyword">is</span> <span class="hljs-number">11</span><br>The <span class="hljs-built_in">sum</span> <span class="hljs-keyword">is</span> <span class="hljs-number">14</span><br>The <span class="hljs-built_in">sum</span> <span class="hljs-keyword">is</span> <span class="hljs-number">22</span><br>The <span class="hljs-built_in">sum</span> <span class="hljs-keyword">is</span> <span class="hljs-number">26</span><br>The <span class="hljs-built_in">sum</span> <span class="hljs-keyword">is</span> <span class="hljs-number">28</span><br>The <span class="hljs-built_in">sum</span> <span class="hljs-keyword">is</span> <span class="hljs-number">33</span><br>The <span class="hljs-built_in">sum</span> <span class="hljs-keyword">is</span> <span class="hljs-number">37</span><br>The <span class="hljs-built_in">sum</span> <span class="hljs-keyword">is</span> <span class="hljs-number">48</span><br></code></pre></td></tr></table></figure><h3 id="range-函数"><a href="#range-函数" class="headerlink" title="range()函数"></a>range()函数</h3><p>Python的range()函数会生成一个数字的序列。例如，range(10)会生成0到9的数字（共10个数字）。</p><p>我们还可以定义起始、结束和步长来作为参数，这时range()函数如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">range</span>(start, stop, step size).<br> <br>如未设置步长默认为<span class="hljs-number">1</span>。<br></code></pre></td></tr></table></figure><p>使用range()函数的 for 循环示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The number is&quot;</span>, i)<br> <br>输出结果：<br>The number <span class="hljs-keyword">is</span> <span class="hljs-number">0</span><br>The number <span class="hljs-keyword">is</span> <span class="hljs-number">1</span><br>The number <span class="hljs-keyword">is</span> <span class="hljs-number">2</span><br>The number <span class="hljs-keyword">is</span> <span class="hljs-number">3</span><br>The number <span class="hljs-keyword">is</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>while是一个在测试表达式为true时不停遍历代码块的循环语句。我们在不知道要迭代多少次时使用这一循环。参见如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> test_expression:<br>        <span class="hljs-keyword">while</span> body statements<br></code></pre></td></tr></table></figure><p>在while循环中，我们首先检查测试表达式。while仅在这个测试表达式为true时执行。在一个迭代后，会重新对表达式进行检查，并在表达式运行值为false前不停重复这一过程。下图中进行了描述：</p><p><a href="http://alanhou.org/homepage/wp-content/uploads/2019/02/2019021708122270.jpg"><img src="http://alanhou.org/homepage/wp-content/uploads/2019/02/2019021708122270.jpg" alt="Python自动化脚本-运维人员宝典第一章 Python脚本概述"></a></p><p>以下为while循环的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">10</span><br><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>i = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> i &lt;= a:<br>        <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> + i<br>        i = i + <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The sum is&quot;</span>, <span class="hljs-built_in">sum</span>)<br> <br> <br>运行结果：<br>The <span class="hljs-built_in">sum</span> <span class="hljs-keyword">is</span> <span class="hljs-number">1</span><br>The <span class="hljs-built_in">sum</span> <span class="hljs-keyword">is</span> <span class="hljs-number">3</span><br>The <span class="hljs-built_in">sum</span> <span class="hljs-keyword">is</span> <span class="hljs-number">6</span><br>The <span class="hljs-built_in">sum</span> <span class="hljs-keyword">is</span> <span class="hljs-number">10</span><br>The <span class="hljs-built_in">sum</span> <span class="hljs-keyword">is</span> <span class="hljs-number">15</span><br>The <span class="hljs-built_in">sum</span> <span class="hljs-keyword">is</span> <span class="hljs-number">21</span><br>The <span class="hljs-built_in">sum</span> <span class="hljs-keyword">is</span> <span class="hljs-number">28</span><br>The <span class="hljs-built_in">sum</span> <span class="hljs-keyword">is</span> <span class="hljs-number">36</span><br>The <span class="hljs-built_in">sum</span> <span class="hljs-keyword">is</span> <span class="hljs-number">45</span><br>The <span class="hljs-built_in">sum</span> <span class="hljs-keyword">is</span> <span class="hljs-number">55</span><br></code></pre></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>Python中的迭代器是可进行迭代的对象。这个对象会返回数据，每次返回一个元素。Python的迭代器对象实现了两个方法：<strong>iter</strong>()和__next__()。大多数情况下迭代器在循环、生成器和推导式中实现。</p><p>下例中，我们使用了next()函数，它会遍历所有的元素。在到达最后且没有更多数据返回时，会抛出StopIteration，如下例所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">numbers = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>]<br> <br>numbers_iter = <span class="hljs-built_in">iter</span>(numbers)<br> <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(numbers_iter))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(numbers_iter))<br><span class="hljs-built_in">print</span>(numbers_iter.__next__())<br><span class="hljs-built_in">print</span>(numbers_iter.__next__())<br> <br><span class="hljs-built_in">next</span>(numbers_iter)<br> <br> <br>输出结果：<br><span class="hljs-number">10</span><br><span class="hljs-number">20</span><br><span class="hljs-number">30</span><br><span class="hljs-number">40</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;test.py&quot;</span>, line <span class="hljs-number">10</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-built_in">next</span>(numbers_iter)<br>StopIteration<br></code></pre></td></tr></table></figure><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>我们可以使用Python生成器来创建迭代器。Python中生成器是返回一个可以迭代对象的函数。</p><h3 id="如何在Python中创建生成器"><a href="#如何在Python中创建生成器" class="headerlink" title="如何在Python中创建生成器"></a>如何在Python中创建生成器</h3><p>在Python中创建生成器非常容易。我们可以定义一个函数，使用yield语句来代替return语句即可创建生成器。如果函数中至少包含一个yield语句，它就变成了一个生成器函数。yield和return语句会从函数中返回某些值。以下为示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_gen</span>():<br>        n = <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is printed first&quot;</span>)<br>        <span class="hljs-keyword">yield</span> n<br>        n += <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is printed second&quot;</span>)<br>        <span class="hljs-keyword">yield</span> n<br>        n += <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is printed at last&quot;</span>)<br>        <span class="hljs-keyword">yield</span> n<br> <br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> my_gen():<br>        <span class="hljs-built_in">print</span>(item)<br> <br>输出结果：<br>This <span class="hljs-keyword">is</span> printed first<br><span class="hljs-number">1</span><br>This <span class="hljs-keyword">is</span> printed second<br><span class="hljs-number">2</span><br>This <span class="hljs-keyword">is</span> printed at last<br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数是执行特定任务的一组语句。使用函数有助于将我们的程序分成更小的部分。函数可避免重复并让代码可以复用，因此让程序组织的更好。来看下面的语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">function_name</span>:<br>        statement(s)<br></code></pre></td></tr></table></figure><p>参见如下示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">welcome</span>(<span class="hljs-params">name</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello &quot;</span> + name + <span class="hljs-string">&quot;, Welcome to Python Programming!&quot;</span>)<br> <br>welcome(<span class="hljs-string">&quot;John&quot;</span>)<br> <br>输出结果：<br>Hello John, Welcome to Python Programming!<br></code></pre></td></tr></table></figure><h3 id="return语句"><a href="#return语句" class="headerlink" title="return语句"></a>return语句</h3><p>return语句用于退出函数。参见如下的语法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">return</span> [expression_list]<br></code></pre></td></tr></table></figure><p>这个语句可能包含返回一个值的表达式。如果没有表达式，函数会返回None对象，如下例所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">return_value</span>(<span class="hljs-params">a</span>):<br>        <span class="hljs-keyword">if</span> a &gt;= <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> a<br>        <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> -a<br> <br><span class="hljs-built_in">print</span>(return_value(<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(return_value(-<span class="hljs-number">4</span>))<br> <br>输出结果：<br><span class="hljs-number">2</span><br><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h3 id="Lambda函数"><a href="#Lambda函数" class="headerlink" title="Lambda函数"></a>Lambda函数</h3><p>Python中匿名函数是未定义函数名的函数，称为lambda函数，使用关键字lambda进行定义。在需要短暂使用一个函数时我们使用这类函数。</p><p>lambda函数与内置的函数可共同使用，如filter()和map()。</p><p>filter()函数返回一个元素列表，并仅接收一个迭代值。以下为使用filter()的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pytho">numbers = [10, 25, 54, 86, 89, 11, 33, 22]<br>new_numbers = list(filter(lambda x: (x%2 == 0), numbers))<br> <br>print(new_numbers)<br> <br>输出结果：<br>[10, 54, 86, 22]<br></code></pre></td></tr></table></figure><p>在本例中，filter()接收一个lambda函数以及一个列表来作为参数。</p><p>map()函数在应用指定函数之后返回一个结果列表。下面我们来看看使用map()的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">11</span>, <span class="hljs-number">3</span>, <span class="hljs-number">12</span>]<br>new_list = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x * <span class="hljs-number">2</span>, my_list))<br><span class="hljs-built_in">print</span>(new_list)<br> <br>输出结果：<br>[<span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">16</span>, <span class="hljs-number">22</span>, <span class="hljs-number">6</span>, <span class="hljs-number">24</span>]<br></code></pre></td></tr></table></figure><p>这里，map()函数接收一个lambda函数和一个列表。</p><p>译者补充：提到 map 一般会想到另一个函数 reduce，同样可配合匿名函数使用，Python 3中使用 reduce 需要手动导入，示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-meta">&gt;&gt;&gt; </span>reduce(<span class="hljs-keyword">lambda</span> x, y: x+y, [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])<br><span class="hljs-number">15</span><br></code></pre></td></tr></table></figure><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>模块只是包含Python语句和定义的文件。一个包含Python代码的文件（如sample.py）称为一个模块，并且模块名应为sample。使用模块，我们可以将大型的程序分解成更小和有组织的程序。模块的一个重要特性是复用性。我们无需在不同程序中拷贝经常使用到的函数定义，而是将它们定义在一模块中，然后需要使用时进行导入。</p><p>我们来创建一个模块并导入。我们将创建两个脚本：sample.py和add.py。然后在add.py中导入sample模块。现在将如下代码保存到sample.py文件中。我们来看看下面这个示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sample.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">addition</span>(<span class="hljs-params">num1, num2</span>):<br>        result = num1 + num2<br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><p>这里我们在名为sample的模块中定义了一个函数addition()。该函数接收两个数值并返回和。这样我们就创建了一个模块。我们可以在任意Python程序中导入该模块。</p><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><p>在创建模块后，我们来学习如何导入这一模块。上例中我们创建了一个sample模块。现在我们就在add.py脚本中导入sample模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># add.py</span><br><span class="hljs-keyword">import</span> sample<br><span class="hljs-built_in">sum</span> = sample.addition(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>)<br> <br>输出结果：<br><span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本章中，我们概览了Python脚本语言。学习了如何安装Python以及各种工具。我们还学习了Python解释器以及如何使用它。我们学习了Python支持的数据类型、变量、数值和字符串、决策控制语句和Python中的循环语句。我们还学习了函数以及如何在脚本中使用函数，模块以及如何创建和导入模块。</p><p>在下一章<a href="https://alanhou.org/debugging-profiling-python-scripts/">Python脚本调试和性能测试</a>中，我们将学习Python的调试技巧、错误处理（异常处理）、调试器工具、调试基本的程序崩溃、程序性能和用时测试以及加快程序运行。</p><p>☞☞☞ <a href="https://alanhou.org/debugging-profiling-python-scripts/">第二章 Python脚本调试和性能测试</a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li><p>什么是迭代器和生成器？</p><p> 迭代器是一个可进行迭代的对象。该对象会返回数据，每次返回一条。生成器是一个返回可进行迭代对象的函数。 </p></li><li><p>列表是否可变？</p><p> 列表是可变的 </p></li><li><p>Python中的数据结构是什么？</p><p> Python中的数据结构是可以共同存储数据的结构。换句话说，它们用于存储相关数据的集合。 </p></li><li><p>如何访问列表中的值？</p><p> 我们可以通过索引来访问列表中的值。 </p></li><li><p>什么是模块？</p><p> 模块是那些包含Python语句和定义的文件。</p></li></ol><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><p>Python的所有文档可通过<a href="https://www.python.org/">官方网站</a>获取。</p><p>还可以阅读如下图书：Learn Python Hard Way和Byte of Python来学习 Python 的基础知识。</p><p>译者补充：</p><p>Python 另一个重要的概念是装饰器，简单的示例如下</p><table><thead><tr><th>12345678910111213</th><th>def decorator_demo(func):  def wrap_func(*args, kwargs):    print(“Inside decorator”)    return func(*args, kwargs)  return wrap_func @decorator_demodef func_a(something):  print(“I am function a, doing {}”.format(something)) if <strong>name</strong> &#x3D;&#x3D; “<strong>main</strong>“:  func_a(“test”)</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h1 id="第二章-Python脚本调试和性能测试"><a href="#第二章-Python脚本调试和性能测试" class="headerlink" title="第二章 Python脚本调试和性能测试"></a>第二章 Python脚本调试和性能测试</h1><h2 id="什么是调试？"><a href="#什么是调试？" class="headerlink" title="什么是调试？"></a>什么是调试？</h2><p>调试（debugging）是一个解决代码中错误或导致软件不能正常运行的问题的过程。Python中的调试非常容易。Python调试器设置条件断点并对源码逐行调试。我们将使用Python标准库中的 pdb 模块来对我们的Python脚本进行调试。</p><h3 id="Python-的调试技术"><a href="#Python-的调试技术" class="headerlink" title="Python 的调试技术"></a>Python 的调试技术</h3><p>为更好的调试Python程序，可以使用不同的技术。我们就来看看Python调试的四种技术：</p><ul><li>print()语句：这是了解具体发生情况的最简单的方式，这样我们可以检查执行的内容</li><li>logging：这类似于print语句但带更多的上下文信息，因此我们可以更全面的了解情况</li><li>pdb调试器：这是最常使用的调试技术。使用 pdb 的优势是能够在命令行、解释器以及程序中使用 pdb</li><li>IDE调试器：IDE有内置的调试器。这让开发者可以执行自己的代码，然后开发者可以在程序执行过程中检查代码</li></ul><h2 id="错误处理（异常处理）"><a href="#错误处理（异常处理）" class="headerlink" title="错误处理（异常处理）"></a>错误处理（异常处理）</h2><p>在这一部分中我们将学习Python如何处理异常。但首先什么是异常呢？异常是在程序执行过程中发生的错误。每当错误发生时，Python会生成一个异常，使用try…except代码块来进行处理。有时异常程序无法处理，因此会导致报错信息。下面我们就来看一些异常的示例：</p><p>在你的终端中，启动python3交互控制台，我们一起来看一些异常示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">50</span> / <span class="hljs-number">0</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>ZeroDivisionError: division by zero<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">6</span> + abc*<span class="hljs-number">5</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>NameError: name <span class="hljs-string">&#x27;abc&#x27;</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> defined<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;abc&#x27;</span> + <span class="hljs-number">2</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>TypeError: Can<span class="hljs-string">&#x27;t convert &#x27;</span><span class="hljs-built_in">int</span><span class="hljs-string">&#x27; object to str implicitly</span><br><span class="hljs-string">&gt;&gt;&gt; import abcd</span><br><span class="hljs-string">Traceback (most recent call last):</span><br><span class="hljs-string">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="hljs-string">ImportError: No module named &#x27;</span>abcd<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>这就是异常的一些示例。下面我们来看如何处理这些异常。</p><p>每当Python程序中发生错误时，就会抛出异常。我们也可使用raise关键字来强制抛出异常。</p><p>下来我们来看一个处理异常的try…except代码块。在try代码块中，我们将编写可能生成异常的代码。在except代码块中，我们将编写异常的处理方式。try…except的语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>        statement(s)<br><span class="hljs-keyword">except</span>:<br>        statement(s)<br></code></pre></td></tr></table></figure><p>一个try代码块可带有多个except语句。我们可通过在except关键字之后输入异常的名称来处理指定的异常。处理指定异常的语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>        statement(s)<br><span class="hljs-keyword">except</span> exception_name:<br>        statement(s)<br></code></pre></td></tr></table></figure><p>下面我们创建一个exception_example.py脚本来捕获ZeroDivisionError。在脚本中编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">35</span><br>b = <span class="hljs-number">37</span><br><span class="hljs-keyword">try</span>:<br>        c = a +b<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The value of c is:&quot;</span>, c)<br>        d = b / <span class="hljs-number">0</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The value of d is:&quot;</span>, d)<br><span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Division by zero is not possible&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Out of try...except block&quot;</span>)<br></code></pre></td></tr></table></figure><p>像下面这样运行脚本，将会得到如下结果：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">vagrant@python-scripting:~$ python3 exception_example.py<br>The value <span class="hljs-keyword">of</span> c <span class="hljs-keyword">is</span>: <span class="hljs-number">72</span><br>Division <span class="hljs-keyword">by</span> zero <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> possible<br><span class="hljs-keyword">Out</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">try</span>...except <span class="hljs-keyword">block</span><br></code></pre></td></tr></table></figure><h2 id="调试器工具"><a href="#调试器工具" class="headerlink" title="调试器工具"></a>调试器工具</h2><p>Python中支持很多种调试工具：</p><ul><li>winpdb</li><li>pydev</li><li>pydb</li><li>pdb</li><li>gdb</li><li>pyDebug</li></ul><p>这一部分中，我们将学习pdb Python调试器。pdb是Python标准库的一部分并一直可以直接使用。</p><h3 id="pdb调试器"><a href="#pdb调试器" class="headerlink" title="pdb调试器"></a>pdb调试器</h3><p>pdb模块用于调试Python程序。Python程序使用pdb交互源代码调试器来调试程序。pdb设置断点并检查栈帧，列出源代码。</p><p>下面我们将学习如何使用pdb调试器。使用这一调试器有三种方式：</p><ul><li>在解释器之中</li><li>通过命令行</li><li>在Python脚本中</li></ul><p>我们将创建一个pdb_example.py脚本并在该脚本中添加如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, std</span>):<br>                self.count = std<br> <br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_std</span>(<span class="hljs-params">self</span>):<br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.count):<br>                        <span class="hljs-built_in">print</span>(i)<br>                <span class="hljs-keyword">return</span><br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>        Student(<span class="hljs-number">5</span>).print_std()<br></code></pre></td></tr></table></figure><p>使用这一脚本作为学习Python调试的示例，我们将了解如何启动调试器的细节。</p><h3 id="解释器内调试"><a href="#解释器内调试" class="headerlink" title="解释器内调试"></a>解释器内调试</h3><p>要从Python交互控制台中启动调试器，我们使用run()或runeval()。</p><p>启动python3交互控制台。运行如下命令来启动控制台：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>python3<br></code></pre></td></tr></table></figure><p>导入我们的pdb_example脚本名和pdb模块。下面我们将使用run()，并且我们会传入一个字符串表达式来作为run()的参数，由Python解释器自身进行运行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pdb_example<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pdb<br><span class="hljs-meta">&gt;&gt;&gt; </span>pdb.run(<span class="hljs-string">&#x27;pdb_example.Student(5).print_std()&#x27;</span>)<br>&gt; &lt;string&gt;(<span class="hljs-number">1</span>)&lt;module&gt;()<br>(Pdb)<br></code></pre></td></tr></table></figure><p>要继续调试，在(Pdb)提示符之后输入continue并按下Enter（或直接输入 h并回车）。我果想要了解这里可以使用的选项，在(Pdb)提示符之后按下两次Tab键。</p><p>在输入continue之后，我们将得到如下的输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pdb_example<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pdb<br><span class="hljs-meta">&gt;&gt;&gt; </span>pdb.run(<span class="hljs-string">&#x27;pdb_example.Student(5).print_std()&#x27;</span>)<br>&gt; &lt;string&gt;(<span class="hljs-number">1</span>)&lt;module&gt;()<br>(Pdb) <span class="hljs-keyword">continue</span><br><span class="hljs-number">0</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><h3 id="命令行调试"><a href="#命令行调试" class="headerlink" title="命令行调试"></a>命令行调试</h3><p>运行调试器最简单也最直接的方式是通过命令行。我们的程序将作为调试器的输入。我们可以这样在命令行中使用调试器：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> -<span class="hljs-keyword">m</span> pdb pdb_example.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>在从命令行运行调试器时，源代码会被载入并在调试器找到的第一行停止执行。输入continue来继续调试。输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">vagrant@python-scripting:~$ python3 -m pdb pdb_example.py<br>&gt; /home/vagrant/pdb_example.py(<span class="hljs-number">1</span>)&lt;module&gt;()<br>-&gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>(Pdb) <span class="hljs-keyword">continue</span><br><span class="hljs-number">0</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br>The program finished <span class="hljs-keyword">and</span> will be restarted<br>&gt; /home/vagrant/pdb_example.py(<span class="hljs-number">1</span>)&lt;module&gt;()<br>-&gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>(Pdb)<br></code></pre></td></tr></table></figure><h3 id="Python脚本内调试"><a href="#Python脚本内调试" class="headerlink" title="Python脚本内调试"></a>Python脚本内调试</h3><p>以上两种技术会在Python程序开始时启动调试器。但第三种方法对于长期处理来说最佳。要在脚本中启动调试器，使用set_trace()。</p><p>现在修改pdb_example.py文件如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pdb<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, std</span>):<br>                self.count = std<br> <br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_std</span>(<span class="hljs-params">self</span>):<br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.count):<br>                        pdb.set_trace()<br>                        <span class="hljs-built_in">print</span>(i)<br>                <span class="hljs-keyword">return</span><br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>        Student(<span class="hljs-number">5</span>).print_std()<br></code></pre></td></tr></table></figure><p>现在运行程序如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">vagrant@python-scripting:~$ python3 pdb_example.py<br>&gt; /home/vagrant/pdb_example.py(10)print_std()<br>-&gt; <span class="hljs-built_in">print</span>(i)<br>(Pdb) <span class="hljs-built_in">continue</span><br>0<br>&gt; /home/vagrant/pdb_example.py(9)print_std()<br>-&gt; pdb.set_trace()<br>(Pdb)<br></code></pre></td></tr></table></figure><p>set_trace()是一个Python函数，因此可以在程序的任意处调用它。所以我们有三种方式来启动调试器。</p><h2 id="基本程序崩溃调试"><a href="#基本程序崩溃调试" class="headerlink" title="基本程序崩溃调试"></a>基本程序崩溃调试</h2><p>在这一部分中，我们来看看trace模块。trace模块有助于追踪程序的执行。因此不论何时程序崩溃，我们都能了解在哪里出现的崩溃。我们可以在脚本中导入也可以通过命令行来使用trace模块。</p><p>现在我们将创建一个名为trace_example.py的脚本并在该脚本中编写如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">class Student:<br>        def __init__(self, std):<br>                self.count = std<br> <br>        def go(self):<br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(self.count):<br>                        <span class="hljs-built_in">print</span>(i)<br>                <span class="hljs-built_in">return</span><br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>        Student(5).go()<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">vagrant@python-scripting:~$ python3 -m trace --trace trace_example.py<br> --- modulename: trace_example, funcname: &lt;module&gt;<br>trace_example.py(1): class Student:<br> --- modulename: trace_example, funcname: Student<br>trace_example.py(1): class Student:<br>trace_example.py(2): def __init__(self, std):<br>trace_example.py(5): def go(self):<br>trace_example.py(10): <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>trace_example.py(11): Student(5).go()<br> --- modulename: trace_example, funcname: __init__<br>trace_example.py(3): self.count = std<br> --- modulename: trace_example, funcname: go<br>trace_example.py(6): <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(self.count):<br>trace_example.py(7): <span class="hljs-built_in">print</span>(i)<br>0<br>trace_example.py(6): <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(self.count):<br>trace_example.py(7): <span class="hljs-built_in">print</span>(i)<br>1<br>trace_example.py(6): <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(self.count):<br>trace_example.py(7): <span class="hljs-built_in">print</span>(i)<br>2<br>trace_example.py(6): <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(self.count):<br>trace_example.py(7): <span class="hljs-built_in">print</span>(i)<br>3<br>trace_example.py(6): <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(self.count):<br>trace_example.py(7): <span class="hljs-built_in">print</span>(i)<br>4<br>trace_example.py(6): <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(self.count):<br>trace_example.py(8): <span class="hljs-built_in">return</span><br> --- modulename: trace, funcname: _unsettrace<br>trace.py(77):         sys.settrace(None)<br></code></pre></td></tr></table></figure><p>因此通过在命令行中使用trace –trace，开发人员可以对程序逐行追踪。这样在程序崩溃时，开发人员就会知道发生崩溃的实例。</p><h2 id="程序性能和时耗分析"><a href="#程序性能和时耗分析" class="headerlink" title="程序性能和时耗分析"></a>程序性能和时耗分析</h2><p>对Python程序进行性能分析（profiling）表示度量程序的执行时间。它计量每个函数所花的时间。Python的cProfile模块用于对Python程序进行性能分析。</p><h3 id="cProfile模块"><a href="#cProfile模块" class="headerlink" title="cProfile模块"></a>cProfile模块</h3><p>正如前文所讲到的，性能分析表示度量程序的执行时间。我们就来使用cProfile Python模块对程序进行性能分析。</p><p>现在来编写一个cprof_example.py脚本并加入如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">mul_value = <span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul_numbers</span>(<span class="hljs-params">num1, num2</span>):<br>        mul_value = num1 * num2<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Local Value:&quot;</span>, mul_value)<br>        <span class="hljs-keyword">return</span> mul_value<br> <br>mul_numbers(<span class="hljs-number">58</span>, <span class="hljs-number">77</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Global Value:&quot;</span>, mul_value)<br></code></pre></td></tr></table></figure><p>运行程序，将会看到如下的输出：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">vagrant</span>@python-scripting:~$ python3 -m cProfile cprof_example.py<br><span class="hljs-attribute">Local</span> Value: <span class="hljs-number">4466</span><br><span class="hljs-attribute">Global</span> Value: <span class="hljs-number">0</span><br>         <span class="hljs-attribute">6</span> function calls in <span class="hljs-number">0</span>.<span class="hljs-number">001</span> seconds<br> <br>   <span class="hljs-attribute">Ordered</span> by: standard name<br> <br>   <span class="hljs-attribute">ncalls</span>  tottime  percall  cumtime  percall filename:lineno(function)<br>        <span class="hljs-attribute">1</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span> cprof_example.py:<span class="hljs-number">1</span>(&lt;module&gt;)<br>        <span class="hljs-attribute">1</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span> cprof_example.py:<span class="hljs-number">2</span>(mul_numbers)<br>        <span class="hljs-attribute">1</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span> &#123;built-in method builtins.exec&#125;<br>        <span class="hljs-attribute">2</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">001</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span> &#123;built-in method builtins.print&#125;<br>        <span class="hljs-attribute">1</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span>    <span class="hljs-number">0</span>.<span class="hljs-number">000</span> &#123;method &#x27;disable&#x27; of &#x27;_lsprof.Profiler&#x27; objects&#125;<br></code></pre></td></tr></table></figure><p>因此，使用cProfile，所有调用的函数都被打印，并包含各个函数所消耗的时间。下面我们来看看这些列头的含义：</p><ul><li>ncalls: 调用次数</li><li>tottime: 给定函数花费的总时间</li><li>percall: tottime除以ncalls所得的商</li><li>cumtime: 当前以及其子函数所花费的累计时间</li><li>percall: cumtime除以原始调用所得的商</li><li>filename:lineno(function): 提供函数各自的数据</li></ul><h3 id="timeit"><a href="#timeit" class="headerlink" title="timeit"></a>timeit</h3><p>timeit是一个Python模块，用于对Python脚本的各部分进行计时。我们可以在命令行中调用timeit，也可以在脚本中导入timeit模块。下面我们来编写一个脚本来对代码片断进行计时。创建一个timeit_example.py脚本并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> timeit<br> <br>prg_setup = <span class="hljs-string">&quot;from math import sqrt&quot;</span><br>prg_code = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">def timeit_example():</span><br><span class="hljs-string">        list1 = []</span><br><span class="hljs-string">        for x in range(50):</span><br><span class="hljs-string">                list1.append(sqrt(x))</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br> <br><span class="hljs-comment"># timeit 语句</span><br><span class="hljs-built_in">print</span>(timeit.timeit(setup = prg_setup, stmt = prg_code, number = <span class="hljs-number">10000</span>))<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal">vagrant<span class="hljs-variable">@python</span>-<span class="hljs-symbol">scripting:</span>~<span class="hljs-variable">$ </span>python3 timeit_example.py<br><span class="hljs-number">0.0010215669999524835</span><br></code></pre></td></tr></table></figure><p>使用timeit,，我们可以决定要对哪段代码进行性能的度量。因此，我们可以轻易地定义setup代码来作为我们想单独执行测试的代码片断。主代码默认运行100万次，但setup代码仅运行一次。</p><h2 id="加速程序运行"><a href="#加速程序运行" class="headerlink" title="加速程序运行"></a>加速程序运行</h2><p>有很多方式来让Python程序运行得更快，比如：</p><ul><li>对认定为瓶颈的代码进行性能分析</li><li>使用内置函数和库，这样解释器不用执行不同循环</li><li>避免使用全局变量，因为Python在访问全局变量时速度很慢</li><li>使用已有的包</li></ul><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>在本章中，我们学习了调试程序和性能分析的重要性。还学习了用于调试的不同技术。我们学习了pdb Python调试器以及如何处理异常。还学习了如何使用Python中的cProfile和timeit模块来对脚本进行性能和时耗分析。最后我们学习了如何加速脚本的运行。</p><p>下一章中，我们将学习Python中的单元测试。我们会学习如何创建和使用单元测试。</p><p>☞☞☞ <a href="https://alanhou.org/unit-testing-introduction-unit-testing-framework/">第三章-单元测试-单元测试框架的介绍</a></p><h2 id="课后问题"><a href="#课后问题" class="headerlink" title="课后问题"></a>课后问题</h2><ol><li><p>要调试程序，使用哪个模块？</p><p>点击查看</p><p>调试程序，使用pdb模块。</p></li><li><p>查看如何在ipython中使用所有的别名函数和魔法函数。</p><p>点击查看</p><p>使用%lsmagic，在运行ipython3之前，请执行sudo apt-get install ipython3进行安装</p></li><li><p>什么是全局解释器锁（Global interpreter lock (GIL)）？</p><p>点击查看</p><p>全局解释器锁是一种计算机语言解释器用于同步线程执行的机制，这样同一时间只有一个原生线程在执行。</p></li><li><p>PYTHONPATH, PYTHONCASEOK, PYTHONHOME和PYTHONSTARTUP环境变量的目的是什么？</p><p>点击查看</p><ul><li>PYTHONPATH: 作用类似于PATH。该变量告诉Python解释器从何处查找导入程序的模块文件。它应包含Python源代码库目录并包含Python源代码。 PYTHONPATH有时由Python安装器进行预设。</li><li>PYTHONSTARTUP: 它包含含有Python源代码初始化文件的路径。在每次启动解释器时进行执行。在Unix中名称为.pythonrc.py，包含加载工具类或修改PYTHONPATH的一些命令。</li><li>PYTHONCASEOK: 在Windows中用于指引Python查找import语句中第一个忽略大小写的匹配文件。可将此变量设为任意值进行启用。</li><li>PYTHONHOME: 另一个模块搜索路径。通常内嵌于PYTHONSTARTUP或PYTHONPATH目录中来使用得模块库切换更为简易。</li></ul></li><li><p>以下代码的输出是什么？</p><p>a) [0]</p><p>b) [1]</p><p>c) [1, 0]</p><p>d) [0, 1]</p><table><thead><tr><th>12345</th><th>def foo(k):    k &#x3D; [1]q &#x3D; [0]foo(q)print(q)</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>点击查看</p><p>答案是r:[0]<br>在函数中创建了新的列表对象，失去了引用。可通过在k &#x3D; [1]的前台对比k的 ID 来进行校验。</p></li><li><p>以下哪个是无效变量？</p><p>a) my_string_1</p><p>b) 1st_string</p><p>c) foo</p><p>d) _</p><p>点击查看</p><p>答案是b. 变量量不可以数字开头。</p></li></ol><h2 id="扩展阅读-1"><a href="#扩展阅读-1" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul><li>如何处理 Python 中的GIL问题：<a href="https://realpython.com/python-gil/">https://realpython.com/python-gil/</a></li><li>查看如何在命令行中使用pdb模块：<a href="https://fedoramagazine.org/getting-started-python-debugger/">https://fedoramagazine.org/getting-started-python-debugger/</a></li></ul><p>下表转自菜鸟教程：</p><table><thead><tr><th align="left">变量名</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">PYTHONPATH</td><td align="left">PYTHONPATH是Python搜索路径，默认我们import的模块都会从PYTHONPATH里面寻找。</td></tr><tr><td align="left">PYTHONSTARTUP</td><td align="left">Python启动后，先寻找PYTHONSTARTUP环境变量，然后执行此变量指定的文件中的代码。</td></tr><tr><td align="left">PYTHONCASEOK</td><td align="left">加入PYTHONCASEOK的环境变量, 就会使python导入模块的时候不区分大小写.</td></tr><tr><td align="left">PYTHONHOME</td><td align="left">另一种模块搜索路径。它通常内嵌于的PYTHONSTARTUP或PYTHONPATH目录中，使得两个模块库更容易切换。</td></tr></tbody></table><p>以下内容转自百度百科：</p><blockquote><p>全局解释器锁（Global Interpreter Lock）是计算机程序设计语言解释器用于同步线程的工具，使得在同一进程内任何时刻仅有一个线程在执行。常见例子有CPython（JPython不使用GIL）与Ruby MRI。</p><p>详情</p><ul><li>Python的线程是操作系统线程。在Linux上为pthread，在Windows上为Win thread，完全由操作系统调度线程的执行。一个python解释器进程内有一条主线程，以及多条用户程序的执行线程。即使在多核CPU平台上，由于GIL的存在，所以禁止多线程的并行执行。</li><li>Python解释器进程内的多线程是合作多任务方式执行。当一个线程遇到I&#x2F;O任务时，将释放GIL。计算密集型（CPU-bound）的线程在执行大约100次解释器的计步（ticks）时，将释放GIL。计步（ticks）可粗略看作Python虚拟机的指令。计步实际上与时间片长度无关。可以通过sys.setcheckinterval()设置计步长度。</li><li>在单核CPU上，数百次的间隔检查才会导致一次线程切换。在多核CPU上，存在严重的线程颠簸（thrashing）。</li><li>Python 3.2开始使用新的GIL。</li><li>可以创建独立的进程来实现并行化。</li></ul></blockquote><h1 id="第三章-单元测试-单元测试框架的介绍"><a href="#第三章-单元测试-单元测试框架的介绍" class="headerlink" title="第三章-单元测试-单元测试框架的介绍"></a>第三章-单元测试-单元测试框架的介绍</h1><p>对项目进行测试是软件开发的基本部分。本章中，我们将学习如何在Python中进行单元测试。Python中有一个称为unittest的模块，这就是一个单元测试框架。本章中我们将学习unittest这一框架。</p><p>本章中我们会学习如下课题：</p><ul><li>单元测试框架的介绍</li><li>创建单元测试任务</li></ul><h2 id="什么是单元测试？"><a href="#什么是单元测试？" class="headerlink" title="什么是单元测试？"></a>什么是单元测试？</h2><p>unittest是Python中的一个单元测试框架。它支持多任务，如测试夹具（test fixture）、编写测试用例、聚合测试用例进入一个测试套件，以及运行测试。</p><p>unittest支持以下4种主要概念：</p><ul><li>测试夹具：这包括执行一个或多个测试的准备和清理活动</li><li>测试用例：这包括我们的单个测试。通过使用unittest中的TestCase基类，我们可以新建测试用例</li><li>测试套件：这包含一个测试用例、测试套件或两者的合集。用于一起执行测试用例</li><li>测试运行器：这包括安排测试执行和向用户给出输出</li></ul><p>Python有一个我们可以在脚本中导入的unittest模块。unittest模块有TestCase类用于创建测试用例。</p><p>单个测试用例可以方法形式创建。这些方法名以单词 test 开头。因此，测试运行器可以知道哪些方法表示测试用例。</p><h2 id="创建单元测试"><a href="#创建单元测试" class="headerlink" title="创建单元测试"></a>创建单元测试</h2><p>在这一部分，我们来创建单元测试。我们要创建两个脚本来进行实现。一个是普通脚本，另一个是包含测试的代码。</p><p>首先，创建一个名为arithmetic.py的脚本并编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在这个脚本中，我们将创建4个函数：add_numbers, sub_numbers, mul_numbers, div_numbers</span><br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_numbers</span>(<span class="hljs-params">x, y</span>):<br>        <span class="hljs-keyword">return</span> x + y<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub_numbers</span>(<span class="hljs-params">x, y</span>):<br>        <span class="hljs-keyword">return</span> x - y<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul_numbers</span>(<span class="hljs-params">x, y</span>):<br>        <span class="hljs-keyword">return</span> x * y<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">div_numbers</span>(<span class="hljs-params">x, y</span>):<br>        <span class="hljs-keyword">return</span> (x / y)<br></code></pre></td></tr></table></figure><p>在以上脚本中，我们创建了4个函数：add_numbers, sub_numbers, mul_numbers和div_numbers。下面我们将编写这些函数的测试用例。首先，我们将学习如何为add_numbers函数编写测试用例。创建test_addition.py脚本并编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> arithmetic<br><span class="hljs-keyword">import</span> unittest<br> <br><span class="hljs-comment"># Testing add_numbers function from arithmetic.</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test_addition</span>(unittest.TestCase):<br>        <span class="hljs-comment"># Testing Integers</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_add_numbers_int</span>(<span class="hljs-params">self</span>):<br>                <span class="hljs-built_in">sum</span> = arithmetic.add_numbers(<span class="hljs-number">50</span>, <span class="hljs-number">50</span>)<br>                self.assertEqual(<span class="hljs-built_in">sum</span>, <span class="hljs-number">100</span>)<br>        <span class="hljs-comment"># Testing Floats</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_add_numbers_float</span>(<span class="hljs-params">self</span>):<br>                <span class="hljs-built_in">sum</span> = arithmetic.add_numbers(<span class="hljs-number">50.55</span>, <span class="hljs-number">78</span>)<br>                self.assertEqual(<span class="hljs-built_in">sum</span>, <span class="hljs-number">128.55</span>)<br>        <span class="hljs-comment">#Testing Strings</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_add_numbers_strings</span>(<span class="hljs-params">self</span>):<br>                <span class="hljs-built_in">sum</span> = arithmetic.add_numbers(<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;python&#x27;</span>)<br>                self.assertEqual(<span class="hljs-built_in">sum</span>, <span class="hljs-string">&#x27;hellopython&#x27;</span>)<br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>        unittest.main()<br></code></pre></td></tr></table></figure><p>在以上脚本中，我们为add_numbers函数编写了三个测试用例。第一个是测试整型数字，第二个测试浮点数，第三个测试字符串。字符串的加法表示对字符串进行拼接。类似地，我们可以为减法、乘法和除法编写测试用例。</p><p>下面我们将运行test_addition.py测试脚本，在运行脚本后将可以看到运行的结果。</p><p>像下面这样运行脚本，可得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">vagrant@python-scripting:~$ python3 test_addition.py<br>...<br>----------------------------------------------------------------------<br>Ran 3 tests <span class="hljs-keyword">in</span> 0.000s<br> <br>OK<br></code></pre></td></tr></table></figure><p>这里我们得到的结果是OK，表示我们的测试是成功的。</p><p>不论何时运行测试脚本，我们可能得到的三种测试结果如下：</p><table><thead><tr><th>结果</th><th>描述</th></tr></thead><tbody><tr><td>OK</td><td>成功</td></tr><tr><td>FAIL</td><td>测试失败-抛出AssertionError异常</td></tr><tr><td>ERROR</td><td>抛出AssertionError以外的异常</td></tr></tbody></table><h2 id="单元测试中使用的方法"><a href="#单元测试中使用的方法" class="headerlink" title="单元测试中使用的方法"></a>单元测试中使用的方法</h2><p>使用unittest时，有一些方法可以在我们的脚本中使用。这些方法如下：</p><ul><li>assertEqual()和assertNotEqual()：检测预期结果</li><li>assertTrue()和assertFalse()：验证条件</li><li>assertRaises()：验证抛出指定的异常</li><li>setUp()和tearDown()：定义每个测试方法执行之前和之后的指令</li></ul><p>我们还可以在命令行中使用unittest模块。因此前述的测试脚本也可以这么运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">vagrant@python-scripting:~$ python3 -m unittest test_addition.py<br>...<br>----------------------------------------------------------------------<br>Ran 3 tests <span class="hljs-keyword">in</span> 0.001s<br> <br>OK<br></code></pre></td></tr></table></figure><p>下面我们来看另一个示例。我们创建两个脚本：if_example.py和test_if.py。if_example.py 是我们的常规脚本，test_if.py将包含测试用例。在这个测试中，我们检查所输入的数字是否等于100.如果等于100，我们的测试将会成功。否则应显示一个FAILED的结果。</p><p>创建一个if_example.py脚本并加入如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_if</span>():<br>        a = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter a number \n&quot;</span>))<br>        <span class="hljs-keyword">if</span>(a == <span class="hljs-number">100</span>):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a is equal to 100&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a is not equal to 100&quot;</span>)<br>        <span class="hljs-keyword">return</span> a<br></code></pre></td></tr></table></figure><p>现在来创建test_if.py测试脚本并编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> if_example<br><span class="hljs-keyword">import</span> unittest<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test_if</span>(unittest.TestCase):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_if</span>(<span class="hljs-params">self</span>):<br>                result = if_example.check_if()<br>                self.assertEqual(result, <span class="hljs-number">100</span>)<br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>        unittest.main()<br></code></pre></td></tr></table></figure><p>运行测试脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">vagrant@python-scripting:~/Chapter03$ python3 -m unittest test_if.py<br>Enter a number<br>100<br>a is equal to 100<br>.<br>----------------------------------------------------------------------<br>Ran 1 <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> 0.984s<br> <br>OK<br></code></pre></td></tr></table></figure><p>我们运行脚本获得了一个成功的测试结果。下面我们输入一个100以外的值，会得到一个FAILED的结果。运行脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">vagrant@python-scripting:~/Chapter03$ python3 -m unittest test_if.py<br>Enter a number<br>50<br>a is not equal to 100<br>F<br>======================================================================<br>FAIL: test_if (test_if.Test_if)<br>----------------------------------------------------------------------<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;/home/vagrant/Chapter03/test_if.py&quot;</span>, line 7, <span class="hljs-keyword">in</span> test_if<br>    self.assertEqual(result, 100)<br>AssertionError: 50 != 100<br> <br>----------------------------------------------------------------------<br>Ran 1 <span class="hljs-built_in">test</span> <span class="hljs-keyword">in</span> 0.638s<br> <br>FAILED (failures=1)<br></code></pre></td></tr></table></figure><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p>本章中我们学习了unittest，它是Python中的单元测试框架。我们还学习了如何创建单元测试中使用的测试用例和方法。</p><p>在下一章中，我们将学习如何自动化系统管理员的常规管理活动。我们将学习接收输入、处理密码、执行外部命令、读取配置文件、向脚本添加警告代码、设置CPU限制、网页浏览器启动、使用os模块以及进行备份。</p><p>☞☞☞ <a href="https://alanhou.org/automating-regular-administrative-activities/">第四章 自动化常规运维活动</a></p><h2 id="课后问题-1"><a href="#课后问题-1" class="headerlink" title="课后问题"></a>课后问题</h2><ol><li><p>什么是单元测试、自动化测试和手动测试？</p><p>点击查看</p><p>单元测试一种软件测试，可对软件中的单个单元&#x2F;组件进行测试。目的是验证软件的每个单元与执行效果与设计初衷一致。<br>自动化测试是种自动化技术，测试人员自己编写脚本并使用相应的软件来进行测试。基本上是一种手动操作的自动化过程。<br>手动测试是一种在软件程序中查找故障或 bug 的一种过程。在这种方法中，测试人员起到作为终端用户的重要作用，来验证应用功能是否正常运行。</p></li><li><p>unittest以外还有哪些替代模块？</p><p>点击查看</p><p>mock, nose, pytest.</p></li><li><p>编写测试用例的用处是什么？</p><p>点击查看</p><p>测试用例是一组执行用于验证软件应用具体特性或功能的动作。本文中讲解了如何设计测试用例以及各个组件的重要性。</p></li><li><p>什么是PEP8标准？</p><p>点击查看</p><p>PEP 8是Python的样式指南。有一组格式化Python代码的规则，来最大化改善代码可读性。按照规定编写代码有助于让众多代码编写人员编写大型项目。更为符合标准也可预测。</p></li></ol><h2 id="扩展阅读-2"><a href="#扩展阅读-2" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul><li>单元测试文档：<a href="https://docs.python.org/3/library/unittest.html">https://docs.python.org/3/library/unittest.html</a></li><li>Python中的PEP8编码标准：<a href="https://www.python.org/dev/peps/pep-0008/">https://www.python.org/dev/peps/pep-0008/</a></li></ul><h1 id="第四章-自动化常规运维活动"><a href="#第四章-自动化常规运维活动" class="headerlink" title="第四章 自动化常规运维活动"></a><a href="https://alanhou.org/automating-regular-administrative-activities/">第四章 自动化常规运维活动</a></h1><p>系统管理员有需要执行的各种各样管理活动。这些活动可能包含文件处理、日志、管理CPU和内存、密码处理以及最为重要的进行备份。需要自动化这些活动。本章中，我们将学习使用Python来自动化这些活动。</p><p>本章中，我们将讨论如下课题：</p><ul><li>通过重定向、管道和输入文件来接收输入</li><li>脚本中运行时密码处理</li><li>执行外部命令并获取输出</li><li>在运行时和验证时弹出密码输入</li><li>读取配置文件</li><li>在脚本中添加日志和警告代码</li><li>为CPU和内存使用设置上限</li><li>启动网页浏览器</li><li>使用os模块处理目录和文件</li><li>（使用 rsync）创建备份</li></ul><h2 id="通过重定向、管道和输入文件来接收输入"><a href="#通过重定向、管道和输入文件来接收输入" class="headerlink" title="通过重定向、管道和输入文件来接收输入"></a>通过重定向、管道和输入文件来接收输入</h2><p>在这部分中，我们将学习如何让用户接收通过重定向、管道和外部输入文件的输入。</p><p>对于接收重定向的输入，我们使用stdin。管道是另一种形式的重定向。这个概念是指将一个程序的输出作为另一个程序的输入。我们可以通过外部文件以及使用Python来接收输入。</p><h3 id="通过重定向输入"><a href="#通过重定向输入" class="headerlink" title="通过重定向输入"></a>通过重定向输入</h3><p>stdin和stdout是由os模块创建的对象。我们将编写一个脚本来使用到stdin和stdout。</p><p>创建一个名为redirection.py的脚本并编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Redirection</span>(<span class="hljs-title class_ inherited__">object</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, in_obj, out_obj</span>):<br>self.<span class="hljs-built_in">input</span> = in_obj<br>self.output = out_obj<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_line</span>(<span class="hljs-params">self</span>):<br>res = self.<span class="hljs-built_in">input</span>.readline()<br>self.output.write(res)<br><span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> sys.stdin.isatty():<br>sys.stdin = Redirection(in_obj=sys.stdin, out_obj=sys.stdout)<br>a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter a string: &quot;</span>)<br>b = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter another string: &quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Entered strings are:&#x27;</span>, <span class="hljs-built_in">repr</span>(a), <span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-built_in">repr</span>(b))<br><br></code></pre></td></tr></table></figure><p>运行以上程序如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Enter a string: aaa<br>Enter another string: bbb<br>Entered strings are: <span class="hljs-string">&#x27;aaa&#x27;</span> and <span class="hljs-string">&#x27;bbb&#x27;</span><br></code></pre></td></tr></table></figure><p>我们将得到如下的输出：</p><p>程序在交互会话中运行时，stdin是键盘输入，stdout是用户的终端。input()函数用于从用户接收输入，print()是一种写到终端(stdout)的方式。</p><h3 id="通过管道输入"><a href="#通过管道输入" class="headerlink" title="通过管道输入"></a>通过管道输入</h3><p>管道（pipe）是另一种形式的重定向。 这一技术用于从一个程序向另一个程序传递信息。符号 | 表示管道。通过使用管道技术，我们可以使用两个以上的命令，将一个命令的输出作为下一个命令的输入。</p><p>下面我们来看看如何使用管道来接收输入。首先我们要写一个返回向下整除的简单脚本。创建一个名为accept_by_pipe.py的脚本并加入如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> sys.stdin:<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(n.strip())//<span class="hljs-number">2</span>)<br><br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> 15|python3 accept_by_pipe.py <br>7<br></code></pre></td></tr></table></figure><p>在以上脚本中，stdin是一个键盘输入。我们执行对运行时中所输入的数字进行向下整除。向下整除仅返回商的整数部分。运行程序时，我们通过管道符号 | 传入了15，然后接我们的脚本名称。因此，我们将15作为脚本的输入。因此执行了向下整除，我们得到的结果是7。</p><p>我们可以向脚本传入多个输入。下面一个执行中，我们传入了多个输入值：15, 45和20。为处理多个输入值，我们在脚本中编写了一个 for 循环。因此首先将15作为输入，接着是45，然后是20。每个输入的输出会在新行中打印，因为我们在输入值之间加了\n。为开启对反斜线的解释，我们传入了-e 标记：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&#x27;15\n45\n20&#x27;</span> | python3 accept_by_pipe.py <br>7<br>22<br>10<br></code></pre></td></tr></table></figure><p>进行这个运行后，我们分别得到了15, 45和20向下整除的结果7, 22和10，每个结果另起一行。</p><h3 id="通过输入文件输入"><a href="#通过输入文件输入" class="headerlink" title="通过输入文件输入"></a>通过输入文件输入</h3><p>在这一部分中，我们将学习如何从输入文件中接收输入。Python中接收输入文件来作为输入更为容易。我们将通过示例来进行查看。但首先要创建一个名为 sample.txt 的 简单文本文件，并写入如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Hello WorldHello Python<br></code></pre></td></tr></table></figure><p>下面创建一个名为accept_by_input_file.py的脚本并编写如下的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/bin/env python</span><br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> genericpath <span class="hljs-keyword">import</span> samefile<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">if</span>  os.path.exists(<span class="hljs-string">&quot;sample.txt&quot;</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sample file is exist&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    os.system(<span class="hljs-string">&quot;touch sample_output.txt sample.txt&quot;</span>)<br>i = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;sample.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>o = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;sample_output.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br><br>a = i.read()<br>o.write(a)<br><br></code></pre></td></tr></table></figure><p>运行程序，我们将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 accept_by_input_file.py<br>sample file is exist<br>[liyupi@localhost Chapter04]$ <span class="hljs-built_in">cat</span> sample_output.txt <br> Hello WorldHello Python[liyupi@localhost Chapter04]$ <br></code></pre></td></tr></table></figure><h2 id="脚本中运行时密码处理"><a href="#脚本中运行时密码处理" class="headerlink" title="脚本中运行时密码处理"></a>脚本中运行时密码处理</h2><p>在这一部分中，我们来看看一个脚本中处理密码的简单示例。我们将创建一个名为handling_password.py的脚本并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> paramiko<br><span class="hljs-keyword">import</span> time<br><br>ip_address = <span class="hljs-string">&quot;192.168.10.241&quot;</span><br>username = <span class="hljs-string">&quot;liyupi&quot;</span><br>password = <span class="hljs-string">&quot;liyupi&quot;</span><br>ssh_client = paramiko.SSHClient()<br>ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br>ssh_client.load_system_host_keys()<br>ssh_client.connect(hostname=ip_address, username=username, password=password)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Successful connection&quot;</span>, ip_address)<br>ssh_client.invoke_shell()<br>remote_connection = ssh_client.exec_command(<span class="hljs-string">&#x27;cd Desktop; mkdir work\n&#x27;</span>)<br>remote_connnection = ssh_client.exec_command(<span class="hljs-string">&#x27;mkdir test_folder\n&#x27;</span>)<br><span class="hljs-comment"># print(remote_connection.read())</span><br>ssh_client.close<br><br></code></pre></td></tr></table></figure><p>运行以上脚本，将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 handling_password.py <br></code></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Successful connection 192.168.2.106<br></code></pre></td></tr></table></figure><p>在上述脚本中，我们使用了paramiko模块。这个paramiko模块是一个ssh的Python实现，提供了客户端的功能。安装paramiko命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install paramiko<br></code></pre></td></tr></table></figure><p>在前面的脚本中，我们远程连接了主机192.168.2.106。在脚本中提供了主机的用户名和密码。</p><p>在运行脚本之后，192.168.2.106的桌面上，可在192.168.2.106的home&#x2F;目录内找到work和test_folder两个文件夹。</p><p>译者注：<br>1、IP、用户名、密码等相关信息请自行修改，包括 cd 进入的目录也请根据实际进行修改<br>2、解决运行中的警告</p><p># 警告信息</p><p>CryptographyDeprecationWarning: encode_point has been deprecated on EllipticCurvePublicNumbers and will be removed in a future version. Please use EllipticCurvePublicKey.public_bytes to obtain both compressed and uncompressed point encoding.</p><p> # 原因：</p><p>这在 GitHub 是一个已知 issue，主要原因是默认安装的cryptography&#x3D;&#x3D;2.5弃用了一些 API</p><p># 解决方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 uninstall cryptography<br><br>pip3 install cryptography==2.4.2<br><br> <br><br><br></code></pre></td></tr></table></figure><h2 id="执行外部命令并获取输出"><a href="#执行外部命令并获取输出" class="headerlink" title="执行外部命令并获取输出"></a>执行外部命令并获取输出</h2><p>在这一部分中，我们将学习Python的子进程模块。使用subprocess，可以很容易地生成新的进程并获取它们的返回码，执行外部命令和启用新的应用。</p><p>我们来看看如何通过subprocess模块执行外部命令并获取它们的输出。我们将创建一个名为execute_external_commands.py的脚本并编写如下脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<br>subprocess.call([<span class="hljs-string">&quot;touch&quot;</span>, <span class="hljs-string">&quot;sample.txt&quot;</span>])<br>subprocess.call([<span class="hljs-string">&quot;ls&quot;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Sample file created&quot;</span>)<br>subprocess.call([<span class="hljs-string">&quot;rm&quot;</span>, <span class="hljs-string">&quot;sample.txt&quot;</span>])<br>subprocess.call([<span class="hljs-string">&quot;ls&quot;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Sample file deleted&quot;</span>)<br></code></pre></td></tr></table></figure><p>运行程序，我们将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 execute_external_commands.py<br>accept_by_input_file.py       handling_password.py  sample.txt<br>accept_by_pipe.py      redirection.py<br>execute_external_commands.py  sample_output.txt<br>Sample file created<br>accept_by_input_file.py  execute_external_commands.py  redirection.py<br>accept_by_pipe.py handling_password.py       sample_output.txt<br>Sample file deleted<br></code></pre></td></tr></table></figure><h2 id="使用子进程模块捕获输出"><a href="#使用子进程模块捕获输出" class="headerlink" title="使用子进程模块捕获输出"></a>使用子进程模块捕获输出</h2><p>在这一部分中，我们将学习如何捕获输出。我们可以传递PIPE作为标准输出stdout的参数来捕获输出。。编写名为capture_output.py的脚本并添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> subprocess<br>res = subprocess.run([<span class="hljs-string">&#x27;ls&#x27;</span>, <span class="hljs-string">&#x27;-l&#x27;</span>], stdout=subprocess.PIPE,)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;returncode:&#x27;</span>, res.returncode)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; bytes in stdout:\n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(res.stdout), res.stdout.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)))<br></code></pre></td></tr></table></figure><p>执行如下命令运行脚本：</p><p>python3 capture_output.py</p><p>通过执行，将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 capture_output.py<br>returncode: 0<br>1491 bytes <span class="hljs-keyword">in</span> stdout:<br>total 92<br></code></pre></td></tr></table></figure><p>译者注：考虑版面以及与原书一致，以上在运行时去除了代码中的-l 参数</p><p>在以上脚本中，我们导入了Python的subprocess模块，有助于输出的捕获。子进程模块用于创建新的进程。它还有且于连接输入&#x2F;输出管道并获取返回码。subprocess.run()运行作为参数传入的命令。returncode 是子进程的返回状态。在输出中，如果得到了返回码0，表示成功运行。</p><h2 id="在运行时和验证时弹出密码输入"><a href="#在运行时和验证时弹出密码输入" class="headerlink" title="在运行时和验证时弹出密码输入"></a>在运行时和验证时弹出密码输入</h2><p>这一部分我们将学习getpass模块来在运行时处理密码。Python中的getpass()模块弹出让用户输入密码并不进行打印。getpass模块用于终端中程序需要处理密码弹出的用户交互。</p><p>我们来看看一些有关如何使用getpass模块的示例：</p><p>1、创建名为no_prompt.py的脚本并编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><br><span class="hljs-keyword">import</span> getpass<br><span class="hljs-keyword">try</span>:<br>        p = getpass.getpass()<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> error:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ERROR&#x27;</span>, error)<br><span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Password entered:&#x27;</span>, p)<br></code></pre></td></tr></table></figure><p>这个脚本中，我们没为用户提供提示文件。因此默认的提示内容为Password。</p><p>运行脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 no_prompt.py <br>Password: <br>Password entered: aaa<br></code></pre></td></tr></table></figure><p>2、我们将为密码输出添加提示文本。创建一个名为with_prompt.py的脚本并编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> getpass<br><span class="hljs-keyword">try</span>:<br>p = getpass.getpass(<span class="hljs-string">&quot;Enter your password:&quot;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> error:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ERROR&#x27;</span>, error)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Password entered:&#x27;</span>, p)<br><br></code></pre></td></tr></table></figure><p>这样我们就编写了一个带有密码输入提示文本的脚本。运行程序如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 with_prompt.py <br>Enter your password:<br>Password entered: abcd<br></code></pre></td></tr></table></figure><p>这里，我们为用户提供了一个Enter your password 的提示。</p><p>现在我们来编写一个脚本，如果密码输入错误，将打印一条普通消息，并不再弹出输入正确密码的提示。</p><p>3、编写一个名为getpass_example.py的脚本并添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> getpass<br>passwd = getpass.getpass(prompt=<span class="hljs-string">&#x27;Enter your password:&#x27;</span>)<br><span class="hljs-keyword">if</span> passwd.lower() == <span class="hljs-string">&#x27;#pythonworld&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Welcome!!&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The password entered is incorrect!!&#x27;</span>)<br></code></pre></td></tr></table></figure><p>运行程序如下（此处我们输入正确的密码，即#pythonworld）：</p><p>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">python getpass_example.py<br>Enter your password:<br>The password entered is incorrect!!<br></code></pre></td></tr></table></figure><p>如果我们输入一个错误的密码，查看得到的消息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">python getpass_example.py<br>Enter your password:<br>Welcome!!<br></code></pre></td></tr></table></figure><p>这里我们编写的脚本在密码输入错误时不会再要求重新输入密码。</p><p>下面我们再来编写一个脚本，在密码输入错误时要求重新输入正确的密码。为获取登录用户，我们使用了getuser()。getuser()函数将返回系统登录的用户。创建一个名为password_prompt_again.py的脚本并编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> getpass<br>user_name = getpass.getuser()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;User Name : %s&#x27;</span> % user_name)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        passwd = getpass.getpass(<span class="hljs-string">&#x27;Enter your password : &#x27;</span>)<br>        <span class="hljs-keyword">if</span> passwd == <span class="hljs-string">&#x27;#pythonworld&#x27;</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Welcome!!!&#x27;</span>)<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The password you entered is incorrect.&#x27;</span>)<br></code></pre></td></tr></table></figure><p>运行程序，将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 password_prompt_again.py<br>User Name : student<br>Enter your password :<br>The password you entered is incorrect.<br>Enter your password :<br>Welcome!!!<br></code></pre></td></tr></table></figure><h2 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h2><p>这一部分中我们将学习Python中的configparser模块。通过使用configparser模块，我们可以管理应用的用户可编辑配置文件。</p><p>这些配置文件常用于用户或系统管理人员通过普通文本编辑器来编辑文件设置应用的一些默认值，然后应用会读取并解析文件，根据文件中写入的内容来进行运行。</p><p>读取配置文件可使用configparser中的read()方法。下面我们编写一个名为read_config_file.py的普通脚本。在这之前，编写一个名为read_simple.ini 的.ini文件并加入如下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[bug_tracker]</span><br><span class="hljs-attr">url</span> = https://www.baidu.com/<br></code></pre></td></tr></table></figure><p>创建 read_config_file.py并添加如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> configparser <span class="hljs-keyword">import</span> ConfigParser<br>p = ConfigParser()<br>p.read(<span class="hljs-string">&#x27;read_simple.ini&#x27;</span>)<br><span class="hljs-built_in">print</span>(p.get(<span class="hljs-string">&#x27;bug_tracker&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>))<br></code></pre></td></tr></table></figure><p>运行read_config_file.py，我们将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 read_config_file.py<br> <br><span class="hljs-comment"># 输出结果：</span><br>https://www.baidu.com/<br></code></pre></td></tr></table></figure><p>read()方法可接收一个以上的文件名。对每个文件名进行扫描并且该文件存在时，就会打开并读取。下面我们编写脚本来读取一个以上的文件名。创建名为read_many_config_file.py的脚本并编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> configparser <span class="hljs-keyword">import</span> ConfigParser<br><span class="hljs-keyword">import</span> glob<br> <br>p = ConfigParser()<br>files = [<span class="hljs-string">&#x27;hello.ini&#x27;</span>, <span class="hljs-string">&#x27;bye.ini&#x27;</span>, <span class="hljs-string">&#x27;read_simple.ini&#x27;</span>, <span class="hljs-string">&#x27;welcome.ini&#x27;</span>]<br>files_found = p.read(files)<br>files_missing = <span class="hljs-built_in">set</span>(files) - <span class="hljs-built_in">set</span>(files_found)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Files found: &#x27;</span>, <span class="hljs-built_in">sorted</span>(files_found))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Files missing: &#x27;</span>, <span class="hljs-built_in">sorted</span>(files_missing))<br></code></pre></td></tr></table></figure><p>运行以上脚本，我们将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 read_many_config_file.py<br> <br><span class="hljs-comment"># 输出结果：</span><br>Files found:  [<span class="hljs-string">&#x27;read_simple.ini&#x27;</span>]<br>Files missing:  [<span class="hljs-string">&#x27;bye.ini&#x27;</span>, <span class="hljs-string">&#x27;hello.ini&#x27;</span>, <span class="hljs-string">&#x27;welcome.ini&#x27;</span>]<br></code></pre></td></tr></table></figure><p>在上面的例子中，我们使用了Python中的configparser模块，它有助于管理配置文件。首先我们创建一个名为files的列表。read()函数将读取配置文件。在本例中，我们创建了一名为files_found的变量，用于存储目录中存在的配置文件名。接着我们创建了另一个名为files_missing的变量，用于返回目录中不存在的文件名。最后，我们打印出了存在和不存在的文件名。</p><h2 id="在脚本中添加日志和警告代码"><a href="#在脚本中添加日志和警告代码" class="headerlink" title="在脚本中添加日志和警告代码"></a>在脚本中添加日志和警告代码</h2><p>这一部分中我们学习Python中的日志和警告模块。logging模块将记录程序中发生的事件。warnings向编程人员发出语言和库中发生的变化的警告。</p><p>下面我们来看一个简单的日志示例。我们将编写一个名为logging_example.py的脚本并编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br> <br>LOG_FILENAME = <span class="hljs-string">&#x27;log.txt&#x27;</span><br>logging.basicConfig(filename=LOG_FILENAME, level=logging.DEBUG,)<br>logging.debug(<span class="hljs-string">&#x27;This message should go to the log file.&#x27;</span>)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(LOG_FILENAME, <span class="hljs-string">&#x27;rt&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        prg = f.read()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;FILE:&#x27;</span>)<br><span class="hljs-built_in">print</span>(prg)<br></code></pre></td></tr></table></figure><p>运行程序如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">python3</span> logging_example.<span class="hljs-keyword">py</span><br> <br># 输出结果：<br>FILE:<br>DEBUG:roo<span class="hljs-variable">t:This</span> message should <span class="hljs-keyword">go</span> <span class="hljs-keyword">to</span> the <span class="hljs-built_in">log</span> <span class="hljs-keyword">file</span>.<br></code></pre></td></tr></table></figure><p>查看 log.txt，我们可以看到脚本中打印的调试信息：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">cat</span> <span class="hljs-built_in">log</span>.txt<br> <br># 输出结果： <br>DEBUG:roo<span class="hljs-variable">t:This</span> message should <span class="hljs-keyword">go</span> <span class="hljs-keyword">to</span> the <span class="hljs-built_in">log</span> <span class="hljs-keyword">file</span>.<br></code></pre></td></tr></table></figure><p>下面我们编写一个名为logging_warnings_codes.py的脚本并添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> warnings<br> <br>logging.basicConfig(level=logging.INFO,)<br>warnings.warn(<span class="hljs-string">&#x27;This warning is not sent to the logs&#x27;</span>)<br>logging.captureWarnings(<span class="hljs-literal">True</span>)<br>warnings.warn(<span class="hljs-string">&#x27;This warning is sent to the logs&#x27;</span>)<br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">$ python3 logging_warnings_codes.py<br> <br># 输出结果：<br>logging_warnings_codes.py:<span class="hljs-number">5</span>: UserWarning: This <span class="hljs-literal">warning</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> sent <span class="hljs-keyword">to</span> the logs<br>  warnings.warn(<span class="hljs-symbol">&#x27;This</span> <span class="hljs-literal">warning</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> sent <span class="hljs-keyword">to</span> the logs&#x27;)<br><span class="hljs-literal">WARNING</span>:py.warnings:logging_warnings_codes.py:<span class="hljs-number">7</span>: UserWarning: This <span class="hljs-literal">warning</span> <span class="hljs-keyword">is</span> sent <span class="hljs-keyword">to</span> the logs<br>  warnings.warn(<span class="hljs-symbol">&#x27;This</span> <span class="hljs-literal">warning</span> <span class="hljs-keyword">is</span> sent <span class="hljs-keyword">to</span> the logs&#x27;)<br></code></pre></td></tr></table></figure><h3 id="生成警告"><a href="#生成警告" class="headerlink" title="生成警告"></a>生成警告</h3><p>warn()用于生成警告。下面我们来看一个生成警告的简单示例。编写名为generate_warnings.py的脚本并加入如下代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import warnings<br> <br>warnings<span class="hljs-selector-class">.simplefilter</span>(<span class="hljs-string">&#x27;error&#x27;</span>, UserWarning)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&#x27;Before&#x27;</span>)</span></span><br>warnings<span class="hljs-selector-class">.warn</span>(<span class="hljs-string">&#x27;Write your warning message here&#x27;</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&#x27;after&#x27;</span>)</span></span><br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> generate_warnings.<span class="hljs-keyword">py</span><br> <br># 运行结果：<br>Before<br>Traceback (most recent <span class="hljs-keyword">call</span> <span class="hljs-keyword">last</span>):<br>  File <span class="hljs-string">&quot;generate_warnings.py&quot;</span>, <span class="hljs-built_in">line</span> <span class="hljs-number">5</span>, in <span class="hljs-symbol">&lt;module&gt;</span><br>    warnings.warn(<span class="hljs-string">&#x27;Write your warning message here&#x27;</span>)<br>UserWarning: Write your warning message here<br></code></pre></td></tr></table></figure><p>在上面的脚本中，我们通过warn()传入了一条警告消息。我们使用了一个简单过滤器，这样我们的警告会作为 error 来处理，该错误将由编程人员进行相应的处理。</p><h2 id="为CPU和内存使用设置上限"><a href="#为CPU和内存使用设置上限" class="headerlink" title="为CPU和内存使用设置上限"></a>为CPU和内存使用设置上限</h2><p>这部分中我们将学习如何设置 CPU和内存的使用限制。首先编写一个放置CPU使用限制的脚本。创建一个名为put_cpu_limit.py的脚本并添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> resource<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> signal<br><span class="hljs-keyword">import</span> time<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">time_expired</span>(<span class="hljs-params">n, stack</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;EXPIRED :&#x27;</span>, time.ctime())<br>        <span class="hljs-keyword">raise</span> SystemExit(<span class="hljs-string">&#x27;(time ran out)&#x27;</span>)<br>signal.signal(signal.SIGXCPU, time_expired)<br><span class="hljs-comment"># Adjust the CPU time limit</span><br>soft, hard = resource.getrlimit(resource.RLIMIT_CPU)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Soft limit start as :&#x27;</span>, soft)<br>resource.setrlimit(resource.RLIMIT_CPU, (<span class="hljs-number">10</span>, hard))<br>soft, hard = resource.getrlimit(resource.RLIMIT_CPU)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Soft limit changed to :&#x27;</span>, soft)<br><span class="hljs-built_in">print</span>()<br><span class="hljs-comment"># Consume some CPU time in a pointless exercise</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Starting:&#x27;</span>, time.ctime())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">200000</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">200000</span>):<br>                v = i * i<br><span class="hljs-comment"># We should never make it this far</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Exiting :&#x27;</span>, time.ctime())<br></code></pre></td></tr></table></figure><p>运行上述脚本如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">python3 put_cpu_limit.py</span><br>Soft limit start as : -1<br>Soft limit changed to : 10<br> <br>Starting: Sun Feb 24 23:57:27 2019<br>EXPIRED : Sun Feb 24 23:57:37 2019<br>(time ran out)<br></code></pre></td></tr></table></figure><p>译者注：实际运行结果可能不是10秒，Alan 在本地一台资源有限的虚拟机上运行打印时间相关15秒，而 Mac 本机上则刚好10秒</p><p>在前面的脚本中，我们使用了setrlimit()来限制CPU的使用。在我们脚本中所设置的限制为10秒。</p><h2 id="启动网页浏览器"><a href="#启动网页浏览器" class="headerlink" title="启动网页浏览器"></a>启动网页浏览器</h2><p>这一部分中，我们将学习Python中的webbrowser模块。这一模块中带有可以在浏览器应用中打开URL的函数。我们来看一个简单的示例。创建一个名为open_web.py的脚本，并添加如下代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> webbrowser<br>webbrowser.<span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span>)<br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">python3</span> open_web.<span class="hljs-keyword">py</span><br> <br>运行结果如下:<br>Url mentioned in <span class="hljs-keyword">open</span>() will <span class="hljs-keyword">be</span> opened in your browser.<br>webbrowser – Command <span class="hljs-built_in">line</span> interface<br></code></pre></td></tr></table></figure><p>译者注：实际在 MacOS 上测试未输出相关信息，命令行仅输出 True，虚拟机命令行进入，未安装浏览器，无返回内容</p><p>我们还可以通过命令行来使用Python的webbrowser模块，可以使用所有的功能。要在命令行中使用webbrowser，运行命令如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">python3 -m webbrowser -n https:<span class="hljs-regexp">//</span>www.baidu.com/<br></code></pre></td></tr></table></figure><p>这里，<a href="https://www.baidu.com/">https://www.baidu.com/</a> 会在一个浏览窗口中进行打开。我们可以使用如下两个选项：</p><ul><li>-n：新窗口打开</li><li>-t：新标签页打开</li></ul><h2 id="使用os模块处理目录和文件"><a href="#使用os模块处理目录和文件" class="headerlink" title="使用os模块处理目录和文件"></a>使用os模块处理目录和文件</h2><p>这一部分中，我们将学习Python中的os模块。Python的os模块有助于实现操作系统任务。要想实现这些操作系统任务，我们需要导入os模块。</p><p>我们来看一些处理文件和目录相关示例：</p><h3 id="创建和删除模块"><a href="#创建和删除模块" class="headerlink" title="创建和删除模块"></a>创建和删除模块</h3><p>这一部分中，我们将创建一个脚本来看可在文件系统中处理目录的函数，包含创建、列出和删除其中内容。创建一个名为os_dir_example.py的脚本并编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br> <br>directory_name = <span class="hljs-string">&#x27;abcd&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Creating&#x27;</span>, directory_name)<br>os.makedirs(directory_name)<br>file_name = os.path.join(directory_name, <span class="hljs-string">&#x27;sample_example.txt&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Creating&#x27;</span>, file_name)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_name, <span class="hljs-string">&#x27;wt&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(<span class="hljs-string">&#x27;sample example file&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Cleaning up&#x27;</span>)<br>os.unlink(file_name)<br>os.rmdir(directory_name) <span class="hljs-comment"># Will delete the directory</span><br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 os_dir_example.py<br> <br><span class="hljs-comment"># 输出结果：</span><br>Creating abcd<br>Creating abcd/sample_example.txt<br>Cleaning up<br></code></pre></td></tr></table></figure><p>使用mkdir()创建目录时，其所有父目录必须已经被创建。但在使用makedirs()创建目录时，会创建任意目录，即便是指定的路径并不存在。unlink()会删除文件路径， rmdir()会删除目录路径。</p><h3 id="检查文件系统内容"><a href="#检查文件系统内容" class="headerlink" title="检查文件系统内容"></a>检查文件系统内容</h3><p>这一部分中，我们将使用 listdir()列出目录中的所有内容。创建一个名为list_dir.py的脚本并编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br> <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(os.listdir(sys.argv[<span class="hljs-number">1</span>])))<br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ python3 list_dir.py <span class="hljs-regexp">/home/</span>student<br> <br><span class="hljs-comment"># 输出结果：</span><br>[<span class="hljs-string">&#x27;.bash_history&#x27;</span>, <span class="hljs-string">&#x27;.bash_logout&#x27;</span>, <span class="hljs-string">&#x27;.bashrc&#x27;</span>, <span class="hljs-string">&#x27;.cache&#x27;</span>, <span class="hljs-string">&#x27;.local&#x27;</span>, <span class="hljs-string">&#x27;.profile&#x27;</span>, <span class="hljs-string">&#x27;.python_history&#x27;</span>, <span class="hljs-string">&#x27;.ssh&#x27;</span>, <span class="hljs-string">&#x27;.viminfo&#x27;</span>, <span class="hljs-string">&#x27;Chapter01&#x27;</span>, <span class="hljs-string">&#x27;Chapter02&#x27;</span>, <span class="hljs-string">&#x27;Chapter03&#x27;</span>, <span class="hljs-string">&#x27;Chapter04&#x27;</span>, <span class="hljs-string">&#x27;__pycache__&#x27;</span>]<br></code></pre></td></tr></table></figure><p>通过使用listdir()，我们可以列出文件夹中的所有内容。</p><h2 id="（使用-rsync）创建备份"><a href="#（使用-rsync）创建备份" class="headerlink" title="（使用 rsync）创建备份"></a>（使用 rsync）创建备份</h2><p>这是系统运维人员要做的最重要的工作。这一部分中，我们将学习使用rsync来进行备份。rsync命令用于拷贝本地和远程的文件和目录，并使用rsync执行数据备份。为此，我们来编写一个名为take_backup.py的脚本并编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> shutil<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> sh <span class="hljs-keyword">import</span> rsync<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_dir</span>(<span class="hljs-params">os_dir</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(os_dir):<br>                <span class="hljs-built_in">print</span>(os_dir, <span class="hljs-string">&#x27;does not exist.&#x27;</span>)<br>                exit(<span class="hljs-number">1</span>)<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ask_for_confirm</span>():<br>        ans = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Do you want to Continue? yes/no\n&#x27;</span>)<br>        <span class="hljs-keyword">global</span> con_exit<br>        <span class="hljs-keyword">if</span> ans == <span class="hljs-string">&#x27;yes&#x27;</span>:<br>                con_exit = <span class="hljs-number">0</span><br>                <span class="hljs-keyword">return</span> con_exit<br>        <span class="hljs-keyword">elif</span> ans == <span class="hljs-string">&#x27;no&#x27;</span>:<br>                con_exit = <span class="hljs-number">1</span><br>                <span class="hljs-keyword">return</span> con_exit<br>        <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Answer with yes or no.&#x27;</span>)<br>                ask_for_confirm()<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete_files</span>(<span class="hljs-params">ending</span>):<br>        <span class="hljs-keyword">for</span> r, d, f <span class="hljs-keyword">in</span> os.walk(backup_dir):<br>                <span class="hljs-keyword">for</span> files <span class="hljs-keyword">in</span> f:<br>                        <span class="hljs-keyword">if</span> files.endswith(<span class="hljs-string">&#x27;.&#x27;</span> + ending):<br>                                os.remove(os.path.join(r, files))<br> <br>backup_dir = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Enter directory to backup\n&#x27;</span>) <span class="hljs-comment"># Enter directory name</span><br>check_dir(backup_dir)<br><span class="hljs-built_in">print</span>(backup_dir, <span class="hljs-string">&#x27;saved.&#x27;</span>)<br>time.sleep(<span class="hljs-number">3</span>)<br>backup_to_dir = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Where to backup?\n&#x27;</span>)<br>check_dir(backup_to_dir)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Doing the backup now!&#x27;</span>)<br>ask_for_confirm()<br><span class="hljs-keyword">if</span> con_exit == <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Aborting the backup process!&#x27;</span>)<br>        exit(<span class="hljs-number">1</span>)<br>rsync(<span class="hljs-string">&#x27;-auhv&#x27;</span>, <span class="hljs-string">&#x27;--delete&#x27;</span>, <span class="hljs-string">&#x27;--exclude=list+found&#x27;</span>, <span class="hljs-string">&#x27;--exclude=/sys&#x27;</span>, <span class="hljs-string">&#x27;--exclude=/tmp&#x27;</span>, <span class="hljs-string">&#x27;--exclude=/proc&#x27;</span>, <span class="hljs-string">&#x27;--exclude=/mnt&#x27;</span>, <span class="hljs-string">&#x27;--exclude=/dev&#x27;</span>, <span class="hljs-string">&#x27;--exclude=/backup&#x27;</span>, backup_dir, backup_to_dir)<br></code></pre></td></tr></table></figure><p>运行脚本结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 take_backup.py<br>Enter directory to backup<br>/home/student/work<br>/home/student/work saved.<br>Where to backup?<br>/home/student/Desktop<br>Doing the backup now!<br>Do you want to Continue? <span class="hljs-built_in">yes</span>/no<br><span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><p>译者注：<br>1、如提示 ImportError: No module named ‘sh’请执行 pip3 install sh<br>2、Deskstop目录需自行创建</p><p>现在查看Desktop&#x2F;目录，你会在该目录中发现 work 文件夹。rsync使用了一些选项，具体如下：</p><ul><li>-a: 存档</li><li>-u: 升级</li><li>-h: 易于阅读的格式</li><li>-v: 详细信息（verbose）</li><li>–delete: 在接收端删除不相关文件</li><li>–exclude: 排队规则</li></ul><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><p>本章中我们学习了如何来自动化常规的运行任务。学习了通过不同技术来接收输入：运行时提示密码输入、执行外部命令、读取配置文件、在脚本中添加警告、通过脚本和命令行启动浏览器、使用os模块处理文件和目录，以及进行备份。</p><p>下一章中，我们将学习os和处理数据的相关知识。同时我们还会学习tarfile模块以及如何进行使用。</p><p>☞☞☞ <a href="https://alanhou.org/handling-files-directories-data/">第五章 文件、目录和数据处理</a></p><h2 id="课后问题-2"><a href="#课后问题-2" class="headerlink" title="课后问题"></a>课后问题</h2><ol><li><p>如何使用readline模块？</p></li><li><p>读取、创建新文件、删除文件、列出当前目录文件的Linux命令分别是什么？</p><p>cat、touch、rm、ls</p></li><li><p>Python 中的哪些包可用于运行 Linux&#x2F;Windows 命令？</p><p>os </p></li><li><p>如何读取或为配置文件 init 设置新值？</p></li><li><p>列出可用于查看 CPU 使用情况的库？</p></li><li><p>列出从用户接收输入的不同方法？</p></li><li><p>sort和sorted之间的区别是什么？</p></li></ol><h1 id="第五章-文件、目录和数据处理"><a href="#第五章-文件、目录和数据处理" class="headerlink" title="第五章 文件、目录和数据处理"></a>第五章 文件、目录和数据处理</h1><p>   系统运维人员会执行一些如处理不同文件、目录和数据的任务。本章中，我们将学习os模块。os模块提供了与操作系统进行交互的功能。Python编程人员可轻易地使用os模块来执行文件和目录操作。os模块为程序员提供了处理文件、路径、目录和数据的工具。</p><p>   本章中我们将学习如下内容：</p><ul><li>使用os模块来处理目录</li><li>复制、移动、重命名和删除数据</li><li>处理路径、目录和文件</li><li>对比数据</li><li>合并数据</li><li>模式匹配文件和目录</li><li>元数据：数据的数据</li><li>压缩和还原</li><li>使用tarfile模块来创建TAR存档</li><li>使用tarfile模块来检查TAR文件内容</li></ul><h2 id="使用os模块来处理目录"><a href="#使用os模块来处理目录" class="headerlink" title="使用os模块来处理目录"></a>使用os模块来处理目录</h2><p>   目录或文件夹是一个文件和子目录的集合。os模块提供了允许我们与操作系统交互的不同函数。这一部分中，我们将学习可在处理目录时使用的一些函数。</p><h3 id="获取工作目录"><a href="#获取工作目录" class="headerlink" title="获取工作目录"></a>获取工作目录</h3><p>   要开始对目录进行处理，首先我们会获取当前工作目录的名称。os有一个getcwd()函数，使用它我们可以获取到当前的工作目录。启动python3终端并输入如下命令来获取当前目录名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">$ python3<br>Python <span class="hljs-number">3.5</span><span class="hljs-number">.2</span> (default, Nov <span class="hljs-number">12</span> <span class="hljs-number">2018</span>, <span class="hljs-number">13</span>:<span class="hljs-number">43</span>:<span class="hljs-number">14</span>)<br>[GCC <span class="hljs-number">5.4</span><span class="hljs-number">.0</span> <span class="hljs-number">20160609</span>] on linux<br><span class="hljs-type">Type</span> <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> os<br><span class="hljs-meta">&gt;&gt;&gt; </span>os.getcwd()<br><span class="hljs-string">&#x27;/home/student/Chapter05&#x27;</span><br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><h3 id="更换目录"><a href="#更换目录" class="headerlink" title="更换目录"></a>更换目录</h3><p>   使用os模块，我们可以更换当前工作目录。os模块中有一个chdir()函数可用于实现，示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>os.chdir(<span class="hljs-string">&#x27;/home/student&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(os.getcwd())<br>/home/student<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><h3 id="列出文件和目录"><a href="#列出文件和目录" class="headerlink" title="列出文件和目录"></a>列出文件和目录</h3><p>   列出目录内容在Python中也很容易。我们将使用os中带有的listdir()函数，它会返回当前工作目录的文件和目录名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>os.chdir(<span class="hljs-string">&#x27;/home/student&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>os.listdir()<br>[<span class="hljs-string">&#x27;Chapter05&#x27;</span>, <span class="hljs-string">&#x27;Chapter03&#x27;</span>, <span class="hljs-string">&#x27;.python_history&#x27;</span>, <span class="hljs-string">&#x27;__pycache__&#x27;</span>, <span class="hljs-string">&#x27;Chapter01&#x27;</span>, <span class="hljs-string">&#x27;Desktop&#x27;</span>, <span class="hljs-string">&#x27;Chapter04&#x27;</span>, <span class="hljs-string">&#x27;Chapter02&#x27;</span>, <span class="hljs-string">&#x27;.cache&#x27;</span>, <span class="hljs-string">&#x27;.local&#x27;</span>, <span class="hljs-string">&#x27;.ssh&#x27;</span>, <span class="hljs-string">&#x27;.bash_history&#x27;</span>, <span class="hljs-string">&#x27;.bash_lo</span><br></code></pre></td></tr></table></figure><h3 id="重命名目录"><a href="#重命名目录" class="headerlink" title="重命名目录"></a>重命名目录</h3><p>   Python中的os模块有一个rename()函数，可帮助更换目录的名称：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>os.mkdir(<span class="hljs-string">&#x27;work&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>os.rename(<span class="hljs-string">&#x27;work&#x27;</span>, <span class="hljs-string">&#x27;work1&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>os.listdir()<br>[<span class="hljs-string">&#x27;Chapter05&#x27;</span>, <span class="hljs-string">&#x27;Chapter03&#x27;</span>, <span class="hljs-string">&#x27;.python_history&#x27;</span>, <span class="hljs-string">&#x27;__pycache__&#x27;</span>, <span class="hljs-string">&#x27;Chapter01&#x27;</span>, <span class="hljs-string">&#x27;Desktop&#x27;</span>, <span class="hljs-string">&#x27;Chapter04&#x27;</span>, <span class="hljs-string">&#x27;Chapter02&#x27;</span>, <span class="hljs-string">&#x27;.cache&#x27;</span>, <span class="hljs-string">&#x27;work1&#x27;</span>, <span class="hljs-string">&#x27;.local&#x27;</span>, <span class="hljs-string">&#x27;.ssh&#x27;</span>, <span class="hljs-string">&#x27;.bash_history&#x27;</span>, <span class="hljs-string">&#x27;.bash_logout&#x27;</span>, <span class="hljs-string">&#x27;.bashrc&#x27;</span>, <span class="hljs-string">&#x27;.viminfo&#x27;</span>, <span class="hljs-string">&#x27;.profile&#x27;</span>]<br></code></pre></td></tr></table></figure><h2 id="复制、移动、重命名和删除数据"><a href="#复制、移动、重命名和删除数据" class="headerlink" title="复制、移动、重命名和删除数据"></a>复制、移动、重命名和删除数据</h2><p>   我们将学习系统运维人员处理数据的四个基本操作，即复制、移动、重命名和删除。Python内置一个名为shutil的模块，用于执行这些任务。使用shutil模块，我们也可以对数据执行更高级别的操作。在我们的程序中使用shutil模块，只需要编写import shutil导入语句即可。shutil模块提供了一些支持文件复制和删除操作的函数。我们来逐一学习这些操作。</p><h3 id="复制数据"><a href="#复制数据" class="headerlink" title="复制数据"></a>复制数据</h3><p>   这一部分中，我们将来看如何使用shutil模块来复制文件。首先，我们会创建一个hello.py文件并在其它编写一些文本内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># hello.py</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World\n&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello Python\n&quot;</span>)<br></code></pre></td></tr></table></figure><p>   现在我们会在shutil_copy_example.py脚本中编写复制的代码。在其中编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> shutil<br><span class="hljs-keyword">import</span> os<br> <br>shutil.copy(<span class="hljs-string">&#x27;hello.py&#x27;</span>, <span class="hljs-string">&#x27;welcome.py&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Copy Successful&#x27;</span>)<br></code></pre></td></tr></table></figure><p>   运行脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python shutil_copy_example.py<br> <br><span class="hljs-comment"># 输出结果</span><br>Copy Successful<br></code></pre></td></tr></table></figure><p>   查看welcome.py脚本，我们会发现welcome.py中已成功地拷贝了hello.py中的内容。</p><h3 id="移动-x2F-剪切数据"><a href="#移动-x2F-剪切数据" class="headerlink" title="移动&#x2F;剪切数据"></a>移动&#x2F;剪切数据</h3><p>   这里我们来看如何剪切数据。实现剪切我们可以使用shutil.move()。shutil.move(source, destination可以将文件从源地址移动到目的地址。下面我们来创建一个shutil_move_example.py脚本并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> shutil<br>shutil.move(<span class="hljs-string">&#x27;/home/student/sample.txt&#x27;</span>, <span class="hljs-string">&#x27;/home/student/Desktop/.&#x27;</span>)<br></code></pre></td></tr></table></figure><p>   运行脚本如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><br>$ <span class="hljs-keyword">python3</span> shutil_move_example.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>   这一脚本中，我们剪切的文件为sample.txt，在&#x2F;home&#x2F;student 目录中。&#x2F;home&#x2F;student是我们的源文件夹&#x2F;home&#x2F;student&#x2F;Desktop是我们目的文件夹。因此，在运行脚本后，sample.txt会从&#x2F;home&#x2F;student剪切到&#x2F;home&#x2F;student&#x2F;Desktop目录中。</p><h3 id="重命名数据"><a href="#重命名数据" class="headerlink" title="重命名数据"></a>重命名数据</h3><p>   在前面的部分中，我们学习了如何使用shutil.move()来将文件由源目录移动到目标目录。使用shutil.move()可对文件进行重命名。创建一个shutil_rename_example.py脚本并添加如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> shutil<br>shutil.move(<span class="hljs-string">&#x27;hello.py&#x27;</span>, <span class="hljs-string">&#x27;hello_renamed.py&#x27;</span>)<br></code></pre></td></tr></table></figure><p>   运行脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 shutil_rename_example.py<br> <br><span class="hljs-comment"># 无输出</span><br></code></pre></td></tr></table></figure><p>   现在查看文件名，会被重命名为hello_renamed.py。</p><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>   我们将学习如何使用Python中的os模块删除文件和文件夹。os模块中的remove()方法将删除文件。如果尝试使用该方法删除目录将会返回OSError。要删除目录，使用rmdir()。</p><p>   下面创建一个os_remove_file_directory.py脚本并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br> <br>os.chdir(<span class="hljs-string">&#x27;/home/student&#x27;</span>) <span class="hljs-comment"># 补充代码?</span><br>os.remove(<span class="hljs-string">&#x27;sample.txt&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;File removed successfully&quot;</span>)<br>os.rmdir(<span class="hljs-string">&#x27;work1&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Directory removed successfully&quot;</span>)<br></code></pre></td></tr></table></figure><p>   运行脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 os_remove_file_directory.py<br> <br><span class="hljs-comment"># 输出结果：</span><br>File removed successfully<br>Directory removed successfully<br></code></pre></td></tr></table></figure><h2 id="处理路径"><a href="#处理路径" class="headerlink" title="处理路径"></a>处理路径</h2><p>   下面我们将学习os.path()。它用于路径处理。这一部分中，我们来看os模块中针对路径名的函数。</p><p>   补充：Alan 对 Python 进行了一下升级，方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update<br>sudo wget https://www.python.org/ftp/python/3.7.2/Python-3.7.2.tgz<br>tar zxvf Python-3.7.2.tgz<br><span class="hljs-built_in">cd</span> Python-3.7.2/<br>./configure<br>make &amp;&amp; sudo make install<br></code></pre></td></tr></table></figure><p>   启动python3终端：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart">$ python3<br>Python <span class="hljs-number">3.7</span><span class="hljs-number">.2</span> (<span class="hljs-keyword">default</span>, Feb <span class="hljs-number">26</span> <span class="hljs-number">2019</span>, <span class="hljs-number">15</span>:<span class="hljs-number">56</span>:<span class="hljs-number">02</span>)<br>[GCC <span class="hljs-number">5.4</span><span class="hljs-number">.0</span> <span class="hljs-number">20160609</span>] <span class="hljs-keyword">on</span> linux<br><span class="hljs-built_in">Type</span> <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> or <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br>&gt;&gt;&gt; <span class="hljs-keyword">import</span> os<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><ul><li>os.path.absname(path): 返回路径名的绝对路径</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>os.path.abspath(<span class="hljs-string">&#x27;sample.txt&#x27;</span>)<br><span class="hljs-string">&#x27;/home/student/work/sample.txt&#x27;</span><br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><ul><li><p>os.path.dirname(path): 返回路径的目录名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>os.path.dirname(<span class="hljs-string">&#x27;/home/student/work/sample.txt&#x27;</span>)<br><span class="hljs-string">&#x27;/home/student/work&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>os.path.basename(path): 返回路径的基本名称</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>os.path.basename(<span class="hljs-string">&#x27;/home/student/work/sample.txt&#x27;</span>)<br><span class="hljs-string">&#x27;sample.txt&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>os.path.exists(path): 如果引用的路径存在则返回 True</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>os.path.exists(<span class="hljs-string">&#x27;/home/student/work/sample.txt&#x27;</span>)<br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><ul><li>os.path.getsize(path): 以字节数返回输入文件的大小</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>os.path.getsize(<span class="hljs-string">&#x27;/home/student/work/sample.txt&#x27;</span>)<br><span class="hljs-number">39</span><br></code></pre></td></tr></table></figure><ul><li>os.path.isfile(path): 检查输入的路径是否为已有文件。如果是文件则返回True。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>os.path.isfile(<span class="hljs-string">&#x27;/home/student/work/sample.txt&#x27;</span>)<br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><ul><li>os.path.isdir(path): 检查输入的路径是否为已有目录。如果是目录则返回True。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>os.path.isdir(<span class="hljs-string">&#x27;/home/student/work/sample.txt&#x27;</span>)<br>   <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h2 id="对比数据"><a href="#对比数据" class="headerlink" title="对比数据"></a>对比数据</h2><p>   下面我们将学习如何在Python中比较数据。我们使用pandas模块来进行实现。</p><p>   pandas是一个开源的数据分析库，提供易于使用的数据结构和数据分析工具。让我们导入和分析数据更为简单。</p><p>   在开始示例之前，确保系统中安装了pandas。安装pandas的方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install pandas <span class="hljs-comment"># Python3</span><br>或<br>pip install pandas <span class="hljs-comment">#python2</span><br></code></pre></td></tr></table></figure><p>   我们将学习一个使用pandas比较数据的示例。首先，我们来创建两个csv文件：student1.csv和student2.csv。我们将比较这两个csv文件并在结果中返回比较结果。创建以下两个csv文件：</p><p>   创建student1.csv文件内容如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Id</span>,Name,Gender,Age,Address<br><span class="hljs-attribute">101</span>,John,Male,<span class="hljs-number">20</span>,New York<br><span class="hljs-attribute">102</span>,Mary,Female,<span class="hljs-number">18</span>,London<br><span class="hljs-attribute">103</span>,Aditya,Male,<span class="hljs-number">22</span>,Mumbai<br><span class="hljs-attribute">104</span>,Leo,Male,<span class="hljs-number">22</span>,Chicago<br><span class="hljs-attribute">105</span>,Sam,Male,<span class="hljs-number">21</span>,Paris<br><span class="hljs-attribute">106</span>,Tina,Female,<span class="hljs-number">23</span>,Sydney<br></code></pre></td></tr></table></figure><p>   创建student2.csv文件内容如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Id</span>,Name,Gender,Age,Address<br><span class="hljs-attribute">101</span>,John,Male,<span class="hljs-number">21</span>,New York<br><span class="hljs-attribute">102</span>,Mary,Female,<span class="hljs-number">20</span>,London<br><span class="hljs-attribute">103</span>,Aditya,Male,<span class="hljs-number">22</span>,Mumbai<br><span class="hljs-attribute">104</span>,Leo,Male,<span class="hljs-number">23</span>,Chicago<br><span class="hljs-attribute">105</span>,Sam,Male,<span class="hljs-number">21</span>,Paris<br><span class="hljs-attribute">106</span>,Tina,Female,<span class="hljs-number">23</span>,Sydney<br></code></pre></td></tr></table></figure><p>   下面我们创建compare_data.py脚本并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br> <br>df1 = pd.read_csv(<span class="hljs-string">&#x27;student1.csv&#x27;</span>)<br>df2 = pd.read_csv(<span class="hljs-string">&#x27;student2.csv&#x27;</span>)<br>s1 = <span class="hljs-built_in">set</span>([<span class="hljs-built_in">tuple</span>(values) <span class="hljs-keyword">for</span> values <span class="hljs-keyword">in</span> df1.values.tolist()])<br>s2 = <span class="hljs-built_in">set</span>([<span class="hljs-built_in">tuple</span>(values) <span class="hljs-keyword">for</span> values <span class="hljs-keyword">in</span> df2.values.tolist()])<br>s1.symmetric_difference(s2)<br><span class="hljs-built_in">print</span>(pd.DataFrame(<span class="hljs-built_in">list</span>(s1.difference(s2))), <span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(pd.DataFrame(<span class="hljs-built_in">list</span>(s2.difference(s1))), <span class="hljs-string">&#x27;\n&#x27;</span>)<br></code></pre></td></tr></table></figure><p>   运行脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 compare_data.py<br> <br><span class="hljs-comment"># 输出结果：</span><br>     0     1       2   3         4<br>0  104   Leo    Male  22   Chicago<br>1  101  John    Male  20  New York<br>2  102  Mary  Female  18    London<br> <br>     0     1       2   3         4<br>0  102  Mary  Female  20    London<br>1  104   Leo    Male  23   Chicago<br>2  101  John    Male  21  New York<br></code></pre></td></tr></table></figure><p>   在上述的例子中，我们比较两个csv文件的数据：student1.csv和student2.csv。我们首先转化我们的数据帧(df1, df2)为集合 (s1, s2)。然后我们使用了symmetric_difference() 集合。因此它会检查s1和s2的对称性区别，然后我们打印出了结果。</p><h2 id="合并数据"><a href="#合并数据" class="headerlink" title="合并数据"></a>合并数据</h2><p>   我们将学习如何在Python合并数据。为此，我们使用Python中的pandas库。要进行数据合并，我们将使用前一部分中使用的两个csv文件：student1.csv和student2.csv。</p><p>   下面，创建merge_data.py脚本并编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br> <br>df1 = pd.read_csv(<span class="hljs-string">&#x27;student1.csv&#x27;</span>)<br>df2 = pd.read_csv(<span class="hljs-string">&#x27;student2.csv&#x27;</span>)<br>result = pd.concat([df1, df2])<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p>   运行脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 merge_data.py<br> <br><span class="hljs-comment"># 输出结果：</span><br>    Id    Name  Gender  Age   Address<br>0  101    John    Male   20  New York<br>1  102    Mary  Female   18    London<br>2  103  Aditya    Male   22    Mumbai<br>3  104     Leo    Male   22   Chicago<br>4  105     Sam    Male   21     Paris<br>5  106    Tina  Female   23    Sydney<br>0  101    John    Male   21  New York<br>1  102    Mary  Female   20    London<br>2  103  Aditya    Male   22    Mumbai<br>3  104     Leo    Male   23   Chicago<br>4  105     Sam    Male   21     Paris<br>5  106    Tina  Female   23    Sydney<br></code></pre></td></tr></table></figure><h2 id="模式匹配文件和目录"><a href="#模式匹配文件和目录" class="headerlink" title="模式匹配文件和目录"></a>模式匹配文件和目录</h2><p>   这部分中我们将学习文件和目录的模式匹配。Python有一个glob模块，用于查找与指定模式相匹配的文件和目录名称。</p><p>   下面我们来看一个示例。首先，创建一个pattern_match.py脚本并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> glob<br> <br>file_match = glob.glob(<span class="hljs-string">&#x27;*.txt&#x27;</span>)<br><span class="hljs-built_in">print</span>(file_match)<br>file_match = glob.glob(<span class="hljs-string">&#x27;[0-9].txt&#x27;</span>)<br><span class="hljs-built_in">print</span>(file_match)<br>file_match = glob.glob(<span class="hljs-string">&#x27;/*.txt&#x27;</span>, recursive=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(file_match)<br>file_match = glob.glob(<span class="hljs-string">&#x27;/&#x27;</span>, recursive=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(file_match)<br></code></pre></td></tr></table></figure><p>   运行脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 pattern_match.py<br> <br><span class="hljs-comment"># 输出结果</span><br>[<span class="hljs-string">&#x27;file1.txt&#x27;</span>, <span class="hljs-string">&#x27;filea.txt&#x27;</span>, <span class="hljs-string">&#x27;fileb.txt&#x27;</span>, <span class="hljs-string">&#x27;file2.txt&#x27;</span>, <span class="hljs-string">&#x27;2.txt&#x27;</span>, <span class="hljs-string">&#x27;1.txt&#x27;</span>, <span class="hljs-string">&#x27;file.txt&#x27;</span>]<br>[<span class="hljs-string">&#x27;2.txt&#x27;</span>, <span class="hljs-string">&#x27;1.txt&#x27;</span>]<br>[<span class="hljs-string">&#x27;file1.txt&#x27;</span>, <span class="hljs-string">&#x27;filea.txt&#x27;</span>, <span class="hljs-string">&#x27;fileb.txt&#x27;</span>, <span class="hljs-string">&#x27;file2.txt&#x27;</span>, <span class="hljs-string">&#x27;2.txt&#x27;</span>, <span class="hljs-string">&#x27;1.txt&#x27;</span>, <span class="hljs-string">&#x27;file.txt&#x27;</span>, <span class="hljs-string">&#x27;dir1/3.txt&#x27;</span>, <span class="hljs-string">&#x27;dir1/4.txt&#x27;</span>]<br>[<span class="hljs-string">&#x27;dir1/&#x27;</span>]<br></code></pre></td></tr></table></figure><p>   注：以上目录及文件需自行创建</p><p>   在前面的示例中，我们使用了Python模块来进行模式匹配。glob (pathname)将返回匹配pathname的名称列表。在我们的脚本中，我们传入了四个不同的glob()函数。第一个glob()中，我们传入的路径名为*.txt，这将返回所有后缀名为.txt文件名。在第二个glob()中，我们传入了 [0-9].txt，这将返回以数字开始的名称。在第三个glob()中，我们传入了&#x2F;*.txt，将返回文件名和路径名。它还会返回这些目录的文件名。在第四个glob()中，我们传入了&#x2F;，将仅返回目录名。</p><h2 id="元数据：数据的数据"><a href="#元数据：数据的数据" class="headerlink" title="元数据：数据的数据"></a>元数据：数据的数据</h2><p>   这部分我们将学习PyPDF2模块，有助于我们从pdf文件中提取元数据（metadata）。但首先什么是元数据呢？元数据是数据的数据。元数据是描述主要信息的结构性信息。它是一个数据的总结。包含我们实际数据相关的基本信息。帮助查找我们数据中的具体实例。</p><blockquote><p>ℹ️确保将需提取信息的pdf文件放在相应目录中</p></blockquote><p>   首先安装PyPDF2模块，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install PyPDF2<br></code></pre></td></tr></table></figure><p>   下面我们来编写脚本metadata_example.py，并查看如何获取元数据信息。我们使用Python来编写脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> PyPDF2<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>        file_name = <span class="hljs-string">&#x27;Haltermanpythonbook.pdf&#x27;</span><br>        pdfFile = PyPDF2.PdfFileReader(<span class="hljs-built_in">open</span>(file_name, <span class="hljs-string">&#x27;rb&#x27;</span>))<br>        pdf_data = pdfFile.getDocumentInfo()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----Metadata of the file----&#x27;</span>)<br>        <span class="hljs-keyword">for</span> md <span class="hljs-keyword">in</span> pdf_data:<br>                <span class="hljs-built_in">print</span>(md+ <span class="hljs-string">&#x27;:&#x27;</span> +pdf_data[md])<br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>        main()<br></code></pre></td></tr></table></figure><p>   译者注：<br>   1、随机搜索了一本Python 方面的 pdf 图书<a href="https://www.cs.uky.edu/~keen/115/Haltermanpythonbook.pdf">Haltermanpythonbook.pdf</a>用于本例测试<br>   2、原书使用了 Python 2中的pyPdf，为统一版本，Alan 修改为针对 Python 3的PyPDF2</p><p>   运行脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 metadata_example.py<br>----Metadata of the file----<br>/Author:<br>/Title:<br>/Subject:<br>/Creator:LaTeX with hyperref package<br>/Producer:pdfeTeX-1.21a<br>/Keywords:<br>/CreationDate:D:20111113221308-05<span class="hljs-string">&#x27;00&#x27;</span><br>/PTEX.Fullbanner:This is pdfeTeX, Version 3.141592-1.21a-2.2 (Web2C 7.5.4) kpathsea version 3.5.4<br></code></pre></td></tr></table></figure><p>   在前述脚本中，我们使用了 Pyhon 3中的PyPDF2模块。首先，我们创建了一个变量file_name来存储 pdf 的路径。使用PdfFileReader() 来提取数据。变量pdf_data会存储pdf的相关信息。最后，我们编写for循环来获取元数据信息。</p><h2 id="压缩和还原"><a href="#压缩和还原" class="headerlink" title="压缩和还原"></a>压缩和还原</h2><p>   这部分中我们将学习shutil模块中的make_archive()函数，可压缩整个文件夹。为此我们编写一个compress_a_directory.py脚本并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> shutil<br>shutil.make_archive(<span class="hljs-string">&#x27;work&#x27;</span>, <span class="hljs-string">&#x27;zip&#x27;</span>, <span class="hljs-string">&#x27;work/&#x27;</span>)<br></code></pre></td></tr></table></figure><p>   运行脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 compress_a_directory.py<br></code></pre></td></tr></table></figure><p>   前述脚本shutil.make_archive()函数中，我们传入的第一个参数作为压缩文件的名称，zip是压缩的技术。work&#x2F;是想要进行压缩的目录名。</p><p>   要对压缩文件进行还原（解压缩），我们使用shutil模块中的unpack_archive() 函数。创建一个脚本unzip_a_directory.py并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> shutil<br>shutil.unpack_archive(<span class="hljs-string">&#x27;work1.zip&#x27;</span>)<br></code></pre></td></tr></table></figure><p>   运行脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 unzip_a_directory.py<br></code></pre></td></tr></table></figure><p>   现在检查我们的目录。可以得到解压目录后的所有内容。</p><h2 id="使用tarfile模块来创建TAR存档"><a href="#使用tarfile模块来创建TAR存档" class="headerlink" title="使用tarfile模块来创建TAR存档"></a>使用tarfile模块来创建TAR存档</h2><p>   这部分帮助我们学习如何使用Python的tarfile模块来创建tar存档文件。</p><p>   tarfile模块用于使用gzip、bz2等压缩技术来读取和写入tar存档文件。确保存在相关的文件和目录。下面创建一个tarfile_example.py脚本并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tarfile<br> <br>tar_file = tarfile.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;work.tar.gz&#x27;</span>, <span class="hljs-string">&#x27;w:gz&#x27;</span>)<br><span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;welcome.py&#x27;</span>, <span class="hljs-string">&#x27;hello.py&#x27;</span>, <span class="hljs-string">&#x27;hello.txt&#x27;</span>, <span class="hljs-string">&#x27;sample.txt&#x27;</span>, <span class="hljs-string">&#x27;sample1.txt&#x27;</span>]:<br>        tar_file.add(name)<br>tar_file.close()<br></code></pre></td></tr></table></figure><p>   运行脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 tarfile_example.py<br></code></pre></td></tr></table></figure><p>   这时检查当前工作目录，可以看到已创建了work.tar.gz。</p><h2 id="使用tarfile模块来检查TAR文件内容"><a href="#使用tarfile模块来检查TAR文件内容" class="headerlink" title="使用tarfile模块来检查TAR文件内容"></a>使用tarfile模块来检查TAR文件内容</h2><p>   这部分中我们将学习如何在不提取tar文件的情况下检查tar包里的内容。我们使用Python中的tarfile模块。</p><p>   创建脚本examine_tar_file_content.py编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tarfile<br>tar_file = tarfile.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;work.tar.gz&#x27;</span>, <span class="hljs-string">&#x27;r:gz&#x27;</span>)<br><span class="hljs-built_in">print</span>(tar_file.getnames())<br></code></pre></td></tr></table></figure><p>   运行脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 examine_tar_file_content.py<br> <br><span class="hljs-comment"># 输出结果：</span><br>[<span class="hljs-string">&#x27;welcome.py&#x27;</span>, <span class="hljs-string">&#x27;hello.py&#x27;</span>, <span class="hljs-string">&#x27;hello.txt&#x27;</span>, <span class="hljs-string">&#x27;sample.txt&#x27;</span>, <span class="hljs-string">&#x27;sample1.txt&#x27;</span>]<br></code></pre></td></tr></table></figure><p>   在前面的例子中，我们使用了tarfile模块来查看所创建的tar文件的内容。我们使用了getnames()函数来读取数据。</p><h2 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h2><p>   本章中我们学习了如何使用Python脚本来处理文件和目录。还学习了如何使用os模块来处理目录。以及如何拷贝、移动、重命名和删除文件和目录。我们学习了Python中的pandas模块，用于比较和合并数据。同时学习了使用tarfile模块来创建tar文件以及读取tar文件中的内容。我们在搜索文件和目录时还使用了模式匹配。</p><p>   下一章中，我们将学习tar包和ZIP的创建。</p><p>   ☞☞☞ <a href="https://alanhou.org/file-archiving-encrypting-decrypting/">第六章 文件存档、加密和解密</a></p><h2 id="课后问题-3"><a href="#课后问题-3" class="headerlink" title="课后问题"></a>课后问题</h2><ol><li>如何在不论什么操作系统中（Windows, Linux）处理不同的路径？</li><li>Python 中print()可以使用哪些不同参数？</li><li>Python 中dir()关键字的用处是什么？</li><li>pandas中的数据帧、序列是什么？</li><li>列表推导式是什么？</li><li>是否可以进行集合推导式和字典推导式？如果是如何做？</li><li>如何使用pandas数据帧打印最前&#x2F;后的 N 行？</li><li>使用列表推导式来编写程序打印奇数？</li><li>sys.argv的类型时什么？<br>a) 集合<br>b) 列表<br>c) 元组<br>d) 字符串</li></ol><h2 id="扩展阅读-3"><a href="#扩展阅读-3" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul><li>pathlib文档: <a href="https://docs.python.org/3/library/pathlib.html">https://docs.python.org/3/library/pathlib.html</a></li><li>pandas文档: <a href="https://pandas.pydata.org/pandas-docs/stable/">https://pandas.pydata.org/pandas-docs/stable/</a></li><li>os模块文档: <a href="https://docs.python.org/3/library/os.html">https://docs.python.org/3/library/os.html</a></li></ul><h1 id="第六章-文件存档、加密和解密"><a href="#第六章-文件存档、加密和解密" class="headerlink" title="第六章 文件存档、加密和解密"></a><a href="https://alanhou.org/file-archiving-encrypting-decrypting/">第六章 文件存档、加密和解密</a></h1><p>前一章中我们学习了如何处理文件、目录和数据。我们还学习了tarfile模块。本章中，我们将学习文件的存档、加密和解密。存档在管理文件、目录和数据中扮演重要的角色。但首先什么是存档呢？存档是一个将多个文件和目录存放到一个文件中的过程。Python中有tarfile模块可用于创建这类存档文件。</p><p>本章中，我们将学习如下课题：</p><ul><li>创建和解压存档包</li><li>Tar包</li><li>ZIP的创建</li><li>文件加密和解密</li></ul><h2 id="创建和解压存档包"><a href="#创建和解压存档包" class="headerlink" title="创建和解压存档包"></a>创建和解压存档包</h2><p>这一部分中，我们将学习如何使用Python中的shutil模块来创建和解压存档包。shutil模块带有make_archive()函数，可以创建一个新的存档文件。使用make_archive()，我们可以对包含的内容的整个目录进行打包。</p><h3 id="创建存档包"><a href="#创建存档包" class="headerlink" title="创建存档包"></a>创建存档包</h3><p>下面我们来编写一个名为shutil_make_archive.py的脚本并加入如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tarfile, shutil, sys<br> <br>shutil.make_archive(<br>        <span class="hljs-string">&#x27;work_sample&#x27;</span>, <span class="hljs-string">&#x27;gztar&#x27;</span>,<br>        root_dir=<span class="hljs-string">&#x27;..&#x27;</span>,<br>        base_dir=<span class="hljs-string">&#x27;work&#x27;</span><br>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Archive contents:&#x27;</span>)<br><span class="hljs-keyword">with</span> tarfile.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;work_sample.tar.gz&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> t_file:<br>        <span class="hljs-keyword">for</span> names <span class="hljs-keyword">in</span> t_file.getnames():<br>                <span class="hljs-built_in">print</span>(names)<br></code></pre></td></tr></table></figure><p>运行程序，将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 shutil_make_archive.py<br>Archive contents:<br>work<br>work/sample.txt<br></code></pre></td></tr></table></figure><table><thead><tr><th>1234</th><th>$ python3 shutil_make_archive.pyArchive contents:workwork&#x2F;sample.txt</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>上例中，我们使用了Python中的shutil和tarfile模块来创建存档文件。在shutil.make_archive()中，我们指定了work_sample来作为存档文件的名称并使用 gz 格式。我们还通过基本目录属性指定了工作目录。最后，我们打印出了存档中的文件名称。</p><h3 id="解压存档包"><a href="#解压存档包" class="headerlink" title="解压存档包"></a>解压存档包</h3><p>要解压存档包，可使用shutil中带有的unpack_archive()函数。使用该函数，我们可以提取存档的文件。我们传递存档包名以及想要提取内容的目录名。如果未传递目录名，就会将提取的内容放到当前工作目录中。</p><p>下面创建一个名为shutil_unpack_archive.py的脚本并编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pathlib, shutil, sys, tempfile<br> <br><span class="hljs-keyword">with</span> tempfile.TemporaryDirectory() <span class="hljs-keyword">as</span> d:<br>        shutil.unpack_archive(<span class="hljs-string">&#x27;work_sample.tar.gz&#x27;</span>,<br>                extract_dir=<span class="hljs-string">&#x27;/home/student/work&#x27;</span>)<br>        prefix_len = <span class="hljs-built_in">len</span>(d) + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> extracted <span class="hljs-keyword">in</span> pathlib.Path(d).rglob(<span class="hljs-string">&#x27;*&#x27;</span>):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(extracted)[prefix_len:])<br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 shutil_unpack_archive.py<br></code></pre></td></tr></table></figure><p>下面检查work&#x2F;目录，会在其中发现work&#x2F;文件夹，并包含提取的文件。</p><h2 id="Tar包"><a href="#Tar包" class="headerlink" title="Tar包"></a>Tar包</h2><p>这一部分我们将学习tarfile模块。我们还将学习输入文件名的测试，评估它是否是有效的存档文件名。我们会看如何将一个新文件加入到已有的存档文件中，如何使用tarfile模块读取元数据，以及如何使用extractall() 函数来从存档中提取文件。</p><p>首先，我们将测试输入的文件名是否是有效的存档文件。进行这一测试，tarfile模块带有is_tarfile()函数，返回的是布尔值。</p><p>创建一个名为check_archive_file.py的脚本并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tarfile<br> <br><span class="hljs-keyword">for</span> f_name <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;hello.py&#x27;</span>, <span class="hljs-string">&#x27;work.tar.gz&#x27;</span>, <span class="hljs-string">&#x27;welcome.py&#x27;</span>, <span class="hljs-string">&#x27;nofile.tar&#x27;</span>, <span class="hljs-string">&#x27;sample.tar.xz&#x27;</span>]:<br>        <span class="hljs-keyword">try</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:&#125; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(f_name, tarfile.is_tarfile(f_name)))<br>        <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> err:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:&#125; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(f_name, err))<br></code></pre></td></tr></table></figure><p>运行脚本，将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 check_archive_file.py<br>hello.py False<br>work.tar.gz True<br>welcome.py False<br>nofile.tar [Errno 2] No such file or directory: <span class="hljs-string">&#x27;nofile.tar&#x27;</span><br>sample.tar.xz False<br></code></pre></td></tr></table></figure><p>因此，tarfile.is_tarfile()会检查列表出的各个文件名。hello.py, welcome.py文件不是tar包，所以得到的是布尔值False，work.tar.gz和sample.tar.xz是tar包，因此得到了布尔值True。并且目录中不存在nofile.tar这一文件，所以抛出了脚本中所编写的异常。</p><p>下面我们将向已创建的存档文件中添加一个新文件。创建名为add_to_archive.py的脚本并编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> shutil, os, tarfile<br> <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;creating archive&#x27;</span>)<br>shutil.make_archive(<span class="hljs-string">&#x27;work&#x27;</span>, <span class="hljs-string">&#x27;tar&#x27;</span>, root_dir=<span class="hljs-string">&#x27;..&#x27;</span>, base_dir=<span class="hljs-string">&#x27;work&#x27;</span>,)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nArchive contents:&#x27;</span>)<br><span class="hljs-keyword">with</span> tarfile.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;work.tar&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> t_file:<br>        <span class="hljs-keyword">for</span> names <span class="hljs-keyword">in</span> t_file.getnames():<br>                <span class="hljs-built_in">print</span>(names)<br>        os.system(<span class="hljs-string">&#x27;touch sample.txt&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;adding sample.txt&#x27;</span>)<br>        <span class="hljs-keyword">with</span> tarfile.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;work.tar&#x27;</span>, mode=<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">as</span> t:<br>                t.add(<span class="hljs-string">&#x27;sample.txt&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;contents:&#x27;</span>,)<br>        <span class="hljs-keyword">with</span> tarfile.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;work.tar&#x27;</span>, mode=<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> t:<br>                <span class="hljs-built_in">print</span>([m.name <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> t.getmembers()])<br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 add_to_archive.py<br> <br><span class="hljs-comment"># 输出结果：</span><br>creating archive<br> <br>Archive contents:<br>work<br>work/work<br>work/work/sample.txt<br>adding sample.txt<br>contents:<br>[<span class="hljs-string">&#x27;work&#x27;</span>, <span class="hljs-string">&#x27;work/work&#x27;</span>, <span class="hljs-string">&#x27;work/work/sample.txt&#x27;</span>, <span class="hljs-string">&#x27;sample.txt&#x27;</span>]<br></code></pre></td></tr></table></figure><p>本例中，首先我们使用shutil.make_archive()创建了一个压缩文件，然后我们打印出了存档文件中的内容。再后我们在下一条语句中创建了一个sample.txt文件。接着我们希望将sample.txt加到已创建的work.tar中。这里我们使用了追加模式。接下来我们再次读取了存档文件中的内容。</p><p>下面我们将学习如何读取存档文件的元数据。getmembers() 会加载文件的元数据。创建一个名为read_metadata.py的脚本并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tarfile, time<br> <br><span class="hljs-keyword">with</span> tarfile.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;work.tar&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> t:<br>        <span class="hljs-keyword">for</span> file_info <span class="hljs-keyword">in</span> t.getmembers():<br>                <span class="hljs-built_in">print</span>(file_info.name)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Size :&#x27;</span>, file_info.size, <span class="hljs-string">&#x27;bytes&#x27;</span>)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Type :&#x27;</span>, file_info.<span class="hljs-built_in">type</span>)<br>                <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><p>运行脚本，将会得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 read_metadata.py<br>work<br>Size : 0 bytes<br>Type : b<span class="hljs-string">&#x27;5&#x27;</span><br> <br>work/work<br>Size : 0 bytes<br>Type : b<span class="hljs-string">&#x27;5&#x27;</span><br> <br>work/work/sample.txt<br>Size : 0 bytes<br>Type : b<span class="hljs-string">&#x27;0&#x27;</span><br> <br>sample.txt<br>Size : 0 bytes<br>Type : b<span class="hljs-string">&#x27;0&#x27;</span><br></code></pre></td></tr></table></figure><p>下面我们将使用 extractall() 函数来从存档包中提取内容。为此，创建一个名为extract_contents.py的脚本并在其中编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tarfile, os<br> <br>os.mkdir(<span class="hljs-string">&#x27;work&#x27;</span>)<br><span class="hljs-keyword">with</span> tarfile.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;work.tar&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> t:<br>        t.extractall(<span class="hljs-string">&#x27;work&#x27;</span>)<br><span class="hljs-built_in">print</span>(os.listdir(<span class="hljs-string">&#x27;work&#x27;</span>))<br></code></pre></td></tr></table></figure><p>运行脚本，将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 extract_contents.py<br> <br><span class="hljs-comment"># 输出结果：</span><br>[<span class="hljs-string">&#x27;sample.txt&#x27;</span>, <span class="hljs-string">&#x27;work&#x27;</span>]<br></code></pre></td></tr></table></figure><p>查看当前工作目录，我们会看到work&#x2F; 目录，进入该目录就可以看到提取的文件。</p><h2 id="ZIP的创建"><a href="#ZIP的创建" class="headerlink" title="ZIP的创建"></a>ZIP的创建</h2><p>这部分中，我们将使用ZIP文件。我们将学习Python中的zipfile模块，如何创建ZIP文件，如何测试输入的文件名是否是有效的ZIP文件名，读取元数据等等。</p><p>首先我们将学习如何使用shutil模块的make_archive()函数创建zip文件。创建一个名为make_zip_file.py的脚本并编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> shutil<br>shutil.make_archive(<span class="hljs-string">&#x27;work&#x27;</span>, <span class="hljs-string">&#x27;zip&#x27;</span>, <span class="hljs-string">&#x27;work&#x27;</span>)<br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> make_zip_file.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>此时查看当前工作目录，就会发现work.zip文件。</p><p>接下来我们将测试所输入的zip文件名是否有效。为此可使用zipfile模块中的is_zipfile()函数。</p><p>创建一个脚本check_zip_file.py并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zipfile<br> <br><span class="hljs-keyword">for</span> f_name <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;hello.py&#x27;</span>, <span class="hljs-string">&#x27;work.zip&#x27;</span>, <span class="hljs-string">&#x27;welcome.py&#x27;</span>, <span class="hljs-string">&#x27;sample.txt&#x27;</span>, <span class="hljs-string">&#x27;test.zip&#x27;</span>]:<br>        <span class="hljs-keyword">try</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:&#125;        &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(f_name, zipfile.is_zipfile(f_name)))<br>        <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> err:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:&#125;        &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(f_name, err))<br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 check_zip_file.py<br> <br><span class="hljs-comment"># 输出结果：</span><br>hello.py        False<br>work.zip        True<br>welcome.py        False<br>sample.txt        False<br>test.zip        False<br></code></pre></td></tr></table></figure><p>在本例中，我们使用了for循环来检查列表中的文件名。is_zipfile()函数会逐一检查文件名并在结果中返回布尔值。</p><p>下面我们将来看如何使用Python中的zipfile模块来读取存档的ZIP文件的元数据。创建一个名为read_zip_metadata.py的脚本，并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zipfile<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">meta_info</span>(<span class="hljs-params">names</span>):<br>        <span class="hljs-keyword">with</span> zipfile.ZipFile(names) <span class="hljs-keyword">as</span> zf:<br>                <span class="hljs-keyword">for</span> info <span class="hljs-keyword">in</span> zf.infolist():<br>                        <span class="hljs-built_in">print</span>(info.filename)<br>                        <span class="hljs-keyword">if</span> info.create_system == <span class="hljs-number">0</span>:<br>                                system = <span class="hljs-string">&#x27;Windows&#x27;</span><br>                        <span class="hljs-keyword">elif</span> info.create_system == <span class="hljs-number">3</span>:<br>                                system = <span class="hljs-string">&#x27;Unix&#x27;</span><br>                        <span class="hljs-keyword">else</span>:<br>                                system = <span class="hljs-string">&#x27;UNKNOWN&#x27;</span><br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;System      :&#x27;</span>, system)<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Zip Version :&#x27;</span>, info.create_version)<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Compressed  :&#x27;</span>, info.compress_size, <span class="hljs-string">&#x27;bytes&#x27;</span>)<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Uncompressed:&#x27;</span>, info.file_size, <span class="hljs-string">&#x27;bytes&#x27;</span>)<br>                        <span class="hljs-built_in">print</span>()<br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>        meta_info(<span class="hljs-string">&#x27;work.zip&#x27;</span>)<br></code></pre></td></tr></table></figure><p>执行脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 read_zip_metadata.py<br>make_zip_file.py<br>System      : Unix<br>Zip Version : 20<br>Compressed  : 49 bytes<br>Uncompressed: 57 bytes<br> <br>sample.txt<br>System      : Unix<br>Zip Version : 20<br>Compressed  : 2 bytes<br>Uncompressed: 0 bytes<br> <br>add_to_archive.py<br>System      : Unix<br>Zip Version : 20<br>Compressed  : 240 bytes<br>Uncompressed: 483 bytes<br> <br>shutil_unpack_archive.py<br>System      : Unix<br>Zip Version : 20<br>Compressed  : 196 bytes<br>Uncompressed: 269 bytes<br></code></pre></td></tr></table></figure><p>要获取zip文件的元数据信息，我们使用了ZipFile类的infolist()方法。</p><h2 id="文件加密和解密"><a href="#文件加密和解密" class="headerlink" title="文件加密和解密"></a>文件加密和解密</h2><p>这一部分中我们将学习Python中的pyAesCrypt模块。pyAesCrypt是一个文件加密模块，使用AES256-CBC算法来对文件和二进制流文件加密和解密。</p><p>安装pyAesCrypt命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install pyAesCrypt<br></code></pre></td></tr></table></figure><p>创建名为file_encrypt.py的脚本并编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pyAesCrypt<br> <br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> stat, remove<br><span class="hljs-comment"># encryption/decryption buffer size - 64K</span><br>bufferSize = <span class="hljs-number">64</span> * <span class="hljs-number">1024</span><br>password = <span class="hljs-string">&#x27;#Training&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;sample.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> fIn:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;sample.txt.aes&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fOut:<br>                pyAesCrypt.encryptStream(fIn, fOut, password, bufferSize)<br><span class="hljs-comment"># get encrypted file size</span><br>encFileSize = stat(<span class="hljs-string">&#x27;sample.txt.aes&#x27;</span>).st_size<br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 file_encrypt.py<br> <br><span class="hljs-comment"># 无输入内容</span><br></code></pre></td></tr></table></figure><p>请查看当前工作目录，我们会发现其中有一个sample.txt.aes文件。</p><p>本例中，我们首先的提及了缓冲大小和密码。然后涉及了需要加密的文件名。在encryptStream中，我们传入了加密的文件fIn，以及加密后的文件名fOut。我们将加密后的文件存储为sample.txt.aes。</p><p>下面我们将对sample.txt.aes文件进行解密来获取文件的内容。创建一个名为file_decrypt.py 的脚本并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pyAesCrypt<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> stat, remove<br> <br>bufferSize = <span class="hljs-number">64</span> * <span class="hljs-number">1024</span><br>password = <span class="hljs-string">&#x27;#Training&#x27;</span><br>encFileSize = stat(<span class="hljs-string">&#x27;sample.txt.aes&#x27;</span>).st_size<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;sample.txt.aes&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> fIn:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;sampleout.txt&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fOut:<br>                <span class="hljs-keyword">try</span>:<br>                        pyAesCrypt.decryptStream(fIn, fOut, password, bufferSize, encFileSize)<br>                <span class="hljs-keyword">except</span> ValueError:<br>                        remove(<span class="hljs-string">&#x27;sampleout.txt&#x27;</span>)<br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 file_decrypt.py<br></code></pre></td></tr></table></figure><p>现在查看当前工作目录。一个名为sampleout.txt的文件会被创建。这就是我们的解密后文件。</p><p>本例中，我们涉及到了解密的文件名sample.txt.aes。然后，我们解密后的文件为sampleout.txt。在decryptStream中，涉及到了要解密的文件fIn，以及解密后文件的名称fOut。</p><h2 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h2><p>本章中，我们学习了创建和提取存档文件。在管理文件、目录和数据时存档扮演着重要的角色。它还将许多文件和目录存入一个文件中。</p><p>我们深入学习了Python模块tarfile和zipfile，来让我们创建、提取和测试存档文件。我们可以将新文件添加到已有存档文件中、读取元数据、从存档中提取文件。我们还学习了使用pyAescrypt模块来进行文件加密和解密。</p><p>下一章中我们将学习Python 中的文本处理和正则表达式。Python有一称作正则表达式的非常强大的库，可以完成搜索和提取数据等任务。</p><h2 id="课后问题-4"><a href="#课后问题-4" class="headerlink" title="课后问题"></a>课后问题</h2><ol><li>我们是否可以用加密的方式压缩数据？如果可以，如何进行？</li><li>Python中的上下文管理器是什么？</li><li>什么是pickling和unpickling？</li><li>Python中不函数类型有哪些？</li></ol><h2 id="扩展阅读-4"><a href="#扩展阅读-4" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul><li>数据压缩和存档: <a href="https://docs.python.org/3/library/archiving.html">https://docs.python.org/3/library/archiving.html</a></li><li>tempfile文档: <a href="https://docs.python.org/2/library/tempfile.html">https://docs.python.org/2/library/tempfile.html</a></li><li>Python加密文档: <a href="https://docs.python.org/3/library/crypto.html">https://docs.python.org/3/library/crypto.html</a></li><li>shutil文档: <a href="https://docs.python.org/3/library/shutil.html">https://docs.python.org/3/library/shutil.html</a></li></ul><h2 id="with-open-as-f"><a href="#with-open-as-f" class="headerlink" title="with open as f"></a>with open as f</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">r:以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</span><br><span class="hljs-section">rb: 以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</span><br><span class="hljs-section">r+: 打开一个文件用于读写。文件指针将会放在文件的开头。</span><br><span class="hljs-section">rb+:以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</span><br><span class="hljs-section">w:打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</span><br><span class="hljs-section">wb:以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</span><br><span class="hljs-section">w+:打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</span><br><span class="hljs-section">wb+:以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</span><br><span class="hljs-section">a:打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</span><br><span class="hljs-section">ab:以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</span><br><span class="hljs-section">a+:打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</span><br><span class="hljs-section">ab+:以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</span><br><br></code></pre></td></tr></table></figure><h1 id="第七章-文本处理和正则表达式"><a href="#第七章-文本处理和正则表达式" class="headerlink" title="第七章 文本处理和正则表达式"></a><a href="https://alanhou.org/text-processing-regular-expressions/">第七章 文本处理和正则表达式</a></h1><p>本章中我们将学习文本处理和正则表达式。文本处理是一个创建和修改文本的过程。Python有一个称为正则表达式的强大的库，可处理搜索和提取数据等任务。我们将学习如何对文件使用它，同时学习如何读取和写入文件。</p><p>我们将学习Python的正则表达式模块re，以及在Python中处理文件。同时学习re模块中的match(), search(), findall()和sub()函数。我们还将使用textwrap来学习Python中的文本封装。最后，我们会学习unicode字符。</p><p>本章中我们会学习如何课题：</p><ul><li>文本封装</li><li>正则表达式</li><li>Unicode字符串</li></ul><h2 id="文本封装"><a href="#文本封装" class="headerlink" title="文本封装"></a>文本封装</h2><p>本章中我们将学习Python的textwrap模块。该模块提供了TextWrapper来完成所有任务。textwrap模块用于格式化或封装普通文本。该模块提供了5个主要的函数：wrap(), fill(), dedent(), indent()和shorten()。下面我们将逐一来学习这些函数。</p><h3 id="wrap-函数"><a href="#wrap-函数" class="headerlink" title="wrap()函数"></a>wrap()函数</h3><p>wrap()函数用于将整个段落封装为单个字符串。输出结果是一个输出行列表。</p><p>语法为textwrap.wrap(text, width)：</p><ul><li>text: 要封装的文本</li><li>width: 封装行允许的最大长度，默认值为70</li></ul><p>下面我们来看一个wrap()的示例。创建一个脚本wrap_example.py并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> textwrap<br> <br>sample_string = <span class="hljs-string">&#x27;&#x27;&#x27;Python is an interpreted high-level programming</span><br><span class="hljs-string">language.&#x27;&#x27;&#x27;</span><br> <br>w = textwrap.fill(text=sample_string, width=<span class="hljs-number">50</span>)<br><span class="hljs-built_in">print</span>(w)<br></code></pre></td></tr></table></figure><p>运行脚本，将会得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 wrap_example.py <br>[<span class="hljs-string">&#x27;Python is an interpreted high-&#x27;</span>, <span class="hljs-string">&#x27;level programming language for&#x27;</span>, <span class="hljs-string">&#x27;general-purpose programming.&#x27;</span>, <span class="hljs-string">&#x27;Created by Guido van Rossum&#x27;</span>, <span class="hljs-string">&#x27;and first released in 1991,&#x27;</span>, <span class="hljs-string">&#x27;Python has a design philosophy&#x27;</span>, <span class="hljs-string">&#x27;that emphasizes code&#x27;</span>, <span class="hljs-string">&#x27;readability, notably using&#x27;</span>, <span class="hljs-string">&#x27;significant whitespace.&#x27;</span>]<br></code></pre></td></tr></table></figure><p>上例中我们使用了Python中的textwrap模块。首先我们创建一个名为sample_string的字符串。接着我们使用TextWrapper类指定了width。再后使用了wrap函数，字符串被封装长度30。最后我们打印出了各行。</p><h3 id="fill-函数"><a href="#fill-函数" class="headerlink" title="fill()函数"></a>fill()函数</h3><p>fill()函数与textwrap.wrap的作用相似，只是它返回的数据是连接的、以新行分隔的字符串。该函数将输入封装为文本并返回包含封装文本的单个字符串。</p><p>该函数的语法为：textwrap.fill(text, width)</p><ul><li>text：封装的文本</li><li>width：封装的一行允许的最大长度。默认值为70。</li></ul><p>下面我们来看一个fill()的示例。创建一个fill_example.py脚本并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> textwrap<br><br>sample_string = <span class="hljs-string">&#x27;&#x27;&#x27;Python is an interpreted high-level programming</span><br><span class="hljs-string">language.&#x27;&#x27;&#x27;</span><br><br>w = textwrap.fill(text=sample_string, width=<span class="hljs-number">50</span>)<br><span class="hljs-built_in">print</span>(w)<br><br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 fill_example.py<br>Python is an interpreted high-level programming<br>language.<br></code></pre></td></tr></table></figure><p>上例中我们使用了fill()函数。整个过程和我们在wrap()中的操作相同。首先，我们创建了一个字符串变量。接着我们创建了一个textwrap对象。然后，我们应用了fill()函数。最后，我们打印了输出。</p><h3 id="dedent-函数"><a href="#dedent-函数" class="headerlink" title="dedent()函数"></a>dedent()函数</h3><p>dedent()是textwrap模块中的另一个函数。该函数将我们文本每一行的普通前置空格进行移除。</p><p>该函数的语法如下：</p><p>textwrap.dedent(text)</p><p>其中text为取消缩进的文本。</p><p>下面我们来看一个dedent()的示例。创建一个脚本dedent_example.py并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> textwrap<br> <br>str1 = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        Hello Python World \tThis is Python 101</span><br><span class="hljs-string">        Scripting language\n</span><br><span class="hljs-string">        Python is an interpreted high-level programming language for general-purpose programming.</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Original: \n&quot;</span>, str1)<br><span class="hljs-built_in">print</span>()<br> <br>t = textwrap.dedent(str1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Dedented: \n&quot;</span>, t)<br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 dedent_example.py<br>Original: <br> <br>        Hello Python World      This is Python 101<br>        Scripting language<br><br>        Python is an interpreted high-level programming language <span class="hljs-keyword">for</span> general-purpose programming.<br><br><br>Dedented: <br> <br>Hello Python World      This is Python 101<br>Scripting language<br><br>Python is an interpreted high-level programming language <span class="hljs-keyword">for</span> general-purpose programming.<br></code></pre></td></tr></table></figure><p>上例中，我们创建了一个字符串变量str1。然后我们使用了textwrap.dedent()来移除了常见前置空白内容。制表符和空格都可视作空白内容，但两者并不等价。因此，本例中的对唯一空白内容 tag 进行了删除。</p><h3 id="indent-函数"><a href="#indent-函数" class="headerlink" title="indent()函数"></a>indent()函数</h3><p>indent()函数用于在文本选择定行的起始处添加指定前置内容。</p><p>该函数的语法为：textwrap.indent(text, prefix)</p><ul><li>text: 主字符串</li><li>prefix: 要添加的前置内容</li></ul><p>创建一个脚本indent_example.py并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> textwrap<br> <br>str1 = <span class="hljs-string">&quot;Python is an interpreted high-level programming language for general-purpose programming. Created by Guido van Rossum and first released in 1991, \n\nPython has a design philosophy that emphasizes code readability, notably using significant whitespace.&quot;</span><br> <br>w = textwrap.fill(str1, width=<span class="hljs-number">30</span>)<br>i = textwrap.indent(w , <span class="hljs-string">&#x27;*&#x27;</span>)<br><span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>[liyupi@localhost Chapter07]$ python3 indent_example.py<br>*Python is an interpreted high-<br>*level programming language <span class="hljs-keyword">for</span><br>*general-purpose programming.<br>*Created by Guido van Rossum<br>*and first released <span class="hljs-keyword">in</span> 1991,<br>*Python has a design philosophy<br>*that emphasizes code<br>*readability, notably using<br>*significant whitespace.<br></code></pre></td></tr></table></figure><p>在上例中，我们使用了textwrap模块的fill()和indent()函数。首先，我们使用了fill方法将数据存储在变量w中。接着我们使用了indent方法，输出的每行都会添加一个前缀*。然后我们打印了输出。</p><h3 id="shorten-函数"><a href="#shorten-函数" class="headerlink" title="shorten()函数"></a>shorten()函数</h3><p>textwraps模块中的这一函数用于截断文本来适配指定的宽度。例如，我们想要创建摘要或预览时，可使用 shorten()函数。使用 shorten()时，文本中所有的空白内容都会被标准化为单个空格。</p><p>该函数的语法为：textwrap.shorten(text, width)</p><p>下面我们来看一个shorten()的示例。创建一个脚本shorten_example.py并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> textwrap<br> <br>str1 = <span class="hljs-string">&quot;Python is an interpreted high-level programming language for general-purpose programming. Created by Guido van Rossum and first released in 1991, \n\nPython has a design philosophy that emphasizes code readability, notably using significant whitespace.&quot;</span><br> <br>s = textwrap.shorten(str1, width=<span class="hljs-number">50</span>)<br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> shorten_example.<span class="hljs-keyword">py</span> <br>Python <span class="hljs-keyword">is</span> <span class="hljs-keyword">an</span> interpreted high-level [...]<br></code></pre></td></tr></table></figure><p>在上例中，我们使用了shorten()函数来截取文本来适配指定的宽度。首先，所有的空白内容都被截断为单个空格。如果结果符合指定宽度，则会将结果显示在屏幕上。否则，指定宽度的单词会显示在屏幕上，而其余的则放在占位符中。</p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>这一部分中，我们将来学习Python中的正则表达式。正则表达式是一种专用编程语言，内置在Python中，用户可通过re来进行使用。我们为想要匹配的字符串集定义规则 。使用正则表达式，我们可以从文件、代码、文档、电子表格等中提取指定的信息。</p><p>在Python中，正则表达式由re表示并可通过re模块来进行导入。正则表达式支持4种内容：</p><ul><li>标识符</li><li>修饰符</li><li>空白字符</li><li>Flag标记</li></ul><p>以下表格列出了标识符（identifier），对每一个都有相关的描述：</p><table><thead><tr><th>标识符</th><th>描述</th></tr></thead><tbody><tr><td>\w</td><td>匹配字字母数字字符，包含下划线(_)</td></tr><tr><td>\W</td><td>匹配非字母数字字符，不包含下划线(_)</td></tr><tr><td>\d</td><td>匹配一个数字</td></tr><tr><td>\D</td><td>匹配一个非数字字符</td></tr><tr><td>\s</td><td>匹配一个空格</td></tr><tr><td>\S</td><td>匹配空格以外的字符</td></tr><tr><td>.</td><td>匹配一个点号 (.)，注：应为任意字符</td></tr><tr><td>\b</td><td>匹配任意新行以外的字符</td></tr></tbody></table><p>下表中列出了修饰符（modifier）以及对应的描述：</p><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td>^</td><td>匹配字符串的起始处</td></tr><tr><td>$</td><td>匹配字符串的结尾处</td></tr><tr><td>?</td><td>匹配0次或11次</td></tr><tr><td>*</td><td>匹配0次或多次</td></tr><tr><td>+</td><td>匹配1次或多次</td></tr><tr><td>|</td><td>匹配两边内容之一x&#x2F;y</td></tr><tr><td>[ ]</td><td>范围匹配</td></tr><tr><td>{x}</td><td>前面标识符的匹配次数</td></tr></tbody></table><p>下表中列出了空白字符（whitespace）及相应描述：</p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>\s</td><td>空格</td></tr><tr><td>\t</td><td>制表符 Tab</td></tr><tr><td>\n</td><td>新起一行</td></tr><tr><td>\e</td><td>回撤Escape</td></tr><tr><td>\f</td><td>换页Form feed</td></tr><tr><td>\r</td><td>返回</td></tr></tbody></table><p>以下表格列出了标记及相应描述：</p><table><thead><tr><th>Flag 标记</th><th>描述</th></tr></thead><tbody><tr><td>re.IGNORECASE</td><td>忽略大小写匹配</td></tr><tr><td>re.DOTALL</td><td>匹配包括新行在内的任意字符</td></tr><tr><td>re.MULTILINE</td><td>多行匹配</td></tr><tr><td>Re.ASCII</td><td>仅对ASCII字符进行转义匹配</td></tr></tbody></table><p>下面我们来看看一些正则表达式的示例。我们将学习match(), search(), findall()和sub()函数。</p><blockquote><p>ℹ️要使用Python中的正则表达式，必须要在脚本中导入re模块，这样才能对正则表达式使用所有的函数和方法。</p></blockquote><p>下面我们就来逐一地学习这些函数。</p><h3 id="match-函数"><a href="#match-函数" class="headerlink" title="match()函数"></a>match()函数</h3><p>match()是re模块中的一个函数。该函数会将指定的re模式与字符串相匹配。如果找到了匹配，会返回一个匹配对象。匹配对象中包含匹配的相关信息。如果未找到匹配，我们得到的结果是None。match对象有两个方法：</p><ul><li>group(num): 返回整个匹配</li><li>groups(): 在元组中返回所有匹配的子组</li></ul><p>该函数的语法如下：</p><p>re.match(pattern, string)</p><p>下面我们来看一个re.match()的示例。创建一个脚本re_match.py并编写如下的内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>str_line = <span class="hljs-string">&quot;This is python tutorial. Do you enjoy learning python ?&quot;</span><br>obj = re.match(<span class="hljs-string">r&#x27;(.*) enjoy (.*?) .*&#x27;</span>, str_line)<br><span class="hljs-keyword">if</span> obj:<br><span class="hljs-built_in">print</span>(obj.groups())<br><br></code></pre></td></tr></table></figure><p>运行该脚本，将得到如下输出：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">python3 re_match.py <br>(<span class="hljs-symbol">&#x27;This</span> <span class="hljs-keyword">is</span> python tutorial. <span class="hljs-keyword">Do</span> you&#x27;, <span class="hljs-symbol">&#x27;learning</span>&#x27;)<br></code></pre></td></tr></table></figure><p>在以上脚本中，我们导入了re模块来在Python中使用正则表达式。然后我们创建了一个字符串str_line。接着我们创建了一个匹配对象obj并在其中存储了模式匹配的结果。本例中，(.<em>) enjoy (.</em>?) .*模式会打印出enjoy关键字之前的所有内容，以及只打出enjoy关键字之后的一个单词。然后我们使用了匹配对象的groups()方法。它会打印出元组中的所有匹配子字符串。因此，我闪将得到的输出是(‘This is python tutorial. Do you’, ‘learning’)。</p><h3 id="search-函数"><a href="#search-函数" class="headerlink" title="search()函数"></a>search()函数</h3><p>re模块中的search()函数会对字符串进行搜索。它会查找re模式中的所有位置。search()会接收一个模式和文本，并在指定的字符串中搜索匹配内容。它会在查找到匹配时会返回一个匹配对象，否则返回None。match对象有两个方法：</p><ul><li>group(num): 返回整个匹配</li><li>groups(): 在元组中返回所有匹配的子组</li></ul><p>该函数的语法如下：</p><p>re.search(pattern, string)</p><p>创建脚本re_search.py 并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br> <br>pattern = [<span class="hljs-string">&#x27;programming&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>]<br>str_line = <span class="hljs-string">&#x27;Python programming is fun&#x27;</span><br><span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> pattern:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Searching for %s in %s&#x27;</span> % (p, str_line))<br>        <span class="hljs-keyword">if</span> re.search(p, str_line):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Match found&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;No match found&#x27;</span>)<br></code></pre></td></tr></table></figure><p>运行脚本，将会得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 re_search.py <br>Searching <span class="hljs-keyword">for</span> programming <span class="hljs-keyword">in</span> Python programming is fun<br>Match found<br>Searching <span class="hljs-keyword">for</span> hello <span class="hljs-keyword">in</span> Python programming is fun<br>No match found<br></code></pre></td></tr></table></figure><p>上例中，我们使用了匹配对象的search()方法来查找正则模式。在导入re模块后，我们在列表中指定了模式。在该列表中我们编写了两个字符串：programming的hello。接着我们创建了一个字符串：Python programming is fun。我们编写了一个for循环来对指定模式进行逐一检查。如果找到了匹配内容，则执行if代码块，否则执行else代码块。</p><h3 id="findall-函数"><a href="#findall-函数" class="headerlink" title="findall()函数"></a>findall()函数</h3><p>这是match对象的另一个方法。findall() 方法查找所有的匹配内容，然后以字符串列表的形式返回。列表中的每一个元素代表一个匹配。该方法搜索模式的匹配，并不重叠。</p><p>创建一个脚本 re_findall_example.py并编写如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">import re<br><br>pattern = <span class="hljs-string">&#x27;Red&#x27;</span><br>colors = <span class="hljs-string">&#x27;Red, Blue, Black, Red, Green&#x27;</span><br>p = re.findall(pattern, colors)<br><span class="hljs-built_in">print</span>(p)<br><br>str_line = <span class="hljs-string">&#x27;Peter Piper picked a peck of pickled peppers. How many pickled peppers did Peter Piper pick?&#x27;</span><br>pt = re.findall(<span class="hljs-string">&#x27;pe\w+&#x27;</span>, str_line)<br>pt1 = re.findall(<span class="hljs-string">&#x27;pic\w+&#x27;</span>, str_line)<br><span class="hljs-built_in">print</span>(pt)<br><span class="hljs-built_in">print</span>(pt1)<br><br>line = <span class="hljs-string">&#x27;Hello hello HELLO bye&#x27;</span><br>p = re.findall(<span class="hljs-string">&#x27;he\w+&#x27;</span>, line, re.IGNORECASE)<br><span class="hljs-built_in">print</span>(p)<br><br></code></pre></td></tr></table></figure><p>运行脚本，将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 re_findall_example.py <br>[<span class="hljs-string">&#x27;Red&#x27;</span>, <span class="hljs-string">&#x27;Red&#x27;</span>]<br>[<span class="hljs-string">&#x27;per&#x27;</span>, <span class="hljs-string">&#x27;peck&#x27;</span>, <span class="hljs-string">&#x27;peppers&#x27;</span>, <span class="hljs-string">&#x27;peppers&#x27;</span>, <span class="hljs-string">&#x27;per&#x27;</span>]<br>[<span class="hljs-string">&#x27;picked&#x27;</span>, <span class="hljs-string">&#x27;pickled&#x27;</span>, <span class="hljs-string">&#x27;pickled&#x27;</span>, <span class="hljs-string">&#x27;pick&#x27;</span>]<br>[<span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;HELLO&#x27;</span>]<br></code></pre></td></tr></table></figure><p>以上脚本中，我们使用findall() 方法编写了三个示例。第一个示例中，我们定义了一个模式和一个字符串。我们使用findall() 方法在这个字符串查找 该模式，然后进行打印。第二个示例中，我们创建了一个字符串，并使用findall()查找该字符串中前面两个字母为pe的单词，然后进行打印。我们得到了一个前两个字母为pe的单词列表。</p><p>此外，我们查找前三个字母为pic的单词并进行打印。这里我们同样将得到一个字符串列表。第三个示例中，我们创建了一个字符串，包含大小写的hello以及单词bye。我们使用findall()查找前两个字母为he的单词。同时在findall()中我们使用了re.IGNORECASE标记来忽略单词的大小写并进行了打印。</p><h3 id="sub-函数"><a href="#sub-函数" class="headerlink" title="sub()函数"></a>sub()函数</h3><p>这是re模块中最重要的函数之一。sub()用于将指定的替代文本替换掉re模式。它将以替换字符串来替换掉所有re模式发生的内容。语法如下：</p><p>re.sub(pattern, repl_str, string, count&#x3D;0)</p><ul><li>pattern: re模式</li><li>repl_str: 替换字符串</li><li>string: 主字符串</li><li>count: 进行替换的次数。默认值为0，表示替换所有发生之处。</li></ul><p>下面我们来创建脚本re_sub.py并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>str_line = <span class="hljs-string">&#x27;Peter Piper picked a peck of pickled peppers. How many pickled peppers did Peter Piper pick?&#x27;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Original: &#x27;</span>, str_line)<br>p = re.sub(<span class="hljs-string">&#x27;Peter&#x27;</span>, <span class="hljs-string">&#x27;Mary&#x27;</span>, str_line)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Replaced: &#x27;</span>, p)<br><br>p = re.sub(<span class="hljs-string">&#x27;Peter&#x27;</span>, <span class="hljs-string">&#x27;Mary&#x27;</span>, str_line, count=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Replacing only one occurence of Peter... &#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Replaced: &#x27;</span>, p)<br><br></code></pre></td></tr></table></figure><p>运行脚本，将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 re_sub.py<br>Original:  Peter Piper picked a peck of pickled peppers. How many pickled peppers did Peter Piper pick?<br>Replaced:  Mary Piper picked a peck of pickled peppers. How many pickled peppers did Mary Piper pick?<br>Replacing only one occurence of Peter... <br>Replaced:  Mary Piper picked a peck of pickled peppers. How many pickled peppers did Peter Piper pick?<br></code></pre></td></tr></table></figure><p>上例中，我们使用了sub()来以指定的字符串来替换re模式。我们以Mary替换了Peter。因此，所有的Peter都以Mary进行了替换。接着，我们增加了count参数。传入了count&#x3D;1，表示只对Peter进行一次替换，其它的Peter都不进行替换。</p><p>下面，我们将学习re模块中的subn()函数。subn()函数和sub()作用相同，并包含更多的功能。subn() 函数返回一个包含新字符串和执行的替换次数的元组。我们来看一个subn() 的示例。创建一个脚本re_subn.py并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;str1:- &#x27;</span>)<br>str1 = <span class="hljs-string">&#x27;Sky is blue. Sky is beautiful.&#x27;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Original: &#x27;</span>, str1)<br>p = re.subn(<span class="hljs-string">&#x27;beautiful&#x27;</span>, <span class="hljs-string">&#x27;stunning&#x27;</span>, str1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Replaced: &#x27;</span>, p)<br><span class="hljs-built_in">print</span>()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;str_line- :&#x27;</span>)<br>str_line = <span class="hljs-string">&#x27;Peter Piper picked a peck of pickled peppers. How many pickled peppers did Peter Piper pick?&#x27;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Original: &#x27;</span>, str_line)<br>p = re.subn(<span class="hljs-string">&#x27;Peter&#x27;</span>, <span class="hljs-string">&#x27;Mary&#x27;</span>, str_line)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Replaced: &#x27;</span>, p)<br><br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 re_subn.py<br>str1:- <br>Original:  Sky is blue. Sky is beautiful.<br>Replaced:  (<span class="hljs-string">&#x27;Sky is blue. Sky is stunning.&#x27;</span>, 1)<br><br>str_line- :<br>Original:  Peter Piper picked a peck of pickled peppers. How many pickled peppers did Peter Piper pick?<br>Replaced:  (<span class="hljs-string">&#x27;Mary Piper picked a peck of pickled peppers. How many pickled peppers did Mary Piper pick?&#x27;</span>, 2)<br></code></pre></td></tr></table></figure><p>上例中，我们使用了subn()函数来替换RE模式。结果我们得到了一个包含替换后文本和替换次数的元组。</p><h2 id="Unicode字符串"><a href="#Unicode字符串" class="headerlink" title="Unicode字符串"></a>Unicode字符串</h2><p>这一部分中我们将学习如何在Python中打印Unicode字符串。Python可以很轻易地处理Unicode字符串。字符串类型中包含的实际上是Unicode字符串，而非字节序列。</p><p>在系统中启动python3终端并编写如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">student@python-scripting:~/Chapter07$ python3<br>Python 3.7.2 (default, Feb 26 2019, 15:56:02)<br>[GCC 5.4.0 20160609] on linux<br>Type <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> or <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br>&gt;&gt;&gt; <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\u2713&#x27;</span>)<br>✓<br>&gt;&gt;&gt; <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\u2724&#x27;</span>)<br>✤<br>&gt;&gt;&gt; <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\u2750&#x27;</span>)<br>❐<br>&gt;&gt;&gt; <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\u2780&#x27;</span>)<br>➀<br>&gt;&gt;&gt; chinese = <span class="hljs-string">&#x27;\u4e16\u754c\u60a8\u597d!&#x27;</span><br>&gt;&gt;&gt; chinese<br><span class="hljs-string">&#x27;世界您好!&#x27;</span><br>&gt;&gt;&gt; s = <span class="hljs-string">&#x27;\u092E\u0941\u0902\u092C\u0908&#x27;</span><br>&gt;&gt;&gt; s<br><span class="hljs-string">&#x27;मुंबई&#x27;</span>                   ------(印地语中“孟买”的意思)<br>&gt;&gt;&gt; s = <span class="hljs-string">&#x27;\u10d2\u10d0\u10db\u10d0\u10e0\u10ef\u10dd\u10d1\u10d0&#x27;</span><br>&gt;&gt;&gt; s<br><span class="hljs-string">&#x27;გამარჯობა&#x27;</span>                   ------(格鲁吉亚语中“Hello”的意思)<br>&gt;&gt;&gt; s = <span class="hljs-string">&#x27;\u03b3\u03b5\u03b9\u03b1\u03c3\u03b1\u03c2&#x27;</span><br>&gt;&gt;&gt; s<br><span class="hljs-string">&#x27;γειασας&#x27;</span>                   ------(希腊语中“Hello”的意思)<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><h3 id="Unicode代码点"><a href="#Unicode代码点" class="headerlink" title="Unicode代码点"></a>Unicode代码点</h3><p>这一部分中，我们将学习unicode代码点（code point）。Python有一个名为ord() 的强大内置函数，可从指定字符获取Unicode代码点。因此我们来看一个从字符获取Unicode代码点的示例，参见如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; str1 = u<span class="hljs-string">&#x27;Office&#x27;</span><br>&gt;&gt;&gt; <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> str1:<br>... <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;U+%04x&#x27;</span> % ord(char))<br>...<br>U+004f<br>U+0066<br>U+0066<br>U+0069<br>U+0063<br>U+0065<br>&gt;&gt;&gt; str2 = <span class="hljs-string">&#x27;中文&#x27;</span><br>&gt;&gt;&gt; <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> str2:<br>... <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;U+%04x&#x27;</span> % ord(char))<br>...<br>U+4e2d<br>U+6587<br></code></pre></td></tr></table></figure><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>将Unicode代码点转换为字节串称为编码。我们来看一个如何对Unicode代码点编码的示例，参见如下代码：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">str</span> = <span class="hljs-string">u&#x27;Office&#x27;</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">enc_str = <span class="hljs-built_in">type</span>(<span class="hljs-built_in">str</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">enc_str</span><br>&lt;class &#x27;bytes&#x27;&gt;<br></code></pre></td></tr></table></figure><h4 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h4><p>由字节串转换为Unicode代码点称为解码。下面我们来看一个如何对字节串解码获取Unicode代码点的示例，参见如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; str = bytes(<span class="hljs-string">&#x27;Office&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>&gt;&gt;&gt; dec_str = str.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>&gt;&gt;&gt; dec_str<br><span class="hljs-string">&#x27;Office&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="避免UnicodeDecodeError"><a href="#避免UnicodeDecodeError" class="headerlink" title="避免UnicodeDecodeError"></a>避免UnicodeDecodeError</h3><p>UnicodeDecodeError在字节串无法解码为Unicode代码点时会报出。要避免这一异常，我们可以向decode中错误参数传递replace, backslashreplace或ignore，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; str = b<span class="hljs-string">&quot;\xaf&quot;</span><br>&gt;&gt;&gt; str.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>, <span class="hljs-string">&#x27;strict&#x27;</span>)<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line 1, <span class="hljs-keyword">in</span> &lt;module&gt;<br>UnicodeDecodeError: <span class="hljs-string">&#x27;utf-8&#x27;</span> codec can<span class="hljs-string">&#x27;t decode byte 0xaf in position 0: invalid start byte</span><br><span class="hljs-string">&gt;&gt;&gt; str.decode(&#x27;</span>utf-8<span class="hljs-string">&#x27;, &#x27;</span>replace<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">&#x27;</span>�<span class="hljs-string">&#x27;       # 原文是&#x27;</span>\ufffd<span class="hljs-string">&#x27;，测试了3.6和3.7均是前面的结果</span><br><span class="hljs-string">&gt;&gt;&gt; str.decode(&#x27;</span>utf-8<span class="hljs-string">&#x27;, &#x27;</span>backslashreplace<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">&#x27;</span>\\xaf<span class="hljs-string">&#x27;</span><br><span class="hljs-string">&gt;&gt;&gt; str.decode(&#x27;</span>utf-8<span class="hljs-string">&#x27;, &#x27;</span>ignore<span class="hljs-string">&#x27;)</span><br></code></pre></td></tr></table></figure><h2 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h2><p>本章中我们学习了正则表达式，使用它我们可以定义一系列想要匹配字符串的规则。我们也学习了re模块中的四个函数：match(), search(), findall()和sub()。</p><p>我们学习了textwrap模块，用于对普通文本进行格式化和封装。我们还学习了textwrap模块中的wrap(), fill(), dedent(), indent()和shorten()函数。最后，我们学习了Unicode字符以及如何在Python中打印Unicode字符串。</p><p>下一章中，我们将学习Python中的标准文档和信息报告。</p><h2 id="课后问题-5"><a href="#课后问题-5" class="headerlink" title="课后问题"></a>课后问题</h2><ol><li>Python中的正则表达式是什么？</li><li>编写一个Python程序来检查只包含指定字符集合的字符串（本例中为a–z, A–Z和0–9）。</li><li>Python中的哪个模块支持正则表达式？<br>a) re<br>b) regex<br>c) pyregex<br>d) 以上都不是</li><li>re.match函数的作用是什么？<br>a)在字符串起始处匹配模式<br>b)在字符中任意位置匹配模式<br>c)不存在该函数<br>d)以上都不对</li><li>以下的输出是什么？<br>语句: “we are humans”<br>匹配：re.match(r’(.<em>) (.</em>?) (.*)’, sentence)<br>a) (‘we’, ‘are’, ‘humans’)<br>b) (we, are, humans)<br>c) (‘we’, ‘humans’)<br>d) ‘we are humans’</li></ol><h2 id="扩展阅读-5"><a href="#扩展阅读-5" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul><li>正则表达式: <a href="https://docs.python.org/3.2/library/re.html">https://docs.python.org/3.2/library/re.html</a></li><li>Textwrap文档: <a href="https://docs.python.org/3/library/textwrap.html">https://docs.python.org/3/library/textwrap.html</a></li><li>Unicode文档: <a href="https://docs.python.org/3/howto/unicode.html">https://docs.python.org/3/howto/unicode.html</a></li></ul><h1 id="第八章-文档和报告"><a href="#第八章-文档和报告" class="headerlink" title="第八章 文档和报告"></a><a href="https://alanhou.org/documentation-reporting/">第八章 文档和报告</a></h1><blockquote></blockquote><p>本章中我们将学习使用Python来记录和报告信息。我们会学习如何使用Python脚本来接收输入以及如何打印输出。在Python中编写脚本更为容易。我们将学习如何格式化信息。</p><p>本章中，我们将学习如下内容：</p><ul><li>标准输入和输出</li><li>信息格式化</li><li>发送email</li></ul><h2 id="标准输入和输出"><a href="#标准输入和输出" class="headerlink" title="标准输入和输出"></a>标准输入和输出</h2><p>这一部分，我们将学习Python中的输入和输出。我们会学习stdin和stdout，以及input()函数。</p><p>stdin和stdout是类似文件的对象。这些对象由操作系统提供。当用户在交互会话中运行程序时，stdin作为输入，stdout是用户的终端。因为stdin是类似文件的对象，我们要从stdin中读取数据而不是在运行时读取数据。stdout用于输出。它用作表达式和print()函数的输出，以及input()函数的弹出界面。</p><p>接下来，我们来看一个stdin和stdout的示例。为此创建一个脚本stdin_stdout_example.py并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Enter number1: &quot;</span>)<br>a = <span class="hljs-built_in">int</span>(sys.stdin.readline())<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Enter number2: &quot;</span>)<br>b = <span class="hljs-built_in">int</span>(sys.stdin.readline())<br><br>c = a + b<br>sys.stdout.write(<span class="hljs-string">&quot;Result: %d &quot;</span> % c)<br><br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 stdin_stdout_example.py<br>Enter number1: <br>10<br>Enter number2: <br>20<br>Result: 30 <br></code></pre></td></tr></table></figure><p>在上例中，我们使用了stdin和stdout来接收输入和展示输出。sys.stdin.readline() 会从stdin中进行读取。sys.stdout.write()会写入数据。</p><p>下面我们将学习input()和print()函数。input() 函数用于从用户接收输入。该函数有一个可选参数：提示字符串。</p><p>语法：input(prompt)</p><p>input()函数返回一个字符串值。如果需要数值，仅需在input()之前使用int关键字。可以使用如下方式：</p><p>int(input(prompt))</p><p>类似地，我们可以书写float来获取浮点值。下面我们来看一个示例。创建一个脚本 input_example.py并编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">str1 = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter a string: &quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Entered string is : &quot;</span>, str1)<br><span class="hljs-built_in">print</span>()<br><br>a = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter the value of a: &quot;</span>))<br>b = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter the value of b: &quot;</span>))<br>c = a + b<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Value of c is: &quot;</span>, c)<br><span class="hljs-built_in">print</span>()<br><br>num1 = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter num 1: &quot;</span>))<br>num2 = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter num 2: &quot;</span>))<br>num3 = num1/num2<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Value of num3 is: &quot;</span>, num3)<br><br></code></pre></td></tr></table></figure><p>运行脚本，将得到如下结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 input_example.py<br>Enter a string: Hello<br>Entered string is :  Hello<br><br>Enter the value of a: 10<br>Enter the value of b: 20<br>Value of c is:  30<br><br>Enter num 1: 10.5<br>Enter num 2: 2.0<br>Value of num3 is:  5.25<br></code></pre></td></tr></table></figure><p>上例中我们使用了input()函数来处理三个不同值。第一个为字符串，第二个为整数值，第三个浮点值。要对整型和浮点型使用input()，我们需要用int()和float()类型转换函数来将接收到的字符串分别转换为整型和浮点型。</p><p>print()函数用于输出数据。我们需要传入一个逗号分隔的一系列参数。在input_example.py中，要得到输出，我们使用print()函数。使用print()函数，我们可以仅通过在数据两边加上 ” ” 或 ‘ ‘来将数据写到屏幕上。如果仅输出值，只需将变量名写到print()函数中。如果想要在同一个print()函数中编写文本同时获取值，那么将两者使用逗号分隔即可。</p><p>我们来看一个print()函数的简单示例。创建脚本print_example.py并在其中编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在屏幕上打印简单字符串</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello Python&quot;</span>)<br><br><span class="hljs-comment"># 仅访问值</span><br>a = <span class="hljs-number">80</span><br><span class="hljs-built_in">print</span>(a)<br><br><span class="hljs-comment"># 在屏幕上打印字符串并获取值</span><br>a = <span class="hljs-number">50</span><br>b = <span class="hljs-number">30</span><br>c = a/b<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The value of c is: &quot;</span>, c)<br><br></code></pre></td></tr></table></figure><p>运行脚本，将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 print_example.py<br>Hello Python<br>80<br>The value of c is:  1.6666666666666667<br></code></pre></td></tr></table></figure><p>上例中，首先我们简单地在屏幕上打印了一个字符串。然后我们获取了变量 a 的值并在屏幕上进行了打印。最后，我们输入了 a 和 b 的值，进行想加并存储在变量 c 中，然后打印了一个语句并在同一个print()函数访问了变量值。</p><h2 id="信息格式化"><a href="#信息格式化" class="headerlink" title="信息格式化"></a>信息格式化</h2><p>这部分中，我们将学习字符串的格式化。我们将学习格式化信息的两种方式：一种是使用string format()方法，另一种通过使用 %运算符。</p><p>首先，我们会学习使用字符串的format()方法来格式化字符串。字符串类的该方法让我们可以对值进行格式化。它也可以让我们进行变量替换。这将通过位置参数来合并元素。</p><p>下面我们将学习如何使用格式化器来进行这一格式化。调用该方法的字符串可以包含纯文本或以大括号{}分隔的替换字段。对同一字符串进行格式化时可以使用多组 {}。这一替换字段可包含参数的索引或参数的名称。运行之后，我们将得到一个以参数字符串值对字段进行替换后的字符串的拷贝。</p><p>下面我们就来看一个字符串格式化的示例。</p><p>创建一个脚本format_example.py并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Using single formatter</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;, My name is John&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;Hi&quot;</span>))<br>str1 = <span class="hljs-string">&quot;This is John. I am learning &#123;&#125; scripting language.&quot;</span><br><span class="hljs-built_in">print</span>(str1.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;Python&quot;</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hi, My name is Sara and I am &#123;&#125; years old!!&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">26</span>))<br><br><span class="hljs-comment"># Using multiple formatters</span><br>str2 = <span class="hljs-string">&quot;This is Mary &#123;&#125;. I wark at &#123;&#125; Resource department. I am &#123;&#125; years old!!&quot;</span><br><span class="hljs-built_in">print</span>(str2.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;Jacobs&quot;</span>, <span class="hljs-string">&quot;Human&quot;</span>, <span class="hljs-number">30</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello &#123;&#125;, Nice to meet you. I am &#123;&#125;.&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;Emily&quot;</span>, <span class="hljs-string">&quot;Jennifer&quot;</span>))<br><br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"> python3 format_example.py<br>Hi, My name is John<br>This is John. I am learning Python scripting language.<br>Hi, My name is Sara and I am 26 years old!!<br>This is Mary Jacobs. I wark at Human Resource department. I am 30 years old!!<br>Hello Emily, Nice to meet you. I am Jennifer.<br></code></pre></td></tr></table></figure><p>上例中，我们使用了字符串类的format() 方法并通过一个和多个格式化器进行了字符串格式化。</p><p>下面，我们将学习使用%运算符来进行字符串格式化。与%运算符一同使用的还有一些格式化符号。以下是常用的一些符号：</p><ul><li>%d: 数字整型</li><li>%s: 字符串</li><li>%f: 浮点数</li><li>%c: 字符</li></ul><p>我们来看一个示例。创建一个脚本string_formatting.py并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Basic formatting</span><br>a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">20</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The values of a and b are %d %d&quot;</span> % (a, b))<br>c = a + b<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The value of c is %d&quot;</span> % c)<br><br>str1 = <span class="hljs-string">&quot;John&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My name is %s&quot;</span> % str1)<br><br>x = <span class="hljs-number">10.5</span><br>y = <span class="hljs-number">33.5</span><br>z = x * y<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The value of z is %f&quot;</span> % z)<br><span class="hljs-built_in">print</span>()<br><br><span class="hljs-comment"># aligning</span><br>name = <span class="hljs-string">&quot;Mary&quot;</span><br>a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">20</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The values of a and b are %d %d&quot;</span> % (a, b))<br>c = a + b <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The value of c is %d&quot;</span> % c)<br><br>str1 = <span class="hljs-string">&quot;John&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My name is %s&quot;</span> % str1)<br><br>x = <span class="hljs-number">10.5</span><br>b = <span class="hljs-number">33.5</span><br>z = x * y<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The value of z is %f&quot;</span> % z)<br><span class="hljs-built_in">print</span>()<br><br><span class="hljs-comment"># aligning</span><br>name = <span class="hljs-string">&quot;Mary&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Normal: Hello, I am %s !!&quot;</span> % name)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Right aligned: Hello, I am %10s !!&quot;</span> % name)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Left aligned: Hello, I am %-10s !!&quot;</span> % name)<br><span class="hljs-built_in">print</span>()<br><br><span class="hljs-comment"># truncating</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The truncated string is %.4s&quot;</span> % (<span class="hljs-string">&quot;Examination&quot;</span>))<br><span class="hljs-built_in">print</span>()<br><br><span class="hljs-comment"># formatting placeholders</span><br>students = &#123;<span class="hljs-string">&#x27;Name&#x27;</span> : <span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;Address&#x27;</span> : <span class="hljs-string">&#x27;New York&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Student details: Name:%(Name)s Address:%(Address)s&quot;</span> % students)<br><br></code></pre></td></tr></table></figure><p>运行脚本，将得到如下结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 string_formatting.py<br>The values of a and b are 10 20<br>The value of c is 30<br>My name is John<br>The value of z is 351.750000<br><br>The values of a and b are 10 20<br>The value of c is 30<br>My name is John<br>The value of z is 351.750000<br><br>Normal: Hello, I am Mary !!<br>Right aligned: Hello, I am       Mary !!<br>Left aligned: Hello, I am Mary       !!<br><br>The truncated string is Exam<br><br>Student details: Name:John Address:New York<br></code></pre></td></tr></table></figure><p>上例中，我们使用了%运算符来格式化字符串：%d为数字，%s为字符串，%f 为浮点数。然后，我们对字符串进行了向左和向右对齐。我们还学习了如何使用%运算符截取字符串。%.4s仅显示前4个字符。然后我们创建了一个名为students的字典，并输入了Name和Address键值对。最后，我们在%运算符之后放置键名来获取这些字符串。</p><h2 id="发送email"><a href="#发送email" class="headerlink" title="发送email"></a>发送email</h2><p>这一部分中，我们将学习通过Python脚本来从Gmail发送邮件。Python带有一个名为smtplib的模块实现这一功能。Python中的smtplib模块提供了SMTP客户端会话对象，用于使用SMTP监听器向互联网上的任意机器发送邮件。</p><p>我们来看一个示例。本例中，我们将从Gmail向收件人发送一封包含简单文本的email。</p><p>创建一个send_email.py脚本并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> smtplib<br><span class="hljs-keyword">from</span> email.mime.text <span class="hljs-keyword">import</span> MIMEText<br><span class="hljs-keyword">import</span> getpass<br><br>host_name = <span class="hljs-string">&#x27;smtp.gmail.com&#x27;</span><br><span class="hljs-comment"># host_name = &#x27;smtp.exmail.qq.com&#x27;</span><br>port = <span class="hljs-number">465</span><br><br>u_name = <span class="hljs-string">&#x27;username/emailid&#x27;</span><br>password = getpass.getpass()<br>sender = <span class="hljs-string">&#x27;sender_name&#x27;</span><br>receivers = [<span class="hljs-string">&#x27;receiver1_email_address&#x27;</span>, <span class="hljs-string">&#x27;receiver2_email_address&#x27;</span>]<br><br>text = MIMEText(<span class="hljs-string">&#x27;Test mail&#x27;</span>)<br>text[<span class="hljs-string">&#x27;Subject&#x27;</span>] = <span class="hljs-string">&#x27;Test&#x27;</span><br>text[<span class="hljs-string">&#x27;From&#x27;</span>] = sender<br>text[<span class="hljs-string">&#x27;To&#x27;</span>] = <span class="hljs-string">&#x27;, &#x27;</span>.join(receivers)<br><br>s_obj = smtplib.SMTP_SSL(host_name, port)<br>s_obj.login(u_name, password)<br>s_obj.sendmail(sender, receivers, text.as_string())<br>s_obj.quit()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Mail sent successully&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>译者注：测试时Gmail和 QQ 邮箱报错：smtplib.SMTPAuthenticationError，应为验证机制所致，腾讯企业邮箱正常</p><p>运行脚本如下</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">python3</span> send_email.<span class="hljs-keyword">py</span> <br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Password:</span>Mail sent successully<br></code></pre></td></tr></table></figure><p>上例中，我们通过Gmail ID来向收件人发送邮件。变量u_name会存储你的email ID。对password变量，你可以直接使用密码赋值，也可以使用getpass模块来接收密码输入。这里我们提示输入密码。变量sender中可传入你的姓名。接着我们添加了邮件发送的多个接收人。然后，我们传入了标题、发件人和邮件的接收者。接着我们在login()中放入了u_name和password变量。再后在sendmail()中，我们传入了发件人、收件人和变量text。那么使用这个流程我们成功的发送了邮件。</p><p>下面我们再来看一个示例，发送一个带附件的邮件。本例中，我们将向接收人发送一张图片。我们将通过Gmail来发送这一邮件。创建一个脚本send_email_attachment.py并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> smtplib<br><span class="hljs-keyword">from</span> email.mime.text <span class="hljs-keyword">import</span> MIMEText<br><span class="hljs-keyword">from</span> email.mime.image <span class="hljs-keyword">import</span> MIMEImage<br><span class="hljs-keyword">from</span> email.mime.multipart <span class="hljs-keyword">import</span> MIMEMultipart<br><span class="hljs-keyword">import</span> getpass<br><br>host_name = <span class="hljs-string">&#x27;smtp.gmail.com&#x27;</span><br>port = <span class="hljs-number">465</span><br><br>u_name = <span class="hljs-string">&#x27;username/emailid&#x27;</span><br>password = getpass.getpass()<br>sender = <span class="hljs-string">&#x27;sender_name&#x27;</span><br>receivers = [<span class="hljs-string">&#x27;receiver1_email_address&#x27;</span>, <span class="hljs-string">&#x27;receiver2_email_address&#x27;</span>]<br><br>text = MIMEMultipart()<br>text[<span class="hljs-string">&#x27;Subject&#x27;</span>] = <span class="hljs-string">&#x27;Test Attachment&#x27;</span><br>text[<span class="hljs-string">&#x27;From&#x27;</span>] = sender<br>text[<span class="hljs-string">&#x27;To&#x27;</span>] = <span class="hljs-string">&#x27;, &#x27;</span>.join(receivers)<br><br>txt = MIMEText(<span class="hljs-string">&#x27;sending a sample image.&#x27;</span>)<br>text.attach(txt)<br><br>f_path = <span class="hljs-string">&#x27;/home/student/Desktop/mountain.jpg&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(f_path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>img = MIMEImage(f.read())<br><br>img.add_header(<span class="hljs-string">&#x27;Content-Disposition&#x27;</span>,<br><span class="hljs-string">&#x27;attachment&#x27;</span>,<br>filename=os.path.basename(f_path))<br><br>text.attach(img)<br><br>server = smtplib.SMTP_SSL(host_name, port)<br>server.login(u_name, password)<br>server.sendmail(u_name, receivers, text.as_string())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Email with attachment sent successfully !!&quot;</span>)<br>server.quit() <br><br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">python3</span> send_email_attachment.<span class="hljs-keyword">py</span> <br></code></pre></td></tr></table></figure><p> 输出</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">Password:Email with attachment sent successfully !!<br></code></pre></td></tr></table></figure><p>上例中，我们向接收人发送了一张带有图片附件的邮件。我们传入了发送人和接收人的email ID。然后，为f_path赋值了作为附件发送的图片的路径。再后我们向接收人发送了以该图片为附件的邮件。</p><blockquote><p>ℹ️在前面的两个例子中 – send_text.py和send_email_attachment.py – 我们通过 Gmail 发送了邮件。你可以使用任意其它的邮件提供商进行发送。要使用其它的邮件提供商，只需为host_name传入提供商的名称。当然别忘了在前面加上 smtp。在这些示例中，我们使用了smtp.gmail.com，而如果是Yahoo!，你可以使用smtp.mail.yahoo.com。因此可根据邮件提供商的不同来提供对应的主机名和端口。</p></blockquote><h2 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h2><p>本章中，我们学习了标准输入和输出。我们学习了stdin和stdout如何分别进行键盘输入和用户终端输出。我们还学习了input()和print()函数。此外，我们学习了从Gmail向接收人发送邮件。我们使用普通文本以及附件分别发送了邮件。同时我们学习了使用format()方法和%运算符进行字符串格式化。</p><p>下一章中，我们会学习如何处理不同文件，如PDF, Excel和csv。</p><h2 id="课后问题-6"><a href="#课后问题-6" class="headerlink" title="课后问题"></a>课后问题</h2><ol><li><p>stdin和输入的区别是什么？</p></li><li><p>SMTP是什么？</p></li><li><p>以下代码的输出是什么？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt;&gt;&gt; name = <span class="hljs-string">&quot;Eric&quot;</span><br>&gt;&gt;&gt; profession = <span class="hljs-string">&quot;comedian&quot;</span><br>&gt;&gt;&gt; affiliation = <span class="hljs-string">&quot;Monty Python&quot;</span><br>&gt;&gt;&gt; age = 25<br>&gt;&gt;&gt; message = (<br>... f<span class="hljs-string">&quot;Hi &#123;name&#125;. &quot;</span><br>... f<span class="hljs-string">&quot;You are a &#123;profession&#125;. &quot;</span><br>... f<span class="hljs-string">&quot;You were in &#123;affiliation&#125;.&quot;</span><br>... )<br>&gt;&gt;&gt; message<br></code></pre></td></tr></table></figure></li><li><p>以下代码的输出是什么？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">str1 = <span class="hljs-string">&#x27;Hello&#x27;</span><br>str2 = <span class="hljs-string">&#x27;World!&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;str1 + str2 = &#x27;</span>, str1 + str2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;str1 * 3 =&#x27;</span>, str1 * 3)<br></code></pre></td></tr></table></figure></li></ol><h2 id="扩展阅读-6"><a href="#扩展阅读-6" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ol><li>字符串文档：<a href="https://docs.python.org/3.1/library/string.html">https://docs.python.org/3.1/library/string.html</a></li><li>smptplib文档: <a href="https://docs.python.org/3/library/smtplib.html">https://docs.python.org/3/library/smtplib.html</a></li></ol><h1 id="第九章-操作各类文件"><a href="#第九章-操作各类文件" class="headerlink" title="第九章 操作各类文件"></a><a href="https://alanhou.org/working-files/">第九章 操作各类文件</a></h1><p>本章中我们将学习操作各种文件类型，如PDF文件、Excel、CSV和txt文件。Python有对这些文件执行操作的不同模块。我们将学习如何使用Python来打开、编辑或从这些文件中读取数据。</p><p>本章将涉及如下课题：</p><ul><li>操作PDF文件</li><li>操作Excel文件</li><li>操作CSV文件</li><li>操作txt文件</li></ul><h2 id="操作PDF文件"><a href="#操作PDF文件" class="headerlink" title="操作PDF文件"></a>操作PDF文件</h2><p>这一部分中，我们将学习如何使用Python模块来处理PDF文件。PDF是被广泛使用的一种文件格式，后缀名为.pdf。Python有一个名为PyPDF2的模块，有助于对pdf文件进行各类操作。它是一个第三方模块，是个创建为PDF工具集的Python库。</p><p>首先我们必须要安装该模块。要安装PyPDF2，在命令终端运行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install PyPDF2<br></code></pre></td></tr></table></figure><p>下面我们来看其中的一些操作来处理PDF文件，比如读取PDF，获取页面数，提取文本和旋转 PDF 页面。</p><h3 id="读取PDF文档并获取页数"><a href="#读取PDF文档并获取页数" class="headerlink" title="读取PDF文档并获取页数"></a>读取PDF文档并获取页数</h3><p>这部分中我们将学习使用PyPDF2模块来读取PDF文件。同时我们会获取到PDF的页面数。该模块带有一个名为PdfFileReader()的函数可进行PDF文件的读取。确保系统里有一个PDF文件。这里我们在系统里有一个Haltermanpythonbook.pdf文件，因此在这一部分中都会使用该文件。使用你的PDF文件名来替换Haltermanpythonbook.pdf。创建脚本read_pdf.py并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> PyPDF2<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;Haltermanpythonbook.pdf&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> pdf:<br>read_pdf = PyPDF2.PdfFileReader(pdf)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Number of pages in pdf : &quot;</span>, read_pdf.numPages)<br><br></code></pre></td></tr></table></figure><p>运行脚本将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 read_pdf.py<br>Number of pages <span class="hljs-keyword">in</span> pdf :  283<br></code></pre></td></tr></table></figure><p>上例中，我们使用了PyPDF2模块。然后我们创建了一个pdf文件对象。PdfFileReader() 会读取所创建的对象。在读取PDF文件后，我们使用numPages属性来获取PDF文件的页数。本例中为283页。</p><h3 id="提取文本"><a href="#提取文本" class="headerlink" title="提取文本"></a>提取文本</h3><p>要提取PDF文件的页面内容，PyPDF2模块带有一个extractText()方法。创建一个名为extract_text.py的脚本并编写如下内容：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">import PyPDF2<br><br><span class="hljs-keyword">with</span> <span class="hljs-keyword">open</span>(&#x27;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Haltermanpythonbook</span>.</span></span>pdf&#x27;, &#x27;rb&#x27;) <span class="hljs-keyword">as</span> pdf:<br>read_pdf = PyPDF2.<span class="hljs-constructor">PdfFileReader(<span class="hljs-params">pdf</span>)</span><br>pdf_page = read_pdf.get<span class="hljs-constructor">Page(2)</span><br>pdf_content = pdf_page.extract<span class="hljs-constructor">Text()</span><br>print(pdf_content)<br><br></code></pre></td></tr></table></figure><p>运行脚本可得到如下输出：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs lasso"> python3 extract_text.py<br>i<br>Contents<br><span class="hljs-number">1</span>TheContextofSoftwareDevelopment1<br><span class="hljs-number">1.1</span>Software<span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>..<br><span class="hljs-number">2</span><br><span class="hljs-number">1.2</span>DevelopmentTools<span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>..<br><span class="hljs-number">2</span><br><span class="hljs-number">1.3</span>LearningProgrammingwithPython<span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>..<br><span class="hljs-number">4</span><br><span class="hljs-number">1.4</span>WritingaPythonProgram<span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br><span class="hljs-number">5</span><br><span class="hljs-number">1.5</span>ALongerPythonprogram<span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br><span class="hljs-number">8</span><br><span class="hljs-number">1.6</span>Summary<span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br><span class="hljs-number">9</span><br><span class="hljs-number">1.7</span>Exercises<span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br><span class="hljs-number">9</span><br><span class="hljs-number">2</span>ValuesandVariables11<br><span class="hljs-number">2.1</span>IntegerValues<span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>..<br><span class="hljs-number">11</span><br><span class="hljs-number">2.2</span>VariablesandAssignment<span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>..<br><span class="hljs-number">16</span><br><span class="hljs-number">2.3</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br><span class="hljs-number">19</span><br><span class="hljs-number">2.4</span>Floating<span class="hljs-params">-pointTypes.....................................</span><br><span class="hljs-number">23</span><br><span class="hljs-number">2.5</span>ControlCodeswithinStrings<span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><br><span class="hljs-number">24</span><br><span class="hljs-number">2.6</span>UserInput<span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br><span class="hljs-number">26</span><br><span class="hljs-number">2.7</span>The<br>eval<br>Function<span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>..<br><span class="hljs-number">27</span><br><span class="hljs-number">2.8</span>Controllingthe<br>print<br>Function<span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>..<br><span class="hljs-number">29</span><br><span class="hljs-number">2.9</span>Summary<span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br><span class="hljs-number">31</span><br><span class="hljs-number">2.10</span>Exercises<span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br><span class="hljs-number">32</span><br><span class="hljs-number">3</span>ExpressionsandArithmetic35<br><span class="hljs-number">3.1</span>Expressions<span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><br><span class="hljs-number">35</span><br><span class="hljs-number">3.2</span>OperatorPrecedenceandAssociativity<span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br><span class="hljs-number">40</span><br><span class="hljs-number">3.3</span>Comments<span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br><span class="hljs-number">41</span><br><span class="hljs-number">3.4</span>Errors<span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><br><span class="hljs-number">42</span><br>©<span class="hljs-number">2011</span>RichardL.Halterman<br>Draftdate:November13,<span class="hljs-number">2011</span><br></code></pre></td></tr></table></figure><p>上例中我们创建了一个文件读取器对象。pdf读取器对象有一个名为getPage()的函数，可接收页面数（索引从0开始）来作为参数，并返回页面对象。然后我们使用了extractText()方法，它可提取getPage()中所指定的的页面的文本。页面的索引从0开始。</p><h3 id="旋转PDF页面"><a href="#旋转PDF页面" class="headerlink" title="旋转PDF页面"></a>旋转PDF页面</h3><p>这部分中我们来看看如何对PDF页面进行旋转。我们可以使用PDF对象的rotate.Clockwise()来进行实现。创建一个名为rotate_pdf.py的脚本并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> PyPDF2<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;Haltermanpythonbook.pdf&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> pdf:<br>rd_pdf = PyPDF2.PdfFileReader(pdf)<br>wr_pdf = PyPDF2. PdfFileWriter()<br><span class="hljs-keyword">for</span> pg_num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rd_pdf.numPages):<br>pdf_page = rd_pdf.getPage(pg_num)<br>pdf_page.rotateClockwise(<span class="hljs-number">90</span>)<br>wr_pdf.addPage(pdf_page)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;rotated.pdf&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> pdf_out:<br>wr_pdf.write(pdf_out)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;pdf successfully rotated&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>运行脚本将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 rotate_pdf.py<br>pdf successfully rotated<br></code></pre></td></tr></table></figure><p>上例中为实现pdf的旋转，我们首先创建一个原pdf文件的pdf文件读取器。然后将旋转后的页面写入一个新的pdf文件中。对新pdf文件的定性主，我们使用了PyPDF2模块中的PdfFileWriter()函数。新的pdf文件以rotated.pdf名称进行保存。这时我们使用rotateClockwise()方法来旋转pdf文件的页面。然后，使用addPage()方法，来添加旋转后的页面。接着我们将这些pdf页面写入新的pdf文件。因此，首先我们应打开新的文件对象 (pdf_out)并使用pdf的写入器对象的write()方法来写入 pdf页面。最后，我们将关闭原文件对象（Haltermanpythonbook.pdf）以及新的文件对象(pdf_out)。</p><h2 id="操作Excel文件"><a href="#操作Excel文件" class="headerlink" title="操作Excel文件"></a>操作Excel文件</h2><p>这一部分我们来学习后缀名为.xlsx的Excel文件的处理。这一后缀名是一种Microsoft Excel使用的OpenXML 数据表文件格式。</p><p>Python有多个模块可处理Excel文件：xlrd , pandas和openpyxl。这一部分中我们将学习使用这三个模块来处理Excel文件。</p><p>首先我们会来看一个使用xlrd模块的示例。xlrd模块用于读取、写入和修改Excel数据表以及其它相关处理。</p><h3 id="使用xlrd模块"><a href="#使用xlrd模块" class="headerlink" title="使用xlrd模块"></a>使用xlrd模块</h3><p>首先我们要安装xlrd模块。在终端中运行如下命令来安装xlrd模块：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip3 <span class="hljs-keyword">install</span> xlrd<br></code></pre></td></tr></table></figure><blockquote><p>ℹ️注意：要确保系统里有Excel文件。我这里系统中有一个sample.xlsx文件。在这一部分中我都会使用该文件。</p></blockquote><p>译者注：Alan 使用了一个网上可下载的示例 Excel文件：[Sample – Superstore.xls](<a href="https://community.tableau.com/servlet/JiveServlet/previewBody/1236-102-2-15278/Sample">https://community.tableau.com/servlet/JiveServlet/previewBody/1236-102-2-15278/Sample</a> - Superstore.xls)</p><p>我们来看如何读取Excel文件以及如何从Excel文件中提取行和列。</p><h4 id="读取Excel文件"><a href="#读取Excel文件" class="headerlink" title="读取Excel文件"></a>读取Excel文件</h4><p>这一部分中，我们来看下如何读取Excel文件。我们需要用到 xlrds模块，创建一个脚本read_excel.py并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> xlrd<br><br>excel_file = (<span class="hljs-string">r&quot;Sample - Superstore.xls&quot;</span>)<br>book_obj = xlrd.open_workbook(excel_file)<br>excel_sheet = book_obj.sheet_by_index(<span class="hljs-number">0</span>)<br>result = excel_sheet.cell_value(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(result) <br><br></code></pre></td></tr></table></figure><p>运行脚本将得到如下输出：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"> python3 read_excel.py<br><span class="hljs-keyword">Order</span> <span class="hljs-title">ID</span><br></code></pre></td></tr></table></figure><p>上例中，我们导入了xlrd模块来读取Excel文件。我们还传入了Excel文件的位置。然后，创建了一个文件对象，传入了索引值，这样就从会索引处开始读取。最后我们打印出了结果。</p><h4 id="提取列名"><a href="#提取列名" class="headerlink" title="提取列名"></a>提取列名</h4><p>这一部分我们来从Excel表格中提取列名。创建一个名为extract_column_names.py的脚本并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> xlrd<br><br>excel_file = (<span class="hljs-string">&#x27;Sample - Superstore.xls&#x27;</span>)<br>book_obj = xlrd.open_workbook(excel_file)<br>excel_sheet = book_obj.sheet_by_index(<span class="hljs-number">0</span>)<br>excel_sheet.cell_value(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(excel_sheet.ncols):<br><span class="hljs-built_in">print</span>(excel_sheet.cell_value(<span class="hljs-number">0</span>,i))<br><br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 extract_column_names.py<br>Row ID<br>Order ID<br>Order Date<br>Ship Date<br>Ship Mode<br>Customer ID<br>Customer Name<br>Segment<br>Country<br>City<br>State<br>Postal Code<br>Region<br>Product ID<br>Category<br>Sub-Category<br>Product Name<br>Sales<br>Quantity<br>Discount<br>Profit<br></code></pre></td></tr></table></figure><p>上例中，我们从Excel表章中提取了列名。我们使用ncols属性获取了列名。</p><h3 id="使用pandas"><a href="#使用pandas" class="headerlink" title="使用pandas"></a>使用pandas</h3><p>在使用Pandas读取Excel文件之前，我们首先要安装pandas模块。我们可通过下面的命令安装pandas：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip3 <span class="hljs-keyword">install</span> pandas<br></code></pre></td></tr></table></figure><blockquote><p>ℹ️注意：确保在你的系统里有一个Excel文件。我的系统里有一个sample.xlsx。因此在整个部分中我将使用该文件。</p></blockquote><p>译者注：Alan 将继续使用前文下载的文件</p><p>下面我们来看看使用pandas的一些示例。</p><h4 id="读取Excel文件-1"><a href="#读取Excel文件-1" class="headerlink" title="读取Excel文件"></a>读取Excel文件</h4><p>这一部分中，我们将使用pandas模块来读取Excel文件。下面我们来看一个读取Excel文件的示例。</p><p>创建一个名为 rd_excel_pandas.py的文件并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>excel_file = <span class="hljs-string">&#x27;Sample - Superstore.xls&#x27;</span><br>df = pd.read_excel(excel_file)<br><span class="hljs-built_in">print</span>(df.head())<br><br></code></pre></td></tr></table></figure><p>运行以上脚本将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 rd_excel_pandas.py<br>   Row ID        Order ID Order Date  ... Quantity Discount    Profit<br>0       1  CA-2016-152156 2016-11-08  ...        2     0.00   41.9136<br>1       2  CA-2016-152156 2016-11-08  ...        3     0.00  219.5820<br>2       3  CA-2016-138688 2016-06-12  ...        2     0.00    6.8714<br>3       4  US-2015-108966 2015-10-11  ...        5     0.45 -383.0310<br>4       5  US-2015-108966 2015-10-11  ...        2     0.20    2.5164<br><br>[5 rows x 21 columns]<br></code></pre></td></tr></table></figure><p>上例中，我们使用了pandas来读取Excel文件。首先我们导入了pandas模块。然后我们创建了一个excel_file字符串来存储打开的文件名，以供pandas做进一步的操作。再后我们创建了一个数据帧对象df。在该例中，我们使用了pandas的read_excel方法来以默认函数从Excel文件中读取数据。读取从索引0处开始。最后，我们打印出了pandas数据帧。</p><h4 id="读取Excel文件指定列"><a href="#读取Excel文件指定列" class="headerlink" title="读取Excel文件指定列"></a>读取Excel文件指定列</h4><p>在使用pandas模块并通过read_excel方法读取Excel文件时，我们还能够读取该文件中的列名。要读取指定的列名，我们需要在read_excel方法中使用usecols参数。</p><p>下面我们来看一个读取Excel文件指定列的示例。创建一个名为rd_excel_pandas1.py的脚本并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> panda<br><br>excel_file = <span class="hljs-string">&#x27;Sample - Superstore.xls&#x27;</span><br>cols = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>df = panda.read_excel(excel_file, sheet_name=<span class="hljs-string">&#x27;Orders&#x27;</span>, usecols=cols)<br><br><span class="hljs-built_in">print</span>(df.head())<br><br></code></pre></td></tr></table></figure><p>运行上述脚本将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 rd_excel_pandas1.py <br>         Order ID Order Date  Ship Date<br>0  CA-2016-152156 2016-11-08 2016-11-11<br>1  CA-2016-152156 2016-11-08 2016-11-11<br>2  CA-2016-138688 2016-06-12 2016-06-16<br>3  US-2015-108966 2015-10-11 2015-10-18<br>4  US-2015-108966 2015-10-11 2015-10-18<br></code></pre></td></tr></table></figure><p>上例中首先我们导入了pandas模块。然后我们创建一个名为excel_file的字符串来存储文件名。再后我们定义了变量cols并传入其中列的索引值。这样在使用read_excel方法时，在该方法内，我们还传入了usecols参数来通过索引获取前面通过变量cols定义的指定列。因此，在运行脚本后，我们从Excel文件中获取的仅为指定列。</p><p>我们还可以使用pandas模块进行各种其它操作，比如读取有缺失数据的Excel文件、跳过指定行以及读取多个Excel表单。</p><h3 id="使用openpyxl"><a href="#使用openpyxl" class="headerlink" title="使用openpyxl"></a>使用openpyxl</h3><p>openpyxl是一个用于读取和写入xlsx, xlsm, xltx和xltm文件的Python库。首先，我们要安装openpyxl。运行如下命令：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip3 <span class="hljs-keyword">install</span> openpyxl<br></code></pre></td></tr></table></figure><p>下面我们将使用openpyxl来看一些示例。</p><h4 id="新建Excel文件"><a href="#新建Excel文件" class="headerlink" title="新建Excel文件"></a>新建Excel文件</h4><p>这一部分中，我们将学习使用openpyxl来创建一个新的Excel文件。创建一个名为create_excel.py的脚本并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> openpyxl <span class="hljs-keyword">import</span> Workbook<br><br>book_obj = Workbook()<br>excel_sheet = book_obj.active<br>excel_sheet[<span class="hljs-string">&#x27;A1&#x27;</span>] = <span class="hljs-string">&#x27;Name&#x27;</span><br>excel_sheet[<span class="hljs-string">&#x27;A2&#x27;</span>] = <span class="hljs-string">&#x27;student&#x27;</span><br>excel_sheet[<span class="hljs-string">&#x27;B1&#x27;</span>] = <span class="hljs-string">&#x27;age&#x27;</span><br>excel_sheet[<span class="hljs-string">&#x27;B2&#x27;</span>] = <span class="hljs-string">&#x27;24&#x27;</span><br><br>book_obj.save(<span class="hljs-string">&quot;test.xlsx&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Excel created successfully&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 create_excel.py<br>Excel created successfully<br></code></pre></td></tr></table></figure><p>这时查看当前的工作目录，就可以看到成功地创建了test.xlsx。在上例中，我们向单元格中写入了数据。然后在openpyxl模块中我们导入了Workbook类。工作簿（workbook）是文档其它部分的容器。接着我们我们为活跃表单设置了引用对象，并在A1, A2和B1, B2单元中写入了值。最后，我们通过save() 方法向test.xlsx文件写入了内容。</p><h4 id="追加值"><a href="#追加值" class="headerlink" title="追加值"></a>追加值</h4><p>这一部分中，我们将在Excel中追加值。这时就要使用到append() 方法。我们可以在想要添加值的当前表单底部添加一组值。创建一个名为append_values.py的脚本并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> openpyxl <span class="hljs-keyword">import</span> Workbook<br><br>book_obj = Workbook()<br>excel_sheet = book_obj.active<br>rows = (<br>(<span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>),<br>(<span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>),<br>(<span class="hljs-number">31</span>, <span class="hljs-number">32</span>, <span class="hljs-number">33</span>),<br>(<span class="hljs-number">41</span>, <span class="hljs-number">42</span>, <span class="hljs-number">43</span>)<br>)<br><span class="hljs-keyword">for</span> values <span class="hljs-keyword">in</span> rows:<br>excel_sheet.append(values)<br><span class="hljs-built_in">print</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;values are successfully appended&quot;</span>)<br>book_obj.save(<span class="hljs-string">&#x27;test.xlsx&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>运行脚本将得到如下输出：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"> <span class="hljs-keyword">python3</span> append_values.<span class="hljs-keyword">py</span><br><span class="hljs-built_in">values</span> are successfully appended<br></code></pre></td></tr></table></figure><p>上例中，我们在test.xlsx文件表单中追加了三列数据。数据以元组内的元组进行存储，通过容器逐行追加数据并使用append()方法插入数据。</p><h4 id="读取多个单元格"><a href="#读取多个单元格" class="headerlink" title="读取多个单元格"></a>读取多个单元格</h4><p>这一部分中我们将学习读取多个单元格。我们将使用openpyxl模块。创建一个名为read_multiple.py的脚本并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> openpyxl<br><br>book_obj = openpyxl.load_workbook(<span class="hljs-string">&#x27;Sample - Superstore.xlsx&#x27;</span>)<br>excel_sheet = book_obj.active<br>cells = excel_sheet[<span class="hljs-string">&#x27;A1&#x27;</span>:<span class="hljs-string">&#x27;C6&#x27;</span>]<br><span class="hljs-keyword">for</span> c1, c2, c3 <span class="hljs-keyword">in</span> cells:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;0:6&#125; &#123;1:6&#125; &#123;2&#125;&quot;</span>.<span class="hljs-built_in">format</span>(c1.value, c2.value, c3.value))<br><br></code></pre></td></tr></table></figure><p>运行脚本将得到如下输出：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs subunit">$ python3 read_multiple.py<br> <br># 输出结果<br>Row ID Order ID Order Date<br>     1 CA<span class="hljs-string">-2016</span><span class="hljs-string">-152156</span> 2016<span class="hljs-string">-11</span><span class="hljs-string">-08</span> 00:00:00<br>     2 CA<span class="hljs-string">-2016</span><span class="hljs-string">-152156</span> 2016<span class="hljs-string">-11</span><span class="hljs-string">-08</span> 00:00:00<br>     3 CA<span class="hljs-string">-2016</span><span class="hljs-string">-138688</span> 2016<span class="hljs-string">-06</span><span class="hljs-string">-12</span> 00:00:00<br>     4 US<span class="hljs-string">-2015</span><span class="hljs-string">-108966</span> 2015<span class="hljs-string">-10</span><span class="hljs-string">-11</span> 00:00:00<br>     5 US<span class="hljs-string">-2015</span><span class="hljs-string">-108966</span> 2015<span class="hljs-string">-10</span><span class="hljs-string">-11</span> 00:00:00<br></code></pre></td></tr></table></figure><p>译者注：需将前述的 xls 文件转化为 xlsx 格式，因 openpyxl 不支持老版本的格式</p><p>前例中，我们通过使用范围运算读取了三列的数据。然后读取 A1 – C6单元格之间的数据。</p><p>类似地，我们还可以使用openpyxl模块来对Excel文件进行其它大量操作，如合并单元格、拆分单元格。</p><h3 id="操作CSV文件"><a href="#操作CSV文件" class="headerlink" title="操作CSV文件"></a>操作CSV文件</h3><p>CSV格式表示逗号分隔值（Comma Separated Value）。逗号用于分隔一条记录的各个字段。常用于数据表和数据库中导入导出该格式。</p><p>CSV是一种使用特定结构类型排列表格数据的普通文本文件。Python有一个内置的csv模块，由Python来解析这类文件。csv模块多可用于处理从数据表和数据库中导出的带有字段和记录的文本格式文件。</p><p>csvs模块内置所有需用到的函数，如下：</p><ul><li>csv.reader: 该函数用于返回一个reader对象，可遍历CSV文件各行</li><li>csv.writer: 该函数用于返回一个writer对象，可向CSV文件写入数据</li><li>csv.register_dialect: 该函数用于注册一个CSV dialect</li><li>csv.unregister_dialect: 该函数用于取消一个CSV dialect的注册</li><li>csv.get_dialect: 该函数用于返回一个给定名称的dialect</li><li>csv.list_dialects: 该函数用于返回所有注册的dialect</li><li>csv.field_size_limit: 该函数用于返回当前解析器所允许的最大字段数</li></ul><p>这一部分中，我们仅会来学习csv.reader和csv.writer。</p><h4 id="读取CSV文件"><a href="#读取CSV文件" class="headerlink" title="读取CSV文件"></a>读取CSV文件</h4><p>Python带有一个内置模块csv，我们将使用它来处理CSV文件。我们会使用csv.reader模块来读取CSV文件。创建一个名为csv_read.py的脚本并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> csv<br> <br>csv_file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;Sample - Superstore.csv&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;windows-1252&#x27;</span>)<br><span class="hljs-keyword">with</span> csv_file:<br>read_csv = csv.reader(csv_file)<br><span class="hljs-comment">#for row in read_csv:</span><br><span class="hljs-comment">#print(row)</span><br><span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(read_csv):<br><span class="hljs-keyword">if</span> index &lt;= <span class="hljs-number">5</span>:<br><span class="hljs-built_in">print</span>(row)<br><br></code></pre></td></tr></table></figure><p>译者注：Alan 使用相同的文件转成了 CSV 格式，运行中出现了报错UnicodeDecodeError: ‘utf-8’ codec can’t decode byte 0xa0 in position 2928: invalid start byte，添加了 encoding方能解决，这与 Mac 和 Windows对 CSV 的处理方式相关。同时因原表数据较多，这里修改为仅打印5行数据。</p><p>运行脚本，我们将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 csv_read.py<br>[<span class="hljs-string">&#x27;Row ID;Order ID;Order Date;Ship Date;Ship Mode;Customer ID;Customer Name;Segment;Country;City;State;Postal Code;Region;Product ID;Category;Sub-Category;Product Name;Sales;Quantity;Discount;Profit&#x27;</span>]<br>[<span class="hljs-string">&#x27;1;CA-2016-152156;2016/11/8;2016/11/11;Second Class;CG-12520;Claire Gute;Consumer;United States;Henderson;Kentucky;42420;South;FUR-BO-10001798;Furniture;Bookcases;Bush Somerset Collection Bookcase;261.96;2;0;41.9136&#x27;</span>]<br>[<span class="hljs-string">&#x27;2;CA-2016-152156;2016/11/8;2016/11/11;Second Class;CG-12520;Claire Gute;Consumer;United States;Henderson;Kentucky;42420;South;FUR-CH-10000454;Furniture;Chairs;Hon Deluxe Fabric Upholstered Stacking Chairs&#x27;</span>, <span class="hljs-string">&#x27; Rounded Back;731.94;3;0;219.582&#x27;</span>]<br>[<span class="hljs-string">&#x27;3;CA-2016-138688;2016/6/12;2016/6/16;Second Class;DV-13045;Darrin Van Huff;Corporate;United States;Los Angeles;California;90036;West;OFF-LA-10000240;Office Supplies;Labels;Self-Adhesive Address Labels for Typewriters by Universal;14.62;2;0;6.8714&#x27;</span>]<br>[<span class="hljs-string">&quot;4;US-2015-108966;2015/10/11;2015/10/18;Standard Class;SO-20335;Sean O&#x27;Donnell;Consumer;United States;Fort Lauderdale;Florida;33311;South;FUR-TA-10000577;Furniture;Tables;Bretford CR4500 Series Slim Rectangular Table;957.5775;5;0.45;-383.031&quot;</span>]<br>[<span class="hljs-string">&quot;5;US-2015-108966;2015/10/11;2015/10/18;Standard Class;SO-20335;Sean O&#x27;Donnell;Consumer;United States;Fort Lauderdale;Florida;33311;South;OFF-ST-10000760;Office Supplies;Storage;Eldon Fold &#x27;N Roll Cart System;22.368;2;0.2;2.5164&quot;</span>]<br></code></pre></td></tr></table></figure><p>前面的程序中，我们将Sample – Superstore.csv文件打开为csv_file。然后，我们使用了csv.reader()函数来将数据提取到读取器对象，我们可以对该对象进行迭代来获取数据的每一行。下面，我们来看第二个函数csv.Writer()。</p><h4 id="写入CSV文件"><a href="#写入CSV文件" class="headerlink" title="写入CSV文件"></a>写入CSV文件</h4><p>要将数据写入csv文件，我们使用csv.writer模块。这一部分中，我们将存储一些数据到Python列表中，然后将该数据放到csv文件中。创建一个名为csv_write.py的脚本并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> csv<br><br>write_csv = [[<span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-string">&#x27;Sport&#x27;</span>], [<span class="hljs-string">&#x27;Andres Iniesta&#x27;</span>, <span class="hljs-string">&#x27;Footbal&#x27;</span>], [<span class="hljs-string">&#x27;AB de Villiers&#x27;</span>, <span class="hljs-string">&#x27;Cricket&#x27;</span>], [<span class="hljs-string">&#x27;Vira Kohli&#x27;</span>, <span class="hljs-string">&#x27;Cricket&#x27;</span>], [<span class="hljs-string">&#x27;Lionel Messi&#x27;</span>, <span class="hljs-string">&#x27;Football&#x27;</span>]]<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;csv_write.csv&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> csvFile:<br>writer = csv.writer(csvFile)<br>writer.writerows(write_csv)<br><span class="hljs-built_in">print</span>(write_csv)<br><br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs prolog">python3 csv_write.py<br>[[<span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-string">&#x27;Sport&#x27;</span>], [<span class="hljs-string">&#x27;Andres Iniesta&#x27;</span>, <span class="hljs-string">&#x27;Footbal&#x27;</span>], [<span class="hljs-string">&#x27;AB de Villiers&#x27;</span>, <span class="hljs-string">&#x27;Cricket&#x27;</span>], [<span class="hljs-string">&#x27;Vira Kohli&#x27;</span>, <span class="hljs-string">&#x27;Cricket&#x27;</span>], [<span class="hljs-string">&#x27;Lionel Messi&#x27;</span>, <span class="hljs-string">&#x27;Football&#x27;</span>]]<br></code></pre></td></tr></table></figure><p>以上程序中，我们创建了一个包含姓名和对应运动项目的名为write_csv的列表。接着在创建列表后，我们打开了新创建的csv_write.csvy文件并使用csv.writer() 函数将write_csv列表插入到该文件中。</p><h2 id="操作txt文件"><a href="#操作txt文件" class="headerlink" title="操作txt文件"></a>操作txt文件</h2><p>普通文本文件用于存储仅表示字符或字符串的数据，并且不包含任何结构化的元数据。Python中无需导入任何外部库来读取和写入文本文件。Python提供了内置的函数来创建、打开、关闭、写入和读取文本文件。要进行这些操作，有不同的访问模式来对打开的文件处理可用的操作。</p><p>Python中这些访问模式如下：</p><ul><li>只读模式 (‘r’):该模式以只读打开文本文件。如果该文件不存在，则抛出一个 I&#x2F;O错误。我们也可称这种模式为打开文件的默认模式。</li><li>读写模式(‘r+’): 该模式以读写打开文本文件，如果该文件不存在，则抛出一个 I&#x2F;O错误。</li><li>只写模式(‘w’): 该模式打开文本文件来进行写入。在文件不存在时则创建文件，对已存在的文件则覆盖原数据。</li><li>写读模式(‘w+’): 该模式会打开文本文件来进行读取和写入。对已存在的文件会覆盖原数据。</li><li>追加模式 (‘a’): 该模式会打开文本文件来进行写入。如果文件不存在则会创建文件，数据会在已有数据的最后进行插入。</li><li>追加读取模式(‘a+’): 该模式会打开文本文件进行读取和客户。如果文件不存在则会创建文件，数据会在已有数据的最后进行插入。</li></ul><h3 id="open-函数"><a href="#open-函数" class="headerlink" title="open()函数"></a>open()函数</h3><p>该函数用于打开文件，不需要导入任何外部模块。</p><p>语法如下：</p><p>Name_of_file_object &#x3D; open(“文件名”,”访问模式”)</p><p>对于上述的语法，文件必须要在Python程序相同的目录下。如果文件不在相同目录下，那么我们还需要定义打开文件时的文件路径。这类情况的语法如下所示：</p><p>Name_of_file_object &#x3D; open(“&#x2F;home&#x2F;……&#x2F;文件名”,”访问模式”)</p><h4 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h4><p>这里使用open函数打开文件”test.txt”。该文本来相同目录下，并以追加模式打开：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">text_file</span> = open(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>)<br></code></pre></td></tr></table></figure><p>如果文件不在同级目录。我们需在追加模式下定义路径：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">text_file</span> = open(<span class="hljs-string">&quot;/home/…../test.txt&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="close-函数"><a href="#close-函数" class="headerlink" title="close()函数"></a>close()函数</h3><p>该函数用于关闭文件，它会释放文件所占用的内存。在无需再使用文件或以不同模式打开文件时使用该函数。</p><p>语法如下：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">Name<span class="hljs-number">_</span><span class="hljs-keyword">of</span><span class="hljs-number">_f</span>ile<span class="hljs-number">_</span><span class="hljs-keyword">object</span>.close()<br></code></pre></td></tr></table></figure><p>以下代码可用来简单地打开和关闭一个文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 打开并关闭test.txt:</span><br>text_file = open(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>)<br>text_file.close()<br></code></pre></td></tr></table></figure><h3 id="写入文本文件"><a href="#写入文本文件" class="headerlink" title="写入文本文件"></a>写入文本文件</h3><p>通过使用Python，我们可以创建一个文本文件（test.txt）。通过代码向文件本文件写入非常容易。打开一个文件进行写入，我们将第二个访问模式参数设为”w”。要向test.txt文件写入数据，我们使用文件句柄对象的write()方法。创建一个名为text_write.py的脚本并编写如下内容：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift">text_file <span class="hljs-operator">=</span> <span class="hljs-keyword">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br>text_file.write(<span class="hljs-string">&quot;Monday<span class="hljs-subst">\n</span>Tuesday<span class="hljs-subst">\n</span>Wednesday<span class="hljs-subst">\n</span>Thursday<span class="hljs-subst">\n</span>Friday<span class="hljs-subst">\n</span>Saturday<span class="hljs-subst">\n</span>&quot;</span>)<br>text_file.close()<br><br></code></pre></td></tr></table></figure><p>运行以上脚本将会进行文件的创建。这时查看当前工作目录。我们可以发现所创建的test.txt文件。查看文件的内容，我们会发现write()函数写入的星期保存在了test.txt中。</p><p>上面的程序中，我们声明了变量text_file来打开名为test.txt.的文件。open函数中传入两个参数：第一个为要打开文件，第二个为表示要对文件进行或应用的权限和操作的访问模式。在程序中，我们在第二参数中使用了字母”w”，即写入模式。然后，我们使用了text_file.close()来关闭存储的test.txt文件实例。</p><h3 id="读取文本文件"><a href="#读取文本文件" class="headerlink" title="读取文本文件"></a>读取文本文件</h3><p>读取文件和写入文件一样简单。要以读取打开一个文件，我们使用”r”代替”w”来作为第二个参数设置访问模式。要从该文件读取数据，我们使用该文件句柄对象的read()方法。创建一个名为text_read.py的脚本并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">text_file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>data = text_file.read()<br><span class="hljs-built_in">print</span>(data)<br>text_file.close()<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"> <span class="hljs-variable">python3</span> <span class="hljs-type">text_read</span><span class="hljs-operator">.</span><span class="hljs-variable">py</span><br><span class="hljs-built_in">Monday</span><br><span class="hljs-built_in">Tuesday</span><br><span class="hljs-built_in">Wednesday</span><br><span class="hljs-built_in">Thursday</span><br><span class="hljs-built_in">Friday</span><br><span class="hljs-built_in">Saturday</span><br></code></pre></td></tr></table></figure><p>在以上程序中，我们定义了一个变量text_file来打开文件test.txt。open函数接收两个参数：第一个为要打开的文件，，第二个为表示要对文件进行或应用的权限和操作的访问模式。在程序中，我们使用了字母”r”作为第二个参数，表示写入操作。然后我们使用了text_file.close()来关闭存储文件test.txt的实例。在运行Python程序之后，我们可以轻易地在终端中查看这一文本文件的内容。</p><h2 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h2><p>本章中，我们学习了各类文件的操作，包括PDF, Excel, CSV和文本文件。我们使用了Python的各模块来执行这类型文件的部分操作。</p><p>下一章中，我们将学习Python中的基础网络和因特网模块。</p><h2 id="课后问题-7"><a href="#课后问题-7" class="headerlink" title="课后问题"></a>课后问题</h2><ol><li>readline()和readlines()之间的区别是什么？</li><li>open()和with open()之间的区别是什么？</li><li>开头的r c:\Downloads意义何在？</li><li>什么是生成器对象？</li><li>pass的用处是什么？</li><li>lambda表达式是什么？</li></ol><h2 id="扩展阅读-7"><a href="#扩展阅读-7" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul><li>XLRD: <a href="https://xlrd.readthedocs.io/en/latest/api.html">https://xlrd.readthedocs.io/en/latest/api.html</a></li><li>openoyxl: <a href="http://www.python-excel.org/">http://www.python-excel.org/</a></li><li>生成器函数的概念: <a href="https://wiki.python.org/moin/Generators">https://wiki.python.org/moin/Generators</a></li></ul><h1 id="第十章-网络基础-–-Socket编程"><a href="#第十章-网络基础-–-Socket编程" class="headerlink" title="第十章 网络基础 – Socket编程"></a><a href="https://alanhou.org/basic-networking-socket-programming/">第十章 网络基础 – Socket编程</a></h1><p>本章中我们将学习sockets和三种互联网协议：http, ftplib和urllib。我们会学习Python中用于网络的socket模块。http是一个用于处理超文本传输协议的包。ftplib用于执行自动化的FTP相关工作。urllib是一个处理URL相关工作的包。</p><p>本章中我们将学习如下内容：</p><ul><li>Sockets</li><li>http包</li><li>ftplib模块</li><li>urllib包</li></ul><h2 id="Socket接口"><a href="#Socket接口" class="headerlink" title="Socket接口"></a>Socket接口</h2><p>这一部分中， 我们将学习socket（套接字接口）的知识。我们将使用Python的socket模块。socket是本地或远程机器间通过的端点（endpoint）。socket模块有一个socket类，用于处理数据通道。它还包含网络相关操作的函数。要使用socket模块的功能，首先我们要导入socket模块。</p><p>我们来看看如何创建一个socket。socket类有一个socket函数，带有两个参数：address_family和socket类型。</p><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br>s = socket.socket(address_family, socket <span class="hljs-built_in">type</span>)<br></code></pre></td></tr></table></figure><p>address_family控制OSI(Open System Interconnection 开放式系统互联)网络分层协议</p><p>socket type控制传输层协议</p><p>Python支持三种地址类型：AF_INET, AF_INET6和AF_UNIX。最常用的为AF_INET，用于因特网寻址。AF_INET6用于IPv6因特网寻址。AF_UNIX用于Unix域套接字（Unix Domain Sockets – UDS），是一种跨进程通讯协议。</p><p>有两种socket类型：SOCK_DGRAM和SOCK_STREAM。SOCK_DGRAM套接字类型用于面向消息的datagram传输，这些与UDP协议相关联。datagram套接字投递单个消息。SOCK_STREAM处理面向数据流的传输，与TCP协议相关联。流套接字接口在客户端和服务器端之间提供字节流。</p><p>socket可配置为服务端和客户端接口。在TCP&#x2F;IP套接字接口都连接时，通讯是双向的。下面我们来探讨一个客户端-服务端通讯的示例。我们会创建两个脚本文件：server.py和client.py。</p><p>server.py脚本内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br>host_name  = socket.gethostname()<br>port = <span class="hljs-number">5000</span><br>s_socket = socket.socket()<br>s_socket.bind((host_name, port))<br>s_socket.listen(<span class="hljs-number">2</span>)<br><br>conn, address = s_socket.accept()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Connection from: &quot;</span> + <span class="hljs-built_in">str</span>(address))<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        recv_data = conn.recv(<span class="hljs-number">1024</span>).decode()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> recv_data:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;from connected user: &quot;</span> + <span class="hljs-built_in">str</span>(recv_data))<br>        recv_data = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27; -&gt; &#x27;</span>)<br>        conn.send(recv_data.encode())<br><br>conn.close()<br><br></code></pre></td></tr></table></figure><p>下面我们来编写客户端脚本。client.py脚本内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br>host_name = socket.gethostname()<br>port = <span class="hljs-number">5000</span><br><br>c_socket = socket.socket()<br>c_socket.connect((host_name, port))<br>msg = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot; -&gt; &quot;</span>)<br><br><span class="hljs-keyword">while</span> msg.lower().strip() != <span class="hljs-string">&#x27;bye&#x27;</span>:<br>        c_socket.send(msg.encode())<br>        recv_data = c_socket.recv(<span class="hljs-number">1024</span>).decode()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Received from server: &#x27;</span> + recv_data)<br>        msg = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot; -&gt; &quot;</span>)<br><br>c_socket.close()<br><br></code></pre></td></tr></table></figure><p>下面我们要在两个不同的终端中运行这两个程序。第一个终端中运行server.py，在第二个终端中运行client.py。</p><p>输出结果如下：</p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\1647504955003.png" alt="1647504955003"></p><p><a href="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019031015011266.jpg"><img src="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019031015011266.jpg" alt="第十章 网络基础 - Socket编程"></a></p><h2 id="http包"><a href="#http包" class="headerlink" title="http包"></a>http包</h2><p>这部分中，我们将学习http包相关知识。http包有四个模块：</p><ul><li>http.client: 这是一个底层HTTP协议客户端</li><li>http.server: 包含基本HTTP服务器类</li><li>http.cookies: 用于实现带cookie的状态管理</li><li>http.cookiejar: 该模块提供cookie持久化</li></ul><p>这一部分中，我们将学习http.client和http.server模块。</p><h3 id="http-client模块"><a href="#http-client模块" class="headerlink" title="http.client模块"></a>http.client模块</h3><p>我们将来看两种http请求：GET和POST。我们还会来做一个http连接。</p><p>首先，我们来探讨一个进行http连接的示例。为此创建一个脚本make_connection.py并在其中编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> http.client<br><br>con_obj = http.client.HTTPConnection(<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>, <span class="hljs-number">80</span>, timeout=<span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(con_obj)<br><br></code></pre></td></tr></table></figure><p>运行脚本，我们将会得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 make_connection.py <br>&lt;http.client.HTTPConnection object at 0x7fec0a0cd860&gt;<br></code></pre></td></tr></table></figure><p>在上例中，我们对传入的 URL 的80端口以一个指定的超时时间进行了连接。</p><p>下面我们来看 http GET请求方法，使用GET请求方法我们可以看一个获取返回码以及头部列表的示例。创建一个脚本get_example.py并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> http.client<br><br>con_obj = http.client.HTTPSConnection(<span class="hljs-string">&quot;www.imdb.com&quot;</span>)<br>con_obj.request(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>)<br>response = con_obj.getresponse()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Status: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(response.status))<br><br>headers_list = response.getheaders()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Headers: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(headers_list))<br><br>con_obj.close()<br><br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">python3</span> get_example.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>得到的结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"> python3 get_example.py<br>Status: 200<br>Headers: [(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/html; charset=utf-8&#x27;</span>), (<span class="hljs-string">&#x27;Content-Length&#x27;</span>, <span class="hljs-string">&#x27;876142&#x27;</span>), (<span class="hljs-string">&#x27;Connection&#x27;</span>, <span class="hljs-string">&#x27;keep-alive&#x27;</span>), (<span class="hljs-string">&#x27;Server&#x27;</span>, <span class="hljs-string">&#x27;Server&#x27;</span>), (<span class="hljs-string">&#x27;Date&#x27;</span>, <span class="hljs-string">&#x27;Thu, 17 Mar 2022 08:21:54 GMT&#x27;</span>), (<span class="hljs-string">&#x27;x-amz-rid&#x27;</span>, <span class="hljs-string">&#x27;YX43XR09MXT2E653EBWB&#x27;</span>), (<span class="hljs-string">&#x27;set-cookie&#x27;</span>, <span class="hljs-string">&#x27;session-id=134-0833054-9867934; Domain=.imdb.com; Expires=Tue, 01-Jan-2036 08:00:01 GMT; Path=/&#x27;</span>), (<span class="hljs-string">&#x27;set-cookie&#x27;</span>, <span class="hljs-string">&#x27;session-id-time=2082787201l; Domain=.imdb.com; Expires=Tue, 01-Jan-2036 08:00:01 GMT; Path=/&#x27;</span>), (<span class="hljs-string">&#x27;set-cookie&#x27;</span>, <span class="hljs-string">&#x27;next-sid=XbiCYzrj2yiLB0k-HIECA; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly&#x27;</span>), (<span class="hljs-string">&#x27;x-frame-options&#x27;</span>, <span class="hljs-string">&#x27;SAMEORIGIN&#x27;</span>), (<span class="hljs-string">&#x27;x-xss-protection&#x27;</span>, <span class="hljs-string">&#x27;1; mode=block&#x27;</span>), (<span class="hljs-string">&#x27;ETag&#x27;</span>, <span class="hljs-string">&#x27;&quot;d5e6e-XaHNAvBZk1Bt7MXm1sfU/0p0xzM&quot;&#x27;</span>), (<span class="hljs-string">&#x27;Cache-Control&#x27;</span>, <span class="hljs-string">&#x27;private, no-cache, no-store, max-age=0, must-revalidate&#x27;</span>), (<span class="hljs-string">&#x27;Vary&#x27;</span>, <span class="hljs-string">&#x27;Accept-Encoding,Content-Type,Accept-Encoding,X-Amzn-CDN-Cache,X-Amzn-AX-Treatment,User-Agent&#x27;</span>), (<span class="hljs-string">&#x27;Strict-Transport-Security&#x27;</span>, <span class="hljs-string">&#x27;max-age=47474747; includeSubDomains; preload&#x27;</span>), (<span class="hljs-string">&#x27;Permissions-Policy&#x27;</span>, <span class="hljs-string">&#x27;interest-cohort=()&#x27;</span>), (<span class="hljs-string">&#x27;X-Cache&#x27;</span>, <span class="hljs-string">&#x27;Miss from cloudfront&#x27;</span>), (<span class="hljs-string">&#x27;Via&#x27;</span>, <span class="hljs-string">&#x27;1.1 327f036b81d82ab4a19ea85cef81e3be.cloudfront.net (CloudFront)&#x27;</span>), (<span class="hljs-string">&#x27;X-Amz-Cf-Pop&#x27;</span>, <span class="hljs-string">&#x27;LAX50-C3&#x27;</span>), (<span class="hljs-string">&#x27;X-Amz-Cf-Id&#x27;</span>, <span class="hljs-string">&#x27;z-5YiscFQMXbr8-9NIgbWp7Kxvw1xkpEfIZuwUtmZzeukxu70r4dWQ==&#x27;</span>)]<br></code></pre></td></tr></table></figure><p>上例中，我们使用了HTTPSConnection，因为该网站以HTTPS协议提供服务。我们根据网站的具体情况可以使用HTTPSConnection或HTTPConnection。我们传入了一个 URL 并通过连接对象查看了其状态。然后，我们获取到了一个header列表。该header列表中包含服务器返回数据类型的相关信息。getheaders() 方法可获取到header列表。</p><p>下面我们来看一个POST请求的示例。我们可以使用HTTP POST来向URL post数据。下面创建一个脚本post_example.py并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> http.client<br><span class="hljs-keyword">import</span> json<br><br>con_obj = http.client.HTTPSConnection(<span class="hljs-string">&#x27;www.httpbin.org&#x27;</span>)<br>headers_list = &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>&#125;<br>post_text = &#123;<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Hello World&#x27;</span>&#125;<br>json_data = json.dumps(post_text)<br>con_obj.request(<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;/post&#x27;</span>, json_data, headers_list)<br>response = con_obj.getresponse()<br><span class="hljs-built_in">print</span>(response.read().decode())<br><br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> post_example.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>我们将得到如下的输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>&#123;<br>  <span class="hljs-string">&quot;args&quot;</span>: &#123;&#125;, <br>  <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;&#123;\&quot;text\&quot;: \&quot;Hello World\&quot;&#125;&quot;</span>, <br>  <span class="hljs-string">&quot;files&quot;</span>: &#123;&#125;, <br>  <span class="hljs-string">&quot;form&quot;</span>: &#123;&#125;, <br>  <span class="hljs-string">&quot;headers&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;Accept-Encoding&quot;</span>: <span class="hljs-string">&quot;identity&quot;</span>, <br>    <span class="hljs-string">&quot;Content-Length&quot;</span>: <span class="hljs-string">&quot;23&quot;</span>, <br>    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>, <br>    <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;www.httpbin.org&quot;</span>, <br>    <span class="hljs-string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="hljs-string">&quot;Root=1-6232f02b-476c73ae325dc3fa7a1984d1&quot;</span><br>  &#125;, <br>  <span class="hljs-string">&quot;json&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;Hello World&quot;</span><br>  &#125;, <br>  <span class="hljs-string">&quot;origin&quot;</span>: <span class="hljs-string">&quot;222.209.173.181&quot;</span>, <br>  <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;https://www.httpbin.org/post&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上例中，首先我们创建了一个HTTPSConnection对象。然后，我们创建了一个post_text对象，它post 了Hello World。再后，我们编写了一个POST请求，并接收到了响应信息。</p><h3 id="http-server模块"><a href="#http-server模块" class="headerlink" title="http.server模块"></a>http.server模块</h3><p>这一部分中，我们将学习http包中的一个模块：http.server模块。该模块定义用于实现HTTP服务端的类。它有两个方法：GET和HEAD。通过使用该模块，我们可以在网络上分享文件。我们可以在任意端口上运行http服务端。确保该端口号大于1024。默认端口号为8000。</p><p>可像下面这样使用http.server。</p><p>首先进行到选定的目录，并运行如下命令：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">$ python3 -m http.<span class="hljs-keyword">server</span> <span class="hljs-number">9000</span><br></code></pre></td></tr></table></figure><p>这时打开浏览器，在地址栏中键入localhost:9000并按下Enter键。将会得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 -m http.server 9000<br>Serving HTTP on 0.0.0.0 port 9000 (http://0.0.0.0:9000/) ...<br>127.0.0.1 - - [17/Mar/2022 00:46:01] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 200 -<br>127.0.0.1 - - [17/Mar/2022 00:46:02] code 404, message File not found<br>127.0.0.1 - - [17/Mar/2022 00:46:02] <span class="hljs-string">&quot;GET /favicon.ico HTTP/1.1&quot;</span> 404 -<br><br></code></pre></td></tr></table></figure><p>译者注：纯命令行服务器可通过 curl localhost:9000进行访问，或通过服务器 IP 地址来进行访问，以示 Alan 演示了这两种效果</p><h2 id="ftplib模块"><a href="#ftplib模块" class="headerlink" title="ftplib模块"></a>ftplib模块</h2><p>ftplibj在Python中提供了包含所有FTP协议各类操作的功能。ftplib包含FTP客户端类，以及一些帮助函数。使用该模块我们可以很容易地连接FTP服务器来获取多个文件并对它们进行处理。通过导入ftplib模块，我们就可以使用其中的所有功能了。</p><p>这一部分中，我们将讲解如何使用ftplib模块来进行FTP传输。我们会一起来看各类FTP对象。</p><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><p>这一部分中，我们将学习使用ftplib从另一台机器上下载文件。为此，创建一个get_ftp_files.py脚本并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> ftplib <span class="hljs-keyword">import</span> FTP<br><br>ftp = FTP(<span class="hljs-string">&#x27;FTP域名或IP&#x27;</span>)<br><span class="hljs-keyword">with</span> ftp:<br>        ftp.login(<span class="hljs-string">&#x27;用户名&#x27;</span>, <span class="hljs-string">&#x27;密码&#x27;</span>)<br>        ftp.cwd(<span class="hljs-string">&#x27;/home/student/work/&#x27;</span>)<br>        files = ftp.nlst()<br>        <span class="hljs-built_in">print</span>(files)<br><br>        <span class="hljs-comment"># 打印文件</span><br>        <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Downloading...&quot;</span> + file)<br>                ftp.retrbinary(<span class="hljs-string">&quot;RETR &quot;</span> + file, <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/home/student/testing/&quot;</span> + file, <span class="hljs-string">&#x27;wb&#x27;</span>).write)<br><br>ftp.close()<br><br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">python3</span> get_ftp_files.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>得到的结果如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;hello.c&#x27;</span>, <span class="hljs-string">&#x27;sample.txt&#x27;</span>, <span class="hljs-string">&#x27;strip_hello&#x27;</span>, <span class="hljs-string">&#x27;test.py&#x27;</span>]</span>Downloading..<span class="hljs-selector-class">.helloDownloading</span>..<span class="hljs-selector-class">.hello</span><span class="hljs-selector-class">.cDownloading</span>..<span class="hljs-selector-class">.sample</span><span class="hljs-selector-class">.txtDownloading</span>..<span class="hljs-selector-class">.strip_helloDownloading</span>..<span class="hljs-selector-class">.test</span>.py<br></code></pre></td></tr></table></figure><p>译者注：要实现以上，首先要确保存在相关文件和目录并安装了 ftp 服务：sudo apt-get install vsftpdu并对&#x2F;etc&#x2F;vsftpd.conf进行相应的配置。</p><p>上例中，我们使用ftplib模块从主机上获取了多个文件。首先，我们传入了另一台机器的IP地址、用户名和密码。要从主机上获取所有文件，我们使用了ftp.nlst() 函数，并使用ftp.retrbinary()函数将这些文件下载到了本地电脑。</p><h3 id="使用getwelcome-获取欢迎信息"><a href="#使用getwelcome-获取欢迎信息" class="headerlink" title="使用getwelcome()获取欢迎信息"></a>使用getwelcome()获取欢迎信息</h3><p>一旦建立了初始化连接，服务端通常会返回一条欢迎信息。这一消息来自getwelcome()函数，有时会包含声明信息以及与可能与用户相关的帮助信息。</p><p>下面我们来看一个getwelcome()的示例，创建一个脚本get_welcome_msg.py并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ftplib <span class="hljs-keyword">import</span> FTP<br><br>ftp = FTP(<span class="hljs-string">&#x27;FTP的域名或 IP 地址&#x27;</span>)<br>ftp.login(<span class="hljs-string">&#x27;用户名&#x27;</span>, <span class="hljs-string">&#x27;密码&#x27;</span>)<br><br>welcome_msg = ftp.getwelcome()<br><span class="hljs-built_in">print</span>(welcome_msg)<br><br>ftp.close()<br><br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">$ pytho<span class="hljs-symbol">n3</span> get_welcome_msg.py<span class="hljs-number">220</span> <span class="hljs-comment">(vsFTPd 3.0.3)</span><br></code></pre></td></tr></table></figure><p>以上代码中，首先我们传入了另一台机器的IP地址、用户名和密码。我们使用了getwelcome()函数来获取初始化连接建立之后的信息。</p><h3 id="使用sendcmd-函数向服务器发送命令"><a href="#使用sendcmd-函数向服务器发送命令" class="headerlink" title="使用sendcmd()函数向服务器发送命令"></a>使用sendcmd()函数向服务器发送命令</h3><p>这一部分中，我们将学习sendcmd()函数。我们可以使用sendcmd()来发送一个简单字符串命令来获取字符串响应。客户端可以发送STAT, PWD, RETR和STOR等FTP命令。ftplib模块中有多个方法能封装这些命令。这些命令可使用sendcmd()或voidcmd()方法进行发送。作为示例，我们将发送一个STAT命令来查看服务端的状态。</p><p>创建一个脚本send_command.py并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ftplib <span class="hljs-keyword">import</span> FTP<br><br>ftp = FTP(<span class="hljs-string">&#x27;FTP服务器域名或 IP 地址&#x27;</span>)<br>ftp.login(<span class="hljs-string">&#x27;用户名&#x27;</span>, <span class="hljs-string">&#x27;密码&#x27;</span>)<br><br>ftp.cwd(<span class="hljs-string">&#x27;/home/student&#x27;</span>)<br>s_cmd_stat = ftp.sendcmd(<span class="hljs-string">&#x27;STAT&#x27;</span>)<br><span class="hljs-built_in">print</span>(s_cmd_stat)<br><span class="hljs-built_in">print</span>()<br><br>s_cmd_pwd = ftp.sendcmd(<span class="hljs-string">&#x27;PWD&#x27;</span>)<br><span class="hljs-built_in">print</span>(s_cmd_pwd)<br><span class="hljs-built_in">print</span>()<br><br>ftp.close()<br><br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">python3</span> send_command.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>1</th><th>$ python3 send_command.py</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">211-FTP server status:   Connected to ::ffff:192.168.xxx.xxx   Logged <span class="hljs-keyword">in</span> as student   TYPE: ASCII   No session bandwidth <span class="hljs-built_in">limit</span>   Session <span class="hljs-built_in">timeout</span> <span class="hljs-keyword">in</span> seconds is 300   Control connection is plain text   Data connections will be plain text   At session startup, client count was 1   vsFTPd 3.0.3 - secure, fast, stable211 End of status 257 <span class="hljs-string">&quot;/home/student&quot;</span> is the current directory<br></code></pre></td></tr></table></figure><p>以上代码中，我们首先传入了另一台机器的IP地址、用户名和密码。接着，我们使用了sendcmd()向另一台机器发送了STAT命令。然后使用sendcmd()发送PWD命令。</p><h2 id="urllib包"><a href="#urllib包" class="headerlink" title="urllib包"></a>urllib包</h2><p>和http相似，urllib也是包含处理 URL 的诸多模块的一个包。urllib模块允许我们通过脚本访问多个网站。我们可以使用这个模块来下载数据、解决数据、修改header等。</p><p>urllib有几个不同的模块，列出如下：</p><ul><li>urllib.request: 用于打开和读取URL</li><li>urllib.error: 包含urllib.request抛出的异常</li><li>urllib.parse: 用于解析URL</li><li>urllib.robotparser: 用于解析robots.txt文件</li></ul><p>这一部分中，我们将学习使用urllib来打开URL以及如何从URL读取html文件。我们会看一个urllib用法的简单示例。我们将导入urllib.requests。然后将打开的 URL 分配给一个变量，再后，我们会使用a .read()命令来从URL读取数据。</p><p>创建脚本url_requests_example.py并在其中编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.request<br> <br>x = urllib.request.urlopen(<span class="hljs-string">&#x27;https://baidu.com/&#x27;</span>)<br><span class="hljs-built_in">print</span>(x.read())<br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">python3</span> url_requests_example.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">b&#x27;\n\n<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>\n&lt;html\n  xmlns:og=&quot;http://ogp.me/ns#&quot;\n  xmlns:fb=&quot;http://www.facebook.com/2008/fbml&quot;&gt;\n  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>\n     \n    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span>\n\n  \n  \n  \n\n  \n  \n  \n\n  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;apple-itunes-app&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;app-id=342792525, app-argument=imdb:///?src=mdot&quot;</span>&gt;</span>\n\n\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">IMDbTimer</span>=</span></span><span class="hljs-template-variable">&#123;starttime: new Date().getTime(),pt:\&#x27;java\&#x27;&#125;</span><span class="language-xml">;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">\n  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> uet == \<span class="hljs-string">&#x27;function\&#x27;) </span></span></span><span class="hljs-template-variable">&#123;\n   uet(&quot;bb&quot;, &quot;LoadTitle&quot;, &#123;wb: 1&#125;</span><span class="language-xml">);\n  &#125;\n<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params">t</span>)</span></span><span class="hljs-template-variable">&#123; (t.events = t.events|| &#123;&#125;</span><span class="language-xml"><span class="language-javascript">)[<span class="hljs-string">&quot;csm_head_pre_title&quot;</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>(); &#125;)(<span class="hljs-title class_">IMDbTimer</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n   <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Ratings and Reviews for New Movies and TV Shows - IMDb<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>\n <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params">t</span>)</span></span><span class="hljs-template-variable">&#123; (t.events = t.events || &#123;&#125;</span><span class="language-xml"><span class="language-javascript">)[<span class="hljs-string">&quot;csm_head_post_title&quot;</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>(); &#125;)(<span class="hljs-title class_">IMDbTimer</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">\n  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> uet == \<span class="hljs-string">&#x27;function\&#x27;) </span></span></span><span class="hljs-template-variable">&#123;\n   uet(&quot;be&quot;, &quot;LoadTitle&quot;, &#123;wb: 1&#125;</span><span class="language-xml">);\n  &#125;\n<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">\n <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> uex == \<span class="hljs-string">&#x27;function\&#x27;) </span></span></span><span class="hljs-template-variable">&#123;\n   uex(&quot;ld&quot;, &quot;LoadTitle&quot;, &#123;wb: 1&#125;</span><span class="language-xml">);\n &#125;\n<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;canonical&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.imdb.com/&quot;</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;og:url&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;http://www.imdb.com/&quot;</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;alternate&quot;</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;only screen and (max-width: 640px)&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://m.imdb.com/&quot;</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">\n  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> uet == \<span class="hljs-string">&#x27;function\&#x27;) </span></span></span><span class="hljs-template-variable">&#123;\n   uet(&quot;bb&quot;, &quot;LoadIcons&quot;, &#123;wb: 1&#125;</span><span class="language-xml">);\n  &#125;\n<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params">t</span>)</span></span><span class="hljs-template-variable">&#123; (t.events = t.events || &#123;&#125;</span><span class="language-xml"><span class="language-javascript">)[<span class="hljs-string">&quot;csm_head_pre_icon&quot;</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>(); &#125;)(<span class="hljs-title class_">IMDbTimer</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://m.media-amazon.com/images/G/01/imdb/images/safari-favicon-517611381._CB483525257_.svg&quot;</span> <span class="hljs-attr">mask</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;any&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/ico&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://m.media-amazon.com/images/G/01/imdb/images/favicon-2165806970._CB470047330_.ico&quot;</span> /&gt;</span>\n...</span><br></code></pre></td></tr></table></figure><p>得到的结果如下：</p><p>上例中，我们使用了read()方法，它返回一个字节数组。这会以不易于人类阅读的格式打印Imdb首页返回的数据，但我们可以使用HTML解析器来从中提取有用的信息。</p><h3 id="Python-urllib响应头"><a href="#Python-urllib响应头" class="headerlink" title="Python urllib响应头"></a>Python urllib响应头</h3><p>我们可以对响应对象调用 info()函数来获取响应头。它返回一个字典，这样我们还可以从响应中提取指定的头信息数据。创建一个脚本url_response_header.py并编写如下内容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import urllib<span class="hljs-selector-class">.request</span><br> <br>x = urllib<span class="hljs-selector-class">.request</span><span class="hljs-selector-class">.urlopen</span>(<span class="hljs-string">&#x27;https://www.imdb.com/&#x27;</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(x.info()</span></span>)<br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">python3</span> url_response_header.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 url_response_header.py<br>Content-Type: text/html; charset=utf-8<br>Content-Length: 724285<br>Connection: close<br>Server: Server<br>Date: Thu, 17 Mar 2022 08:40:13 GMT<br>x-amz-rid: 1X3N861AS5YYGXZMF279<br>set-cookie: next-sid=LrwYDFn5HF2hJRGVA0im1; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly<br>x-frame-options: SAMEORIGIN<br>x-xss-protection: 1; mode=block<br>ETag: <span class="hljs-string">&quot;b0d3d-mxkvTG8DhMI/NDsLfTWGv+f+4Jw&quot;</span><br>Cache-Control: private, no-cache, no-store, max-age=0, must-revalidate<br>Vary: Accept-Encoding,Content-Type,Accept-Encoding,X-Amzn-CDN-Cache,X-Amzn-AX-Treatment,User-Agent<br>Strict-Transport-Security: max-age=47474747; includeSubDomains; preload<br>Permissions-Policy: interest-cohort=()<br>X-Cache: Miss from cloudfront<br>Via: 1.1 507f0bab9a1278d1632051db230c99d4.cloudfront.net (CloudFront)<br>X-Amz-Cf-Pop: LAX3-C4<br>X-Amz-Cf-Id: -d8dxvjyWQMwmoK4soC4CkJq1uHkTGReM2Q26VyNHcS_evIZkg2FLg==<br><br></code></pre></td></tr></table></figure><h2 id="总结-9"><a href="#总结-9" class="headerlink" title="总结"></a>总结</h2><p>本章中，我们学习了socket，它用于服务端-客户端双向通讯。我们还学习了三个互联网模块：http, ftplib和urllib。http包中有服务端和客户端模块：分别为http.client和http.server。使用ftplib，我们从另一台机器上下载了文件。我们还看了欢迎消息的知识以及发送send命令。</p><p>下一章中将涵盖创建和发送邮件的知识。我们会学习消息格式以及添加多媒体内容。同时，我们会学习SMTP, POP和IMAP服务器。</p><h2 id="课后问题-8"><a href="#课后问题-8" class="headerlink" title="课后问题"></a>课后问题</h2><ol><li>什么是socket编程？</li><li>什么是RPC？</li><li>导入用户定义的模块或文件有哪些不同的方式？</li><li>列表和元组之间的区别是什么？</li><li>字典中的键是否可以重复？</li><li>urllib, urllib2和requests模块之间的区别是什么？</li></ol><h2 id="扩展阅读-8"><a href="#扩展阅读-8" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul><li>ftpliby文档: <a href="https://docs.python.org/3/library/ftplib.html">https://docs.python.org/3/library/ftplib.html</a></li><li>xmlrpc文档: <a href="https://docs.python.org/3/library/xmlrpc.html">https://docs.python.org/3/library/xmlrpc.html</a></li></ul><h1 id="第十一章-使用Python脚本处理邮件"><a href="#第十一章-使用Python脚本处理邮件" class="headerlink" title="第十一章 使用Python脚本处理邮件"></a><a href="https://alanhou.org/handling-emails-python-scripting/">第十一章 使用Python脚本处理邮件</a></h1><p>本章中我们将学习如何使用Python脚本来处理邮件。我们会学习到email消息格式。还将探讨使用smtplib发送和接收email。我们将使用Python的email包来发送带有附件和HTML内容的邮件。我们还将学习用于处理邮件的不同协议。</p><p>本章中我们将学习如下内容：</p><ul><li>Email消息格式</li><li>添加HTML和多媒体内容</li><li>POP3和IMAP服务器</li></ul><h2 id="Email消息格式"><a href="#Email消息格式" class="headerlink" title="Email消息格式"></a>Email消息格式</h2><p>这一部分中，我们将学习邮件消息格式。邮件消息有三个主要组成部分：</p><ul><li>接收人的email地址</li><li>发送者的email地址</li><li>消息体</li></ul><p>消息格式中还有其它组成部分，如标题、email签名和附件。</p><p>下面我们来看从Gmail发送普通文本邮件的一个简单示例，通过本例可以学习到如何编写邮件消息以及发送消息。创建一个脚本write_email_message.py并在其中编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> smtplib, getpass<br> <br><span class="hljs-comment"># host_name = &#x27;smtp.gmail.com&#x27;</span><br>host_name = <span class="hljs-string">&#x27;smtp.exmail.qq.com&#x27;</span><br><span class="hljs-comment"># host_name = &#x27;smtp.163.com&#x27;</span><br>port = <span class="hljs-number">465</span><br> <br>sender = <span class="hljs-string">&#x27;发件人 email&#x27;</span><br>receiver = <span class="hljs-string">&#x27;收件人 email&#x27;</span><br>password = getpass.getpass()<br> <br>msg = <span class="hljs-string">&quot;&quot;&quot;\</span><br><span class="hljs-string">Subject: Test Mail</span><br><span class="hljs-string">Hello from Alan !!!&quot;&quot;&quot;</span><br> <br>s = smtplib.SMTP_SSL(host_name, port)<br>s.login(sender, password)<br>s.sendmail(sender, receiver, msg)<br>s.quit()<br> <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Mail sent Successfully&quot;</span>)<br></code></pre></td></tr></table></figure><p>译者注：因在墙内以及安全认证机制的原因，可尝试使用其它国内邮箱服务进行替代</p><p>运行脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 write_email_message2.py<br> <br><span class="hljs-comment"># 输出结果</span><br>Password:<br>Mail sent Successfully<br></code></pre></td></tr></table></figure><p>上例中，我们使用了Python的smtplib模块来发送邮件。确保使用Gmail ID向收件人发送消息。变量sender保存发件人的邮箱。对变量password，我们既可以明文输入也可以使用getpass模块弹出提示输入密码。此处我们选择了后者。接着，我们创建了一个变量msg，即我们的实际邮件消息。在其中，我们首先传入了标题，然后添加了想要发送的消息内容。然后在login()中，我们传入了变量sender和password。接着在sendmail()中，我们传入了发件人、收件人和消息文本的相关变量。通过这一流程，我们成功地发出了邮件。</p><h2 id="添加HTML和多媒体内容"><a href="#添加HTML和多媒体内容" class="headerlink" title="添加HTML和多媒体内容"></a>添加HTML和多媒体内容</h2><p>这部分中，我们将来看如何以附件发送多媒体内容，以及如何添加HTML内容。要实现这一功能，我们需要用到Python的email包。</p><p>首先，我们来看如何添加HTML内容。创建脚本add_html_content.py来进行实现，编写内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os, smtplib<br><span class="hljs-keyword">from</span> email.mime.text <span class="hljs-keyword">import</span> MIMEText<br><span class="hljs-keyword">from</span> email.mime.multipart <span class="hljs-keyword">import</span> MIMEMultipart<br><span class="hljs-keyword">import</span> getpass<br> <br><span class="hljs-comment"># host_name = &#x27;smtp.gmail.com&#x27;</span><br>host_name = <span class="hljs-string">&#x27;smtp.exmail.qq.com&#x27;</span><br><span class="hljs-comment"># host_name = &#x27;smtp.163.com&#x27;</span><br>port = <span class="hljs-number">465</span><br> <br>sender = <span class="hljs-string">&#x27;发件人 email&#x27;</span><br>receiver = <span class="hljs-string">&#x27;收件人 email&#x27;</span><br>password = getpass.getpass()<br> <br>text = MIMEMultipart()<br>text[<span class="hljs-string">&#x27;Subject&#x27;</span>] = <span class="hljs-string">&#x27;Test HTML Content&#x27;</span><br>text[<span class="hljs-string">&#x27;From&#x27;</span>] = sender<br>text[<span class="hljs-string">&#x27;To&#x27;</span>] = receiver<br> <br>msg = <span class="hljs-string">&quot;&quot;&quot;\</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">        &lt;body&gt;</span><br><span class="hljs-string">                &lt;p&gt;Hello there, &lt;br&gt;</span><br><span class="hljs-string">                        Good day !!&lt;br&gt;</span><br><span class="hljs-string">                        &lt;a href=&quot;http://www.imdb.com&quot;&gt;Home&lt;/a&gt;</span><br><span class="hljs-string">                &lt;/p&gt;</span><br><span class="hljs-string">        &lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br> <br>html_content = MIMEText(msg, <span class="hljs-string">&quot;html&quot;</span>)<br>text.attach(html_content)<br>s = smtplib.SMTP_SSL(host_name, port)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Mail sent successfully !!&quot;</span>)<br> <br>s.login(sender, password)<br>s.sendmail(sender, receiver, text.as_string())<br>s.quit()<br></code></pre></td></tr></table></figure><p>运行脚本，将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 add_html_content2.py<br> <br><span class="hljs-comment"># 输出结果：</span><br>Password:<br>Mail sent successfully !!<br></code></pre></td></tr></table></figure><p>上例中，我们通过Python脚本使用email包在消息中发送了HTML内容。我们创建了一个变量msg用于存储HTML内容。</p><p>下面，我们来看如何添加附件以及通过Python脚本来进行发送。为此我们创建一个脚本add_attachment.py，并在其中编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os, smtplib<br><span class="hljs-keyword">from</span> email.mime.text <span class="hljs-keyword">import</span> MIMEText<br><span class="hljs-keyword">from</span> email.mime.image <span class="hljs-keyword">import</span> MIMEImage<br><span class="hljs-keyword">from</span> email.mime.multipart <span class="hljs-keyword">import</span> MIMEMultipart<br><span class="hljs-keyword">import</span> getpass<br> <br><span class="hljs-comment"># host_name = &#x27;smtp.gmail.com&#x27;</span><br>host_name = <span class="hljs-string">&#x27;smtp.exmail.qq.com&#x27;</span><br><span class="hljs-comment"># host_name = &#x27;smtp.163.com&#x27;</span><br>port = <span class="hljs-number">465</span><br> <br>sender = <span class="hljs-string">&#x27;发件人 email&#x27;</span><br>receiver = <span class="hljs-string">&#x27;收件人 email&#x27;</span><br>password = getpass.getpass()<br> <br>text = MIMEMultipart()<br>text[<span class="hljs-string">&#x27;Subject&#x27;</span>] = <span class="hljs-string">&#x27;Test Attachment&#x27;</span><br>text[<span class="hljs-string">&#x27;From&#x27;</span>] = sender<br>text[<span class="hljs-string">&#x27;To&#x27;</span>] = receiver<br> <br>txt = MIMEText(<span class="hljs-string">&#x27;Sending a sample image.&#x27;</span>)<br>text.attach(txt)<br>f_path = <span class="hljs-string">&#x27;文件路径&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(f_path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        img = MIMEImage(f.read())<br>        img.add_header(<span class="hljs-string">&#x27;Content-Disposition&#x27;</span>,<br>                <span class="hljs-string">&#x27;attachment&#x27;</span>,<br>                filename=os.path.basename(f_path))<br> <br>text.attach(img)<br>s = smtplib.SMTP_SSL(host_name, port)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Attachment sent successfully !!&quot;</span>)<br>s.login(sender, password)<br>s.sendmail(sender, receiver, text.as_string())<br>s.quit()<br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">$ python3 add_attachment.py<br> <br><span class="hljs-meta"># 输出结果</span><br><span class="hljs-symbol">Password:</span><br>Attachment sent successfully !!<br></code></pre></td></tr></table></figure><p>上例中，我们以附件向收件人发送图片。我们传入了发件人和收件人的邮件。然后，在f_path中，我们传入了要以附件发送的图片的路径。接着，我们以附件向收件人发送了该图片。</p><h2 id="POP3和IMAP服务器"><a href="#POP3和IMAP服务器" class="headerlink" title="POP3和IMAP服务器"></a>POP3和IMAP服务器</h2><p>这部分中，我们将学习通过POP和IMAP服务接收邮件。Python中提供了poplib和imaplib这两个库来通过Python脚本接收邮件。</p><h3 id="使用poplib库接收email"><a href="#使用poplib库接收email" class="headerlink" title="使用poplib库接收email"></a>使用poplib库接收email</h3><p>POP3表示邮局协议（Post Office Protocol）第3版。这一标准协议帮助我们从远程服务器接收邮件到本地机器。POP3的主要优势是它允许我们将邮件下载到本地机器并在线下读取所下载的邮件。</p><p>POP3协议用于两个端口：</p><p>端口110: 默认非加密端口</p><p>端口995: 加密端口</p><p>下面我们来看一些示例。首先，我们来看获取一些邮件的示例。为此创建一个脚本number_of_emails.py并在其中编写如下内容：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs perl">import poplib, getpass<br> <br><span class="hljs-comment"># pop3_server = &#x27;pop.gmail.com&#x27;</span><br>pop3_server = <span class="hljs-string">&#x27;pop.exmail.qq.com&#x27;</span><br> <br>username = <span class="hljs-string">&#x27;Email地址&#x27;</span><br>password = getpass.getpass()<br> <br>email_obj = poplib.POP3_SSL(pop3_server)<br><span class="hljs-keyword">print</span>(email_obj.getwelcome())<br> <br>email_obj.user(username)<br>email_obj.pass<span class="hljs-number">_</span>(password)<br>email_stat = email_obj.stat()<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;New arrived emails are : %s (%s bytes)&quot;</span> % email_stat)<br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gcode">$ pytho<span class="hljs-symbol">n3</span> <span class="hljs-symbol">number_of_emails2</span>.py<br> <br><span class="hljs-attr"># 输出参考：</span><br><span class="hljs-attr">Password:</span><br><span class="hljs-attr">b&#x27;+OK QQMail POP3</span> Server v<span class="hljs-number">1.0</span> Service Ready<span class="hljs-comment">(QQMail v2.0)</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">New arrived emails are : 2793 (1422058063 bytes)</span><br></code></pre></td></tr></table></figure><p>输出中我们会得到当前邮箱中的 email 数量。</p><p>上例中，我们首先导入了poplib库，它在Python中用于使用POP3协议来安全地接收邮件。然后，我们添加了指定的的邮件服务器以及邮件验证信息，即用户名和密码。然后，我们从服务器打印了响应信息，并向POP3 SSL服务器传输了用户名和密码。在登录后，我们得到了邮箱的数据并在终端中打印了邮件的数量。</p><p>下面我们将编写一个脚本来获取最新的邮件。为此创建一个脚本latest_email.py并编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> poplib, getpass<br> <br><span class="hljs-comment"># pop3_server = &#x27;pop.gmail.com&#x27;</span><br>pop3_server = <span class="hljs-string">&#x27;pop.exmail.qq.com&#x27;</span><br>username = <span class="hljs-string">&#x27;Email地址&#x27;</span><br>password = getpass.getpass()<br> <br>email_obj = poplib.POP3_SSL(pop3_server)<br><span class="hljs-built_in">print</span>(email_obj.getwelcome())<br>email_obj.user(username)<br>email_obj.pass_(password)<br> <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nLatest Mail\n&quot;</span>)<br>latest_email = email_obj.retr(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(latest_email[<span class="hljs-number">1</span>])<br>运行脚本如下：<br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 latest_email2.py<br> <br><span class="hljs-comment"># 输出结果</span><br>Password:<br>b<span class="hljs-string">&#x27;+OK QQMail POP3 Server v1.0 Service Ready(QQMail v2.0)&#x27;</span><br> <br>Latest Mail<br></code></pre></td></tr></table></figure><p>输出结果中将包含邮箱中接收到最新邮件。</p><p>上例中，我们导入了Python中使用的poplib库来安全地支持POP3协议的邮件接收。在声明指定服务器和用户名与密码后，我们打印出了服务器的响应消息并向POP3 SSL服务器传递了用户名和密码。然后，我们从邮箱获取到了最新的邮件。</p><p>下面，我们编写一下脚本来获取所有邮件。为此我们创建一个脚本all_emails.py，并在其中编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> poplib, getpass<br> <br><span class="hljs-comment"># pop3_server = &#x27;pop.gmail.com&#x27;</span><br>pop3_server = <span class="hljs-string">&#x27;pop.exmail.qq.com&#x27;</span><br>username = <span class="hljs-string">&#x27;Email地址&#x27;</span><br>password = getpass.getpass()<br> <br>email_obj = poplib.POP3_SSL(pop3_server)<br><span class="hljs-built_in">print</span>(email_obj.getwelcome())<br>email_obj.user(username)<br>email_obj.pass_(password)<br> <br>email_stat = email_obj.stat()<br>NumofMsgs = email_stat[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(NumofMsgs):<br>        <span class="hljs-keyword">for</span> mail <span class="hljs-keyword">in</span> email_obj.retr(i+<span class="hljs-number">1</span>)[<span class="hljs-number">1</span>]:<br>                <span class="hljs-built_in">print</span>(mail)<br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">python3</span> latest_email.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>输出中，我们将得到邮箱里接收到的所有邮件。</p><h3 id="使用imaplib库接收email"><a href="#使用imaplib库接收email" class="headerlink" title="使用imaplib库接收email"></a>使用imaplib库接收email</h3><p>IMAP表示因特网邮件访问协议（Internet Message Access Protocol）。它用于在本机上访问远程服务器的邮件。IMAP允许同步地在多个客户端访问邮件。IMAP适用于不同地方访问我们邮件的场景。</p><p>IMAP协议使用两个端口：</p><p>端口143: 默认非加密端口</p><p>端口993: 加密端口</p><p>下面我们来看使用imaplib库的一个示例。创建一个脚本imap_email.py并在其中编写如下内容：</p><p>输出中我们将得到指定文件夹中的所有邮件。</p><p>上例中，首先我们导入了imaplib库，它用于在Python中通过IMAP协议安全地接收邮件。然后，我们声明了指定的邮件服务器和用户登录信息，即用户名和密码。再后，我们向IMAP SSL服务器传递了用户名和密码。我们对imap_obj使用了select(‘Inbox’)函数来显示收件箱中的消息。然后我们使用for循环来显示逐一获取的消息。显示消息时我们使用了“美化打印”，即pprint.pprint()函数，因为它格式化对像，向数据流中写入，并将其作为参数传递。最后，我们关闭了连接。</p><h2 id="总结-10"><a href="#总结-10" class="headerlink" title="总结"></a>总结</h2><p>本章中，我们学习了如何在Python脚本中编写邮件消息。我们还学习了Python的smtplib模块，它用于通过Python脚本发送和接收邮件。我们同时学习了如何通过POP3和IMAP协议接收邮件。Python提供了poplib和imaplib库来执行这些任务。</p><p>下一章中，我们将学习Telnet和SSH。</p><h2 id="课后问题-9"><a href="#课后问题-9" class="headerlink" title="课后问题"></a>课后问题</h2><ol><li>什么是POP3和 IMAP？</li><li>break和continue的作用是什么？举出适当的例子。</li><li>pprint是什么？</li><li>负值索引是什么以及为何使用负值索引？</li><li>pyc和py文件扩展名的区别是什么？</li><li>使用循环生成如下样式<br>1010101<br>10101<br>101<br>1</li></ol><h1 id="第十二章-使用Telnet和SSH远程监控主机"><a href="#第十二章-使用Telnet和SSH远程监控主机" class="headerlink" title="第十二章 使用Telnet和SSH远程监控主机"></a>第十二章 使用Telnet和SSH远程监控主机</h1><p>本章中我们将学习如何在服务器通过配置Telnet和SSH来实现基本配置。我们从Telnet模块开始，然后使用推荐的方法来实现相同的配置：使用Python的不同模块来完成SSH连接。我们还将学习telnetlib, subprocess, fabric, Netmiko和paramiko的运行方式。学习本章，读取必须要有网络的基础知识。</p><p>本章将涉及如下课题：</p><ul><li>telnetlib()模块</li><li>subprocess.Popen()模块</li><li>SSH之使用fabric模块</li><li>SSH之使用Paramiko库</li><li>SSH之使用Netmiko库</li></ul><h2 id="telnetlib-模块"><a href="#telnetlib-模块" class="headerlink" title="telnetlib()模块"></a>telnetlib()模块</h2><p>这部分中，我们将学习Telnet协议，然后使用telnetlib模块对远程服务器进行Telnet的操作。</p><p>Telnet是一个允许用户与远程服务器通讯的网络协议。它多由网络管理员用来远程访问和管理设备。要访问设备，在终端中运行Telnet命令并加上远程服务器的IP地址或主机名。</p><p>Telnet使用TCP，默认端口为23。要使用，确保在系统中进行了安装，如未安装，运行如下命令来完成安装：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install telnetd<br></code></pre></td></tr></table></figure><p>通过终端快速运行Telnet命令，可输入如下命令：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>telnet ip_address_of_your_remote_server<br></code></pre></td></tr></table></figure><p>Python带有一个telnetlib模块，可通过Python脚本执行Telnet函数。在对远程设备或交换机进行Telnet之前，确保进行了适当的配置，如果未配置，我们可以在交换机终端中使用如下命令：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">configure terminal<br><span class="hljs-keyword">enable</span> <span class="hljs-keyword">password</span> <span class="hljs-string">&#x27;set_Your_password_to_access_router&#x27;</span><br>username <span class="hljs-string">&#x27;设置用户名&#x27;</span> <span class="hljs-keyword">password</span> <span class="hljs-string">&#x27;设置远程访问密码&#x27;</span><br><span class="hljs-type">line</span> vty <span class="hljs-number">0</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">login</span> <span class="hljs-keyword">local</span><br>transport <span class="hljs-keyword">input</span> <span class="hljs-keyword">all</span><br>interface f0/<span class="hljs-number">0</span><br>ip <span class="hljs-keyword">add</span> <span class="hljs-string">&#x27;set_ip_address_to_the_router&#x27;</span> <span class="hljs-string">&#x27;put_subnet_mask&#x27;</span><br><span class="hljs-keyword">no</span> shut<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">show</span> ip interface brief<br></code></pre></td></tr></table></figure><p>译者注：以上代码与交换机相关，Ubuntu 开启 Telnet 命令如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 安装openbsd-inetd</span><br><br>sudo apt-<span class="hljs-built_in">get</span> -y install openbsd-inetd<br><br><span class="hljs-comment"># 安装telnetd</span><br><br>sudo apt-<span class="hljs-built_in">get</span> -y install telnetd<br><br><span class="hljs-comment"># 重启openbsd-inetd</span><br><br>sudo /etc/init.d/openbsd-inetd restart<br><br><br></code></pre></td></tr></table></figure><p> 下面我们来看一个Telnet远程设备的示例。创建脚本telnet_example.py 并在其中编写如下内容： </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> telnetlib, getpass, sys<br> <br><span class="hljs-type">HOST_IP</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;你的主机 IP 地址&quot;</span><br>host_user <span class="hljs-operator">=</span> input(<span class="hljs-string">&quot;Enter your telnet username: &quot;</span>)<br>password <span class="hljs-operator">=</span> getpass.getpass()<br> <br>t <span class="hljs-operator">=</span> telnetlib.<span class="hljs-type">Telnet</span>(<span class="hljs-type">HOST_IP</span>)<br># t.read_until(b<span class="hljs-string">&quot;Username:&quot;</span>)<br># t.read_until(b<span class="hljs-string">&quot;login:&quot;</span>)<br>t.write(host_user.encode(<span class="hljs-string">&quot;ascii&quot;</span>) <span class="hljs-operator">+</span> b<span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span>)<br><span class="hljs-keyword">if</span> password:<br>        t.read_until(b<span class="hljs-string">&quot;Password:&quot;</span>)<br>        t.write(password.encode(<span class="hljs-string">&quot;ascii&quot;</span>) <span class="hljs-operator">+</span> b<span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span>)<br> <br>t.write(b<span class="hljs-string">&quot;enable<span class="hljs-subst">\n</span>&quot;</span>)<br>t.write(b<span class="hljs-string">&quot;enter_remote_device_password<span class="hljs-subst">\n</span>&quot;</span>) # 远程设备密码<br>t.write(b<span class="hljs-string">&quot;conf t<span class="hljs-subst">\n</span>&quot;</span>)<br>t.write(b<span class="hljs-string">&quot;int loop 1<span class="hljs-subst">\n</span>&quot;</span>)<br>t.write(b<span class="hljs-string">&quot;ip add 10.1.1.1 255.255.255.255<span class="hljs-subst">\n</span>&quot;</span>)<br>t.write(b<span class="hljs-string">&quot;int loop 2<span class="hljs-subst">\n</span>&quot;</span>)<br>t.write(b<span class="hljs-string">&quot;ip add 20.2.2.2 255.255.255.255<span class="hljs-subst">\n</span>&quot;</span>)<br>t.write(b<span class="hljs-string">&quot;end<span class="hljs-subst">\n</span>&quot;</span>)<br>t.write(b<span class="hljs-string">&quot;exit<span class="hljs-subst">\n</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(t.read_all().decode(<span class="hljs-string">&quot;ascii&quot;</span>))<br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">$ python3 telnet_example2.py</span><br><span class="hljs-attribute">Enter your telnet username</span><span class="hljs-punctuation">:</span> <span class="hljs-string">student</span><br><span class="hljs-attribute">Password</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"> </span><br>...<br></code></pre></td></tr></table></figure><p>译者注：原文测试对象为交换机，上例中 Alan 使用了 Ubuntu 进行测试，因此需将第一处的读取改为 login，命令执行部分省略，读者可替换为其它 Linux 命令来进行测试。</p><p>上例中，我们使用telnetlib模块访问并配置了Cisco交换机。该脚本中，首先我们接收用户输入用户名和密码来初始化远程设备的Telnet连接。一旦建立了连接，我们对远程设备进行了更进一步的配置。Telnet连接后，我们就能够访问远程服务器或设备。但Telnet协议有一个很重要的缺点，那就是所有的数据，包括用户和密码，都以文本的形式在网络中传输，这就可能会带来安全风险。因此，现在很少会使用Telnet，转而由名为Secure Shell的安全协议在替代，常称为SSH。</p><h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><p>SSH是一个通过远程访问来管理设备或服务器的网络协议。SSH使用公钥加密来保证安全。Telnet和SSH之间的重要区别是SSH使用了加密，也就是说数据在网络上的传输都受保护不被未授权实时拦截。</p><p>用户访问远程服务器或设备时应使用SSH客户端。在终端中通过如下命令可安装SSH：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> ssh<br></code></pre></td></tr></table></figure><p>同时在用户要远程连接的远程服务器上需要安装和运行SSH服务端。SSH使用TCP协议并且默认运行在22端口上。</p><p>我们可以通过终端运行ssh命令如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> host_name<span class="hljs-variable">@host_ip_address</span><br></code></pre></td></tr></table></figure><p>下面我们来学习使用Python中的不同模块来进行SSH连接，如subprocess, fabric, Netmiko和Paramiko。接下来我们就逐一学习这些模块。</p><h2 id="subprocess-Popen-模块"><a href="#subprocess-Popen-模块" class="headerlink" title="subprocess.Popen()模块"></a>subprocess.Popen()模块</h2><p>Popen类处理进程的创建和管理。通过使用这一模块，开发人员可处理不太常见的用例。子程序将在新的进程中进行。要在Unix&#x2F;Linux上执行子程序，该类会使用os.execvp()函数。要在Windows上执行子程序，该类会使用CreateProcess()函数。</p><p>下面我们来看subprocess.Popen()的一些有用的参数：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">class subprocess.Popen(args, <span class="hljs-attribute">bufsize</span>=-1, <span class="hljs-attribute">executable</span>=None,<br>    <span class="hljs-attribute">stdin</span>=None, <span class="hljs-attribute">stdout</span>=None, <span class="hljs-attribute">stderr</span>=None,<br>    <span class="hljs-attribute">preexec_fn</span>=None, <span class="hljs-attribute">close_fds</span>=_PLATFORM_DEFAULT_CLOSE_FDS,<br>    <span class="hljs-attribute">shell</span>=<span class="hljs-literal">False</span>, <span class="hljs-attribute">cwd</span>=None, <span class="hljs-attribute">env</span>=None, <span class="hljs-attribute">universal_newlines</span>=<span class="hljs-literal">False</span>,<br>    <span class="hljs-attribute">startupinfo</span>=None, <span class="hljs-attribute">creationflags</span>=0,<br>    <span class="hljs-attribute">restore_signals</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">start_new_session</span>=<span class="hljs-literal">False</span>,<br>    pass_fds=(), *, <span class="hljs-attribute">encoding</span>=None, <span class="hljs-attribute">errors</span>=None):<br></code></pre></td></tr></table></figure><p>我们来看下各个参数：</p><ul><li>args：可以是一个程序参数序列或单个字符串。如果args是一个序列，args中的第一项会被执行。如果args是一个字符，它推荐以序列传入args。</li><li>shell：shell参数默认设为False，它指定是否使用shell来执行程序。如果shell的值为True，它推荐以字符串传入args。在Linux中，如果shell&#x3D;True，shell默认为&#x2F;bin&#x2F;sh。如果args是一个字符串，字符串指定通过shell执行的命令。</li><li>bufsize：如果bufsize为0（默认值为0，译者注：Alan 本地3.6和3.7的默认值均为-1），这表示未缓冲，如果bufsize值为1，则表示行缓冲。若bufsize为任意其它正值，使用指定大小的缓冲。如果bufsize为任意其它负值，表示全量缓冲。</li><li>executable：它指定要执行的替代程序。</li><li>stdin, stdout, and stderr：这些参数分别定义标准输入、标准输出和标准错误。</li><li>preexec_fn：设置为可调用对象，会在执行子进程之前调用。</li><li>close_fds：在Linux中，如果close_fds为真，所以除0, 1和2以外的文件描述符都会在子进程执行之前关闭。在Windows中，如果close_fds为真那么子进程将不继承指针。</li><li>env：如果其值不为None，那么映射会定义新进程的环境变量。</li><li>universal_newlines：若值为True，那么stdout和stderr会以新行模式的文本文件打开。</li></ul><p>下面我们来看一个subprocess.Popen()的示例。为此创建一个脚本ssh_using_sub.py并在其中编写如下内容：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import subprocess, sys<br> <br><span class="hljs-attribute">HOST</span>=<span class="hljs-string">&quot;主机用户名@主机 IP&quot;</span><br>COMMAND = <span class="hljs-string">&quot;ls&quot;</span><br> <br>ssh_obj = subprocess.Popen([<span class="hljs-string">&quot;ssh&quot;</span>, <span class="hljs-string">&quot;%s&quot;</span> % HOST, COMMAND],<br>        <span class="hljs-attribute">shell</span>=<span class="hljs-literal">False</span>,<br>        <span class="hljs-attribute">stdout</span>=subprocess.PIPE,<br>        <span class="hljs-attribute">stderr</span>=subprocess.PIPE)<br> <br>result = ssh_obj.stdout.readlines()<br><span class="hljs-keyword">if</span> result == []:<br>        err = ssh_obj.stderr.readlines()<br>        <span class="hljs-built_in">print</span>(sys.stderr, <span class="hljs-string">&quot;ERROR: %s&quot;</span> % err)<br><span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>python3 ssh_using_sub2.py<br> <br><span class="hljs-comment"># 输出结果（第一次需确认连接）：</span><br><span class="hljs-title class_">The</span> authenticity of host <span class="hljs-string">&#x27;192.168.0.14 (192.168.0.14)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><br><span class="hljs-string">ECDSA key fingerprint is SHA256:0Yzjg/Ipsb3ilbpABfih6b55ET6ub0c2MkgtbWqwm/8.</span><br><span class="hljs-string">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="hljs-string">student@192.168.0.14&#x27;</span>s <span class="hljs-symbol">password:</span><br>[b<span class="hljs-string">&#x27;testing\n&#x27;</span>, b<span class="hljs-string">&#x27;work\n&#x27;</span>]<br></code></pre></td></tr></table></figure><p>上例中，首先我们导入了subprocess模块，然后定义了想要建立SSH连接的主机地址。接着我们添加了一条在远程设备上执行的简单命令。一切设置完成后，我们将这一信息传入到subprocess.Popen()函数中。该函数执行定义在函数内的参数来创建与远程设备的连接。在建立了SSH连接之后，我们所定义的命令被执行并返回结果。然后我们在终端中打印出了SSH的返回结果，参见输出。</p><h2 id="SSH之使用fabric模块"><a href="#SSH之使用fabric模块" class="headerlink" title="SSH之使用fabric模块"></a>SSH之使用fabric模块</h2><p>Fabric是一个Python库，并且是一个可用于SSH的命令行工具。它用于系统运维及在网上部署应用。我们也可以在SSH之上执行shell命令。</p><p>要使用fabric模块，首先我们要使用如下命令来进行安装：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip3 <span class="hljs-keyword">install</span> fabric3<br></code></pre></td></tr></table></figure><p>下面我们来看一个示例。创建脚本fabfile.py并在其中编写如下内容：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">from</span> <span class="hljs-variable">fabric.api</span> <span class="hljs-variable">import</span> *<br> <br><span class="hljs-variable">env.hosts</span> = [<span class="hljs-string">&quot;用户名@主机ip&quot;</span>]<br><span class="hljs-variable">env.password</span> = <span class="hljs-string">&#x27;你的密码&#x27;</span><br> <br><span class="hljs-variable">def</span> <span class="hljs-function"><span class="hljs-title">dir</span>():</span><br><span class="hljs-function">        <span class="hljs-title">run</span>(<span class="hljs-string">&#x27;mkdir fabric&#x27;</span>)</span><br>        <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-string">&#x27;Directory named fabric has been created on your host network&#x27;</span>)</span><br> <br><span class="hljs-variable">def</span> <span class="hljs-function"><span class="hljs-title">diskspace</span>():</span><br><span class="hljs-function">        <span class="hljs-title">run</span>(<span class="hljs-string">&#x27;df&#x27;</span>)</span><br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$ fab -f fabfile.py dir<br> <br><span class="hljs-meta"># 输出结果：</span><br>[student<span class="hljs-symbol">@192</span><span class="hljs-number">.168</span><span class="hljs-number">.0</span><span class="hljs-number">.14</span>] Executing task <span class="hljs-string">&#x27;dir&#x27;</span><br>[student<span class="hljs-symbol">@192</span><span class="hljs-number">.168</span><span class="hljs-number">.0</span><span class="hljs-number">.14</span>] <span class="hljs-built_in">run</span>: mkdir fabric<br>...<br>Directory named fabric has been created on your host network<br> <br>Done.<br>Disconnecting from student<span class="hljs-symbol">@192</span><span class="hljs-number">.168</span><span class="hljs-number">.0</span><span class="hljs-number">.14</span>... done.<br></code></pre></td></tr></table></figure><p>上例中，首先我们导入了fabric.api模块，然后我们设置了主机名和密码来与网络上主机进行连接。接着，我们设置了通过SSH执行的任务。因此，执行我们的程序不是使用Python3 fabfile.py，而是要使用fab工具，然后上述的任务就会从fabfile.py文件中进行执行。本例中，我们执行了dir，在远程主机上创建了一个名为fabric目录。你也可以在Python文件中添加你自己的任务。它可通过fabric模块中的fab工具来进行执行。</p><h2 id="SSH之使用Paramiko库"><a href="#SSH之使用Paramiko库" class="headerlink" title="SSH之使用Paramiko库"></a>SSH之使用Paramiko库</h2><p>Paramiko是一个实现了安全连接远程设备SSHv2协议的库。Paramiko是针对SSH的纯Python接口。</p><p>在使用Paramiko之前，确保正确地在系统中进行了安装。如未安装，我们可以通过在终端中运行如下命令来进行安装：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo pip3 <span class="hljs-keyword">install</span> paramiko<br></code></pre></td></tr></table></figure><p>下面我们来看一个使用paramiko的示例。对于paramiko连接，我们使用Cisco设备（译者注：Alan 将继续使用本地虚拟机）。Paramiko既支持密码验证也支持密钥对验来对主机进行安全连接。我们的脚本中，会使用密码验证，也即对密码进行检测，如存在则尝试使用用户名&#x2F;密码来进行验证。在使用SSH连接远程设备或多层交换机时，首先确保对它们进行了适当的配置，若未配置，可使用如下命令在多层交换机中进行基本配置：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">configure t<br>ip <span class="hljs-keyword">domain</span>-<span class="hljs-type">name</span> cciepython.com<br>crypto key generate rsa<br>How many bits <span class="hljs-keyword">in</span> the modulus [<span class="hljs-number">512</span>]: <span class="hljs-number">1024</span><br>interface range f0/<span class="hljs-number">0</span> - <span class="hljs-number">1</span><br>switchport mode <span class="hljs-keyword">access</span><br>switchport <span class="hljs-keyword">access</span> vlan <span class="hljs-number">1</span><br><span class="hljs-keyword">no</span> shut<br><span class="hljs-type">int</span> vlan <span class="hljs-number">1</span><br>ip <span class="hljs-keyword">add</span> <span class="hljs-string">&#x27;set_ip_address_to_the_router&#x27;</span> <span class="hljs-string">&#x27;put_subnet_mask&#x27;</span><br><span class="hljs-keyword">no</span> shut<br><span class="hljs-keyword">exit</span><br><span class="hljs-keyword">enable</span> <span class="hljs-keyword">password</span> <span class="hljs-string">&#x27;set_Your_password_to_access_router&#x27;</span><br>username <span class="hljs-string">&#x27;set_username&#x27;</span> <span class="hljs-keyword">password</span> <span class="hljs-string">&#x27;set_password_for_remote_access&#x27;</span><br>username <span class="hljs-string">&#x27;username&#x27;</span> privilege <span class="hljs-number">15</span><br><span class="hljs-type">line</span> vty <span class="hljs-number">0</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">login</span> <span class="hljs-keyword">local</span><br>transport <span class="hljs-keyword">input</span> <span class="hljs-keyword">all</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>译者注：有相应设备的朋友请自行验证配置命令</p><p>下面，创建一个脚本pmiko.py并在其中编写如下内容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import paramiko, <span class="hljs-selector-tag">time</span><br> <br>ip_address = <span class="hljs-string">&#x27;主机 IP&#x27;</span><br>usr = <span class="hljs-string">&#x27;主机用户名&#x27;</span><br>pwd = <span class="hljs-string">&#x27;主机密码&#x27;</span><br> <br>c = paramiko<span class="hljs-selector-class">.SSHClient</span>()<br>c<span class="hljs-selector-class">.set_missing_host_key_policy</span>(paramiko<span class="hljs-selector-class">.AutoAddPolicy</span>())<br>c<span class="hljs-selector-class">.connect</span>(hostname=ip_address, username=usr, password=pwd)<br> <br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;SSH connection is successfully established with &quot;</span>, ip_address)</span></span><br> <br>rc = c<span class="hljs-selector-class">.invoke_shell</span>()<br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">6</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Creating VLAN &quot;</span> + <span class="hljs-built_in">str</span>(n))<br>        rc<span class="hljs-selector-class">.send</span>(<span class="hljs-string">&quot;vlan database\n&quot;</span>)<br>        rc<span class="hljs-selector-class">.send</span>(<span class="hljs-string">&quot;vlan &quot;</span> + <span class="hljs-built_in">str</span>(n) + <span class="hljs-string">&quot;\n&quot;</span>)<br>        rc<span class="hljs-selector-class">.send</span>(<span class="hljs-string">&quot;exit\n&quot;</span>)<br>        <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.sleep</span>(<span class="hljs-number">0.5</span>)<br> <br><span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.sleep</span>(<span class="hljs-number">1</span>)<br>output = rc<span class="hljs-selector-class">.recv</span>(<span class="hljs-number">65535</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(output)</span></span><br>c<span class="hljs-selector-class">.close</span>()<br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ python3 pmiko.py<br>SSH<span class="hljs-built_in"> connection </span>is successfully established with  192.168.0.14<br>Creating<span class="hljs-built_in"> VLAN </span>2<br>Creating<span class="hljs-built_in"> VLAN </span>3<br>Creating<span class="hljs-built_in"> VLAN </span>4<br> <br><span class="hljs-comment"># 测试连接正常，但会报错OSError: Socket is closed，可考虑修改为其它命令</span><br></code></pre></td></tr></table></figure><p>上例中，首先我们导入了paramiko模块，然后定义了需要远程连接设备的SSH认证信息。在传入身份信息后，我们创建了一个paramiko.SSHclient()的实例c，它是用于连接远程设备和执行命令或运算的主客户端。SSHClient对象的创建允许我们使用.connect()函数来建立远程连接。然后，我们设置了 paramiko连接的策略，因为默认paramiko.SSHclientu将SSH策略设置为拒绝状态。这会让策略拒绝任何未验证的SSH连接。我们的脚本中通过使用AutoAddPolicy()函数来自动添加主机的密钥而不进行弹出，忽略了这种SSH连接断掉的可能性。我们使用策略来进行测试，但出于安全目的不推荐在生产环境使用。</p><p>SSH连接建立之后，我们可以进行想在设备上进行的配置或运算。这里，我们在远程设备上创建了几个虚拟LAN。在创VLAN之后，我们关闭了连接。</p><h2 id="SSH之使用Netmiko库"><a href="#SSH之使用Netmiko库" class="headerlink" title="SSH之使用Netmiko库"></a>SSH之使用Netmiko库</h2><p>这部分中我们将学习Netmiko。Netmiko库是Paramiko的一个高级版本。这是一个基于Paramiko的多供应商（multi_vendor）库。Netmiko简化了网络设备的SSH连接及对设备的具体操作。在通过SSH连接远程设备或多层交换机之前，确保对它们进行了相应的配置，若未配置，我们可以使用在Paramiko一节中使用的命令来进行基本配置。</p><p>下面我们来看一个示例。创建一个脚本nmiko.py并在其中编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> netmiko <span class="hljs-keyword">import</span> ConnectHandler<br> <br>remote_device = &#123;<br>        <span class="hljs-string">&#x27;device_type&#x27;</span>: <span class="hljs-string">&#x27;cisco_ios&#x27;</span>,<br>        <span class="hljs-comment"># &#x27;device_type&#x27;: &#x27;linux&#x27;,</span><br>        <span class="hljs-string">&#x27;ip&#x27;</span>: <span class="hljs-string">&#x27;远程设备 IP地址&#x27;</span>,<br>        <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;用户名&#x27;</span>,<br>        <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;密码&#x27;</span><br>&#125;<br> <br>remote_connection = ConnectHandler(remote_device)<br><span class="hljs-comment"># net_connect.find_prompt()</span><br> <br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">6</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Creating VLAN &quot;</span> + <span class="hljs-built_in">str</span>(n))<br>        commands = [<span class="hljs-string">&#x27;exit&#x27;</span>, <span class="hljs-string">&#x27;vlan database&#x27;</span>, <span class="hljs-string">&#x27;vlan &#x27;</span> + <span class="hljs-built_in">str</span>(n), <span class="hljs-string">&#x27;exit&#x27;</span>]<br>        output = remote_connection.send_config_set(commands)<br>        <span class="hljs-built_in">print</span>(output)<br> <br>command = remote_connection.send_command(<span class="hljs-string">&#x27;show vlan-switch brief&#x27;</span>)<br><span class="hljs-comment"># command = remote_connection.send_command(&#x27;ls&#x27;)</span><br><span class="hljs-built_in">print</span>(command)<br></code></pre></td></tr></table></figure><p>运行脚本，将得到如下输出：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs awk">~$ python3 nmiko.py<br>Output:<br>Creating VLAN <span class="hljs-number">2</span><br>config term<br>Enter configuration commands, one per line. End with CNTL/Z.<br>server(config)<span class="hljs-comment">#exit</span><br>server <span class="hljs-comment">#vlan database</span><br>server (vlan)<span class="hljs-comment">#vlan 2</span><br>VLAN <span class="hljs-number">2</span> modified:<br>server (vlan)<span class="hljs-comment">#exit</span><br>APPLY completed.<br>Exiting....<br>server <span class="hljs-comment">#</span><br>..<br>..<br>..<br>..<br>switch<span class="hljs-comment">#</span><br>Creating VLAN <span class="hljs-number">5</span><br>config term<br>Enter configuration commands, one per line. End with CNTL/Z.<br>server (config)<span class="hljs-comment">#exit</span><br>server <span class="hljs-comment">#vlan database</span><br>server (vlan)<span class="hljs-comment">#vlan 5</span><br>VLAN <span class="hljs-number">5</span> modified:<br>server (vlan)<span class="hljs-comment">#exit</span><br>APPLY completed.<br>Exiting....<br>VLAN Name <br> <br>----<br><span class="hljs-number">1</span> default active Fa0<span class="hljs-regexp">/0, Fa0/</span><span class="hljs-number">1</span>, Fa0<span class="hljs-regexp">/2, Fa0/</span><span class="hljs-number">3</span>,<br>Fa0<span class="hljs-regexp">/4, Fa0/</span><span class="hljs-number">5</span>, Fa0<span class="hljs-regexp">/6, Fa0/</span><span class="hljs-number">7</span>, Fa0<span class="hljs-regexp">/8, Fa0/</span><span class="hljs-number">9</span>, Fa0<span class="hljs-regexp">/10, Fa0/</span><span class="hljs-number">11</span>, Fa0<span class="hljs-regexp">/12, Fa0/</span><span class="hljs-number">13</span>,<br>Fa0<span class="hljs-regexp">/14, Fa0/</span><span class="hljs-number">15</span><br><span class="hljs-number">2</span> VLAN0002 active<br><span class="hljs-number">3</span> VLAN0003 active<br><span class="hljs-number">4</span> VLAN0004 active<br><span class="hljs-number">5</span> VLAN0005 active<br><span class="hljs-number">1002</span> fddi-default active<br><span class="hljs-number">1003</span> token-ring-default active<br><span class="hljs-number">1004</span> fddinet-default active<br><span class="hljs-number">1005</span> trnet-default active<br></code></pre></td></tr></table></figure><p>译者注：以上代码未验证，仅使用ls 代码进行了简单验证</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>python3 nmiko.pyfabrictesting work<br></code></pre></td></tr></table></figure><p>上例中，我们使用了Netmiko库来代替Paramiko进行SSH连接。该脚本中首先我们从Netmiko库中导入了ConnectHandler，用于以SSH连接远程网络设备，在设备字典中进行传入。本例中的字典为remote_device。在建立了连接之后，我们执行了配置命令来使用send_config_set()函数创建一些虚拟LAN。</p><p>在使用这类.send_config_set()函数向远程设备传递命令，它自动设置我们的设备为配置模式。在发送配置命令之后，我们还传递了一些简单命令来获取所配置设备的相关信息。</p><h2 id="总结-11"><a href="#总结-11" class="headerlink" title="总结"></a>总结</h2><p>本章中我们学习Telnet和SSH。我们还学习不同的Python模块，如 telnetlib, subprocess, fabric, Netmiko和Paramiko，使用它们我们执行了Telnet和SSH连接。SSH使用公钥加密来保持安全，要比Telnet安全的多。</p><p>下一章中我们会使用不同的Python库，通过它们来生成图形化用户界面。</p><h2 id="课后问题-10"><a href="#课后问题-10" class="headerlink" title="课后问题"></a>课后问题</h2><ol><li><p>使用是客户端-服务端架构？</p></li><li><p>如何在Python代码中运行指定操作系统命令？</p></li><li><p>LAN和VLAN之间的区别是什么？</p></li><li><p>如下代码的输出是什么？</p><table><thead><tr><th>12</th><th>list &#x3D; [‘a’, ‘b’, ‘c’, ‘d’, ‘e’]print(list[10:])</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table></li><li><p>编写一个Python程序来显示日历（提示：使用calendar模块）</p></li><li><p>编写一个Python程序来对文本文件的行进行计数</p></li></ol><h2 id="扩展阅读-9"><a href="#扩展阅读-9" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul><li>Paramiko文档: <a href="https://github.com/paramiko/paramiko">https://github.com/paramiko/paramiko</a></li><li>Fabric文档: <a href="http://www.fabfile.org/">http://www.fabfile.org/</a></li></ul><h1 id="第十三章-创建图形化用户界面"><a href="#第十三章-创建图形化用户界面" class="headerlink" title="第十三章 创建图形化用户界面"></a>第十三章 创建图形化用户界面</h1><p>本章中我们将学习图形化用户界面(GUI) 的开发。Python有很多库来用于制作GUI。我们将学习PyQt5这一Python库来创建GUI。</p><p>本章中我们将学习如下课题：</p><ul><li>GUI图形界面简介</li><li>使用库来创建基于GUI的应用</li><li>安装和使用 Apache Log Viewer应用</li></ul><p>译者注：本章涉及到图形化界面，请在自己的 Windows 或 Mac 上进行测试</p><h2 id="GUI图形界面简介"><a href="#GUI图形界面简介" class="headerlink" title="GUI图形界面简介"></a>GUI图形界面简介</h2><p>这一部分中我们将学习GUI。Python有很多图形化界面的框架。这一部分中我们来看看PyQt5。PyQt5有不同的图形组件，也称为对象工具，可以在屏幕上显示并与用户进行交互 。这些组件列出如下：</p><ul><li>PyQt5窗口: PyQt5窗口（window）将创建一个简单的app窗口</li><li>PyQt5按钮: PyQt5按钮（button）是在点击时会触发动作的按钮</li><li>PyQt5文本框: PyQt5文本框（textbox）组件允许用户输入文本</li><li>PyQt5落地签: PyQt5标签（label）组件显示一个单行文本或一张图片</li><li>PyQt5组合框 PyQt5组合框（combo box）组件是组合起来的按钮和弹出列表</li><li>PyQt5复选框: PyQt5复选框（ check box）组件是一个可以勾选和取消勾选的选项按钮</li><li>PyQt5单行按钮: PyQt5单选（radio）按钮组件是一个可以勾选和取消勾选的选项按钮。在一组单选按钮中，同时仅能勾选其中的一个按钮</li><li>PyQt5消息框: PyQt5消息框（message box）组件显示消息</li><li>PyQt5菜单: PyQt5菜单（menu）组件提供显示的不同选择</li><li>PyQt5表格: PyQt5表格（table）组件提供了应用的标准表格显示功能，可以构造为多行多列</li><li>PyQt5信号&#x2F;槽: 信号（signal）会让我们对发生的事件进行响应，插槽（slot）仅仅是信号发生时调用的函数</li><li>PyQt5布局: PyQt5布局（layout）包含多个组件</li></ul><p>PyQt5中有一些可以使用的类，划分成不同的模块。这些模块如下：</p><ul><li>QtGui：QtGui包含事件处理、图形化、字体、文本和基础图像类</li><li>QtWidgets：QtWidgets包含创建桌面样式用户界面的类</li><li>QtCore：QtCore包含非图形化功能，如时间、目录、文件、流、URL、数据类型、线程和进程</li><li>QtBluetooth：QtBluetooth包含连接设备和与设备交互的类</li><li>QtPositioning：QtPositioning包含定位的类</li><li>QtMultimedia：QtMultimedia包含API和多媒体内容的类</li><li>QtNetwork：QtNetwork包含网络编程的类</li><li>QtWebKit：QtWebKit包含web浏览器实现的类</li><li>QtXml：QtXml包含XML文件的类</li><li>QtSql： QtSql包含针对数据库的类</li></ul><p>GUI由事件来驱动。那么什么是事件呢？事件是表示程序中发生某一件事的信号，例如：菜单选择、鼠标移动或按钮点击。事件是由函数处理或在对象上用户执行某些操作时触发的。监听器会监听事件并会在事件发生时触发事件处理器。</p><h2 id="使用库来创建基于GUI的应用"><a href="#使用库来创建基于GUI的应用" class="headerlink" title="使用库来创建基于GUI的应用"></a>使用库来创建基于GUI的应用</h2><p>下面我们将使用PyQt5库来创建一个简单的GUI应用。这一部分中我们将创建一个简单的窗口。在该窗口中，我们会添加一个按钮和一个标签。在点击按钮后，会在标签中打印一些消息。</p><p>首先来看如何创建一个按钮组件。以下代码可创建一个按钮组件：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">b</span> = QPushButton(<span class="hljs-string">&#x27;Click&#x27;</span>, self)<br></code></pre></td></tr></table></figure><p>下面我们现来看如何创建标签。如下代码可创建一个标签：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">l</span> <span class="hljs-operator">=</span> QLabel(self)<br></code></pre></td></tr></table></figure><p>下面我将来看如何创建按钮和标签以及如何在点击该按钮后执行操作。创建脚本print_message.py并在其中编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QApplication, QLabel, QPushButton, QWidget<br><span class="hljs-keyword">from</span> PyQt5.QtCore <span class="hljs-keyword">import</span> pyqtSlot<br><span class="hljs-keyword">from</span> PyQt5.QtGui <span class="hljs-keyword">import</span> QIcon<br> <br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">simple_app</span>(<span class="hljs-title class_ inherited__">QWidget</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>            <span class="hljs-built_in">super</span>().__init__()<br>            self.title = <span class="hljs-string">&#x27;Main app window&#x27;</span><br>            self.left = <span class="hljs-number">20</span><br>            self.top = <span class="hljs-number">20</span><br>            self.height = <span class="hljs-number">300</span><br>            self.width = <span class="hljs-number">400</span><br>            self.app_initialize()<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">app_initialize</span>(<span class="hljs-params">self</span>):<br>        self.setWindowTitle(self.title)<br>        self.setGeometry(self.left, self.top, self.height, self.width)<br>        b = QPushButton(<span class="hljs-string">&#x27;Click&#x27;</span>, self)<br>        b.setToolTip(<span class="hljs-string">&#x27;Click on the button!!&#x27;</span>)<br>        b.move(<span class="hljs-number">100</span>, <span class="hljs-number">70</span>)<br>        self.l = QLabel(self)<br>        self.l.resize(<span class="hljs-number">100</span>, <span class="hljs-number">50</span>)<br>        self.l.move(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>)<br>        b.clicked.connect(self.on_click)<br>        self.show()<br> <br><span class="hljs-meta">    @pyqtSlot()</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">on_click</span>(<span class="hljs-params">self</span>):<br>        self.l.setText(<span class="hljs-string">&quot;Hello World&quot;</span>)<br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app1 = QApplication(sys.argv)<br>    ex = simple_app()<br>    sys.exit(app1.exec_())<br></code></pre></td></tr></table></figure><p>运行脚本，得到的输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 print_message.py<br></code></pre></td></tr></table></figure><p><a href="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019031611190573.jpg"><img src="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019031611190573.jpg" alt="第十三章 创建图形化用户界面"></a></p><p>上例中我们导入了需要使用的PyQt5模块。然后创建了应用。QPushButton创建了一个组件，输入的第一个参数的文件会在按钮上显示。然后，我们添加了一个QLabel组件，其中打印一条消息，在点击按钮后会进行打印。接着我们创建了一个函数on_click()，会在点击按钮后执行打印操作。on_click()是我们创建的插槽。</p><p>下面我们来看一个盒子布局的示例。创建一个脚本box_layout.py并在其中编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PyQt5.QtWidgets <span class="hljs-keyword">import</span> QApplication, QWidget, QPushButton, QVBoxLayout<br> <br>app1 = QApplication([])<br>make_window = QWidget()<br>layout = QVBoxLayout()<br> <br>layout.addWidget(QPushButton(<span class="hljs-string">&#x27;Button 1&#x27;</span>))<br>layout.addWidget(QPushButton(<span class="hljs-string">&#x27;Button 2&#x27;</span>))<br> <br>make_window.setLayout(layout)<br>make_window.show()<br> <br>app1.<span class="hljs-built_in">exec</span>()<br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 box_layout.py<br></code></pre></td></tr></table></figure><p><a href="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019031615093970.jpg"><img src="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019031615093970.jpg" alt="第十三章 创建图形化用户界面"></a>上例中，我们创建了一个盒子布局。其中我们放置了两个按钮。这个脚本仅用于解释例子布局。layout &#x3D; QVBoxLayout()将创建一个盒子布局。</p><h2 id="安装和使用-Apache-Log-Viewer应用"><a href="#安装和使用-Apache-Log-Viewer应用" class="headerlink" title="安装和使用 Apache Log Viewer应用"></a>安装和使用 Apache Log Viewer应用</h2><p>已经有一个Apache Log Viewer日志查看器应用，可从如下链接下载：<a href="https://www.apacheviewer.com/download/">https://www.apacheviewer.com/download/</a></p><p>下载之后，在电脑上安装该应用。这一应用可对日志的连接状态，IP 地址等信息进行分析。因此，要分析日志文件，我们只需浏览访问日志文件或错误日志文件。在获取文件之后，我们可以对日志文件进行不同的操作，如添加过滤，过滤出access.log中失败连接或过滤出指定 IP 地址等等.</p><p>译者注：Apache Log Viewer原生支持 Windows 下，下述截图均使用 Windows 虚拟机</p><p>以下截图显示Apache日志查看器未添加过滤对access.log的查看：</p><p><a href="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019031700333867.jpg"><img src="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019031700333867.jpg" alt="第十三章 创建图形化用户界面"></a></p><p>以下截图显示在Apache日志查看器中对access.log文件添加了过滤器：</p><p><a href="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019031700372329.jpg"><img src="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019031700372329.jpg" alt="第十三章 创建图形化用户界面"></a></p><p>第一个例子中，我们获取了access log文件并在Apache日志查看器中打开了该文件。我们可以轻易地通过Apache Logs Viewer看出访问日志中打开的各条记录，比如授权与未授权，包含状态、IP 地址、请求等等。但在第二个例子中我们对访问日志文件应用的过滤，这样可以仅查看日志中未授权请求的记录（Alan 此处过滤的为404，未授权过滤出401即可），如上图所示。</p><h2 id="总结-12"><a href="#总结-12" class="headerlink" title="总结"></a>总结</h2><p>本章中我们学习了GUI相关知识。我们学习了GUI中使用的组件。还学习了Python中的PyQt5模块。使用PyQt5模块，我们创建了一个简单的应用来在点击按钮后打印消息。</p><p>下一章中，我们将学习如何处理Apache日志文件。</p><h2 id="课后问题-11"><a href="#课后问题-11" class="headerlink" title="课后问题"></a>课后问题</h2><ol><li>什么是GUI ？</li><li>Python中的构造函数和析构函数是什么？</li><li>self的用处是什么？</li><li>对比Tkinter, PyQt和wxPython</li><li>创建一个Python程序将一个文件中的内容拷贝到另一个文件中</li><li>创建一个Python程序读取文本文件，计算指定字母在文件中出现的次数</li></ol><h2 id="扩展阅读-10"><a href="#扩展阅读-10" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul><li>Tkinter GUI库文档: <a href="https://docs.python.org/3/library/tk.html">https://docs.python.org/3/library/tk.html</a></li><li>PyQt GUI库文档: <a href="https://wiki.python.org/moin/PyQt">https://wiki.python.org/moin/PyQt</a></li></ul><h1 id="第十四章-处理Apache和其它的日志文件"><a href="#第十四章-处理Apache和其它的日志文件" class="headerlink" title="第十四章 处理Apache和其它的日志文件"></a>第十四章 处理Apache和其它的日志文件</h1><p>本章中我们将学习日志文件相关知识。我们会学习如何解析日志文件。我们还将学习为什么需要在程序中编写异常。解析不同文件的不同方式也很重要。我们会学习错误日志和访问日志的知识。最后我们将学习如何解析其它日志文件。</p><p>本章中我们将学习如下内容：</p><ul><li>解析复杂的日志文件</li><li>对异常的需要</li><li>解析不同文件的技巧</li><li>错误日志</li><li>访问日志</li><li>解析其它日志文件</li></ul><h2 id="解析复杂的日志文件"><a href="#解析复杂的日志文件" class="headerlink" title="解析复杂的日志文件"></a>解析复杂的日志文件</h2><p>首先我们将查看复杂日志文件的概念。解析日志文件是个具有挑战性的工作，因为大部分日志文件都是普通文本格式，并且该格式不遵循任何规则。这些文件可被修改而不产生任何警告。用户和开发应用的人员均可决定在日志文件中存储什么样的数据以及存储为什么格式。</p><p>在进入解析或修改日志文件配置的示例之前，首先我们需要理解一个典型的日志文件中有什么内容。据此我们了解如何对其进行操作或从中获取信息。我们还可以看看日志文件中的常用术语，这样我们可以使用这些常用术语来获取数据。</p><p>通常我们可以看到日志文件中生成的大部内容都是通过应用容器，以及系统访问状态记录（换句话说是日志开启和日志关闭）或通过网络访问系统的记录。因此，通过远程网络访问系统时，这种远程连接的记录会被保存到日志文件中。我们来获取这种情况的示例。我们已有一个带有日志信息的名为access.log的日志文件。</p><p>那么我们来创建一个脚本read_apache_log.py并在其中编写如下内容：</p><table><thead><tr><th>123456789</th><th>def read_apache_log(logfile):  with open(logfile) as f:    # log_obj &#x3D; f.read()    # print(log_obj)    for i in range(5):      print(next(f)) if <strong>name</strong> &#x3D;&#x3D; ‘<strong>main</strong>‘:  read_apache_log(‘access.log’)</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>译者注：read()会读取整个文件，为避免刷屏以上做了修改仅读取前5行</p><p>运行脚本将得到如下输出：</p><table><thead><tr><th>12345678910</th><th>$ python3 read_apache_log.py117.188.30.192 - - [03&#x2F;Mar&#x2F;2019:03:14:30 +0000] “GET &#x2F;category&#x2F;odoo&#x2F;page&#x2F;4&#x2F; HTTP&#x2F;1.1” 200 8336 “<a href="http://alanhou.org/category/odoo/&quot;">http://alanhou.org/category/odoo/&quot;</a> “Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;70.0.3538.77 Safari&#x2F;537.36” 117.188.30.192 - - [03&#x2F;Mar&#x2F;2019:03:14:31 +0000] “GET &#x2F; HTTP&#x2F;1.1” 200 9197 “<a href="http://alanhou.org/category/odoo/page/4/&quot;">http://alanhou.org/category/odoo/page/4/&quot;</a> “Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;70.0.3538.77 Safari&#x2F;537.36” 117.188.30.192 - - [03&#x2F;Mar&#x2F;2019:03:14:42 +0000] “GET &#x2F;category&#x2F;odoo&#x2F;page&#x2F;3&#x2F; HTTP&#x2F;1.1” 200 9256 “<a href="http://alanhou.org/category/odoo/page/4/&quot;">http://alanhou.org/category/odoo/page/4/&quot;</a> “Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;70.0.3538.77 Safari&#x2F;537.36” 117.188.30.192 - - [03&#x2F;Mar&#x2F;2019:03:14:44 +0000] “GET &#x2F;category&#x2F;odoo&#x2F;page&#x2F;3&#x2F; HTTP&#x2F;1.1” 200 9251 “<a href="http://alanhou.org/category/odoo/page/4/&quot;">http://alanhou.org/category/odoo/page/4/&quot;</a> “Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;70.0.3538.77 Safari&#x2F;537.36” 117.188.30.192 - - [03&#x2F;Mar&#x2F;2019:03:14:45 +0000] “GET &#x2F; HTTP&#x2F;1.1” 200 9197 “<a href="http://alanhou.org/category/odoo/page/3/&quot;">http://alanhou.org/category/odoo/page/3/&quot;</a> “Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;70.0.3538.77 Safari&#x2F;537.36”</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>上例中，我们创建了一个read_apache_log函数来读取Apache日志文件。其中，我们打开了日志文件并打印出了日志中的信息。在定义了read_apache_log()函数之后，我们传入了Apache日志文件来调用该函数。本例中的日志文件为access.log。</p><p>在读取了access.log文件中的各行之后，我们将从日志文件中解析IP地址。创建一个脚本parse_ip_address.py并在其中编写如下内容：</p><table><thead><tr><th>1234567891011</th><th>import refrom collections import Counter r_e &#x3D; r’\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}’with open(‘access.log’) as f:  print(‘Reading Apache log file’)  Apache_log &#x3D; f.read(50000)  get_ip &#x3D; re.findall(r_e, Apache_log)  no_of_ip &#x3D; Counter(get_ip)  for k, v in no_of_ip.items():    print(‘Available IP Address in log file ‘ + ‘&#x3D;&gt; ‘ + str(k) + ‘ ‘ + ‘Count ‘ + ‘&#x3D;&gt; ‘ + str(v))</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>译者注：如日志文件较大可像 Alan 这样指定仅读取前 xx 字节</p><p>运行脚本，我们将得到如下输出：</p><table><thead><tr><th>1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556</th><th>$ python3 parse_ip_address.pyReading Apache log fileAvailable IP Address in log file &#x3D;&gt; 117.188.30.192 Count &#x3D;&gt; 65Available IP Address in log file &#x3D;&gt; 66.249.79.227 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 111.202.101.7 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 46.229.168.146 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 46.229.168.133 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 54.36.148.177 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 23.239.1.95 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 91.121.155.172 Count &#x3D;&gt; 4Available IP Address in log file &#x3D;&gt; 64.233.172.168 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 54.36.148.58 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 116.227.9.111 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 207.46.13.34 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 66.249.79.203 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 40.77.167.115 Count &#x3D;&gt; 4Available IP Address in log file &#x3D;&gt; 136.243.70.151 Count &#x3D;&gt; 2Available IP Address in log file &#x3D;&gt; 37.115.190.120 Count &#x3D;&gt; 3Available IP Address in log file &#x3D;&gt; 42.156.137.108 Count &#x3D;&gt; 8Available IP Address in log file &#x3D;&gt; 42.156.136.64 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 42.120.161.64 Count &#x3D;&gt; 2Available IP Address in log file &#x3D;&gt; 42.156.138.64 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 42.156.139.108 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 207.46.13.33 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 1.10.187.34 Count &#x3D;&gt; 9Available IP Address in log file &#x3D;&gt; 66.249.79.229 Count &#x3D;&gt; 3Available IP Address in log file &#x3D;&gt; 109.228.56.115 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 66.249.79.231 Count &#x3D;&gt; 2Available IP Address in log file &#x3D;&gt; 183.143.43.108 Count &#x3D;&gt; 9Available IP Address in log file &#x3D;&gt; 42.156.137.83 Count &#x3D;&gt; 2Available IP Address in log file &#x3D;&gt; 42.156.139.83 Count &#x3D;&gt; 2Available IP Address in log file &#x3D;&gt; 42.120.161.83 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 42.120.160.95 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 42.120.161.95 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 182.134.133.186 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 157.55.39.109 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 42.156.136.22 Count &#x3D;&gt; 2Available IP Address in log file &#x3D;&gt; 42.156.137.22 Count &#x3D;&gt; 3Available IP Address in log file &#x3D;&gt; 42.156.138.22 Count &#x3D;&gt; 2Available IP Address in log file &#x3D;&gt; 42.120.160.22 Count &#x3D;&gt; 4Available IP Address in log file &#x3D;&gt; 42.156.139.22 Count &#x3D;&gt; 4Available IP Address in log file &#x3D;&gt; 37.9.87.213 Count &#x3D;&gt; 4Available IP Address in log file &#x3D;&gt; 54.36.149.17 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 54.36.148.229 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 54.36.149.22 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 168.181.61.154 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 125.82.16.199 Count &#x3D;&gt; 2Available IP Address in log file &#x3D;&gt; 123.125.71.95 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 111.206.198.79 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 111.206.198.100 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 54.36.149.64 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 42.84.39.146 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 180.173.173.168 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 125.70.190.216 Count &#x3D;&gt; 7Available IP Address in log file &#x3D;&gt; 54.36.148.104 Count &#x3D;&gt; 1Available IP Address in log file &#x3D;&gt; 42.120.160.114 Count &#x3D;&gt; 2</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>上例中，我们创建了Apache日志解析器来获取对应的 IP 地址及其对服务器的请求次数。因此，很明确我们无需整个Apache日志文件的所有行，仅需获取日志文件中的 IP 地址。实现这一获取，我们需要定义一个模式来搜索 IP 地址，我们可通过正则表达式来实现。因此我们导入了 re 模块。然后我们导入了Collection模块来代替 Python 的内置数据类型：字典、列表、集合和元组。该模块有特定的容器数据类型。在导入所需模块后，我们使用正则表达式编写了一个模式来匹配指定条件来从日志文件中映射 IP 地址。</p><p>在这个匹配模式中，\d为0到9之间的任意数字，\r表示原生字符串。然后，我们打开了名为access.log的Apache日志文件并进行了读取。之后我们对Apache日志文件应用了正则表达式条件，接着使用Collection模块中的Counter 函数来对以re条件获取到的 IP 地址进行计数。最后，正如在输出中所见我们打印出了执行的结果。</p><h2 id="对异常处理的需要"><a href="#对异常处理的需要" class="headerlink" title="对异常处理的需要"></a>对异常处理的需要</h2><p>这一部分中，我们将来看Python编程中对异常处理的需要。正常的程序流包含事件和信号。异常则是在程序中出现了问题。导演可以是任何类型的，如除零错误、导入错误、属性错误或断言错误。这些异常在函数未能正常执行对应任务时发生。发生异常时程序停止执行，并且编译器会进入异常处理进程。异常处理进程包含在try…except代码块中编写的代码。进行异常处理的原因是程序中出现了预期外的情况。</p><h3 id="分析异常"><a href="#分析异常" class="headerlink" title="分析异常"></a>分析异常</h3><p>这一部分中，我们将来了解异常的分析。每个发生的异常都必须要进行处理。我们日志文件也会包含一些异常。如果类似类型的异常获取到了数次，那么程序存在问题，我们应尽快对其进行必要的修改。</p><p>运行如下示例：</p><table><thead><tr><th>123</th><th>f &#x3D; open(‘logfile’, ‘r’)print(f.read())f.close()</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>运行程序后将会得到如下输出：</p><table><thead><tr><th>1234</th><th>Traceback (most recent call last): File “sample.py”, line 1, in <module>  f &#x3D; open(‘logfile’, ‘r’)FileNotFoundError: [Errno 2] No such file or directory: ‘logfile’</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>这个例子中，我们尝试读取一个目录中不存在的文件，结果得到了如上所示的错误。从错误中我们分析出可以使用什么样的解决方案。处理这类错误，我们可以使用异常处理技术。那么让我们来看一个使用异常处理技术来处理异常的示例。</p><table><thead><tr><th>123456</th><th>try:  f &#x3D; open(‘logfile’, ‘r’)  print(f.read())  f.close()except:  print(“File not found. Please check whether the file is present in you directory or not.”)</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>此时再运行脚本，将得到如下输出：</p><table><thead><tr><th>1</th><th>File not found. Please check whether the file is present in you directory or not.</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>这个示例中，我们尝试读取目录中不存在的文件。但我们在示例中使用了文件异常技术，将代码放在的try: 和except: 代码块中。因此try: 代码块中发生了任何错误或异常，都会跳过该错误并执行except: 代码块中的代码。这里我们只是在except: 代码块是添加了打印语句。因此在运行脚本后，在try: 代码块中发生异常时，会跳过异常并执行except:代码块中的代码。那么except代码块中的打印语句会被执行，我们在以上的输出中可以看到。</p><h2 id="解析不同文件的技巧"><a href="#解析不同文件的技巧" class="headerlink" title="解析不同文件的技巧"></a>解析不同文件的技巧</h2><p>这一部分中，我们将学习用于解析不同文件的技巧。在开始进行实际解析之前，我们必须先读取数据。我们需要了解从哪里获取数据。但是，必须记住所有的日志文件大小都不同。为简化任务，可遵循以下清单：</p><ul><li>记住日志文件既可以是普通文本也可以是压缩文件</li><li>所有的日志文件普通文本后缀名为.log，bzip2文件后缀名为log.bz2</li><li>我们应根据名称来处理一组文件</li><li>日志文件的所有解析必须合并为单个报告</li><li>我们使用的工作应从指定目录和不同目录中操作所有文件。子目录中的日志文件也应包含在内</li></ul><h2 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h2><p>这一部分中，我们将学习错误日志。错误日志的相关指令如下：</p><ul><li>ErrorLog</li><li>LogLevel</li></ul><p>服务器日志的位置和名称由ErrorLog指令设置。这是最重要的日志文件。Apache httpd服务发送其中的信息以及处理过程中生成的记录。在服务器上发生错误时，首先应看看这里。它包含发生问题的细节以及修复的过程。</p><p>错误日志写入到一个文件中。在Unix系统中，错误可以服务器发送到syslog或我们通过管道发送到程序。日志记录行首先是消息的日期和时间，第二条是错误严重级别的记录。</p><p>LogLevel指定处理通过限制严重级别发送到错误日志的错误。第三条包含生成错误的客户端的信息。这一信息为 IP 地址。下一条为消息本身。它包含服务器配置拒绝客户端访问的信息。服务端随后报告请求文档的文件系统路径。</p><p>消息的不同类型可以在错误日志文件中出现。错误日志文件也包含从CGI脚本调试输出。写入到stderr的所有信息都会直接拷贝到错误日志中。</p><p>错误日志不可自定义。处理请求的错误日志中的词条会在访问日志中有对应的词条。我们应一直监控测试时问题的错误日志。在Unix系统中，可以运行如下命令来进行查看：</p><table><thead><tr><th>1</th><th>$ tail -f error_log</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h2 id="访问日志"><a href="#访问日志" class="headerlink" title="访问日志"></a>访问日志</h2><p>这部分中，我们将学习访问日志的知识。服务器访问日志将记录所有由服务器处理的请求。CustomLog指令控制访问日志的位置和内容。LogFormat指令用于选取日志的内容。</p><p>在访问日志中存储信息表示开启日志管理。下一步是分析有助于获取有用的数据统计的信息。 Apache httpd服务有多个版本。这些版本使用一些其它模块和指定来控制访问日志。我们可以配置访问日志的格式。该格式通过format字符串来指定。</p><h3 id="常用日志格式"><a href="#常用日志格式" class="headerlink" title="常用日志格式"></a>常用日志格式</h3><p>这一部分中，我们将学习常用的日志格式。如下语法显示了访问日志的配置：</p><table><thead><tr><th>12</th><th>LogFormat “%h %l %u %t &quot;%r&quot; %&gt;s %b” nick_nameCustomLog logs&#x2F;access_log nick_name</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>这个字符串会定义一个别名，然后将别名 与日志格式字符串进行关联。日志格式字符串由百分号指令组成。每个百分号指令告诉服务器记录一个指定信息。这个字符串中可能包含带含义的字符。这些字符在会直接拷贝到日志输出中。</p><p>CustomLog指令将借助定义了的别名设置一个新的日志文件。访问日志的文件名相对路径为ServerRoot，除非在前面加了斜杠。</p><p>我们前述的配置会在常用日志格式（Common Log Format (CLF)）中写入日志词条。这是一个标准格式，可由很多不同的web服务器生成。很多日志分析程序可读取这一日志格式。</p><p>下面我们来看每个百分号指令的含义：</p><ul><li>%h：这向我们显示向web服务器服务器发送请求的客户端 IP 地址。如果开启了HostnameLookups，那么服务器会确定主机名并在 IP 地址处记录它。</li><li>%l：这一条用于表示请求未能获得的信息（译者注：该信息为客户端identd确定，通常无法获取，显示为-）。</li><li>%u：这是请求文档的用户 ID。同一值由CGI脚本在REMOTE_USER环境变量中传递。</li><li>%t：这一条用于检测服务器处理请求结束的时间。格式如下：<br>[day&#x2F;month&#x2F;year:hour:minute:second zone]</li></ul><p>对于day参数接收两个数字。对于month，我们需要定义三个字母。对于year，因为年有4个字符，我们需要接收4个数字。在day, month和year之后，我们需要为小时、分钟和秒分别接收两个数字。</p><ul><li>\”%r\”：用于请求行，由客户端放在双引号中给定。这一请求行有一些有用的信息。请求客户端使用GET，协议使用HTTP。</li><li>%&gt;s：这一条定义客户端的状态码。状态码非常重要且有用，因为它表示客户端向服务端发送的请求是否成功。</li><li>%b：这一条定义返回客户端时对象的总大小。这一总大小不包含响应头的大小。</li></ul><h2 id="解析其它日志文件"><a href="#解析其它日志文件" class="headerlink" title="解析其它日志文件"></a>解析其它日志文件</h2><p>我们系统中还有包含Apache日志文件在内的不同日志文件。在Linux发行版中，日志文件在根文件系统的&#x2F;var&#x2F;log&#x2F;文件夹下，如下所示：</p><p><a href="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019031712064485.jpg"><img src="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019031712064485.jpg" alt="第十四章 处理Apache和其它的日志文件"></a></p><p>译者注：从这个截图开始的数据均直接来自原书</p><p>在以上截图中，我们可以很容易的看到针对不同操作的不同日志文件格式（例如，验证日志文件auth.log，系统日志文件syslog和内核日志kern.log）。如前所示，我们对Apache日志文件执行了操作，我们也可以对其它本地日志文件执行同样的操作。下面来看一个解析另一种日志文件的示例。创建一个脚本simple_log.py并编写如下内容：</p><table><thead><tr><th>123456</th><th>f&#x3D;open(‘&#x2F;var&#x2F;log&#x2F;kern.log’,’r’)lines &#x3D; f.readlines()for line in lines:  kern_log &#x3D; line.split()  print(kern_log)f.close()</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>运行脚本，我们将得到如下输出：</p><table><thead><tr><th>12345678910</th><th>student@ubuntu:~$ python3 simple_log.py # 输出内容：[‘Dec’, ‘26’, ‘14:39:38’, ‘ubuntu’, ‘NetworkManager[795]:’, ‘<info>‘, ‘[1545815378.2891]’, ‘device’, ‘(ens33):’, ‘state’, ‘change:’, ‘prepare’, ‘-&gt;’, ‘config’, ‘(reason’, “‘none’)”, ‘[40’, ‘50’, ‘0]’][‘Dec’, ‘26’, ‘14:39:38’, ‘ubuntu’, ‘NetworkManager[795]:’, ‘<info>‘, ‘[1545815378.2953]’, ‘device’, ‘(ens33):’, ‘state’, ‘change:’, ‘config’, ‘-&gt;’, ‘ip-config’, ‘(reason’, “‘none’)”, ‘[50’, ‘70’, ‘0]’][‘Dec’, ‘26’, ‘14:39:38’, ‘ubuntu’, ‘NetworkManager[795]:’, ‘<info>‘, ‘[1545815378.2997]’, ‘dhcp4’, ‘(ens33):’, ‘activation:’, ‘beginning’, ‘transaction’, ‘(timeout’, ‘in’, ‘45’, ‘seconds)’][‘Dec’, ‘26’, ‘14:39:38’, ‘ubuntu’, ‘NetworkManager[795]:’, ‘<info>‘,’[1545815378.3369]’, ‘dhcp4’, ‘(ens33):’, ‘dhclient’, ‘started’, ‘with’, ‘pid’, ‘5221’][‘Dec’, ‘26’, ‘14:39:39’, ‘ubuntu’, ‘NetworkManager[795]:’, ‘<info>‘, ‘[1545815379.0008]’, ‘address’, ‘192.168.0.108’][‘Dec’, ‘26’, ‘14:39:39’, ‘ubuntu’, ‘NetworkManager[795]:’, ‘<info>‘, ‘[1545815379.0020]’, ‘plen’, ‘24’, ‘(255.255.255.0)’][‘Dec’, ‘26’, ‘14:39:39’, ‘ubuntu’, ‘NetworkManager[795]:’, ‘<info>‘, ‘[1545815379.0028]’, ‘gateway’, ‘192.168.0.1’]</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>上例中，首先我们创建了一个简单文件对象f，在其中以只读模式打开了kern.log文件。然后，我们对文件对象应用了readlines()函数来在for循环中逐行读取文件的数据。然后我们对内核日志文件的每一行应用了split()函数并对整个文件使用了print函数，通过输出可以查看。</p><p>和读取内核日志文件一样，我们还可以对它执行其它操作，下面我们就将执行一些操作。下面我们将通过索引来访问内核日志文件中的内容。通过split日志可进行实现，因为它将文件中的信息分割为另一个迭代。那么我们来看这一情况的一个示例。创建脚本simple_log1.py并在其中编写如下脚本内容：</p><table><thead><tr><th>12345</th><th>f&#x3D;open(‘&#x2F;var&#x2F;log&#x2F;kern.log’,’r’)lines &#x3D; f.readlines()for line in lines:  kern_log &#x3D; line.split()[1:3]  print(kern_log)</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>运行脚本，我们将得到如下输出：</p><table><thead><tr><th>123456789101112131415</th><th>student@ubuntu:~$ python3 simple_log1.py # 输出结果：[‘26’, ‘14:37:20’][‘26’, ‘14:37:20’][‘26’, ‘14:37:32’][‘26’, ‘14:39:38’][‘26’, ‘14:39:38’][‘26’, ‘14:39:38’][‘26’, ‘14:39:38’][‘26’, ‘14:39:38’][‘26’, ‘14:39:38’][‘26’, ‘14:39:38’][‘26’, ‘14:39:38’][‘26’, ‘14:39:38’]</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>上例中，我们仅仅是在split函数后添加了[1:3]，换句话说，添加了切片。序列的子序列称为切片，这一运算提取的子序列称为切片内容。本例中，我们使用方括号[ ]来作为切片运算符并在其中放置了两个整型值，以冒号:进行分隔。运算符[1:3]返回序列第一到第三个元素这部分内容，包含第一个但排除最后一个。在对序列进行切片时，我们获取的子序列总是与操作的原序列的类型相同，但是列表或元组的元素可以是任意类型，与我们应用的切片无关，获取的切片仍为列表或元组。因此在对日志文件应用切片后，我们获取的结果如上面的输出所示。</p><h2 id="总结-13"><a href="#总结-13" class="headerlink" title="总结"></a>总结</h2><p>本章中，我们学习了如何处理不同类型的日志文件。我们还学习了解析复杂的日志文件以及在处理文件时对异常处理的需要。解析日志文件的技巧有助于平滑地执行解析。我们还学习了错误日志和访问日志。</p><p>下一章中，我们将学习SOAP和REST通讯。</p><h2 id="课后问题-12"><a href="#课后问题-12" class="headerlink" title="课后问题"></a>课后问题</h2><ol><li>Python中运行时和编译时的异常有什么区别？</li><li>什么是正则表达式？</li><li>研究Linux中的head, tail, cat和awk命令</li><li>编写一个Python程序将一个文件的内容追加到另一个文件中</li><li>编写一个Python程序来倒序读取文件内容</li><li>以下表达式的输出是什么？<ol><li>re.search(r’C\Wke’, ‘C@ke’).group()</li><li>re.search(r’Co+kie’, ‘Cooookie’).group()</li><li>re.match(r’&lt;.*?&gt;’, ‘<h1>TITLE</h1>’).group()</li></ol></li></ol><h2 id="扩展阅读-11"><a href="#扩展阅读-11" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul><li>Python日志: <a href="https://docs.python.org/3/library/logging.html">https://docs.python.org/3/library/logging.html</a></li><li>正则表达式: <a href="https://docs.python.org/3/howto/regex.html">https://docs.python.org/3/howto/regex.html</a></li><li>异常处理: <a href="https://www.pythonforbeginners.com/error-handling/python-try-and-except">https://www.pythonforbeginners.com/error-handling/python-try-and-except</a></li></ul><h1 id="第十五章-SOAP和REST-API通讯"><a href="#第十五章-SOAP和REST-API通讯" class="headerlink" title="第十五章 SOAP和REST API通讯"></a>第十五章 SOAP和REST API通讯</h1><p>本章中我们将来看SOAP和REST API的基础知识。我们还会看实现SOAP和REST API的Python库。我们将学习Zeep库来使用SOAP和requests来使用REST API。我们将学习操作JSON数据的知识。接着看一个操作JSON数据的简单示例，比如将JSON字符串转化成Python对象和将Python对象转换成JSON字符串。</p><p>本章中我们将学习如下内容：</p><ul><li>SOAP是什么？</li><li>通过库使用SOAP</li><li>什么是RESTful API？</li><li>通过标准库使用RESTful API</li><li>操作JSON数据</li></ul><h2 id="SOAP是什么？"><a href="#SOAP是什么？" class="headerlink" title="SOAP是什么？"></a>SOAP是什么？</h2><p>SOAP是简单对象访问协议（Simple Object Access Protocol）。SOAP是一各路标准通讯协议，允许使用不同操作系统的进程。它通过HTTP和XML进行通讯，是一个web服务技术。SOAP API主要设计用于创建、更新、删除和还原数据的操作。SOAP API使用Web服务描述语言来描述web服务所提供的功能。SOAP描述所有功能和数据类型。它建立一个基于XML的协议。</p><h3 id="通过库使用SOAP"><a href="#通过库使用SOAP" class="headerlink" title="通过库使用SOAP"></a>通过库使用SOAP</h3><p>这一部分中，我们将学习SOAP的Python库。有用于SOAP的不同库列举如下：</p><ul><li>SOAPpy</li><li>Zeep</li><li>Ladon</li><li>suds-jurko</li><li>pysimplesoap</li></ul><p>这些是Python中用于SOAP API的库。这一部分中我们仅会学习Zeep库。</p><p>要使用Zeep的功能，我们首先需要安装它。在终端中运行如下命令来安装Zeep：</p><table><thead><tr><th>1</th><th>$ pip3 install Zeep</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>Zeep模块是用于WSDL（Web Services Description Language）的文档。它生成服务的代码和文档并提供SOAP服务端的编程接口。lxml库用于解析XML文档。</p><p>下面我们来看一个示例。创建脚本soap_example.py并在其中编写如下代码：</p><table><thead><tr><th>12345</th><th>import zeep w &#x3D; ‘<a href="http://www.soapclient.com/xml/soapresponder.wsdl&#39;c">http://www.soapclient.com/xml/soapresponder.wsdl&#39;c</a> &#x3D; zeep.Client(wsdl&#x3D;w)print(c.service.Method1(‘Hello’, ‘World’))</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>运行脚本，我们将得到如下输出：</p><table><thead><tr><th>1234</th><th>$ python3 soap_example.py # 输出结果：Your input parameters are Hello and World</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>上例中，我们首先导入了zeep模块。第一步传入了网站名。然后创建了一个zeep客户端对象。前面使用的WSDL定论了一个简单的Method1函数，由zeep通过client.service.Method1来提供。它接收两个参数并返回一个字符串。</p><h2 id="什么是RESTful-API？"><a href="#什么是RESTful-API？" class="headerlink" title="什么是RESTful API？"></a>什么是RESTful API？</h2><p>REST表示表述性状态传递（Representational State Transfer）。RESTful API有一种在web服务开发中使用的通讯方法。它是可作为因特网上不同系统间通信的通道的一类web服务。是一个应用接口，用于使用HTTP请求来对数据进行GET, PUT, POST和DELETE。</p><p>REST的优点是它使用更少的代码，非常适合在因特网上使用。REST API 使用统一接口。所有的资源通过GET, PUT, POST和DELETE运算处理。REST API使用GET来获取资源、PUT来更新资源或修改资源的状态，使用POST来创建资源，并使用DELETE来删除资源。系统使用REST API来达到更快的性能和可靠性。</p><p>REST API独立处理每一个请求。客户端向服务端发送的请求必须包含可用于了解请求内容的所有信息。</p><h3 id="通过标准库使用RESTful-API"><a href="#通过标准库使用RESTful-API" class="headerlink" title="通过标准库使用RESTful API"></a>通过标准库使用RESTful API</h3><p>这一部分，我们将学习如何使用RESTful API。要进行使用，我们需要用到Python的requests和JSON模块。下面我们来看一个示例。首先，我们将使用requests模块来从API获取信息。会用到GET和POST请求。</p><p>我们必须先安装requests库，方法如下：</p><table><thead><tr><th>1</th><th>$ pip3 install requests</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>下面我们会看一个示例。创建脚本rest_get_example.py并在其中编写如下内容：</p><table><thead><tr><th>1234</th><th>import requests req_obj &#x3D; requests.get(‘<a href="https://www.imdb.com/news/top?ref_=nv_tp_nw&#39;)print(req_obj)">https://www.imdb.com/news/top?ref_=nv_tp_nw&#39;)print(req_obj)</a></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>运行该脚本，我们将得到如下输出：</p><table><thead><tr><th>1234</th><th>$ python3 rest_get_example.py # 输出结果：&lt;Response [200]&gt;</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>上例中，我们导入了requests模块来获取请求。接着我们创建了一个请求对象req_obj，并从想要获取请求之处指定了一个链接。然后，我们进行了打印。所得到的输出是状态码200，表示访问成功。</p><p>下面我们将看一个POST请求示例。POST请求用于向服务器发送数据。创建一个脚本rest_post_example.py并在其中编写如下内容：</p><table><thead><tr><th>12345678</th><th>import requests, json url_name &#x3D; ‘<a href="http://httpbin.org/post&#39;data">http://httpbin.org/post&#39;data</a> &#x3D; {“Name”: “John”}data_json &#x3D; json.dumps(data)headers &#x3D; {‘Content-Type’: ‘application&#x2F;json’}response &#x3D; requests.post(url_name, data&#x3D;data_json, headers&#x3D;headers)print(response)</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>运行该脚本，我们将得到如下输出：</p><table><thead><tr><th>1234</th><th>$ python3 rest_post_example.py # 输出结果：&lt;Response [200]&gt;</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>在上例中，我们学习了POST请求。首先我们导入了必要的模块requests和JSON。然后传入了URL。同时，我们以字典格式输出想要进行post的数据。然后，我们传入了headers。接着使用POST请求进行了post。我们得到的输出是状态码是200， 是一个成功状态码。</p><h2 id="操作JSON数据"><a href="#操作JSON数据" class="headerlink" title="操作JSON数据"></a>操作JSON数据</h2><p>这一部分中，我们将学习JSON数据。JSON表示JS对象简谱（JavaScript Object Notation）。JSON是一个数据交换格式。它将Python对象以JSON字符串编码，并将JSON字符串解码为Python对象。Python有一个JSON模块来格式化JSON输出。它带有对JSON序列化和反序列化的函数。</p><ul><li>json.dump(obj, fileObj)：这一函数会将对象序列化为JSON格式流</li><li>json.dumps(obj)：这个函数会序列化对象为JSON格式字符串</li><li>json.load(JSONfile)：该函数会将JSON文件反序列化为Python对象</li><li>json.loads(JSONfile)：该函数会将字符串类型JSON文件反序列化为Python对象</li></ul><p>这还有两个用于编码和解码的类，列出如下：</p><ul><li>JSONEncoder：用于将Python对象转换为JSON格式</li><li>JSONDecoder：用于将JSON格式文件转换为Python对象</li></ul><p>下面我们来看使用JSON模块的一些示例。首先我们来看从JSON到Python的转换。创建一个脚本json_to_python.py 并在其中编写如下内容：</p><table><thead><tr><th>123456</th><th>import json j_obj &#x3D; ‘{“Name”: “Harry”, “Age”: 26, “Department”: “HR”}’p_obj &#x3D; json.loads(j_obj)print(p_obj[“Name”])print(p_obj[“Department”])</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>运行脚本，我们将得到如下输出：</p><table><thead><tr><th>12345</th><th>$ python3 json_to_python.py # 输出结果：HarryHR</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>上例中，我们编写了将一个JSON字符串转换为Python对象的一段代码。json.loads()函数用于将JSON字符串转换为Python对象。</p><p>下面我们来看如何将Python对象转换为JSON。创建一个脚本python_to_json.py并在其中编写如下代码：</p><table><thead><tr><th>12345</th><th>import json emp_dict1 &#x3D; ‘{“Name”:”Harry”, “Age”:26, “Department”:”HR”}’json_obj &#x3D; json.dumps(emp_dict1)print(json_obj)</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>运行脚本，我们将得到如下输出：</p><table><thead><tr><th>1234</th><th>$ python3 python_to_json.py # 输出结果：”{&quot;Name&quot;:&quot;Harry&quot;, &quot;Age&quot;:26, &quot;Department&quot;:&quot;HR&quot;}”</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>上例中，我们将一个Python对象转换为了一个JSON字符串。 json.dumps()函数用于这一转换。</p><p>下面，我们来看如何将不同类型的Python对象转换为JSON字符串。创建一个脚本python_object_to_json.py并在其中编写如下内容：</p><table><thead><tr><th>12345678910111213141516171819202122232425262728293031</th><th>import json python_dict &#x3D; {“Name”: “Harry”, “Age”:26}python_list &#x3D; [“Numbai”, “Pune”]python_tuple &#x3D; (“Basketball”, “Cricket”)python_str &#x3D; (“hello_world”)python_int &#x3D; (150)python_float &#x3D; (59.66)python_T &#x3D; (True)python_F &#x3D; (False)python_N &#x3D; (None) json_obj &#x3D; json.dumps(python_dict)json_arr1 &#x3D; json.dumps(python_list)json_arr2 &#x3D; json.dumps(python_tuple)json_str &#x3D; json.dumps(python_str)json_num1 &#x3D; json.dumps(python_int)json_num2 &#x3D; json.dumps(python_float)json_t &#x3D; json.dumps(python_T)json_f &#x3D; json.dumps(python_F)json_n &#x3D; json.dumps(python_N) print(“json object : “, json_obj)print(“json array1 : “, json_arr1)print(“json array2 : “, json_arr2)print(“json string : “, json_str)print(“json number1 : “, json_num1)print(“json number2<code> : &quot;, json_num2)print(&quot;json true</code> : “, json_t)print(“json false<code> : &quot;, json_f)print(&quot;json null</code> : “, json_n)</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>运行脚本，我们将得到如下输出：</p><table><thead><tr><th>123456789101112</th><th>$ python python_object_to_json.py # 输出结果：(‘json object : ‘, ‘{“Age”: 26, “Name”: “Harry”}’)(‘json array1 : ‘, ‘[“Numbai”, “Pune”]’)(‘json array2 : ‘, ‘[“Basketball”, “Cricket”]’)(‘json string : ‘, ‘“hello_world”‘)(‘json number1 : ‘, ‘150’)(‘json number2<code> : &#39;, &#39;59.66&#39;)(&#39;json true</code> : ‘, ‘true’)(‘json false<code> : &#39;, &#39;false&#39;)(&#39;json null</code> : ‘, ‘null’)</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>上例中，我们使用json.dumps()函数将不同类型的Python对象转换成了JSON字符串。在转换之后，Python列表和元组被转换成了数据。整型和浮点型数字被看作JSON数字类型。下表中显示Python与JSON的对应转换：</p><table><thead><tr><th>Python</th><th>JSON</th></tr></thead><tbody><tr><td>dict</td><td>Object</td></tr><tr><td>list</td><td>Array</td></tr><tr><td>tuple</td><td>Array</td></tr><tr><td>str</td><td>String</td></tr><tr><td>int</td><td>Number</td></tr><tr><td>float</td><td>Number</td></tr><tr><td>True</td><td>true</td></tr><tr><td>False</td><td>false</td></tr><tr><td>None</td><td>null</td></tr></tbody></table><h2 id="总结-14"><a href="#总结-14" class="headerlink" title="总结"></a>总结</h2><p>本章中，我们学习了SOAP API和RESTful API。还学习了用于SOAP API的Python库zeep和用于REST API的库requests。同时学习了如何处理JSON数据，如将JSON转换为Python及其反向转换。</p><p>下一章中，我们将学习网页爬取和实现这一任务的Python库。</p><h2 id="课后问题-13"><a href="#课后问题-13" class="headerlink" title="课后问题"></a>课后问题</h2><ol><li><p>SOAP 和 REST API之间的区别是什么？</p></li><li><p>json.loads和json.load之间的区别是什么？</p></li><li><p>JSON是否支持所有平台？</p></li><li><p>以下代码片断的输出是什么？</p><table><thead><tr><th>12</th><th>boolean_value &#x3D; Falseprint(json.dumps(boolean_value))</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table></li><li><p>以下代码片断的输出是什么？</p><table><thead><tr><th>12</th><th>weird_json &#x3D; ‘{“x”: 1, “x”: 2, “x”: 3}’json.loads(weird_json)</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table></li></ol><h2 id="扩展阅读-12"><a href="#扩展阅读-12" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul><li>JSON文档: <a href="https://docs.python.org/3/library/json.html">https://docs.python.org/3/library/json.html</a></li><li>REST API相关信息: <a href="https://searchmicroservices.techtarget.com/definition/REST-representational-state-transfer">https://searchmicroservices.techtarget.com/definition/REST-representational-state-transfer</a></li></ul><h1 id="第十六章-网络抓取-–-从网站上提取有用的信息"><a href="#第十六章-网络抓取-–-从网站上提取有用的信息" class="headerlink" title="第十六章  网络抓取 – 从网站上提取有用的信息"></a>第十六章  网络抓取 – 从网站上提取有用的信息</h1><p>本章中我们将学习网页抓取的相关知识。我将还将学习Python中用于从网站上提取信息的beautifulsoup库。</p><p>本章主要涉及如下课题：</p><ul><li>什么是网页抓取？</li><li>数据提取</li><li>从维基百科提取信息</li></ul><h2 id="什么是网页抓取？"><a href="#什么是网页抓取？" class="headerlink" title="什么是网页抓取？"></a>什么是网页抓取？</h2><p>网页抓取是一种用于从网站上提取信息的技术。这一技术用于将非结构化数据转化为结构化数据。</p><p>网页抓取的用法是从网站是提取数据。提取的数据存储在本地系统的文件中，也可以存储在数据库的数据表中。网页抓取软件使用HTTP或浏览器直接访问万维网（WWW）。这是由网页爬虫或机器人实现的自动化过程。</p><p>爬取网页包含获取页面，然后提取数据。网页爬虫获取页面。爬虫是网页抓取中不可或缺的一个组件。在获取页面之后，就需要进行提取了。我们可以对页面进行搜索、解析、保存数据到数据表以及重构页面。</p><h2 id="数据提取"><a href="#数据提取" class="headerlink" title="数据提取"></a>数据提取</h2><p>这一部分，我们来看实际的数据提取过程。Python的beautifulsoup库可执行数据提取任务。我们还将使用Python的requests库。</p><p>首先，我们应安装这两个库。运行如下命令来安装requests和beautifulsoup库：</p><table><thead><tr><th>12</th><th>$ pip3 install requests$ pip3 install beautifulsoup4</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h3 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h3><p>requests库的用处是以可读的格式使用Python脚本中的HTTP。我们可以在Python中使用requests库下载页面。requests库有不同的请求类型。这里我们将学习GET请求。GET请求用于从web服务器获取信息。web请求下载指定网页的HTML内容。每次请求都有一个状态码。状态码返回我们向服务器发送的每次请求。这些状态码向我们表明所做请求状况的信息。状态码的类型列举如下：</p><ul><li>200: 表明一切正常并在结果时返回结果</li><li>301: 表明在域名切换或端点（endpoint）发生变化时服务器重定向到不同的端点</li><li>400:表明请求有问题</li><li>401: 表明请求未授权</li><li>403: 表明在尝试访问禁止访问的资源</li><li>404: 表明尝试访问的资源在服务器上不存在</li></ul><h3 id="beautifulsoup库"><a href="#beautifulsoup库" class="headerlink" title="beautifulsoup库"></a>beautifulsoup库</h3><p>beautifulsoup是一个Python库，用于网页抓取。它带有搜索、导航、变更等简单易用的方法。是一个用于从网页上提取数据的工具集。</p><p>下面，要在我们的脚本中使用beautifulsoup的功能，需要使用import语句导入这两具库。我们将来看一个解析网页的示例。这里我们来解析一个IMDb网站的热门新闻面。创建一个脚本parse_web_page.py并在其中加入如下的内容：</p><table><thead><tr><th>1234567</th><th>import requestsfrom bs4 import BeautifulSoup page_result &#x3D; requests.get(‘<a href="https://www.imdb.com/news/top?ref_=nv_nw_tp&#39;)parse_obj">https://www.imdb.com/news/top?ref_=nv_nw_tp&#39;)parse_obj</a> &#x3D; BeautifulSoup(page_result.content, ‘html.parser’) print(parse_obj)</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>运行脚本，我们将得到如下输出：</p><table><thead><tr><th>12345678910111213141516171819202122232425</th><th>$ python3 parse_web_page.py # 输出结果：<!DOCTYPE html> <html xmlns:fb="http://www.facebook.com/2008/fbml" xmlns:og="http://ogp.me/ns#"><head><meta charset="utf-8"/><meta content="IE=edge" http-equiv="X-UA-Compatible"/><meta content="app-id=342792525, app-argument=imdb:///?src=mdot" name="apple-itunes-app"/><script type="text/javascript">var IMDbTimer={starttime: new Date().getTime(),pt:'java'};</script><script>  if (typeof uet == 'function') {   uet("bb", "LoadTitle", {wb: 1});  }</script>…<div id="servertime" time="33"></div><script>  if (typeof uet == 'function') {   uet("be");  }</script></body></html></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>上例中，我们获取了一个页面并使用beautifulsoup对其进行解析。首先我们导入了requests和beautifulsoup模块。然后，使用GET请求来获取 URL 并将该 URL 赋值给变量page_result。接着我们创建了beautifulsoup对象parse_obj。这一对象接收从requests获取的page_result.content作为参数，然后使用 html.parser对页面进行了解析。</p><p>下面我们将从class 和a标签中提取内容。要执行这一操作，打开浏览器并在想要提取的内容上右击，向下滚动可以看到Inspect（查看元素）的选项。点击它可以获取到class名。传入程序中并运行脚本。为此创建一个脚本extract_from_class.py并在其中编写如下内容：</p><table><thead><tr><th>12345678</th><th>import requestsfrom bs4 import BeautifulSoup page_result &#x3D; requests.get(‘<a href="https://www.imdb.com/news/top?ref_=nv_nw_tp&#39;)parse_obj">https://www.imdb.com/news/top?ref_=nv_nw_tp&#39;)parse_obj</a> &#x3D; BeautifulSoup(page_result.content, ‘html.parser’) top_news &#x3D; parse_obj.find(class_&#x3D;’news-article__content’)print(top_news)</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>运行脚本，我们将得到如下输出：</p><table><thead><tr><th>1234</th><th>$ python3 extract_from_class.py<div class="news-article__content">        For a second weekend in a row <a href="/company/co0008970/">Disney</a> and <a href="/company/co0051941/">Marvel</a>‘s <a href="/title/tt4154664/">Captain Marvel</a> topped the weekend box office as it has now posted over $760 million worldwide in just twelve days in global release. Overall, the weekend ended up topping the same weekend last year for a second straight week as both <a href="/title/tt6428676/">Wonder Park</a> and <a href="/title/tt6472976/">Five Feet Apart</a> outperformed expectations with their opening weekend performance. At the same time <a href="/company/co0173285/">Lionsgate</a>‘s release of <a href="/company/co0325194/">Pantelion</a>‘s <a href="/title/tt9019352/">No Manches Frida 2</a> delivered a top ten finish from just 472 theaters, topping Focus’s disappointing release of <a href="/title/tt5968394/">Captive State</a>, which struggled in its debut in over 2,500 locations. Disney’s <a href="/title/tt4154664/">Captain Marvel</a> topped the weekend box office for a second weekend in a row, delivering an estimated $69.3 million sophomore frame, dipping -54.8% and outperforming the -56% average second weekend dip for a film in the Marvel Cinematic Universe. This pushes the film’s domestic cume over $266 million after just ten days in domestic release.      </div></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>上例中，首先我们导入了requests和beautifulsoup模块。然后，我们创建了一个请求对象并传入URL。接着，我们创建了一个beautifulsoup对象parse_obj。该对象从接收请求的page_result.content作为参数，并使用html.parser解析页面。然后我们使用了beautifulsoup的find()方法来从news-article__content这个 class中获取内容。</p><p>下面，我们来看一个从指定标签中提取内容的示例。在这个示例中，我们将从<a>标签中提取内容。创建一个脚本extract_from_tag.py并在其中编写如下内容：</p><table><thead><tr><th>123456789</th><th>import requestsfrom bs4 import BeautifulSoup page_result &#x3D; requests.get(‘<a href="https://www.imdb.com/news/top?ref_=nv_nw_tp&#39;)parse_obj">https://www.imdb.com/news/top?ref_=nv_nw_tp&#39;)parse_obj</a> &#x3D; BeautifulSoup(page_result.content, ‘html.parser’) top_news &#x3D; parse_obj.find(class_&#x3D;’news-article__content’)top_news_a_content &#x3D; top_news.find_all(‘a’)print(top_news_a_content)</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>运行脚本，我们将得到如下输出：</p><table><thead><tr><th>12</th><th>$ python3 extract_from_tag.py[<a href="/company/co0008970/">Disney</a>, <a href="/company/co0051941/">Marvel</a>, <a href="/title/tt4154664/">Captain Marvel</a>, <a href="/title/tt6428676/">Wonder Park</a>, <a href="/title/tt6472976/">Five Feet Apart</a>, <a href="/company/co0173285/">Lionsgate</a>, <a href="/company/co0325194/">Pantelion</a>, <a href="/title/tt9019352/">No Manches Frida 2</a>, <a href="/title/tt5968394/">Captive State</a>, <a href="/title/tt4154664/">Captain Marvel</a>]</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>上例中，我们从<a>标签中提取了内容。我们使用了find_all()方法来从news-article__content这个class中提取了所有<a>标签中的内容。</p><h2 id="从维基百科提取信息"><a href="#从维基百科提取信息" class="headerlink" title="从维基百科提取信息"></a>从维基百科提取信息</h2><p>这一部分中，我们将来看一个从维基百科获取舞蹈形式列表的示例。我们将列出所有的传统印度舞。创建一个脚本extract_from_wikipedia.py并在其中编写如下内容：</p><table><thead><tr><th>1234567891011</th><th>import requestsfrom bs4 import BeautifulSoup page_result &#x3D; requests.get(‘<a href="https://en.wikipedia.org/wiki/Portal:History&#39;)parse_obj">https://en.wikipedia.org/wiki/Portal:History&#39;)parse_obj</a> &#x3D; BeautifulSoup(page_result.content, ‘html.parser’) h_obj &#x3D; parse_obj.find(class_&#x3D;’hlist noprint’)h_obj_a_content &#x3D; h_obj.find_all(‘a’) print(h_obj)print(h_obj_a_content)</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>运行脚本，输出内容如下：</p><table><thead><tr><th>123456789101112131415161718</th><th>$ python3 extract_from_wikipedia.py<div class="hlist noprint" id="portals-browsebar" style="text-align: center;"><dl><dt><a href="/wiki/Portal:Contents/Portals" title="Portal:Contents/Portals">Portal topics</a></dt><dd><a href="/wiki/Portal:Contents/Portals#Human_activities" title="Portal:Contents/Portals">Activities</a></dd><dd><a href="/wiki/Portal:Contents/Portals#Culture_and_the_arts" title="Portal:Contents/Portals">Culture</a></dd><dd><a href="/wiki/Portal:Contents/Portals#Geography_and_places" title="Portal:Contents/Portals">Geography</a></dd><dd><a href="/wiki/Portal:Contents/Portals#Health_and_fitness" title="Portal:Contents/Portals">Health</a></dd><dd><a href="/wiki/Portal:Contents/Portals#History_and_events" title="Portal:Contents/Portals">History</a></dd><dd><a href="/wiki/Portal:Contents/Portals#Mathematics_and_logic" title="Portal:Contents/Portals">Mathematics</a></dd><dd><a href="/wiki/Portal:Contents/Portals#Natural_and_physical_sciences" title="Portal:Contents/Portals">Nature</a></dd><dd><a href="/wiki/Portal:Contents/Portals#People_and_self" title="Portal:Contents/Portals">People</a></dd><dd><a href="/wiki/Portal:Contents/Portals#Philosophy_and_thinking" title="Portal:Contents/Portals">Philosophy</a></dd><dd><a href="/wiki/Portal:Contents/Portals#Religion_and_belief_systems" title="Portal:Contents/Portals">Religion</a></dd><dd><a href="/wiki/Portal:Contents/Portals#Society_and_social_sciences" title="Portal:Contents/Portals">Society</a></dd><dd><a href="/wiki/Portal:Contents/Portals#Technology_and_applied_sciences" title="Portal:Contents/Portals">Technology</a></dd><dd><a href="/wiki/Special:RandomInCategory/All_portals" title="Special:RandomInCategory/All portals">Random portal</a></dd></dl></div>[<a href="/wiki/Portal:Contents/Portals" title="Portal:Contents/Portals">Portal topics</a>, <a href="/wiki/Portal:Contents/Portals#Human_activities" title="Portal:Contents/Portals">Activities</a>, <a href="/wiki/Portal:Contents/Portals#Culture_and_the_arts" title="Portal:Contents/Portals">Culture</a>, <a href="/wiki/Portal:Contents/Portals#Geography_and_places" title="Portal:Contents/Portals">Geography</a>, <a href="/wiki/Portal:Contents/Portals#Health_and_fitness" title="Portal:Contents/Portals">Health</a>, <a href="/wiki/Portal:Contents/Portals#History_and_events" title="Portal:Contents/Portals">History</a>, <a href="/wiki/Portal:Contents/Portals#Mathematics_and_logic" title="Portal:Contents/Portals">Mathematics</a>, <a href="/wiki/Portal:Contents/Portals#Natural_and_physical_sciences" title="Portal:Contents/Portals">Nature</a>, <a href="/wiki/Portal:Contents/Portals#People_and_self" title="Portal:Contents/Portals">People</a>, <a href="/wiki/Portal:Contents/Portals#Philosophy_and_thinking" title="Portal:Contents/Portals">Philosophy</a>, <a href="/wiki/Portal:Contents/Portals#Religion_and_belief_systems" title="Portal:Contents/Portals">Religion</a>, <a href="/wiki/Portal:Contents/Portals#Society_and_social_sciences" title="Portal:Contents/Portals">Society</a>, <a href="/wiki/Portal:Contents/Portals#Technology_and_applied_sciences" title="Portal:Contents/Portals">Technology</a>, <a href="/wiki/Special:RandomInCategory/All_portals" title="Special:RandomInCategory/All portals">Random portal</a>]</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h2 id="总结-15"><a href="#总结-15" class="headerlink" title="总结"></a>总结</h2><p>本章中，我们学习了什么是网页抓取。还学习了两个用于从网页提取数据的库。同时从维基百科上提取了信息。</p><p>下一章中，我们将学习数据的收集和报表。我们将学习NumPy模块、数据可视化以及使用图表来展示数据。</p><h2 id="课后问题-14"><a href="#课后问题-14" class="headerlink" title="课后问题"></a>课后问题</h2><ol><li>什么是网页抓取？</li><li>什么是网页爬虫？</li><li>你是否能在登录页后爬取数据？</li><li>你是否能爬取 Twitter？</li><li>是否是爬取 JavaScript 页面？若可以，如何爬取？</li></ol><h2 id="扩展阅读-13"><a href="#扩展阅读-13" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul><li>Urllib文档：<a href="https://docs.python.org/3/library/urllib.html">https://docs.python.org/3/library/urllib.html</a></li><li>Mechanize: <a href="https://mechanize.readthedocs.io/en/latest/">https://mechanize.readthedocs.io/en/latest/</a></li><li>Scrapemark: <a href="https://pypi.org/project/scrape/">https://pypi.org/project/scrape/</a></li><li>Scrapy: <a href="https://doc.scrapy.org/en/latest/index.html">https://doc.scrapy.org/en/latest/index.html</a></li></ul><p><a href="javascript:;">喜欢 (4)</a>赏分享 (0)</p><h1 id="第十七章-数据收集及报表"><a href="#第十七章-数据收集及报表" class="headerlink" title="第十七章 数据收集及报表"></a>第十七章 数据收集及报表</h1><p>本章中我们将学习科学计算中统计所使用的高级Python库。我们会学习Python的NumPy, Pandas, Matplotlib和Plotly模块。我们将学习到数据可视化的技术以及如何对收集的数据绘图。</p><p>本章中主要学习如下课题：</p><ul><li>NumPy模块</li><li>Pandas模块</li><li>数据可视化</li></ul><h2 id="NumPy模块"><a href="#NumPy模块" class="headerlink" title="NumPy模块"></a>NumPy模块</h2><p>NumPY是一个可对数组进行有效运算的Python模块。NumPy是一个Python科学计算的基础包。这个包常被用作Python的数据分析。NumPy数组是一个多值网格。</p><p>在Terminal中使用如下命令安装NumPy：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ pip3 <span class="hljs-keyword">install</span> numpy<br></code></pre></td></tr></table></figure><p>我们将使用numpy库来对numpy数组执行运算。下面我们来看如何创建一个numpy数组。为此创建一个脚本simple_array.py并在其中编写如下内容：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br> <br><span class="hljs-title">my_list1</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-title">my_array1</span> = np.array(my_list1)<br><span class="hljs-title">print</span>(my_list1, <span class="hljs-keyword">type</span>(my_list1))<br><span class="hljs-title">print</span>(my_array1, <span class="hljs-keyword">type</span>(my_array1))<br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python3 simple_array<span class="hljs-selector-class">.py</span><br><span class="hljs-selector-attr">[1, 2, 3, 4]</span> &lt;class <span class="hljs-string">&#x27;list&#x27;</span>&gt;<br><span class="hljs-selector-attr">[1 2 3 4]</span> &lt;class <span class="hljs-string">&#x27;numpy.ndarray&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>上例中，我们以np导入了numpy库来使用numpy的功能。然后我们创建了一个简单的列表，将其使用np.array()函数将其转化为数组。最后，我们打印了numpy数组及其类型，来学习常规的数组和numpy数组之间的不同。</p><p>上例是一个简单的一维数组。下面我们来看一个多维数组的示例。为此我们需要创建另一个列表，让我们一起来看另一个示例吧。创建一个名为mult_dim_array.py的脚本并在其中编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br> <br>my_list1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>my_list2 = [<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>]<br> <br>my_lists = [my_list1, my_list2]<br>my_array = np.array(my_lists)<br><span class="hljs-built_in">print</span>(my_lists, <span class="hljs-built_in">type</span>(my_lists))<br><span class="hljs-built_in">print</span>(my_array, <span class="hljs-built_in">type</span>(my_array))<br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 mult_dim_array.py<br>[[1, 2, 3, 4], [11, 22, 33, 44]] &lt;class <span class="hljs-string">&#x27;list&#x27;</span>&gt;<br>[[ 1  2  3  4]<br> [11 22 33 44]] &lt;class <span class="hljs-string">&#x27;numpy.ndarray&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>上例中我们导入了numpy模块。然后我们创建了两个列表：my_list1和my_list2。接着我们创建了另一个列表（my_list1和my_list2）的列表，并在该列表（my_lists）上应用了np.array()函数，将其存储在一个名为my_array的对象中。最后我们打印出了这个numpy数组。</p><p>下面我来看可作用于数组的更多操作。我们将学习如何在知道数组的大小以及我们所创建的数组的数据类型，这里我们使用created array。为此我们仅需应用shape()函数并来获取数组的大小，以及使用dtype() 函数来了解所创建数组的数据类型。下面就来看一个示例。创建一个名为size_and_dtype.py的脚本并在其中编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br> <br>my_list1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>my_list2 = [<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>]<br> <br>my_lists = [my_list1, my_list2]<br>my_array = np.array(my_lists)<br><span class="hljs-built_in">print</span>(my_array)<br> <br>size = my_array.shape<br><span class="hljs-built_in">print</span>(size)<br> <br>data_type = my_array.dtype<br><span class="hljs-built_in">print</span>(data_type)<br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua">$ python3 size_and_dtype.py<br><span class="hljs-string">[[ 1  2  3  4]</span><br><span class="hljs-string"> [11 22 33 44]]</span><br>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)<br>int64<br></code></pre></td></tr></table></figure><p>上例中，我们以my_array.shape对数组应用了shape函数来获取数据的大小。输出结果为(2, 4)。然后我们以my_array.dtype对数组应用了dtype函数，得到的输出为int64。</p><p>下面我们来看一些特殊数组的示例。</p><p>首先，我们会使用np.zeros() 创建一个所值为0的数组，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">$ python3<br>Python <span class="hljs-number">3.7</span><span class="hljs-number">.0</span> (v3<span class="hljs-number">.7</span><span class="hljs-number">.0</span>:1bf9cc5093, Jun <span class="hljs-number">26</span> <span class="hljs-number">2018</span>, <span class="hljs-number">23</span>:<span class="hljs-number">26</span>:<span class="hljs-number">24</span>)<br>[Clang <span class="hljs-number">6.0</span> (clang-<span class="hljs-number">600.0</span><span class="hljs-number">.57</span>)] on darwin<br><span class="hljs-type">Type</span> <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-meta">&gt;&gt;&gt; </span>np.zeros(<span class="hljs-number">5</span>)<br>array([<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>])<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>在创建所有值为0的数据之后，我们将使用numpy的 np.ones()函数来创建所有值为1的数组，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>np.ones((<span class="hljs-number">5</span>,<span class="hljs-number">5</span>))<br>array([[<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],<br>       [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],<br>       [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],<br>       [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],<br>       [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>]])<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>np.ones((5,5)) 创建一个 5*5的数组，其中的值均为1。</p><p>下面，我们将使用numpy的np.empty()函数创建一个空数组，如下所示：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">&gt;&gt;&gt; np.empty([<span class="hljs-number">2</span>,<span class="hljs-number">2</span>])<br>array(<span class="hljs-string">[[1.13224202e+277, 1.03103236e-259],</span><br><span class="hljs-string">       [0.00000000e+000, 2.78134232e-309]]</span>)<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>np.empty()并不会像np.zeros()函数那样将数组中的值设为0。因此，速度可能会更快。此外，它要求用户手动在数组中输入所有值，所以使用时要格外小心。</p><p>下面我们来看如何使用np.eye() 函数来创建单位数组（identity array），它将生成主对角线的值全为1的数组，如下所示：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&gt;&gt;&gt; np<span class="hljs-selector-class">.eye</span>(<span class="hljs-number">5</span>)<br><span class="hljs-built_in">array</span>(<span class="hljs-selector-attr">[[1., 0., 0., 0., 0.]</span>,<br>       <span class="hljs-selector-attr">[0., 1., 0., 0., 0.]</span>,<br>       <span class="hljs-selector-attr">[0., 0., 1., 0., 0.]</span>,<br>       <span class="hljs-selector-attr">[0., 0., 0., 1., 0.]</span>,<br>       <span class="hljs-selector-attr">[0., 0., 0., 0., 1.]</span>])<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>下面我们来看range函数，用于使用numpy中的np.arange()来创建数组，如下所示：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&gt;&gt;&gt; np<span class="hljs-selector-class">.arange</span>(<span class="hljs-number">10</span>)<br><span class="hljs-function"><span class="hljs-title">array</span><span class="hljs-params">([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>])</span></span><br></code></pre></td></tr></table></figure><p>np.arange(10)函数创建一个0-9的数组。我们定义了范围10，，因此数组的索引值以0开始。</p><h3 id="使用数组和标量"><a href="#使用数组和标量" class="headerlink" title="使用数组和标量"></a>使用数组和标量</h3><p>这一部分中，我们来看使用NumPy对数组进行不同的算术运算。首先要创建一个多维数组，如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lua">$ python3<br>Python <span class="hljs-number">3.7</span><span class="hljs-number">.0</span> (v3<span class="hljs-number">.7</span><span class="hljs-number">.0</span>:<span class="hljs-number">1</span>bf9cc5093, Jun <span class="hljs-number">26</span> <span class="hljs-number">2018</span>, <span class="hljs-number">23</span>:<span class="hljs-number">26</span>:<span class="hljs-number">24</span>)<br>[Clang <span class="hljs-number">6.0</span> (clang<span class="hljs-number">-600.0</span><span class="hljs-number">.57</span>)] on darwin<br>Type <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br>&gt;&gt;&gt; import numpy as np<br>&gt;&gt;&gt; from __future__ import division<br>&gt;&gt;&gt; arr = np.array(<span class="hljs-string">[[4,5,6],[7,8,9]]</span>)<br>&gt;&gt;&gt; arr<br>array(<span class="hljs-string">[[4, 5, 6],</span><br><span class="hljs-string">       [7, 8, 9]]</span>)<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>这里我们导入了numpy模块来使用numpy的功能，接着我们导入了__future__模块来处理浮点数。然后我们创建了一个二维数组，来对其执行不同的操作。</p><p>下面我们来看数组上的一些算术运算。首先，我们将学习数组的乘法，如下所示：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">&gt;&gt;&gt; arr * arr<br>array(<span class="hljs-string">[[16, 25, 36],</span><br><span class="hljs-string">       [49, 64, 81]]</span>)<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>以上的乘法运算中，我们对arr数组自身进行了相乘来获取到一个相乘后的数组。我们也可以对两个不同的数组进行相乘。</p><p>下面我们来看数组的减法运算，如下所示：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">&gt;&gt;&gt; arr - arr<br>array(<span class="hljs-string">[[0, 0, 0],</span><br><span class="hljs-string">       [0, 0, 0]]</span>)<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>如前例所示，我们仅仅使用了一个 – 运算符来进行两个数组的减法。在数组相减之后，我们获得了结果数组，如以上代码所示。</p><p>下面我们来看含有标量数组的算术运算。我们来看一些示例：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">&gt;&gt;&gt; <span class="hljs-number">1</span> / arr<br>array(<span class="hljs-string">[[0.25      , 0.2       , 0.16666667],</span><br><span class="hljs-string">       [0.14285714, 0.125     , 0.11111111]]</span>)<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>上例中，我们使用1除以了我们的数组并得到了输出。记住，我们导入了__future__ 模块，有助于这类运算，来处理数组中的浮点值。</p><p>下面我们来看numpy数组的指数运算，如下所示：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">&gt;&gt;&gt; arr  <span class="hljs-number">3</span><br>array(<span class="hljs-string">[[ 64, 125, 216],</span><br><span class="hljs-string">       [343, 512, 729]]</span>)<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>上例中，我们对数组进行了立方运算，得到了一个数组中各项值立方的输出。</p><h3 id="数组索引"><a href="#数组索引" class="headerlink" title="数组索引"></a>数组索引</h3><p>数组的索引是通过将数组作为索引来实现的。对于索引数组，原数组的拷贝会被返回。numpy数组可使用除元组外的其它序列或通过使用其它数组来索引。数组的最后一个元素可使用-1作为索引，倒数第二的索引可使用-1，以此类推。</p><p>因此，要在数组上执行索引运算，首先我们创建一个numpy数组，我们将使用range()函数来创建一个数组，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">$ python3<br>Python <span class="hljs-number">3.7</span><span class="hljs-number">.0</span> (v3<span class="hljs-number">.7</span><span class="hljs-number">.0</span>:1bf9cc5093, Jun <span class="hljs-number">26</span> <span class="hljs-number">2018</span>, <span class="hljs-number">23</span>:<span class="hljs-number">26</span>:<span class="hljs-number">24</span>)<br>[Clang <span class="hljs-number">6.0</span> (clang-<span class="hljs-number">600.0</span><span class="hljs-number">.57</span>)] on darwin<br><span class="hljs-type">Type</span> <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-meta">&gt;&gt;&gt; </span>arr = np.arange(<span class="hljs-number">0</span>,<span class="hljs-number">16</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>arr<br>array([ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>])<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>上例中，我们创建了一个范围为16的数组arr，即0-15。</p><p>下面我们将对数组arr执行一个不同的索引运算。首先，我们来获取数组中指定索引的值：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">arr[<span class="hljs-number">7</span>]</span><br>7<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span><br></code></pre></td></tr></table></figure><p>上例中，我们通过索引值访问了数组，在向数组arr传递了索引值之后，索引返回了值7，这也正是我们所传入的具体索引数。</p><p>在获取具体索引的值之后，我们将获取一个范围内的值。我们来看如下示例：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&gt;&gt;&gt; arr<span class="hljs-selector-attr">[2:10]</span><br><span class="hljs-function"><span class="hljs-title">array</span><span class="hljs-params">([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>])</span></span><br>&gt;&gt;&gt; arr<span class="hljs-selector-attr">[2:10:2]</span><br><span class="hljs-function"><span class="hljs-title">array</span><span class="hljs-params">([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>])</span></span><br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>上例中，首先我们访问了数组并获取一个范围内的值(2-10)。结果以array([2, 3, 4, 5, 6, 7, 8, 9])显示了输出。第二个例子中的arr[2:10:2]，实际上是说以步长间隔2访问范围在2-10的数组。这类索引的语法为arr[<em>start_value</em>:<em>stop_value</em>:<em>steps</em>]。因此，第二条命令的输出结果为array([2, 4, 6, 8])。</p><p>我们还可以获取一个数组中从指定索引直到结尾的值，如下例所示：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">arr[<span class="hljs-number">5</span>:]</span><br>array([ 5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span><br></code></pre></td></tr></table></figure><p>如我们在上例中所见，我们访问了数组中从第5个开始直到结果的值。结果得到了输出array([ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])。</p><p>下面我们来看看numpy数组的切片。在切片中，实际上我们获取了原数组的某一部分并将其存储在指定的数组名中。一起来看一个示例：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">arr_slice = arr[<span class="hljs-number">0</span>:<span class="hljs-number">8</span>]</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">arr_slice</span><br>array([0, 1, 2, 3, 4, 5, 6, 7])<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span><br></code></pre></td></tr></table></figure><p>上例中，我们获取了原数组的一个切片。结果我们获取了数组的一个切片，值为0,1,2,…..,7。我们还要将更新付下赋给数组的切片。我们来看一个示例：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">arr_slice[:] = <span class="hljs-number">29</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">arr_slice</span><br>array([29, 29, 29, 29, 29, 29, 29, 29])<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span><br></code></pre></td></tr></table></figure><p>上例中，我们设置了数组切片中的所有值为29。但对数组切片赋值的一个重点是赋给切版的值同样会被赋给原数组。</p><p>下面我们来看在向数组切片赋值后原数组的效果：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">arr</span><br>array([29, 29, 29, 29, 29, 29, 29, 29,  8,  9, 10, 11, 12, 13, 14, 15])<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span><br></code></pre></td></tr></table></figure><p>下面我们来看另一个运算：即数组的复制。数组的切片和拷贝的区别在于在进行数组的切片时，所做的修改会应用到原数组上。在获取数组的拷贝时，则给出一个原数组的明确的拷贝。因此，对数组拷贝所应用的改变不会影响到原数组。让我们来看一个复制数组的示例：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">cpying_arr = arr.copy()</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">cpying_arr</span><br>array([29, 29, 29, 29, 29, 29, 29, 29,  8,  9, 10, 11, 12, 13, 14, 15])<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span><br></code></pre></td></tr></table></figure><p>上例中，我们仅仅接收了一个原数组的拷贝。使用array_name.copy()来实现拷贝，输出为原数组的一个拷贝。</p><h4 id="二维数组的索引"><a href="#二维数组的索引" class="headerlink" title="二维数组的索引"></a>二维数组的索引</h4><p>二维数组是一个数组的数组。这一数组中的数据元素的位置通常引用两个索引值而非单个，分别表示数据表格的行和列。下面我们将做该类型数组的索引。</p><p>下面我们来看一个二维数组的示例：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&gt;&gt;&gt; td_array = np<span class="hljs-selector-class">.array</span>((<span class="hljs-selector-attr">[5,6,7]</span>,<span class="hljs-selector-attr">[8,9,10]</span>,<span class="hljs-selector-attr">[11,12,13]</span>))<br>&gt;&gt;&gt; td_array<br><span class="hljs-built_in">array</span>(<span class="hljs-selector-attr">[[ 5,  6,  7]</span>,<br>       <span class="hljs-selector-attr">[ 8,  9, 10]</span>,<br>       <span class="hljs-selector-attr">[11, 12, 13]</span>])<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>上例中，我们创建了一个名为td_array的二维数组。在创建数组后，我们打印出了数组。下面我们还将通过索引获取td_array中的值。一起来看通过索引获取值的示例：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">td_array[<span class="hljs-number">1</span>]</span><br>array([ 8,  9, 10])<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span><br></code></pre></td></tr></table></figure><p>上例中，我们访问了数组中索引为1的值并获取了输出。在这类索引中，访问值时我们获取到了整个数组。除了获取整个数组外，我们还可获取指定值。来看一个示例：</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">td_array[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>]</span><br>8<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span><br></code></pre></td></tr></table></figure><p>上例中，我们通过传入两个值行和列访问了td_array。正如在输出中所见，我们获得的值为8。</p><p>我们还可以另一种方式创建二维数组。首先，设置一个长度更大的二维数组。这里我们设置为10。那么我们创建一个值全部为0的示例数组，然后在其中填入值。示例如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&gt;&gt;&gt; td_array = np<span class="hljs-selector-class">.zeros</span>((<span class="hljs-number">10</span>, <span class="hljs-number">10</span>))<br>&gt;&gt;&gt; td_array<br><span class="hljs-built_in">array</span>(<span class="hljs-selector-attr">[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]</span>,<br>       <span class="hljs-selector-attr">[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]</span>,<br>       <span class="hljs-selector-attr">[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]</span>,<br>       <span class="hljs-selector-attr">[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]</span>,<br>       <span class="hljs-selector-attr">[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]</span>,<br>       <span class="hljs-selector-attr">[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]</span>,<br>       <span class="hljs-selector-attr">[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]</span>,<br>       <span class="hljs-selector-attr">[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]</span>,<br>       <span class="hljs-selector-attr">[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]</span>,<br>       <span class="hljs-selector-attr">[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]</span>])<br>&gt;&gt;&gt; <span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>...     td_array<span class="hljs-selector-attr">[i]</span> = <span class="hljs-selector-tag">i</span><br>...<br>&gt;&gt;&gt; td_array<br><span class="hljs-built_in">array</span>(<span class="hljs-selector-attr">[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]</span>,<br>       <span class="hljs-selector-attr">[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]</span>,<br>       <span class="hljs-selector-attr">[2., 2., 2., 2., 2., 2., 2., 2., 2., 2.]</span>,<br>       <span class="hljs-selector-attr">[3., 3., 3., 3., 3., 3., 3., 3., 3., 3.]</span>,<br>       <span class="hljs-selector-attr">[4., 4., 4., 4., 4., 4., 4., 4., 4., 4.]</span>,<br>       <span class="hljs-selector-attr">[5., 5., 5., 5., 5., 5., 5., 5., 5., 5.]</span>,<br>       <span class="hljs-selector-attr">[6., 6., 6., 6., 6., 6., 6., 6., 6., 6.]</span>,<br>       <span class="hljs-selector-attr">[7., 7., 7., 7., 7., 7., 7., 7., 7., 7.]</span>,<br>       <span class="hljs-selector-attr">[8., 8., 8., 8., 8., 8., 8., 8., 8., 8.]</span>,<br>       <span class="hljs-selector-attr">[9., 9., 9., 9., 9., 9., 9., 9., 9., 9.]</span>])<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>上例中，我们创建了一个10*10的二维数组。</p><p>下面我人们再对其做一些特别的索引，如下例所示：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua">&gt;&gt;&gt; td_array<span class="hljs-string">[[1,3,5,7]]</span><br>array(<span class="hljs-string">[[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],</span><br><span class="hljs-string">       [3., 3., 3., 3., 3., 3., 3., 3., 3., 3.],</span><br><span class="hljs-string">       [5., 5., 5., 5., 5., 5., 5., 5., 5., 5.],</span><br><span class="hljs-string">       [7., 7., 7., 7., 7., 7., 7., 7., 7., 7.]]</span>)<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>上例中，我们获取了指定的索引值，因此得到以上输出。</p><h3 id="通用数组函数"><a href="#通用数组函数" class="headerlink" title="通用数组函数"></a>通用数组函数</h3><p>能用函数对numpy数组中的每一个元素执行操作。下面我们来看一个在数组上执行多个通用函数的示例。首先，我们获取数组的平方根。创建一个名为sqrt_array.py的脚本并在其中编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br> <br>array = np.arange(<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The Array is : &quot;</span>, array)<br>Square_root = np.sqrt(array)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Square root of given array is : &quot;</span>, Square_root)<br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns">$ python3 sqrt_array.py<br>The Array is :  [ <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9 10 11 12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span>]<br>Square root of given array is :  [<span class="hljs-number">0</span>.         <span class="hljs-number">1</span>.         <span class="hljs-number">1.41421356</span> <span class="hljs-number">1.73205081</span> <span class="hljs-number">2</span>.         <span class="hljs-number">2.23606798</span><br> <span class="hljs-number">2.44948974</span> <span class="hljs-number">2.64575131</span> <span class="hljs-number">2.82842712</span> <span class="hljs-number">3</span>.         <span class="hljs-number">3.16227766</span> <span class="hljs-number">3.31662479</span><br> <span class="hljs-number">3.46410162</span> <span class="hljs-number">3.60555128</span> <span class="hljs-number">3.74165739</span> <span class="hljs-number">3.87298335</span>]<br></code></pre></td></tr></table></figure><p>上例中，我们使用numpy的一个函数range创建了一个简单的数组。然后我们对所生成的数组应用于sqrt()函数，来获取数组的平方根。在获取数组的平方根之后，我们将对数组应另一个能用方法，即指数函数exp()。我来看一个示例。创建一个名为expo_array.py的脚本并编写如下内容：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maxima">import numpy as <span class="hljs-built_in">np</span><br> <br><span class="hljs-built_in">array</span> = <span class="hljs-built_in">np</span>.arange(<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The array is : &quot;</span>, <span class="hljs-built_in">array</span>)<br><span class="hljs-built_in">exp</span> = <span class="hljs-built_in">np</span>.<span class="hljs-built_in">exp</span>(<span class="hljs-built_in">array</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Exponential of give array is : &quot;</span>, <span class="hljs-built_in">exp</span>)<br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs smali">$ python3 expo_array.py<br>The<span class="hljs-built_in"> array </span>is<span class="hljs-keyword"> :</span>  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15]<br>Exponential of give<span class="hljs-built_in"> array </span>is<span class="hljs-keyword"> :</span>  [1.00000000e+00 2.71828183e+00 7.38905610e+00 2.00855369e+01<br> 5.45981500e+01 1.48413159e+02 4.03428793e+02 1.09663316e+03<br> 2.98095799e+03 8.10308393e+03 2.20264658e+04 5.98741417e+04<br> 1.62754791e+05 4.42413392e+05 1.20260428e+06 3.26901737e+06]<br></code></pre></td></tr></table></figure><p>上例中，我们使用numpy的range函数创建了一个简单的数组。然后对所生成的数组应用了exp()函数来获取数组的指数（以 e为底的自然指数）。</p><h2 id="Pandas模块"><a href="#Pandas模块" class="headerlink" title="Pandas模块"></a>Pandas模块</h2><p>这一部分中，我们将学习pandas模块。pandas模块提供了快速灵活的数组结构，设计用于处理结构化和时间序列数据。pandas模块用于数据分摊。pandas建立在NumPy 和Matplotlib等包的基础上，让我们可以进行大部的分析和可视化。要使用这一模块，首先需要进行导入。</p><p>首先通过运行如下命令来安装示例中所需的包：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ pip3 <span class="hljs-keyword">install</span> pandas<br>$ pip3 <span class="hljs-keyword">install</span> matplotlib<br></code></pre></td></tr></table></figure><p>这里，我们将来看一些使用pandas模块的示例。我们会学习两具数据 结构：序列（Series）和数据帧（DataFrames）。我们还将看看如何使用pandas从csv文件中读取数据。</p><h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><p>pandas序列是一个一维数组。其中可包含任意数据类型。它的标签被称为索引。下面我们来看一个不声明索引的序列和一个声明了索引的序列。首先，我们来看一个未声明索引的序列。创建一个名为series_without_index.py的脚本并在其中编写如下内容：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br> <br>s_data = pd.Series([<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>], name = <span class="hljs-string">&#x27;numbers&#x27;</span>)<br><span class="hljs-built_in">print</span>(s_data)<br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elm">$ python3 series_without_index.py<br><span class="hljs-number">0</span>    <span class="hljs-number">10</span><br><span class="hljs-number">1</span>    <span class="hljs-number">20</span><br><span class="hljs-number">2</span>    <span class="hljs-number">30</span><br><span class="hljs-number">3</span>    <span class="hljs-number">40</span><br><span class="hljs-type">Name</span>: numbers, d<span class="hljs-keyword">type</span>: int64<br></code></pre></td></tr></table></figure><p>上例中，我们学习未声明索引的序列。首先我们导入了两个模块：pandas和numpy。然后我创建了存储序列数据的对象s_data。在这个序列中，我们创建一个列表而没有声明索引，传入了name属性来为列表赋予一个名称，然后我们打印出了数据。在输出中，左列是数据的索引。即便我们没有传入索引，pandas还是会暗自赋予一个索引。这个索引从0开始。在数据列的下面是序列的名称以及值的数据类型。</p><p>下面，我们来看一个声明了索引的序列示例。这里我们还将执行索引和切片操作。为此创建一个名为series_with_index.py的脚本并在其中编写如下内容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import pandas as pd<br>import numpy as np<br> <br>s_data = pd<span class="hljs-selector-class">.Series</span>(<span class="hljs-selector-attr">[10, 20, 30, 40]</span>, index = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]</span>, name = <span class="hljs-string">&#x27;numbers&#x27;</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(s_data)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&#x27;The data at index 2 is: &#x27;</span>, s_data[<span class="hljs-number">2</span>])</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&#x27;The data from range 1 to 3 are:\n&#x27;</span>, s_data[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])</span></span><br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs fortran">$ python3 series_with_index.py<br>a    <span class="hljs-number">10</span><br>b    <span class="hljs-number">20</span><br><span class="hljs-comment">c    30</span><br>d    <span class="hljs-number">40</span><br><span class="hljs-keyword">Name</span>: numbers, dtype: int64<br> <br>The <span class="hljs-keyword">data</span> at <span class="hljs-built_in">index</span> <span class="hljs-number">2</span> is:  <span class="hljs-number">30</span><br>The <span class="hljs-keyword">data</span> from <span class="hljs-built_in">range</span> <span class="hljs-number">1</span> to <span class="hljs-number">3</span> are:<br> b    <span class="hljs-number">20</span><br><span class="hljs-comment">c    30</span><br><span class="hljs-keyword">Name</span>: numbers, dtype: int64<br></code></pre></td></tr></table></figure><p>上例中，我们在 index 属性中为数据传入了索引值。输出中左列为我们传入的索引值。</p><p>In the preceding example, we provided an index value for our data in the index attribute. In the output, the left column is the index values that we provided.</p><h3 id="数据帧"><a href="#数据帧" class="headerlink" title="数据帧"></a>数据帧</h3><p>这一部分中，我们针学习pandas的数据帧（DataFrames）。数据帧是二维的带标签数据结构，它有不同列并可以包含不同的数据类型。数据帧与SQL表格或电子表格类似。在使用pandas时数据帧是最常用的对象。</p><p>下面我们来看一个从csv文件读入数据帧的示例。那么我们应该在系统中要有一个 csv 文件。如果你的系统中暂没有csv文件，创建一个名为employee.csv,的文件如下：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">Id,</span> Name, Department, Country<br><span class="hljs-number">101</span>, John, Finance, US<br><span class="hljs-number">102</span>, Mary, HR, Australia<br><span class="hljs-number">103</span>, Geeta, IT, India<br><span class="hljs-number">104</span>, Rahul, Marketing, India<br><span class="hljs-number">105</span>, Tom, Sales, Russia<br></code></pre></td></tr></table></figure><p>下面，我我将读取这一csv文件到数据帧中。为此创建一个名为read_csv_dataframe.py的脚本并在其中编写如下内容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import pandas as pd<br> <br>file_name = <span class="hljs-string">&#x27;employee.csv&#x27;</span><br>df = pd<span class="hljs-selector-class">.read_csv</span>(file_name)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(df)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(df.head(<span class="hljs-number">3</span>)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(df.tail(<span class="hljs-number">1</span>)</span></span>)<br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs tap">$ python3 read_csv_dataframe.py<br>    Id    Name  Department     Country<br>0 <span class="hljs-number"> 101 </span>   John     Finance          US<br>1 <span class="hljs-number"> 102 </span>   Mary          HR   Australia<br>2 <span class="hljs-number"> 103 </span>  Geeta          IT       India<br>3 <span class="hljs-number"> 104 </span>  Rahul   Marketing       India<br>4 <span class="hljs-number"> 105 </span>    Tom       Sales      Russia<br> <br>    Id    Name  Department     Country<br>0 <span class="hljs-number"> 101 </span>   John     Finance          US<br>1 <span class="hljs-number"> 102 </span>   Mary          HR   Australia<br>2 <span class="hljs-number"> 103 </span>  Geeta          IT       India<br> <br>    Id  Name  Department  Country<br>4 <span class="hljs-number"> 105 </span>  Tom       Sales   Russia<br></code></pre></td></tr></table></figure><p>上例中，首先我们创建了一个名为employee.csv的csv文件。我们使用pandas模块创建了一个数据帧。目的是将csv文件读取到数据帧中。接着我们创建了一个df对象，并将我们读取的csv内容赋给它。然后我们打印了数据帧。这里，我们使用了head()和tail()方法来获取指定行数的数据。我们指定了head(3)，表示要打印数据的前三行。还指定了tail(1)，表示要打印数据的最后一行。</p><h2 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h2><p>数据可视化是一个描述努力以视觉方式理解数据意义的词语。这一部分，我们将来看以下的数据可视化技术：</p><ul><li>Matplotlib</li><li>Plotly</li></ul><h3 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h3><p>Matplotlib是一个Python中的数据可视化库，仅需使用几行代码通过它可生成图表、直方图、能量光谱（power spectra）、柱状图、 error charts,、散点图等。Matplotlib通常会简化工作并完成一些非常复杂的图表。</p><p>要在Python程序中使用matplotlib，首先要安装matplotlib，在终端中执行如下命令来安装matplotlib：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip3 <span class="hljs-keyword">install</span> matplotlib<br></code></pre></td></tr></table></figure><p>我们还应安装一个包tkinter来实现图形化展示。使用如下命令来进行安装：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ sudo apt <span class="hljs-keyword">install</span> python3-tk<br></code></pre></td></tr></table></figure><p>译者注：Mac 安装包中已自动集成，无需单独安装</p><p>既然已经在系统中安装了matplotlib，就让我们来看一些示例吧。在画图表时，有两个重要的组成部分：figure和数轴。figure是作为画图窗口的容器。可以有不同类型的独立数值。数轴是是我们绘制数据及相关联的标签的区域。数轴包含 x 轴 和 y 轴。</p><p>下面，我们来看一些matplotlib的示例。首先看一个简单的示例。创建一个名为simple_plot.py的脚本并在其中编写如下内容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import matplotlib<span class="hljs-selector-class">.pyplot</span> as plt<br>import numpy as np<br> <br>x = np<span class="hljs-selector-class">.linspace</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>)<br>y = x2<br>plt<span class="hljs-selector-class">.plot</span>(x, y)<br>plt<span class="hljs-selector-class">.title</span>(<span class="hljs-string">&#x27;sample plot&#x27;</span>)<br>plt<span class="hljs-selector-class">.xlabel</span>(<span class="hljs-string">&#x27;x axis&#x27;</span>)<br>plt<span class="hljs-selector-class">.ylabel</span>(<span class="hljs-string">&#x27;y axis&#x27;</span>)<br>plt<span class="hljs-selector-class">.show</span>()<br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">python3</span> simple_plot.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>输出结果如下：</p><p><a href="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019032102130991.png"><img src="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019032102130991.png" alt="第十七章 数据收集及报表"></a></p><p>上例中，我们导入了两具模块，matplotlib和numpy来对数据进行可视化以及分别创建数组x和y。然后，我们以及plt.plot(x,y)绘制了两个数据。接着我们使用xlabel(), ylabel()和title()函数对绘图添加了标题和标签，并使用plt.show()函数来显示绘图。因为我们是在Python中使用Matplotlib，要记得在最后一行添加plt.show()来显示绘图。</p><p>下面我们将创建两个数组来在绘图中显示两个曲线，并对这两个曲线应用样式。在下例中，我们将使用ggplot样式来绘图。ggplot是一个用于声明式地创建图形的系统，它基于图形的语法。要画图我们只需传入数据，然后告诉ggplot如何映射变量以及使用哪些图形原语（primitive），它就会处理剩下的细节。大多情况下，我们以ggplot()的样式开始。</p><p>创建一个名为simple_plot2.py的脚本并在其中编写如下内容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import matplotlib<span class="hljs-selector-class">.pyplot</span> as plt<br>from matplotlib import style<br> <br>style<span class="hljs-selector-class">.use</span>(<span class="hljs-string">&#x27;ggplot&#x27;</span>)<br> <br>x1 = <span class="hljs-selector-attr">[0,5,10]</span><br>y1 = <span class="hljs-selector-attr">[12,16,6]</span><br>x2 = <span class="hljs-selector-attr">[6,9,11]</span><br>y2 = <span class="hljs-selector-attr">[6,16,8]</span><br> <br>plt<span class="hljs-selector-class">.subplot</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>plt<span class="hljs-selector-class">.plot</span>(x1, y1, linewidth=<span class="hljs-number">3</span>)<br>plt<span class="hljs-selector-class">.title</span>(<span class="hljs-string">&#x27;sample plot&#x27;</span>)<br>plt<span class="hljs-selector-class">.xlabel</span>(<span class="hljs-string">&#x27;x axis&#x27;</span>)<br>plt<span class="hljs-selector-class">.ylabel</span>(<span class="hljs-string">&#x27;y axis&#x27;</span>)<br>plt<span class="hljs-selector-class">.subplot</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>plt<span class="hljs-selector-class">.plot</span>(x2, y2, <span class="hljs-attribute">color</span>=<span class="hljs-string">&#x27;r&#x27;</span>, linewidth=<span class="hljs-number">3</span>)<br>plt<span class="hljs-selector-class">.xlabel</span>(<span class="hljs-string">&#x27;x2 axis&#x27;</span>)<br>plt<span class="hljs-selector-class">.ylabel</span>(<span class="hljs-string">&#x27;y2 axis&#x27;</span>)<br> <br>plt<span class="hljs-selector-class">.show</span>()<br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">python3</span> simple_plot2.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>得到的结果如下：</p><p><a href="http://alanhou.org/homepage/wp-content/uploads/2019/03/201903210321184.png"><img src="http://alanhou.org/homepage/wp-content/uploads/2019/03/201903210321184.png" alt="第十七章 数据收集及报表"></a></p><p>上例中，首先我们导入了所需的模块，然后我们使用了ggplot样式来绘图。我们创建了两组数组：即x1, y1 和 x2, y2。然后使用了subplot函数plt.subplot()，因为它允许我们在同一个画布上绘制不同的图形。如果想要在不同的画布上绘制图形的话，也可以使用plt.figure()来代替plt.subplot()。</p><p>下面我们来看使用plt.figure()函数来绘制数组并使用Matplotlib来保存生成的图像。我们能以savefig()方法进行不同格式的保存，如png, jpg, pdf等等。我们会将前面的图像保存在名为my_sample_plot.jpg的文件中。下面我们来看一个示例。为此创建一个名为simple_plot3.py的脚本并在其中编写如下内容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import matplotlib<span class="hljs-selector-class">.pyplot</span> as plt<br>from matplotlib import style<br> <br>style<span class="hljs-selector-class">.use</span>(<span class="hljs-string">&#x27;ggplot&#x27;</span>)<br> <br>x1 = <span class="hljs-selector-attr">[0,5,10]</span><br>y1 = <span class="hljs-selector-attr">[12,16,6]</span><br>x2 = <span class="hljs-selector-attr">[6,9,11]</span><br>y2 = <span class="hljs-selector-attr">[6,16,8]</span><br> <br>plt<span class="hljs-selector-class">.figure</span>(<span class="hljs-number">1</span>)<br>plt<span class="hljs-selector-class">.plot</span>(x1, y1, <span class="hljs-attribute">color</span>=<span class="hljs-string">&#x27;g&#x27;</span>, linewidth=<span class="hljs-number">3</span>)<br>plt<span class="hljs-selector-class">.title</span>(<span class="hljs-string">&#x27;sample plot&#x27;</span>)<br>plt<span class="hljs-selector-class">.xlabel</span>(<span class="hljs-string">&#x27;x axis&#x27;</span>)<br>plt<span class="hljs-selector-class">.ylabel</span>(<span class="hljs-string">&#x27;y axis&#x27;</span>)<br>plt<span class="hljs-selector-class">.savefig</span>(<span class="hljs-string">&#x27;my_sample_plot1.jpg&#x27;</span>)<br> <br>plt<span class="hljs-selector-class">.figure</span>(<span class="hljs-number">2</span>)<br>plt<span class="hljs-selector-class">.plot</span>(x2, y2, <span class="hljs-attribute">color</span>=<span class="hljs-string">&#x27;r&#x27;</span>, linewidth=<span class="hljs-number">3</span>)<br>plt<span class="hljs-selector-class">.xlabel</span>(<span class="hljs-string">&#x27;x2 axis&#x27;</span>)<br>plt<span class="hljs-selector-class">.ylabel</span>(<span class="hljs-string">&#x27;y2 axis&#x27;</span>)<br>plt<span class="hljs-selector-class">.savefig</span>(<span class="hljs-string">&#x27;my_sample_plot2.jpg&#x27;</span>)<br> <br>plt<span class="hljs-selector-class">.show</span>()<br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">python3</span> simple_plot3.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>输出结果如下：</p><p><a href="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019032104054525.jpg"><img src="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019032104054525.jpg" alt="第十七章 数据收集及报表"></a></p><p>译者注：执行时如出现如下报错，请安装 Pillow，因 Matplotlib 默认并不支持jpg 格式：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs axapta">ValueError: Format <span class="hljs-string">&#x27;jpg&#x27;</span> <span class="hljs-keyword">is</span> not supported (supported formats: eps, pdf, pgf, png, ps, raw, rgba, svg, svgz)<br> <br><span class="hljs-meta"># 安装 pillow</span><br>pip3 install pillow<br></code></pre></td></tr></table></figure><p>上例中，我们使用了plt.figure()函数来在不同的画布上进行绘制。然后，我们使用了plt.plot()函数。该函数有不同的参数，用于绘图时使用。在上例中，我使用了x1, x2, y1和 y2等参数。这些分别是用于绘图的象限点。</p><p>然后我们使用了color参数来为画的线传入具体的颜色，第三个参数我们使用了linewidth，用于给定画线的宽度。接着，我们使用了savefig()方法来以指定的格式保存了图像。你可以在运行Python脚本的当前目录中查看图像（如未指定保存目录）。</p><p>我们还可以通过直接访问目录来打开图片，或者使用如下的方法来使用matplotlib打开所生成的图片。下面我们来看一个打开所保存图像的示例。为此创建一个名为open_image.py的脚本并在其中编写如下内容：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> matplotlib.image <span class="hljs-keyword">as</span> mpimg<br> <br>plt.imshow(mpimg.imread(<span class="hljs-string">&#x27;my_sample_plot1.jpg&#x27;</span>))<br>plt.<span class="hljs-keyword">show</span>()<br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">python3</span> open_image.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>我们将得到如下输出：</p><p><a href="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019032105285917.png"><img src="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019032105285917.png" alt="第十七章 数据收集及报表"></a>下例中，我们使用了Matplotlib的imshow()函数来打开所保存的图像。</p><p>下面我们来看绘图的不同类型。Matplotlib允许我们创建不同类型的绘图来处理数组中的数据，比如直方图、散点图、柱状图等等。选取不同类型的绘图取决于数据可视化的目的。下面我们就来看一些示例。</p><h4 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h4><p>这类图有助于我们查看数值数据的分布，这是平均值和中位数所无法体现的。我们将使用hist()方法来创建一个简单的直方图。下面来看一个创建简单直方图的示例。为此创建一个名为histogram_example.py的脚本，并在其中编写如下内容：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br> <br><span class="hljs-title">x</span> = np.random.randn(<span class="hljs-number">500</span>)<br><span class="hljs-title">plt</span>.hist(x)<br><span class="hljs-title">plt</span>.show()<br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">python3</span> histogram_example.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>得到的输出结果如下：</p><p><a href="http://alanhou.org/homepage/wp-content/uploads/2019/03/20190321145705100.png"><img src="http://alanhou.org/homepage/wp-content/uploads/2019/03/20190321145705100.png" alt="第十七章 数据收集及报表"></a>上例中，我们使用numpy创建了一个随机数数组。然后使用plt.hist()方法对这一数值数据进行绘图。</p><h4 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h4><p>这类图以一个点状集合展示数据。它提供了一种便捷地视觉查看数值关联的方式。它还有助于理解多个变量之间的关系。我们将使用scatter()方法来将数据绘制到散点图中。在散点图中，点的位置取决于x和y轴的值，即二维数据值，因此数据集中的每个值都是横向或纵向维度上的一个位置。我们来看一个散点图的示例。创建一个名为scatterplot_example.py的脚本，并在其中编写如下内容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import matplotlib<span class="hljs-selector-class">.pyplot</span> as plt<br>import numpy as np<br> <br>x = np<span class="hljs-selector-class">.linspace</span>(-<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">100</span>)<br>y = np<span class="hljs-selector-class">.random</span><span class="hljs-selector-class">.randn</span>(<span class="hljs-number">100</span>)<br>colors = np<span class="hljs-selector-class">.random</span><span class="hljs-selector-class">.rand</span>(<span class="hljs-number">100</span>)<br>plt<span class="hljs-selector-class">.scatter</span>(x,y,c=colors)<br>plt<span class="hljs-selector-class">.show</span>()<br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">python3</span> scatterplot_example.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>我们将得到如下输出：</p><p><a href="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019032115051476.png"><img src="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019032115051476.png" alt="第十七章 数据收集及报表"></a></p><p>上例中，我们获取了x和y的值。然后使用plt.scatter()方法绘制这些值来获取x和y值的散点图。</p><h4 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h4><p>柱状图是将数据展现为矩形状态的图表。我们可以进行纵向或横向的绘制。创建一个名为bar_chart.py的脚本并在其中编写如下内容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import matplotlib<span class="hljs-selector-class">.pyplot</span> as plt<br>from matplotlib import style<br> <br>style<span class="hljs-selector-class">.use</span>(<span class="hljs-string">&#x27;ggplot&#x27;</span>)<br> <br>x1 = <span class="hljs-selector-attr">[4,8,12]</span><br>y1 = <span class="hljs-selector-attr">[12,16,6]</span><br>x2 = <span class="hljs-selector-attr">[5,9,11]</span><br>y2 = <span class="hljs-selector-attr">[6,16,8]</span><br> <br>plt<span class="hljs-selector-class">.bar</span>(x1,y1,<span class="hljs-attribute">color</span>=<span class="hljs-string">&#x27;g&#x27;</span>,linewidth=<span class="hljs-number">3</span>)<br>plt<span class="hljs-selector-class">.bar</span>(x2,y2,<span class="hljs-attribute">color</span>=<span class="hljs-string">&#x27;r&#x27;</span>,linewidth=<span class="hljs-number">3</span>)<br>plt<span class="hljs-selector-class">.title</span>(<span class="hljs-string">&#x27;Bar plot&#x27;</span>)<br> <br>plt<span class="hljs-selector-class">.xlabel</span>(<span class="hljs-string">&#x27;x axis&#x27;</span>)<br>plt<span class="hljs-selector-class">.ylabel</span>(<span class="hljs-string">&#x27;y axis&#x27;</span>)<br> <br>plt<span class="hljs-selector-class">.show</span>()<br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">vi</span> bar_chart.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>运行结果如下：</p><p><a href="http://alanhou.org/homepage/wp-content/uploads/2019/03/201903220807292.png"><img src="http://alanhou.org/homepage/wp-content/uploads/2019/03/201903220807292.png" alt="第十七章 数据收集及报表"></a></p><p>上例中，我们有两组值：x1, y1和x2, y2。在获取了数值数据之后，我们使用了plt.bar()方法来对现有数据进行了柱状图绘制。</p><p>对数据绘图有很多种技术。其中，有一些技术或数据可视化的方法使用matplotlib，我们已经看到了。我们还可以使用其它的数据可视化工具来执行这类操作：如plotly。</p><h3 id="Plotly"><a href="#Plotly" class="headerlink" title="Plotly"></a>Plotly</h3><p>Plotly是Python中的一个交互的开源图形库。这一绘图库提供了30多种图表类型，包含科学图表、3D图、数据分析图、金融图表等等。</p><p>在Python中使用plotly，首先要在系统中安装它。在Terminal中运行如下命令来安装plotly：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ pip3 <span class="hljs-keyword">install</span> plotly<br></code></pre></td></tr></table></figure><p>我们可以在线及离线使用plotly。在线使用的话需要有一个plotly账号，然后可以在Python中设置账号信息：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">plotly.tools.set_credentials_file(<span class="hljs-attribute">username</span>=<span class="hljs-string">&#x27;Username&#x27;</span>, <span class="hljs-attribute">api_key</span>=<span class="hljs-string">&#x27;APIkey&#x27;</span>)<br></code></pre></td></tr></table></figure><p>要离线使用plotly，我们应使用plotly函数：plotly.offline.plot()。</p><p>这一部分中我们将离线使用plotly。下面我们来看一个简单的示例。为此创建一个名为sample_plotly.py的脚本并在其中编写如下内容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import plotly<br>from plotly<span class="hljs-selector-class">.graph_objs</span> import Scatter, Layout<br> <br>plotly<span class="hljs-selector-class">.offline</span><span class="hljs-selector-class">.plot</span>(&#123;<br>    <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-selector-attr">[Scatter(x=[1, 4, 3, 4]</span>, y=<span class="hljs-selector-attr">[4, 3, 2, 1]</span>)],<br>    <span class="hljs-string">&quot;layout&quot;</span>: <span class="hljs-built_in">Layout</span>(title=<span class="hljs-string">&quot;plotly_sample_plot&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>运行以上脚本sample_plotly.py如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> sample_plotly.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>我们将得到如下结果：</p><p><a href="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019032208412087.png"><img src="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019032208412087.png" alt="第十七章 数据收集及报表"></a></p><p>上例中，我们导入了plotly模块，然后设置了离线使用plotly。在其中传入了参数来进行绘图。在例子中，我们使用了一些参数：data和layout。在data参数中，我们为scatter函数定义了数组x和y，来使用值分别在x轴和y轴上绘图。然后我们使用了layout参数，在其中定义了layout函数来传入了图形的标题。以上程序执行的输出被保存为HTML文件，并在默认浏览器中打开。这一HTML文件和我们的脚本在同一目录。</p><p>下面我们来看一些可视化数据的不同类型的图表。首先从散点图开始。</p><h4 id="散点图-1"><a href="#散点图-1" class="headerlink" title="散点图"></a>散点图</h4><p>创建一个名为scatter_plot_plotly.py的脚本并在其中编写如下的内容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import plotly<br>import plotly<span class="hljs-selector-class">.graph_objs</span> as go<br>import numpy as np<br> <br>x_axis = np<span class="hljs-selector-class">.random</span><span class="hljs-selector-class">.randn</span>(<span class="hljs-number">100</span>)<br>y_axis = np<span class="hljs-selector-class">.random</span><span class="hljs-selector-class">.randn</span>(<span class="hljs-number">100</span>)<br> <br>trace = go<span class="hljs-selector-class">.Scatter</span>(x=x_axis, y=y_axis, mode=<span class="hljs-string">&#x27;markers&#x27;</span>)<br>data_set = <span class="hljs-selector-attr">[trace]</span><br>plotly<span class="hljs-selector-class">.offline</span><span class="hljs-selector-class">.plot</span>(data_set, filename=<span class="hljs-string">&#x27;scatter_plot.html&#x27;</span>)<br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">python3</span> scatter_plot_plotly.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>我们将得到如下输出：</p><p><a href="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019032209341778.png"><img src="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019032209341778.png" alt="第十七章 数据收集及报表"></a></p><p>上例中，我们导入了plotly，然后使用numpy创建了随机数据，因此在脚本中导入了numpy模块。在生成数据集后，我们创建了一个名为trace的对象并将数值数据插入该对象来绘制散点图。最后，我们将trace对象中的数据放到plotly.offline.plot()函数中，来获取数据的散点图。和第一个示例图一样，这个示例的输出也以HTML格式保存并在默认的浏览器中显示。</p><h4 id="线状散点图"><a href="#线状散点图" class="headerlink" title="线状散点图"></a>线状散点图</h4><p>我们还可以创建信息量列大的绘图，如线状散点图。下面来看一个示例。创建一个名为line_scatter_plot.py 的脚本并在其中编写如下内容：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import plotly<br>import plotly.graph_objs as go<br>import numpy as np<br> <br>x_axis = np.linspace(0, 1, 50)<br>y0_axis = np.random.randn(50)+5<br>y1_axis = np.random.randn(50)<br>y2_axis = np.random.randn(50)-5<br> <br>trace0 = go.Scatter(<span class="hljs-attribute">x</span>=x_axis, <span class="hljs-attribute">y</span>=y0_axis, <span class="hljs-attribute">mode</span>=<span class="hljs-string">&#x27;markers&#x27;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;markers&#x27;</span>)<br>trace1 = go.Scatter(<span class="hljs-attribute">x</span>=x_axis, <span class="hljs-attribute">y</span>=y1_axis, <span class="hljs-attribute">mode</span>=<span class="hljs-string">&#x27;lines+markers&#x27;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;line+markers&#x27;</span>)<br>trace2 = go.Scatter(<span class="hljs-attribute">x</span>=x_axis, <span class="hljs-attribute">y</span>=y2_axis, <span class="hljs-attribute">mode</span>=<span class="hljs-string">&#x27;lines&#x27;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;lines&#x27;</span>)<br> <br>data_sets = [trace0, trace1, trace2]<br>plotly.offline.plot(data_sets, <span class="hljs-attribute">filename</span>=<span class="hljs-string">&#x27;line_scatter_plot.hmtl&#x27;</span>)<br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">python3</span> line_scatter_plot.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>我们将得到如下输出：</p><p><a href="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019032214451257.png"><img src="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019032214451257.png" alt="第十七章 数据收集及报表"></a></p><p>上例中，我们导入了plotly以及numpy模块。然后为x轴以及三个不同的y轴生成了一些随机值。然后，我们将该数据放到了创建的trace对象中，最后将数据集放入plotly的离线函数中。接着我们获取了散点及线状格式的输出。该示例的输出被保存到当前目录的line_scatter_plot.html文件中。</p><h4 id="箱形图"><a href="#箱形图" class="headerlink" title="箱形图"></a>箱形图</h4><p>箱形图有益于传递信息量，尤其是在数据很少又想显示很多时，我们来看一个示例。创建一个名为plotly_box_plot.py的脚本并在其中编写如下内容：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sqf">import <span class="hljs-built_in">random</span>, plotly<br><span class="hljs-keyword">from</span> numpy import *<br> <br>N = <span class="hljs-number">50</span><br>c = [<span class="hljs-string">&#x27;hsl(&#x27;</span>+<span class="hljs-built_in">str</span>(h)+<span class="hljs-string">&#x27;,50%&#x27;</span>+<span class="hljs-string">&#x27;,50%)&#x27;</span> <span class="hljs-keyword">for</span> h <span class="hljs-built_in">in</span> linspace(<span class="hljs-number">0</span>, <span class="hljs-number">360</span>, N)]<br>data_set = [&#123;<br>    <span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-number">3.5</span>*<span class="hljs-built_in">sin</span>(<span class="hljs-literal">pi</span>*i/N) + i/N + (<span class="hljs-number">1.5</span>+<span class="hljs-number">0.5</span>*<span class="hljs-built_in">cos</span>(<span class="hljs-literal">pi</span>*i/N))*<span class="hljs-built_in">random</span>.rand(<span class="hljs-number">20</span>),<br>    <span class="hljs-string">&#x27;type&#x27;</span>:<span class="hljs-string">&#x27;box&#x27;</span>,<br>    <span class="hljs-string">&#x27;marker&#x27;</span>:&#123;<span class="hljs-string">&#x27;color&#x27;</span>: c[i]&#125;<br>    &#125; <span class="hljs-keyword">for</span> i <span class="hljs-built_in">in</span> range(int(N))]<br>layout = &#123;<span class="hljs-string">&#x27;xaxis&#x27;</span>: &#123;<span class="hljs-string">&#x27;showgrid&#x27;</span>:<span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;zeroline&#x27;</span>:<span class="hljs-literal">False</span>,<br>    <span class="hljs-string">&#x27;tickangle&#x27;</span>:<span class="hljs-number">45</span>, <span class="hljs-string">&#x27;showticklabels&#x27;</span>:<span class="hljs-literal">False</span>&#125;,<br>    <span class="hljs-string">&#x27;yaxis&#x27;</span>: &#123;<span class="hljs-string">&#x27;zeroline&#x27;</span>:<span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;gridcolor&#x27;</span>:<span class="hljs-string">&#x27;white&#x27;</span>&#125;,<br>    <span class="hljs-string">&#x27;paper_bgcolor&#x27;</span>: <span class="hljs-string">&#x27;rgb(233,233,233)&#x27;</span>,<br>    <span class="hljs-string">&#x27;plot_bgcolor&#x27;</span>:<span class="hljs-string">&#x27;rgb(233,233,233)&#x27;</span>,<br>    &#125;<br> <br>plotly.offline.plot(data_set)<br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">python3</span> plotly_box_plot.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>得到的结果如下：</p><p><a href="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019032215045165.png"><img src="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019032215045165.png" alt="第十七章 数据收集及报表"></a></p><p>上例中，我们导入了plotly以及numpy模块。然后我们声明了箱体内的总箱体数N，并通过调整HSL展示的饱和度和亮度以及在色调的变化生成了一组彩虹色。每个箱体由包含数据、类型和颜色的字典来体现。我们使用了列表推导式来描述N个箱体，每个箱体的颜色不同并带有随机生成的数据。接着我们格式化了输出的布局并通过离线plotly函数对数据绘图。</p><h4 id="等高线图"><a href="#等高线图" class="headerlink" title="等高线图"></a>等高线图</h4><p>等高线图是科学绘图时最常用的，也在显示热力图数据时经常使用。我们来看一个等高线图的示例。创建一个名为contour_plotly.py的脚本并在其中编写如下内容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs stylus"> from plotly import tools<br>import plotly<br>import plotly<span class="hljs-selector-class">.graph_objs</span> as go<br> <br>trace0 = go<span class="hljs-selector-class">.Contour</span>(<br>    z=<span class="hljs-selector-attr">[[1, 2, 3, 4, 5, 6, 7, 8]</span>,<br>    <span class="hljs-selector-attr">[2, 4, 7, 12, 13, 14, 15, 16]</span>,<br>    <span class="hljs-selector-attr">[3, 1, 6, 11, 12, 13, 16, 17]</span>,<br>    <span class="hljs-selector-attr">[4, 2, 7, 7, 11, 14, 17, 18]</span>,<br>    <span class="hljs-selector-attr">[5, 3, 8, 8, 13, 15, 18, 19]</span>,<br>    <span class="hljs-selector-attr">[7, 4, 10, 9, 16, 18, 20, 19]</span>,<br>    <span class="hljs-selector-attr">[9, 10, 5, 27, 23, 21, 21, 21]</span>],<br>    line=<span class="hljs-built_in">dict</span>(smoothing=<span class="hljs-number">0</span>),<br>)<br>trace1 = go<span class="hljs-selector-class">.Contour</span>(<br>    z=<span class="hljs-selector-attr">[[1, 2, 3, 4, 5, 6, 7, 8]</span>,<br>    <span class="hljs-selector-attr">[2, 4, 7, 12, 13, 14, 15, 16]</span>,<br>    <span class="hljs-selector-attr">[3, 1, 6, 11, 12, 13, 16, 17]</span>,<br>    <span class="hljs-selector-attr">[4, 2, 7, 7, 11, 14, 17, 18]</span>,<br>    <span class="hljs-selector-attr">[5, 3, 8, 8, 13, 15, 18, 19]</span>,<br>    <span class="hljs-selector-attr">[7, 4, 10, 9, 16, 18, 20, 19]</span>,<br>    <span class="hljs-selector-attr">[9, 10, 5, 27, 23, 21, 21, 21]</span>],<br>    line=<span class="hljs-built_in">dict</span>(smoothing=<span class="hljs-number">0.95</span>),<br>)<br>data = tools<span class="hljs-selector-class">.make_subplots</span>(rows=<span class="hljs-number">1</span>, cols=<span class="hljs-number">2</span>,<br>    subplot_titles=(<span class="hljs-string">&#x27;Smoothing_not_applied&#x27;</span>,<br>    <span class="hljs-string">&#x27;smoothing_applied&#x27;</span>))<br>data<span class="hljs-selector-class">.append_trace</span>(trace0, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>data<span class="hljs-selector-class">.append_trace</span>(trace1, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br> <br>plotly<span class="hljs-selector-class">.offline</span><span class="hljs-selector-class">.plot</span>(data)<br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ python3 contour_plotly<span class="hljs-selector-class">.py</span><br>This is the format of your plot <span class="hljs-attribute">grid</span>:<br><span class="hljs-selector-attr">[ (1,1) x1,y1 ]</span>  <span class="hljs-selector-attr">[ (1,2) x2,y2 ]</span><br></code></pre></td></tr></table></figure><p>我们将得到如下输出：</p><p><a href="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019032215325922.png"><img src="http://alanhou.org/homepage/wp-content/uploads/2019/03/2019032215325922.png" alt="第十七章 数据收集及报表"></a>上例中，我们传入了数据集并对其应用了contour()函数。然后我将等高线数据添加到了data_set中，最后对数据应用了plotly函数来获取输出。这些是plotly中以可视化方式绘制数据的一些技术。</p><h2 id="总结-16"><a href="#总结-16" class="headerlink" title="总结"></a>总结</h2><p>本章中，我们学习了NumPy 和Pandas模块，以及数据可视化技术。在NumPy模块一节，我们学习了对数组索引和切片，以及通用数组函数。在pandas模块一节中，我们学习了序列和数据帧。我们还学习了如何将csv文件读取到数据帧中。对于数据可视化，我们学习了Python中用于数据可视化的库：matplotlib和plotly。</p><p>下一章中，我们将学习MySQL和SQLite数据库管理。</p><h2 id="课后问题-15"><a href="#课后问题-15" class="headerlink" title="课后问题"></a>课后问题</h2><ol><li><p>什么是NumPy数组？</p></li><li><p>以下代码片断的输出是什么？</p><table><thead><tr><th>123456789</th><th>import numpy as np# input arrayin_arr1 &#x3D; np.array([[ 1, 2, 3], [ -1, -2, -3]] )print (“1st Input array : \n”, in_arr1)in_arr2 &#x3D; np.array([[ 4, 5, 6], [ -4, -5, -6]] )print (“2nd Input array : \n”, in_arr2)# Stacking the two arrays horizontallyout_arr &#x3D; np.hstack((in_arr1, in_arr2))print (“Output stacked array :\n “, out_arr)</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table></li><li><p>如何以比np.sum更快速的方式对小数组求和？</p></li><li><p>如何从Pandas数据帧删除索引、行或列？</p></li><li><p>如何将Pandas数据帧写入到文件中？</p></li><li><p>Pandas中的NaN是什么？</p></li><li><p>如何从Pandas数据帧中删除重复内容？</p></li><li><p>如何改变Matplotlib中绘制的图形的大小？</p></li><li><p>使用Python绘图的替代方案有哪些？</p></li></ol><h2 id="扩展阅读-14"><a href="#扩展阅读-14" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul><li>10分钟pandas文档：<a href="http://pandas.pydata.org/pandas-docs/stable/">http://pandas.pydata.org/pandas-docs/stable/</a></li><li>NumPy教程: <a href="https://docs.scipy.org/doc/numpy/user/quickstart.html">https://docs.scipy.org/doc/numpy/user/quickstart.html</a></li><li>使用plotly绘图：<a href="https://plot.ly/d3-js-for-python-and-pandas-charts/">https://plot.ly/d3-js-for-python-and-pandas-charts/</a></li></ul><h1 id="第十八章-MySQL和SQLite数据库管理"><a href="#第十八章-MySQL和SQLite数据库管理" class="headerlink" title="第十八章 MySQL和SQLite数据库管理"></a>第十八章 MySQL和SQLite数据库管理</h1><p>本章中我们将学习MySQL和SQLite数据库管理。我们会安装MySQL和SQLite。我们还将学习如何 创建用户、授权、创建数据库、创建数据表、向表中插入数据以及从指定表记录中查看所有记录、更新和删除数据。</p><p>本章中我们将学习如下内容：</p><ul><li>MySQL数据库管理</li><li>SQLite数据库管理</li></ul><h2 id="MySQL数据库管理"><a href="#MySQL数据库管理" class="headerlink" title="MySQL数据库管理"></a>MySQL数据库管理</h2><p>这一部分将涵盖使用Python管理MySQL数据库的知识。我们已知Python有各种管理MySQL数据库的模块。这里我们将学习MySQLdb模块。MySQLdb模块是一个MySQL数据库的接口，用于提供Python数据库API。</p><p>我们来学习如何安装MySQL以及Python的MySQLdb包。为此在Terminal中运行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo apt install mysql-server<br></code></pre></td></tr></table></figure><p>这一命令安装MySQL服务及其它各个包。在安装包时，会弹出让我们输入MySQL的root账号密码：</p><ul><li><p>以下命令用于查看是否存在 mysqldb包来供安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ apt-cache search MySQLdb<br><span class="hljs-comment"># 译者注：安装如下包，否则后续安装可能会报OSError: mysql_config not found</span><br>sudo apt-get install libmysqlclient-dev<br></code></pre></td></tr></table></figure></li><li><p>运行如下命令来安装Python的MySQL接口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo apt-get install python3-mysqldb<br><span class="hljs-comment"># 译者注：MySQLdb对Python3的支持有些变化，请使用如下方式安装即可导入MySQLdb了</span><br>sudo pip3 install mysqlclient<br><span class="hljs-comment"># 也可使用 pymysql，此时应为import pymysql</span><br>sudo pip3 install pymysql<br></code></pre></td></tr></table></figure></li><li><p>下面我们将查看是否正确地安装了MySQL，在终端中运行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo mysql -u root -p<br></code></pre></td></tr></table></figure><p>运行以上命令，我们将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">Enter password:<br>  Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection <span class="hljs-built_in">id</span> is 4<br>  Server version: 5.7.25-0ubuntu0.16.04.2 (Ubuntu)<br> <br>  Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.<br> <br>  Oracle is a registered trademark of Oracle Corporation and/or its<br>  affiliates. Other names may be trademarks of their respective<br>  owners.<br> <br>  Type <span class="hljs-string">&#x27;help;&#x27;</span> or <span class="hljs-string">&#x27;\h&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>. Type <span class="hljs-string">&#x27;\c&#x27;</span> to clear the current input statement.<br> <br>  mysql&gt;<br></code></pre></td></tr></table></figure></li></ul><p>通过运行sudo mysql -u root -p，我们将进入MySQL控制台。有一些命令可用于列出数据库和数据表，以及使用数据库来存储我们的内容。我们将逐一来看这些命令：</p><ul><li><p>以下为列出所有数据库的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show databases;<br></code></pre></td></tr></table></figure></li><li><p>以下为使用数据库的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">use database_name;<br></code></pre></td></tr></table></figure><p>一旦退出了MySQL控制台并在之后重新登入，我们应再次使用use database_name;ygqk语句。使用该命令的目的在于将内容保存到我们自己的数据库中。可通过以下的示例来清晰地理解这一问题：</p></li><li><p>以下命令可列出所有的数据表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show tables;<br></code></pre></td></tr></table></figure></li></ul><p>这些就是我们用于列出数据库、使用数据库以及列出数据表的命令。</p><p>下面，我们将使用create database语句在MySQL终端中创建一个数据库。使用mysql -u root -p命令并输入密码来打开MySQL终端，密码为我们安装时所设置的。然后创建我们自己的数据库。这一部分中，我们将创建一个名为test的数据库并在整个部分中使用该数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs mysql">$ mysql -uroot -p<br>Enter password:<br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 5<br>Server version: 5.7.25-0ubuntu0.16.04.2 (Ubuntu)<br> <br>Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.<br> <br>Oracle is a registered trademark of Oracle Corporation and/or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br> <br>Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.<br> <br>mysql&gt; show databases;<br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+--------------------+<br>4 rows in set (0.00 sec)<br> <br>mysql&gt; create database test;<br>Query OK, 1 row affected (0.00 sec)<br> <br>mysql&gt; show databases;<br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>| test               |<br>+--------------------+<br>5 rows in set (0.01 sec)<br> <br>mysql&gt; use test;<br>Database changed<br>mysql&gt;<br></code></pre></td></tr></table></figure><p>首先我们使用show databases列出了所有数据库。接着我们使用create database语句创建了数据库test。又再次运行了show databases语句来查看数据库是否成功创建。可以看到数据库已创建。下面我们使用该数据库来存储我们的内容。</p><p>下面，我们将创建一个用户并为该用户授权。运行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; create user &#x27;test_user&#x27;@&#x27;localhost&#x27; identified by &#x27;test123&#x27;;<br>Query OK, 0 rows affected (0.00 sec)<br> <br>mysql&gt; grant all on test.* to &#x27;test_user&#x27;@&#x27;localhost&#x27;;<br>Query OK, 0 rows affected (0.00 sec)<br> <br>mysql&gt;<br></code></pre></td></tr></table></figure><p>我们创建了test_user用户，该用户的密码为test123。接着我们对用户test_user进行了授权。这时我们通过在MySQL终端中quit;或exit;可退出控制台。</p><p>下面我们来看一些示例：获取取数据库版本、创建数据表、在数据表中插入数据、更新数据和删除数据。</p><h3 id="获取数据库版本"><a href="#获取数据库版本" class="headerlink" title="获取数据库版本"></a>获取数据库版本</h3><p>首先我们来看一个获取数据库版本的示例。为此创建一个脚本get_database_version.py并在其中编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> MySQLdb <span class="hljs-keyword">as</span> db<br><span class="hljs-comment"># import pymysql as db</span><br><span class="hljs-keyword">import</span> sys<br> <br>con_obj = db.connect(<span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-string">&#x27;test_user&#x27;</span>, <span class="hljs-string">&#x27;test123&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>)<br>cur_obj = con_obj.cursor()<br>cur_obj.execute(<span class="hljs-string">&#x27;SELECT VERSION()&#x27;</span>)<br>version = cur_obj.fetchone()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Database version: %s &#x27;</span> % version)<br> <br>con_obj.close()<br></code></pre></td></tr></table></figure><blockquote><p>ℹ️在运行脚本前应按照前述的步骤进行操作，否则将无法正常运行。</p></blockquote><p>运行脚本，我们将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 get_database_version.py<br><span class="hljs-comment"># 输出结果：</span><br>Database version: 5.7.25-0ubuntu0.16.04.2<br></code></pre></td></tr></table></figure><p>上例中，我们获取了数据库的版本。实现获取，我们导入了MySQLdb模块。然后编写了连接字符串。在连接字符串中，我们传入了用户名、密码和数据库名。然后创建了一个游标（cursor）对象用于执行SQL查询。在execute()中我们传入了SQL查询语句。fetchone() 获取查询结果的下一行。然后我们打印出了结果。close()方法关闭了数据库连接。</p><h3 id="创建数据表和插入数据"><a href="#创建数据表和插入数据" class="headerlink" title="创建数据表和插入数据"></a>创建数据表和插入数据</h3><p>下面我们将创建一个数据表并在其中插入数据。为此创建一个脚本create_insert_data.py并在其中编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># import MySQLdb as db</span><br><span class="hljs-keyword">import</span> pymysql <span class="hljs-keyword">as</span> db<br> <br>con_obj = db.connect(<span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-string">&#x27;test_user&#x27;</span>, <span class="hljs-string">&#x27;test123&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>)<br><span class="hljs-keyword">with</span> con_obj:<br>        cur_obj = con_obj.cursor()<br>        cur_obj.execute(<span class="hljs-string">&#x27;DROP TABLE IF EXISTS books&#x27;</span>)<br>        cur_obj.execute(<span class="hljs-string">&#x27;CREATE TABLE books(Id INT PRIMARY KEY AUTO_INCREMENT, Name VARCHAR(100))&#x27;</span>)<br>        cur_obj.execute(<span class="hljs-string">&quot;INSERT INTO books(Name) VALUES(&#x27;Harry Potter&#x27;)&quot;</span>)<br>        cur_obj.execute(<span class="hljs-string">&quot;INSERT INTO books(Name) VALUES(&#x27;Lord of the rings&#x27;)&quot;</span>)<br>        cur_obj.execute(<span class="hljs-string">&quot;INSERT INTO books(Name) VALUES(&#x27;Murder on the Orient Express&#x27;)&quot;</span>)<br>        cur_obj.execute(<span class="hljs-string">&quot;INSERT INTO books(Name) VALUES(&#x27;The adventures of Sherlock Holmes&#x27;)&quot;</span>)<br>        cur_obj.execute(<span class="hljs-string">&quot;INSERT INTO books(Name) VALUES(&#x27;Death on the Nile&#x27;)&quot;</span>)<br> <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Table Created!!&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Data inserted successfully!&#x27;</span>)<br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 create_insert_data.py<br> <br><span class="hljs-comment"># 输出结果：</span><br>Table Created!!<br>Data inserted successfully!<br></code></pre></td></tr></table></figure><p>要查看数据表是否成功创建了，打开MySQL控制台并运行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs mysql">$ mysql -uroot -p<br>Enter password:<br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 9<br>Server version: 5.7.25-0ubuntu0.16.04.2 (Ubuntu)<br> <br>Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.<br> <br>Oracle is a registered trademark of Oracle Corporation and/or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br> <br>Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.<br> <br>mysql&gt; use test;<br>Reading table information for completion of table and column names<br>You can turn off this feature to get a quicker startup with -A<br> <br>Database changed<br>mysql&gt; show tables;<br>+----------------+<br>| Tables_in_test |<br>+----------------+<br>| books          |<br>+----------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>可以看到数据表 books 已创建。</p><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><p>要从数据表获取数据，我们使用select语句。下面我们将从books数据表中获取数据。为此创建脚本retrieve_data.py并在其中编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># import MySQLdb as db</span><br><span class="hljs-keyword">import</span> pymysql <span class="hljs-keyword">as</span> db<br> <br>con_obj = db.connect(<span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-string">&#x27;test_user&#x27;</span>, <span class="hljs-string">&#x27;test123&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>)<br><span class="hljs-keyword">with</span> con_obj:<br>        cur_obj = con_obj.cursor()<br>        cur_obj.execute(<span class="hljs-string">&#x27;SELECT * FROM books&#x27;</span>)<br>        records = cur_obj.fetchall()<br>        <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> records:<br>                <span class="hljs-built_in">print</span>(r)<br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 retrieve_data.py<br><span class="hljs-comment"># 输出结果</span><br>(1, <span class="hljs-string">&#x27;Harry Potter&#x27;</span>)<br>(2, <span class="hljs-string">&#x27;Lord of the rings&#x27;</span>)<br>(3, <span class="hljs-string">&#x27;Murder on the Orient Express&#x27;</span>)<br>(4, <span class="hljs-string">&#x27;The adventures of Sherlock Holmes&#x27;</span>)<br>(5, <span class="hljs-string">&#x27;Death on the Nile&#x27;</span>)<br></code></pre></td></tr></table></figure><p>上例中，我们从数据表中获取到了数据。我们使用了MySQLdb模块。编写了一个连接字符串并创建了一个游标对象来执行SQL查询。在execute()中，我们编写了一个SQL select语名。最后，我们打印出了查询到的记录。</p><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>下面我们要对数据表中的记录做一些修改，这时可使用SQL的update语句。我们来看一个update语句的示例。为此创建一个脚本update_data.py并在其中编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># import MySQLdb as db</span><br><span class="hljs-keyword">import</span> pymysql <span class="hljs-keyword">as</span> db<br> <br>con_obj = db.connect(<span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-string">&#x27;test_user&#x27;</span>, <span class="hljs-string">&#x27;test123&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>)<br>cur_obj = con_obj.cursor()<br>cur_obj.execute(<span class="hljs-string">&#x27;UPDATE books SET Name = &quot;Fantastic Beasts&quot; WHERE Id = 1&#x27;</span>)<br><span class="hljs-keyword">try</span>:<br>        con_obj.commit()<br><span class="hljs-keyword">except</span>:<br>        con_obj.rollback()<br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 update_data.py<br></code></pre></td></tr></table></figure><p>下面来查看记录是否被更新了，运行retrieve_data.py如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 retrieve_data.py<br><span class="hljs-comment"># 输出结果：</span><br>(1, <span class="hljs-string">&#x27;Fantastic Beasts&#x27;</span>)<br>(2, <span class="hljs-string">&#x27;Lord of the rings&#x27;</span>)<br>(3, <span class="hljs-string">&#x27;Murder on the Orient Express&#x27;</span>)<br>(4, <span class="hljs-string">&#x27;The adventures of Sherlock Holmes&#x27;</span>)<br>(5, <span class="hljs-string">&#x27;Death on the Nile&#x27;</span>)<br></code></pre></td></tr></table></figure><p>可以看到ID为1的数据被更新了。上例在execute()中，我们编写了一个update语句来更新ID为1记录的数据。</p><h3 id="删除数据-1"><a href="#删除数据-1" class="headerlink" title="删除数据"></a>删除数据</h3><p>要在数据表中删除指定记录，可以使用delete语句。我们来看一个删除数据的示例。创建一个脚本delete_data.py并在其中编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># import MySQLdb as db</span><br><span class="hljs-keyword">import</span> pymysql <span class="hljs-keyword">as</span> db<br> <br>con_obj = db.connect(<span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-string">&#x27;test_user&#x27;</span>, <span class="hljs-string">&#x27;test123&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>)<br>cur_obj = con_obj.cursor()<br>cur_obj.execute(<span class="hljs-string">&#x27;DELETE FROM books WHERE Id = 5&#x27;</span>)<br><span class="hljs-keyword">try</span>:<br>        con_obj.commit()<br><span class="hljs-keyword">except</span>:<br>        con_obj.rollback()<br></code></pre></td></tr></table></figure><p>运行脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 delete_data.py<br></code></pre></td></tr></table></figure><p>下面查看记录是否成功删除，运行retrieve_data.py脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 retrieve_data.py<br><span class="hljs-comment"># 输出结果：</span><br>(1, <span class="hljs-string">&#x27;Fantastic Beasts&#x27;</span>)<br>(2, <span class="hljs-string">&#x27;Lord of the rings&#x27;</span>)<br>(3, <span class="hljs-string">&#x27;Murder on the Orient Express&#x27;</span>)<br>(4, <span class="hljs-string">&#x27;The adventures of Sherlock Holmes&#x27;</span>)<br></code></pre></td></tr></table></figure><p>我们可以看到记录中ID为5的数据已删除。上例中，我们使用了delete语句来删除指定记录。这里我们删除了ID为5的记录。我们还可以根据其它所选的字段名来删除记录。</p><h2 id="SQLite数据库管理"><a href="#SQLite数据库管理" class="headerlink" title="SQLite数据库管理"></a>SQLite数据库管理</h2><p>这一部分中，我们将学习如何安装和使用SQLite。Python中有一个sqlite3模块来执行SQLite数据库相关任务。SQLite是一个无服务端、零配置的事务性SQL数据库引擎。SQLite非常快速且轻量。整个数据库存储在单个磁盘文件中。</p><p>下面我们首先安装SQLite。在终端中运行如下命令：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ sudo apt <span class="hljs-keyword">install</span> sqlite3<br></code></pre></td></tr></table></figure><p>这一部分中，我们将学习如下操作：创建数据库、创建数据表、在数据表中插入数据、获取数据、从数据表中更新和删除数据。我们将逐一来看各个操作。</p><p>首先我们将来看如何在SQLite中创建数据库。要创建数据库，我们仅需在终端中写入如下命令：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">$ sqlite3 <span class="hljs-keyword">test</span>.<span class="hljs-keyword">db</span><br></code></pre></td></tr></table></figure><p>在运行这一命令后，将会在终端中打开sqlite控制台如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sqlite">$ sqlite3 test.db<br>SQLite version 3.11.0 2016-02-15 17:29:24<br>Enter &quot;.help&quot; for usage hints.<br>sqlite&gt;<br></code></pre></td></tr></table></figure><p>于是我们仅仅通过运行sqlite3 test.db就创建了数据库。</p><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p>下面我们来看如何连接数据库。为此我们将创建一个脚本。Python的标准库中已经包含了sqlite3模块。我们只需在要操作SQLite时导入该模块就可以了。创建一个脚本connect_database.py并在其中编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sqlite3<br> <br>con_obj = sqlite3.connect(<span class="hljs-string">&#x27;test.db&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Database connected successfully!!&#x27;</span>)<br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python connect_database.py<br> <br><span class="hljs-comment"># 输出结果：</span><br>Database connected successfully!!<br></code></pre></td></tr></table></figure><p>上例中，我们导入了sqlite3模块来执行相关功能。此时查看所在目录，就会看到其中创建了test.db文件。</p><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><p>下面我们来数据库中创建数据表。为此创建一个脚本create_table.py并在其中编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sqlite3<br> <br>con_obj = sqlite3.connect(<span class="hljs-string">&#x27;test.db&#x27;</span>)<br><span class="hljs-keyword">with</span> con_obj:<br>    cur_obj = con_obj.cursor()<br>    cur_obj.execute(<span class="hljs-string">&quot;&quot;&quot;CREATE TABLE books(title text, author text)&quot;&quot;&quot;</span>)<br> <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Table created&#x27;</span>)<br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> python3 create_table.py<br><span class="hljs-keyword">Table</span> created<br></code></pre></td></tr></table></figure><p>上例中我们使用CREATE TABLE语句创建了数据表books。首先，我们使用test.db建立了数据库连接。然后，我们创建一个游标对象用于对数据库执行SQL查询。</p><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>下面我们将在数据表中插入数据。为此创建一个脚本insert_data.py并在其中编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sqlite3<br> <br>con_obj = sqlite3.connect(<span class="hljs-string">&#x27;test.db&#x27;</span>)<br><span class="hljs-keyword">with</span> con_obj:<br>    cur_obj = con_obj.cursor()<br>    cur_obj.execute(<span class="hljs-string">&quot;INSERT INTO books VALUES (&#x27;Pride and Prejudice&#x27;, &#x27;Jane Austen&#x27;)&quot;</span>)<br>    cur_obj.execute(<span class="hljs-string">&quot;INSERT INTO books VALUES (&#x27;Harry Potter&#x27;, &#x27;J.K Rowling&#x27;)&quot;</span>)<br>    cur_obj.execute(<span class="hljs-string">&quot;INSERT INTO books VALUES (&#x27;The Lord of the Rings&#x27;, &#x27;J. R. R. Tolkien&#x27;)&quot;</span>)<br>    cur_obj.execute(<span class="hljs-string">&quot;INSERT INTO books VALUES (&#x27;Murder on the Orient Express&#x27;, &#x27;Agatha Christie&#x27;)&quot;</span>)<br>    cur_obj.execute(<span class="hljs-string">&quot;INSERT INTO books VALUES (&#x27;A Study in Scarlet&#x27;, &#x27;Arthur Conan Doyle&#x27;)&quot;</span>)<br>    con_obj.commit()<br> <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Data inserted successfully!!&#x27;</span>)<br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python insert_data.py<br><span class="hljs-comment"># 输出结果：</span><br>Data inserted successfully!!<br></code></pre></td></tr></table></figure><p>上例中我们在数据表中插入了一些数据。为此我们在SQL语句中使用了insert。通过使用commit()，我们告诉数据库保存所有的当前事务。</p><h3 id="获取数据-1"><a href="#获取数据-1" class="headerlink" title="获取数据"></a>获取数据</h3><p>下面我们将从数据表中获取数据。为此创建一个脚本retrieve_sqlite_data.py并在其中编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sqlite3<br> <br>con_obj = sqlite3.connect(<span class="hljs-string">&#x27;test.db&#x27;</span>)<br>cur_obj = con_obj.execute(<span class="hljs-string">&#x27;SELECT title, author FROM books&#x27;</span>)<br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> cur_obj:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Title = &#x27;</span>, row[<span class="hljs-number">0</span>])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Author = &#x27;</span>, row[<span class="hljs-number">1</span>], <span class="hljs-string">&#x27;\n&#x27;</span>)<br> <br>con_obj.close()<br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 retrieve_sqlite_data.py<br><span class="hljs-comment"># 输出结果：</span><br>Title =  Pride and Prejudice<br>Author =  Jane Austen<br> <br>Title =  Harry Potter<br>Author =  J.K Rowling<br> <br>Title =  The Lord of the Rings<br>Author =  J. R. R. Tolkien<br> <br>Title =  Murder on the Orient Express<br>Author =  Agatha Christie<br> <br>Title =  A Study <span class="hljs-keyword">in</span> Scarlet<br>Author =  Arthur Conan Doyle<br></code></pre></td></tr></table></figure><p>上例中，我们导入了sqlite3模块。然后我们连接了test.db数据库。我们使用了select来获取数据。最后，我们打印出了所获取的数据。</p><p>我们也可以在sqlite3控制台中获取数据。首先启动SQLite终端并随后获取数据如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sqlite">$ sqlite3 test.db<br>SQLite version 3.7.17 2013-05-20 00:56:22<br>Enter &quot;.help&quot; for instructions<br>Enter SQL statements terminated with a &quot;;&quot;<br>sqlite&gt; select * from books;<br>Pride and Prejudice|Jane Austen<br>Harry Potter|J.K Rowling<br>The Lord of the Rings|J. R. R. Tolkien<br>Murder on the Orient Express|Agatha Christie<br>A Study in Scarlet|Arthur Conan Doyle<br>sqlite&gt;<br></code></pre></td></tr></table></figure><h3 id="更新数据-1"><a href="#更新数据-1" class="headerlink" title="更新数据"></a>更新数据</h3><p>可以使用update语句来更新数据表中的数据。下面我们来看一个更新数据的示例。为此创建一个脚本update_sqlite_data.py并在其中编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sqlite3<br> <br>con_obj = sqlite3.connect(<span class="hljs-string">&#x27;test.db&#x27;</span>)<br><span class="hljs-keyword">with</span> con_obj:<br>    cur_obj = con_obj.cursor()<br>    sql = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        UPDATE books</span><br><span class="hljs-string">        SET author = &#x27;John Smith&#x27;</span><br><span class="hljs-string">        WHERE author = &#x27;J.K Rowling&#x27;</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    cur_obj.execute(sql)<br> <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Data updated successfully!!&#x27;</span>)<br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> python3 update_sqlite_data.py<br><span class="hljs-comment"># 输出结果：</span><br><span class="hljs-keyword">Data</span> updated successfully!!<br></code></pre></td></tr></table></figure><p>这时要检查是否更新了数据，可以运行retrieve_sqlite_data.py或者进行SQLite控制台并运行select * from books;。我们将得到更新后的输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sqlite"># 运行retrieve_sqlite_data.py脚本的输出结果如下：<br>$ python3 retrieve_sqlite_data.py<br>Title =  Pride and Prejudice<br>Author =  Jane Austen<br> <br>Title =  Harry Potter<br>Author =  John Smith<br> <br>Title =  The Lord of the Rings<br>Author =  J. R. R. Tolkien<br> <br>Title =  Murder on the Orient Express<br>Author =  Agatha Christie<br> <br>Title =  A Study in Scarlet<br>Author =  Arthur Conan Doyle<br> <br># 在SQLite的终端中查看：<br> <br>$ sqlite3 test.db<br>SQLite version 3.7.17 2013-05-20 00:56:22<br>Enter &quot;.help&quot; for instructions<br>Enter SQL statements terminated with a &quot;;&quot;<br>sqlite&gt; select * from books;<br>Pride and Prejudice|Jane Austen<br>Harry Potter|John Smith<br>The Lord of the Rings|J. R. R. Tolkien<br>Murder on the Orient Express|Agatha Christie<br>A Study in Scarlet|Arthur Conan Doyle<br>sqlite&gt;<br></code></pre></td></tr></table></figure><h3 id="删除数据-2"><a href="#删除数据-2" class="headerlink" title="删除数据"></a>删除数据</h3><p>下面我们来看一个从数据表中删除数据的示例。我们将使用delete语句来进行实现。创建一个脚本delete_sqlite_data.py并在其中编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sqlite3<br> <br>con_obj = sqlite3.connect(<span class="hljs-string">&#x27;test.db&#x27;</span>)<br><span class="hljs-keyword">with</span> con_obj:<br>    cur_obj = con_obj.cursor()<br>    sql = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        DELETE FROM books</span><br><span class="hljs-string">        WHERE author = &#x27;John Smith&#x27;</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    cur_obj.execute(sql)<br> <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Data deleted successfully!!&#x27;</span>)<br></code></pre></td></tr></table></figure><p>运行脚本，我们将得到如下输出：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> python3 delete_sqlite_data.py<br><span class="hljs-comment"># 输出结果：</span><br><span class="hljs-keyword">Data</span> deleted successfully!!<br></code></pre></td></tr></table></figure><p>上例中，我们从数据表中删除了一条记录。我们使用了SQL中的delete语句。下面来查看数据是否删除成功，可运行retrieve_sqlite_data.py或在SQLite终端中启动如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 通过运行retrieve_sqlite_data.py后的输出结果：</span><br> <br>$ python3 retrieve_sqlite_data.py<br>Title =  Pride and Prejudice<br>Author =  Jane Austen<br> <br>Title =  The Lord of the Rings<br>Author =  J. R. R. Tolkien<br> <br>Title =  Murder on the Orient Express<br>Author =  Agatha Christie<br> <br>Title =  A Study <span class="hljs-keyword">in</span> Scarlet<br>Author =  Arthur Conan Doyle<br></code></pre></td></tr></table></figure><p>可以看到作者为 John Smith 的记录被删除了。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs coq"># 在SQLite终端中查看：<br> <br>$ sqlite3 test.db<br>SQLite version <span class="hljs-number">3.7</span><span class="hljs-number">.17</span> <span class="hljs-number">2013</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">56</span>:<span class="hljs-number">22</span><br>Enter <span class="hljs-string">&quot;.help&quot;</span> <span class="hljs-keyword">for</span> instructions<br>Enter SQL statements terminated <span class="hljs-built_in">with</span> a <span class="hljs-string">&quot;;&quot;</span><br>sqlite&gt; select * from books;<br>Pride and Prejudice|<span class="hljs-type">Jane</span> Austen<br>The Lord of the <span class="hljs-keyword">Rings</span>|<span class="hljs-type">J</span>. R. R. Tolkien<br>Murder on the Orient Express|<span class="hljs-type">Agatha</span> Christie<br>A Study <span class="hljs-built_in">in</span> Scarlet|<span class="hljs-type">Arthur</span> Conan Doyle<br></code></pre></td></tr></table></figure><h2 id="总结-17"><a href="#总结-17" class="headerlink" title="总结"></a>总结</h2><p>本章中，我们学习对MySQL和SQLite数据库的管理。我们创建了数据库及数据表。然后在数据表中插入了几条记录。使用select语句我们获取到了记录。我们还学习了更新和删除数据。</p><h2 id="课后问题-16"><a href="#课后问题-16" class="headerlink" title="课后问题"></a>课后问题</h2><ol><li>数据库的作用是什么？</li><li>数据库中的CRUD是什么？</li><li>我们是否可以远程连接数据库？若可以，请用示例进行说明。</li><li>是否可在Python代码内编写触发器和存储过程？</li><li>DML和DDL语句是什么？</li></ol><h2 id="扩展阅读-15"><a href="#扩展阅读-15" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul><li>使用PyMySQL库: <a href="http://zetcode.com/python/pymysql/">http://zetcode.com/python/pymysql/</a></li><li>MySQLdb, Python连接指南: <a href="https://mysqlclient.readthedocs.io/">https://mysqlclient.readthedocs.io/</a></li><li>SQLite数据库的DB-API 2.0接口: <a href="https://docs.python.org/3/library/sqlite3.html">https://docs.python.org/3/library/sqlite3.html</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker中使用f37x</title>
    <link href="/2022/07/12/docker%E4%B8%AD%E4%BD%BF%E7%94%A8f37x/"/>
    <url>/2022/07/12/docker%E4%B8%AD%E4%BD%BF%E7%94%A8f37x/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="docker中使用f37x"><a href="#docker中使用f37x" class="headerlink" title="docker中使用f37x"></a>docker中使用f37x</h1><p>目前在docker中使用f37x存在两种场景：1）单机docker环境 2）由K8s管理的集群docker环境。</p><p>​     </p><p>  针对场景1）单机docker环境使用F37X，需要把F37X设备节点透传到Docker中。</p><p>​     具体要求：</p><p>1） 首先主机设备已成功安装F37X的驱动文件，此时在主机系统&#x2F;dev目录下会创建出如下设备节点</p><p>&#x2F;dev</p><p>- dri</p><p>​     - card0</p><p>​     - renderD128</p><p>- xclmgmt42496</p><p>- xfpga</p><p>- xvc_pri.m0</p><p>- xvc_pub.u0</p><p>​         Note: 其中128、42496等为随机生成数字，须视本地情况调整</p><p>​     2) 运行docker容器时，添加如下参数 - - device &#x2F;dev&#x2F;dri&#x2F;renderD128  - - device &#x2F;dev&#x2F;xvc_pub.u0，即可把F37X 设备透传到Docker中被使用。</p><p>​     Example:</p><p>​         Docker run –it  - - device &#x2F;dev&#x2F;dri&#x2F;renderD128  - - device &#x2F;dev&#x2F;xvc_pub.u0 <container-image> &#x2F;bin&#x2F;bash</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker 打印出来的日志与服务器时间不一致</title>
    <link href="/2022/07/12/docker%20%E6%89%93%E5%8D%B0%E5%87%BA%E6%9D%A5%E7%9A%84%E6%97%A5%E5%BF%97%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%B6%E9%97%B4%E4%B8%8D%E4%B8%80%E8%87%B4/"/>
    <url>/2022/07/12/docker%20%E6%89%93%E5%8D%B0%E5%87%BA%E6%9D%A5%E7%9A%84%E6%97%A5%E5%BF%97%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%B6%E9%97%B4%E4%B8%8D%E4%B8%80%E8%87%B4/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="docker-打印出来的日志与服务器时间不一致"><a href="#docker-打印出来的日志与服务器时间不一致" class="headerlink" title="docker 打印出来的日志与服务器时间不一致"></a>docker 打印出来的日志与服务器时间不一致</h1><p>docker 打印出来的日志与服务器时间不一致</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS41MWN0by5jb20vaW1hZ2VzLzIwMTgxMjIxLzE1NDUzODIzMzYyNjA4NTIucG5n?x-oss-process=image/format,png" alt="image.png"></p><p>docker的时间与宿主机是一致的</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS41MWN0by5jb20vaW1hZ2VzLzIwMTgxMjIxLzE1NDUzODI0Mjg5ODI4ODQucG5n?x-oss-process=image/format,png" alt="image.png"></p><p>解决方法</p><p>进入dokcer内后，执行以下操作：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">ln -sf <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/zoneinfo/</span>Asia<span class="hljs-regexp">/Shanghai /</span>etc/localtime<br>echo <span class="hljs-string">&quot;Asia/Shanghai&quot;</span> &gt; <span class="hljs-regexp">/etc/</span>timezone<br></code></pre></td></tr></table></figure><p>查看日志就与宿主机的时间对上了</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS41MWN0by5jb20vaW1hZ2VzLzIwMTgxMjIxLzE1NDUzODI1MTc3NzU3MDcucG5n?x-oss-process=image/format,png" alt="image.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker-Compose 搭建 Confluence(最新版) Wiki 环境</title>
    <link href="/2022/07/12/Docker-Compose%20%E6%90%AD%E5%BB%BA%20Confluence(%E6%9C%80%E6%96%B0%E7%89%88)%20Wiki%20%E7%8E%AF%E5%A2%83/"/>
    <url>/2022/07/12/Docker-Compose%20%E6%90%AD%E5%BB%BA%20Confluence(%E6%9C%80%E6%96%B0%E7%89%88)%20Wiki%20%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="Docker-Compose-搭建-Confluence-最新版-Wiki-环境"><a href="#Docker-Compose-搭建-Confluence-最新版-Wiki-环境" class="headerlink" title="Docker-Compose 搭建 Confluence(最新版) Wiki 环境"></a>Docker-Compose 搭建 Confluence(最新版) Wiki 环境</h1><h1 id="1、Docker-Compose搭建Confluence"><a href="#1、Docker-Compose搭建Confluence" class="headerlink" title="1、Docker-Compose搭建Confluence"></a>1、Docker-Compose搭建Confluence</h1><p>（1）Docker-Compose脚本文件<br>docker-compose-confluence-postgresql.yml</p><p>version: ‘3.8’<br>services:<br>  confluence:<br>    image: cptactionhank&#x2F;atlassian-confluence:latest<br>    container_name: confluence<br>    ports:<br>      - “8090:8090”<br>      - “8091:8091”<br>    restart: always<br>    depends_on:<br>      - db<br>    volumes:<br>      - &#x2F;development&#x2F;docker&#x2F;confluence&#x2F;logs:&#x2F;opt&#x2F;atlassian&#x2F;confluence&#x2F;logs<br>      - &#x2F;development&#x2F;docker&#x2F;confluence&#x2F;confluence-data:&#x2F;var&#x2F;atlassian&#x2F;confluence<br>  db:<br>    image: postgres:latest<br>    container_name: confluence-db<br>    ports:<br>      - “5432:5432”<br>    restart: always<br>    environment:<br>      - POSTGRES_PASSWORD&#x3D;123456<br>    volumes:<br>      - &#x2F;development&#x2F;docker&#x2F;confluence&#x2F;pgsql-data:&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data</p><p>（2）创建Confluence、Postgres容器<br>创建并启动</p><p>docker-compose -f &#x2F;development&#x2F;docker&#x2F;docker-compose-confluence-postgresql.yml up -d</p><p>停止并删除</p><p>docker-compose -f &#x2F;development&#x2F;docker&#x2F;docker-compose-confluence-postgresql.yml down</p><p>（3）未授权报错问题<br>启动之后发现报错</p><p>检查创建的相关挂载文件，发现confluence-data文件夹的权限不对，不是root&#x2F;root，需要的是daemon&#x2F;daemon，正常 docker 和外部交互都是daemon用户</p><p>修改文件夹权限为daemon&#x2F;daemon</p><p>chown -R daemon.daemon confluence-data</p><p>然后重启容器</p><p>docker-compose -f &#x2F;development&#x2F;docker&#x2F;docker-compose-confluence-postgresql.yml restart</p><p>（4）破解Confluence<br>从容器复制jar</p><p>docker cp confluence:&#x2F;opt&#x2F;atlassian&#x2F;confluence&#x2F;confluence&#x2F;WEB-INF&#x2F;lib&#x2F;atlassian-extras-decoder-v2-3.4.1.jar .&#x2F;atlassian-extras-2.4.jar<br>1<br>下载到本地</p><p>sz atlassian-extras-2.4.jar</p><p>下载破解文件，我直接放在CSDN下载了，然后在 Confluence 找到 Server ID</p><p>运行confluence_keygen.jar，并粘贴Server ID</p><p>java -jar confluence_keygen.jar<br>1</p><p>然后点击 .patch!，选择从服务器下载下来的atlassian-extras-2.4.jar</p><p>继续点击第一个按钮，.gen!，会生成一个授权码，保存好授权码，例如</p><p>这是我的，你复制没有用，我是举例说明<br>AAABKw0ODAoPeJxtkEtLAzEQgO&#x2F;5FQHPW&#x2F;ahKELANImwuI&#x2F;iblc9pulUA2lakuxi&#x2F;71p115EmMu8P<br>r6ZmzfYYg4KFynO8sfbLAZmXY&#x2F;zNE8RB6+cPgZ9sIQd7M6MYBWgZtxvwLW7tQfnSZIh5kCeh7gMQ<br>M6bSZYnRYriTpAqNHIPpAdjPEikImcRi3oCEtwI1yFRS22ItpP2emPgySuwsLAGiUma8YInOxkRM<br>6HSse+hPx3hgmdtXYtXVtIKRZANYGVUFd9H7U6zVlHcn7XyuxlwPYKZ0QdwzWELnqSoEw35aNe4p<br>i8C1wJT3FGOV7ThdIFa9ymt9rOMbgbd6WUlcC9ojTpwE7iSkyXnQ1Ks31lSDTxNHvLnEv3axm5V8<br>mv2v9xqdOpLevjzyx&#x2F;&#x2F;H4kOMCwCFCaF0frwtkpx5Q9Id&#x2F;yJkNOrbYk6AhQ68LOLTtmHJEe28jY6k<br>a5f7CFrLA&#x3D;&#x3D;X02f3</p><p>然后把atlassian-extras-2.4.jar文件上传到服务器，并复制到Confluence容器中，替换到原本的文件</p><p>docker cp .&#x2F;atlassian-extras-2.4.jar confluence:&#x2F;opt&#x2F;atlassian&#x2F;confluence&#x2F;confluence&#x2F;WEB-INF&#x2F;lib&#x2F;atlassian-extras-decoder-v2-3.4.1.jar</p><p>然后重启容器</p><p>docker-compose -f &#x2F;development&#x2F;docker&#x2F;docker-compose-confluence-postgresql.yml restart</p><p>IP:8090 访问之后，还是之前的授权界面，我们把生成的授权码粘贴在上面即可，注意使用Ctrl + A、Ctrl + C 复制粘贴，手动选中复制粘贴容易出问题，到此破解完后</p><p>（5）配置Postgres数据库（与MySQL二选一）<br>进入Postgres容器</p><p>docker exec -it confluence-db bash</p><p>依次执行以下命令</p><p>psql -U postgres<br>\l<br>CREATE DATABASE confluence WITH OWNER postgres;<br>\q</p><p>然后重启容器</p><p>docker-compose -f &#x2F;development&#x2F;docker&#x2F;docker-compose-confluence-postgresql.yml restart</p><p>（6）配置MySQL数据库（与Postgres二选一）<br>这里我们需要增加一个jar到容器内部</p><p>docker cp .&#x2F;mysql-connector-java-8.0.17.jar confluence:&#x2F;opt&#x2F;atlassian&#x2F;confluence&#x2F;confluence&#x2F;WEB-INF&#x2F;lib&#x2F;mysql-connector-java-8.0.17.jar</p><p>然后重启Confluence容器</p><p>jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;confluence?serverTimezon</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>confluence重置admin密码</title>
    <link href="/2022/07/12/confluence%E9%87%8D%E7%BD%AEadmin%E5%AF%86%E7%A0%81/"/>
    <url>/2022/07/12/confluence%E9%87%8D%E7%BD%AEadmin%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.cnblogs.com/linn/p/4647327.html">confluence重置admin密码</a></p><p>复方法：</p><ol><li>运行此sql 找到你的管理员帐户：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>MY_PASS=root<br><span class="hljs-built_in">export</span> MYSQL_PWD=<span class="hljs-variable">$MY_PASS</span><br>MY_USER=root<br>MY_HOST=127.0.0.1<br>MY_PORT=3306<br>MY_DB=confluence<br>MYCMD=<span class="hljs-string">&quot;mysql -u<span class="hljs-variable">$MY_USER</span>   -pMY_PASS -h<span class="hljs-variable">$MY_HOST</span> -P <span class="hljs-variable">$MY_PORT</span> <span class="hljs-variable">$MY_DB</span>&quot;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$MYCMD</span> -e <span class="hljs-string">&quot;select u.id, u.user_name, u.active from cwd_user u \</span><br><span class="hljs-string">join cwd_membership m on u.id=m.child_user_id join cwd_group g on m.parent_id=g.id join cwd_directory d on d.id=g.directory_id  \</span><br><span class="hljs-string">where g.group_name = &#x27;confluence-administrators&#x27; and d.directory_name=&#x27;Confluence Internal Directory&#x27;;&quot;</span><br></code></pre></td></tr></table></figure><p>并记住管理员帐户的id</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">393217<br></code></pre></td></tr></table></figure><ol start="2"><li>运行此sql, 恢复管理员密码为 admin</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><br><span class="hljs-variable">$MYCMD</span>  -e <span class="hljs-string">&quot;update cwd_user set credential =  \</span><br><span class="hljs-string">&#x27;x61Ey612Kl2gpFL56FT9weDnpSo4AV8j8+qx2AuTHdRyY036xxzTTrw10Wq3+4qQyB+XURPWx1ONxp3Y3pB37A==&#x27;  \</span><br><span class="hljs-string">where id=393217;&quot;</span><br></code></pre></td></tr></table></figure><p> 注意此处xxxxxx 为上一步的 id</p><p>如果你的密码是{PKCS5S2}前缀开头的，则用下面这个sql:</p><ol><li>update cwd_user set credential &#x3D; </li><li>‘{PKCS5S2}ltrb9LlmZ0QDCJvktxd45WgYLOgPt2XTV8X7av2p0mhPvIwofs9bHYVz2OXQ6&#x2F;kF’ </li><li>where id&#x3D;xxxxxx;</li></ol><p> 这个管理员密码为 Ab123456</p><p> 如果使用hsql，请用下面语句登录hsql数据库</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">java -cp <span class="hljs-regexp">/opt/</span>atlassian<span class="hljs-regexp">/confluence/</span>WEB-INF<span class="hljs-regexp">/lib/</span>hsqldb-<span class="hljs-number">2.3</span>.<span class="hljs-number">0</span>.jar org.hsqldb.util.DatabaseManager -user sa -url jdbc:hsqldb:<span class="hljs-regexp">/data/</span>confluence<span class="hljs-regexp">/data/</span>database/confluencedb<br><br><br>java -cp hsqldb-<span class="hljs-number">2.3</span>.<span class="hljs-number">0</span>.jar org.hsqldb.util.DatabaseManager -user sa -url jdbc:hsqldb:confluencedb<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Confluence6.7.1安装</title>
    <link href="/2022/07/12/Confluence%E6%98%AF%E4%B8%80%E4%B8%AA%E4%B8%93%E4%B8%9A%E7%9A%84%E4%BC%81%E4%B8%9A%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E4%B8%8E%E5%8D%8F%E5%90%8C%E8%BD%AF%E4%BB%B6%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%94%A8%E4%BA%8E%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9Awiki%E3%80%82/"/>
    <url>/2022/07/12/Confluence%E6%98%AF%E4%B8%80%E4%B8%AA%E4%B8%93%E4%B8%9A%E7%9A%84%E4%BC%81%E4%B8%9A%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E4%B8%8E%E5%8D%8F%E5%90%8C%E8%BD%AF%E4%BB%B6%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%94%A8%E4%BA%8E%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9Awiki%E3%80%82/</url>
    
    <content type="html"><![CDATA[<hr><p>Confluence是一个专业的企业知识管理与协同软件，也可以用于构建企业wiki。</p><p>一、准备工作</p><p>下载confluence6.7.1</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>downloads.atlassian.com<span class="hljs-regexp">/software/</span>confluence<span class="hljs-regexp">/downloads/</span>atlassian-confluence-<span class="hljs-number">6.7</span>.<span class="hljs-number">1</span>-x64.bin -P /opt<br></code></pre></td></tr></table></figure><p>下载破解器</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">https:<span class="hljs-regexp">//</span>files.cnblogs.com/files/Javame/confluence%E7%A<span class="hljs-number">0</span>%B4%E8%A7%A3%E5%B7%A5%E5%85%B7.zip<br></code></pre></td></tr></table></figure><p>二、安装confluence</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /optchmod +xatlassian-confluence-6.7.1-x64.bin<br>./atlassian-confluence-6.7.1-x64.bin<br></code></pre></td></tr></table></figure><p>三、破解jar包</p><p>下载破解和mysql驱动</p><p><a href="https://files.cnblogs.com/files/Javame/confluence%E7%A0%B4%E8%A7%A3%E5%B7%A5%E5%85%B7.rar">https://files.cnblogs.com/files/Javame/confluence%E7%A0%B4%E8%A7%A3%E5%B7%A5%E5%85%B7.rar</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>.备份jar包<br>mv <span class="hljs-regexp">/opt/</span>atlassian<span class="hljs-regexp">/confluence/</span>confluence<span class="hljs-regexp">/WEB-INF/</span>lib<span class="hljs-regexp">/atlassian-extras-decoder-v2-3.3.0.jar /</span>opt/atlassian-extras-<span class="hljs-number">2.4</span>.jar<br><span class="hljs-number">2</span>.通过FTP将atlassian-extras-<span class="hljs-number">2.4</span>.jar传到本地<br><span class="hljs-number">3</span>.运行破解器confluence_keygen.jar<br>java -jar confluence_keygen.jar<br></code></pre></td></tr></table></figure><p><img src="https://images2018.cnblogs.com/blog/291579/201804/291579-20180410153341518-275374211.png" alt="img"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">点击.patch，选择atlassian-extras-<span class="hljs-number">2.4</span>.jar文件，点击打开，jar文件破解成功<br><span class="hljs-number">4</span>.上传破解后jar包到<span class="hljs-regexp">/opt/</span>atlassian<span class="hljs-regexp">/confluence/</span>confluence<span class="hljs-regexp">/WEB-INF/</span>lib，并重命名atlassian-extras-decoder-v2-<span class="hljs-number">3.3</span>.<span class="hljs-number">0</span>.jar<br><span class="hljs-number">5</span>.上传mysql驱动<span class="hljs-regexp">/opt/</span>atlassian<span class="hljs-regexp">/confluence/</span>confluence<span class="hljs-regexp">/WEB-INF/</span>lib<br></code></pre></td></tr></table></figure><p>四、重启服务</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">停止：sh <span class="hljs-regexp">/opt/</span>atlassian<span class="hljs-regexp">/confluence/</span>bin/stop-confluence.sh<br><br>启动：sh <span class="hljs-regexp">/opt/</span>atlassian<span class="hljs-regexp">/confluence/</span>bin/start-confluence.sh<br></code></pre></td></tr></table></figure><p>五、访问confluence</p><p><a href="http://localhost:8090/">http://localhost:8090</a></p><p>六、选择中文、点击产品安装</p><p><img src="https://images2018.cnblogs.com/blog/291579/201804/291579-20180410153543976-359191532.png" alt="img"></p><p>七、拷贝服务ID通过破解器获取key</p><p><img src="https://images2018.cnblogs.com/blog/291579/201804/291579-20180410153637725-966006321.png" alt="img"></p><p><img src="https://images2018.cnblogs.com/blog/291579/201804/291579-20180410153724214-961117885.png" alt="img"></p><p>八、至此，confluence破解完成</p><p>九、设置外部数据库</p><p><img src="https://images2018.cnblogs.com/blog/291579/201804/291579-20180410153954126-109476554.png" alt="img"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mysql数据库设置<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> confluence <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_bin; 创建数据库<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> confluence.* <span class="hljs-keyword">to</span> confluence@&quot;%&quot; identified <span class="hljs-keyword">by</span> &quot;confluence&quot;;<br>FLUSH <span class="hljs-keyword">PRIVILEGES</span>; <br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> tx_isolation=<span class="hljs-string">&#x27;READ-COMMITTED&#x27;</span>; 不设置此项，连接数据库无法连通<br>mysql://localhost:<span class="hljs-number">3306</span>/confluence?sessionVariables=tx_isolation=<span class="hljs-string">&#x27;READ-COMMITTED&#x27;</span>&amp;useUnicode=<span class="hljs-keyword">true</span>&amp;characterEncoding=utf8<br></code></pre></td></tr></table></figure><p>如果还报错：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mysql -u root -p123456<br><span class="hljs-built_in">SET</span> GLOBAL <span class="hljs-attribute">tx_isolation</span>=<span class="hljs-string">&#x27;READ-COMMITTED&#x27;</span>;<br></code></pre></td></tr></table></figure><p>修改mysql：</p><p>&#x2F;var&#x2F;atlassian&#x2F;application-data&#x2F;confluence&#x2F;confluence.cfg.xml</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Ceph集群性能优化介绍</title>
    <link href="/2022/07/12/Ceph%E9%9B%86%E7%BE%A4%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%BB%8B%E7%BB%8D/"/>
    <url>/2022/07/12/Ceph%E9%9B%86%E7%BE%A4%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="Ceph集群性能优化介绍"><a href="#Ceph集群性能优化介绍" class="headerlink" title="Ceph集群性能优化介绍"></a><a href="https://www.cnblogs.com/dengchj/p/13096320.html">Ceph集群性能优化介绍</a></h1><h3 id="1-集群硬件配置"><a href="#1-集群硬件配置" class="headerlink" title="1.集群硬件配置"></a>1.集群硬件配置</h3><p>典型硬件资源配置建议：</p><table><thead><tr><th>组件</th><th>CPU</th><th>内存</th><th>网络</th><th>存储空间</th></tr></thead><tbody><tr><td>Monitor</td><td>1vCore</td><td>2GB</td><td>1x 1GbE+ NICs</td><td>单个Mon 10GB+</td></tr><tr><td>OSD</td><td>1vCore</td><td>BlueStore后端，单个OSD 至少3 GB。裸容量每增加1 TB，则内存相应增加1 GB</td><td>1x 1GbE+ NICs (建议10GbE+)</td><td>一个OSD 对应一块独立的硬盘</td></tr></tbody></table><ul><li>public network和cluster network 分开。</li><li>操作系统、OSD data、OSD 日志分别使用独立的硬盘，使整体吞吐量最大化。</li><li>一般，建议单OSD 分配4GB以上的内存，多小对象或有大对象场景下对性能有提升。不建议低于2GB。</li><li>对于OSD 除显式分配的内存外，还会多约20%的额外内存开销，需要考虑到。</li></ul><p>对于采用的BlueStore的Ceph，将SSD 用在合适的地方一般可以显著提升性能：</p><ul><li>OSD 日志建议使用SSD。如果采用bluestore，则建议裸容量配比—— block : block.db : block.wal &#x3D; 100:1:1，后两者建议采用SSD或NVMe SSD。</li><li>采用cache-tiering，其中cache pool 采用SSD。</li><li>CephFS 的metadata pool 采用SSD。</li><li>RGW index pool 采用SSD。</li></ul><h3 id="2-常见性能影响因素"><a href="#2-常见性能影响因素" class="headerlink" title="2.常见性能影响因素"></a>2.常见性能影响因素</h3><h4 id="集群性能评估"><a href="#集群性能评估" class="headerlink" title="集群性能评估"></a>集群性能评估</h4><p>根据采用的硬件和集群规模，应当对集群有个大致的性能估算。集群性能影响因素主要有：硬盘（单个硬盘的性能和硬盘总数）、网络性能、内存和CPU。其中前两个是估算集群整体性能的主要因素，而根据场景，性能主要是IOPS和带宽。<br>一般：</p><ul><li>集群读取性能：</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile">集群读取性能：W*n*μ，无论在FileStore还是BlueStore下<br>其中，<br><span class="hljs-section">W: 单块裸盘读带宽</span><br><span class="hljs-section">n: OSD数量</span><br><span class="hljs-section">μ: 损耗系数 一般为0.7~0.8</span><br></code></pre></td></tr></table></figure><ul><li>集群写入性能：</li></ul><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">集群写入性能：[(W*n)/WAF]*μ</span><br><span class="hljs-attribute">W</span><span class="hljs-punctuation">:</span> <span class="hljs-string">单块裸盘写入带宽</span><br><span class="hljs-attribute">n</span><span class="hljs-punctuation">:</span> <span class="hljs-string">OSD数量</span><br><span class="hljs-attribute">WAF</span><span class="hljs-punctuation">:</span> <span class="hljs-string">写放大系数</span><br><span class="hljs-attribute">μ</span><span class="hljs-punctuation">:</span> <span class="hljs-string">损耗系数</span><br><span class="hljs-attribute">X</span><span class="hljs-punctuation">:</span> <span class="hljs-string">写入数据块大小(KiB)</span><br><span class="hljs-attribute">N</span><span class="hljs-punctuation">:</span> <span class="hljs-string">多副本Size大小</span><br><span class="hljs-attribute">K</span><span class="hljs-punctuation">:</span> <span class="hljs-string">纠删码K值</span><br><span class="hljs-attribute">M</span><span class="hljs-punctuation">:</span> <span class="hljs-string">纠删码M值</span><br><span class="hljs-attribute">FileStore 5</span><span class="hljs-punctuation">:</span> <span class="hljs-string">5KiB, FileStore中transaction元数据的数据量大小（推测值）</span><br><span class="hljs-attribute">BlueStore 5</span><span class="hljs-punctuation">:</span> <span class="hljs-string">5KiB, BlueStore中RocksDB的WAL数据大小（推测值）</span><br><span class="hljs-attribute">BlueStore 20</span><span class="hljs-punctuation">:</span> <span class="hljs-string">20KiB, BlueStore小文件写入时产生的Zero-filled数据块大小</span><br></code></pre></td></tr></table></figure><h4 id="性能瓶颈定位"><a href="#性能瓶颈定位" class="headerlink" title="性能瓶颈定位"></a>性能瓶颈定位</h4><p>经过对集群的性能评估，结合主要的影响因素，试着找出性能瓶颈的大方向。<br>准确的性能评估需要进行严格的性能测试：</p><ul><li>首先是基准测试，包括硬盘基线测试（如dd）和网络基线测试（如iperf），测试前应当drop cache。</li><li>然后分别对于集群做性能测试：rados bench</li><li>RBD 性能测试：rbd bench</li><li>RGW 性能测试：cosbench</li></ul><p>通过<code>ceph osd perf</code>可以看出整个集群所有OSDs 的时延数据。<br>更详细的时延信息可以通过<code>perf dump</code>调查，如</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span><span class="hljs-selector-class">.ceph</span> daemon osd.<span class="hljs-number">15</span> perf reset <span class="hljs-attribute">all</span><br><span class="hljs-number">2</span><span class="hljs-selector-class">.rados</span> bench WRITE<br><span class="hljs-number">3</span><span class="hljs-selector-class">.ceph</span> daemon osd.<span class="hljs-number">15</span> perf dump<br></code></pre></td></tr></table></figure><h4 id="常见性能优化点"><a href="#常见性能优化点" class="headerlink" title="常见性能优化点"></a>常见性能优化点</h4><p>排除硬件瓶颈的可能，则可以从常见的几项对照排查修改。</p><ul><li>存储池的PG 数是否合理：一般，集群PGs总数 &#x3D; (OSD总数 * 100 &#x2F; 最大副本数)，具体可参考<a href="https://ceph.com/pgcalc/">pgcal</a></li><li>monitor 采用3或5个即可。由于需要再monitor之间做数据同步，过多的monitor 会影响性能。</li><li>建议Ceph 集群和其他系统独立部署，以免资源抢占影响性能，且混合部署影响troubleshooting。</li></ul><h3 id="3-使用Cache-tiering"><a href="#3-使用Cache-tiering" class="headerlink" title="3.使用Cache-tiering"></a>3.使用Cache-tiering</h3><p>使用缓存分层，可以根据需求在热层和冷层之间自动迁移数据，从而提高群集的性能。<br>采用的cache-tiering的前提是要搞清业务场景，因为cache-tiering 是工作负载相关的，不合适的场景匹配不合适的缓存模式（cache mode）反而会让整体性能下降。</p><ul><li><code>write-back</code>：Ceph 客户端写数据至cache tier，随后会将数据迁移至storage tier。客户端读取数据也是直接读取cache tier，若cache tier 没有会从storage tier 中获取并迁移至cache tier。客户端的读写始终不直接跟storage tier 关联。 这种模式适用于可变数据的存储访问。</li><li>readproxy：使用已存在与cache tier 内的对象, 如果cache tier 内无该对象则会将请求代理至storage tier。</li><li>readonly：cache tier 仅接受读操作，写操作都会指向storage tier，预读取的对象会被迁移至cache tier，一定条件下会被迁移出cache tier。这种模式不保证一致性，读取的数据可能是过期的，适用于不变数据的存储访问。</li><li>none：完全disable cache tiering。</li></ul><h4 id="cache-tiering-配置流程"><a href="#cache-tiering-配置流程" class="headerlink" title="cache-tiering 配置流程"></a>cache-tiering 配置流程</h4><p>首先，除storage pool 外，需要创建一个全SSD 的cache pool（通过修改 crushmap）。<br>根据实际场景：</p><ul><li>数据对象是更偏向不变对象还是可变对象，决定采用什么缓存模式（cache-mode）；</li><li>根据客户端负载情况，设置和调整缓存池的参数（大小、数量等）；</li><li>其他诸如cache age、target size 等参数。</li></ul><p>必要操作步骤：<br>1）关联cache pool 和后端存储池：ceph osd tier add</p><p>2）设置cache-mode：ceph osd tier cache-mode writeback</p><p>3）将原storage pool的流量指向cache pool：ceph osd tier set-overlay</p><p>4）必要的缓存阈值设置，所有的请求在达到target_max_bytes 或target_max_objects 设定值时会被阻塞</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ceph osd<span class="hljs-built_in"> pool </span><span class="hljs-built_in">set</span> target_max_bytes &#123;#bytes&#125;<br>ceph osd<span class="hljs-built_in"> pool </span><span class="hljs-built_in">set</span> target_max_objects &#123;#objects&#125;<br></code></pre></td></tr></table></figure><h3 id="4-Damons-相关配置优化"><a href="#4-Damons-相关配置优化" class="headerlink" title="4.Damons 相关配置优化"></a>4.Damons 相关配置优化</h3><p>常见配置优化项及建议值，根据实际场景可再做调整。<br>默认应将RGW Cache 和RBD cache打开。</p><h4 id="OSD"><a href="#OSD" class="headerlink" title="OSD"></a>OSD</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">osd_scrub_begin_hour</span> = <span class="hljs-number">1</span> <span class="hljs-comment">#根据业务实际设置在非业务时间scrub</span><br><span class="hljs-attr">osd_scrub_end_hour</span> = <span class="hljs-number">5</span><br><span class="hljs-attr">osd_recovery_op_priority</span> = <span class="hljs-number">3</span><br><span class="hljs-attr">osd_client_op_priority</span> = <span class="hljs-number">63</span><br><span class="hljs-attr">osd_recovery_max_active</span> = <span class="hljs-number">10</span><br><span class="hljs-attr">osd_recovery_sleep</span> = <span class="hljs-number">0</span><br><span class="hljs-attr">osd_max_backfills</span> = <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h4 id="RGW（对象存储）"><a href="#RGW（对象存储）" class="headerlink" title="RGW（对象存储）"></a>RGW（对象存储）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs conf">rgw_cache_enabled = true # 开启RGW cache<br>rgw_thread_pool_size = 2000<br>rgw_cache_lru_size = 20000<br>rgw_num_rados_handles = 128<br></code></pre></td></tr></table></figure><h4 id="RBD（块存储）"><a href="#RBD（块存储）" class="headerlink" title="RBD（块存储）"></a>RBD（块存储）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs conf">rbd_cache_enabled = true # 开启RBD cache<br>rbd_cache_size = 268435456<br>rbd_cache_max_dirty = 134217728<br>rbd_cache_max_dirty_age = 5<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CephFS 使用</title>
    <link href="/2022/07/12/CephFS%20%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/07/12/CephFS%20%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="CephFS-使用"><a href="#CephFS-使用" class="headerlink" title="CephFS 使用"></a>CephFS 使用</h1><p>之前介绍了 RBD 的使用方法，有了 RBD，远程磁盘挂载的问题就解决了，但 RBD 的问题是不能多个主机共享一个磁盘，如果有一份数据很多客户端都要读写该怎么办呢？这时 CephFS 作为文件系统存储解决方案就派上用场了。</p><h2 id="1-CephFS-安装"><a href="#1-CephFS-安装" class="headerlink" title="1. CephFS 安装"></a>1. CephFS 安装</h2><p>在已经部署好的 Ceph 集群上安装 CephFS 还是比较简单的，首先需要安装 MDS，原因是 CephFS 需要统一的元数据管理，所以 MDS 必须要有。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ceph-deploy --overwrite-conf mds create  &lt;cephfs-master&gt;1.<br></code></pre></td></tr></table></figure><p>剩下的就是 pool 相关的处理的了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>ceph osd pool create cephfs_data 1024ceph osd pool create cephfs_metadata 100ceph fs new cephfs cephfs_metadata cephfs_data1.2.3.<br></code></pre></td></tr></table></figure><p>这样 CephFS 就已经安装好了，执行下面的命令验证一下状态，看到 up 和 active 就表示状态正常。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>ceph fs lsname: cephfs, metadata pool: cephfs_metadata, data pools: [cephfs_data ]ceph mds statcephfs-1/1/1 up  &#123;0=cephfs-master1=up:active&#125;1.2.3.4.<br></code></pre></td></tr></table></figure><h2 id="2-CephFS-物理机挂载"><a href="#2-CephFS-物理机挂载" class="headerlink" title="2. CephFS 物理机挂载"></a>2. CephFS 物理机挂载</h2><p>接下来尝试一下远程挂载刚刚创建出来的 CephFS，首先还是要在客户机上安装 Ceph，这步和远程挂载 RBD 是一样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># On Linux clientecho &quot;&lt;user-name&gt; ALL = (root) NOPASSWD:ALL&quot; | sudo tee /etc/sudoers.d/&lt;user-name&gt;sudo chmod 0440 /etc/sudoers.d/&lt;user-name&gt;sudo apt-get install -y python# On Ceph masterceph-deploy install &lt;Linux-client-IP&gt;ceph-deploy admin &lt;Linux-client-IP&gt;1.2.3.4.5.6.7.</span><br></code></pre></td></tr></table></figure><p>然后获取 Ceph admin 用户的密钥，就是 &#96;&#96; 对应的部分。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ceph auth get client.adminexported keyring <span class="hljs-keyword">for</span> client.admin[client.admin]    key = &lt;admin-key&gt;    caps mds = <span class="hljs-string">&quot;allow *&quot;</span>    caps mgr = <span class="hljs-string">&quot;allow *&quot;</span>    caps mon = <span class="hljs-string">&quot;allow *&quot;</span>    caps osd = <span class="hljs-string">&quot;allow *&quot;</span>1.2.3.4.5.6.7.8.<br></code></pre></td></tr></table></figure><p>接下来创建挂载目录，并挂载，注意替换 <code>和</code>，分别对应 Ceph monitor 所在的 IP 和刚刚在上一步获取的 admin 密钥。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> /mnt/cephfssudo mount -t ceph &lt;monitor-ip&gt;:6789:/ /mnt/cephfs/ -o name=admin,secret=&lt;admin-key&gt;1.2.<br></code></pre></td></tr></table></figure><p>至此就已经挂载成功了，可以在挂载的目录下创建新目录，写入新文件，在其他同样挂载该 CephFS 的服务器上，也能看到同样的变化。</p><p>如果想做到开机启动就挂载 CephFS</p><h2 id="3-CephFS-用户隔离"><a href="#3-CephFS-用户隔离" class="headerlink" title="3. CephFS 用户隔离"></a>3. CephFS 用户隔离</h2><p>上一步已经实现了远程挂载，和文件共享，但如果多个产品同时使用一个 CephFS，如果数据都互相可见，显然是不够安全的，那么就要做隔离，咱们接下来就来看看 CephFS 是如何做到这点的。</p><p>CephFS 这个文件系统还是统一的，所以隔离是在用户层面做的，具体的做法是：限定某个用户只能访问某个目录。</p><p>下面这个命令创建了一个叫 bruce 的用户，这个用户只能访问目录 &#x2F;bruce，数据存储在 pool cephfs_data 中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ceph auth get-or-create client.bruce mon <span class="hljs-string">&#x27;allow r&#x27;</span> mds <span class="hljs-string">&#x27;allow r, allow rw path=/bruce&#x27;</span> osd <span class="hljs-string">&#x27;allow rw pool=cephfs_data&#x27;</span>1.<br></code></pre></td></tr></table></figure><p>如果要做进一步的隔离，想让不通用户的数据存储在不同的 pool，可以用命令将 pool 加入的 CephFS 中，再用命令指定，加入 pool 的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ceph mds add_data_pool bruceceph fs <span class="hljs-built_in">ls</span> .... data pools: [cephfs_data bruce ]1.2.3.<br></code></pre></td></tr></table></figure><p>挂载方式和 admin 用户挂载一样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mount -t ceph 10.19.250.136:6789:/ /mnt/bruce -o name=bruce,secret=AQCt8qBbx4XGKBAACWG5lQHRX7FTo0nVZCYxNA==1.<br></code></pre></td></tr></table></figure><p>挂载后，可以看到其他目录，但没有操作权限，只能在 &#x2F;mnt&#x2F;bruce&#x2F;bruce 下操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/mnt/brucelsabc bruce/mnt/brucecd abc/mnt/bruce/abcsudo <span class="hljs-built_in">mkdir</span> testmkdir: cannot create directory <span class="hljs-string">&#x27;test&#x27;</span>: Permission denied/mnt/bruce/abccd ../bruce/mnt/bruce/brucemkdir <span class="hljs-built_in">test</span>/mnt/bruce/brucelstest1.2.3.4.5.6.7.8.9.<br></code></pre></td></tr></table></figure><h2 id="4-Kubernetes-集群使用-CephFS"><a href="#4-Kubernetes-集群使用-CephFS" class="headerlink" title="4. Kubernetes 集群使用 CephFS"></a>4. Kubernetes 集群使用 CephFS</h2><p>首先把 Ceph 用户的密钥以 secret 形式存储起来，下面的命令是获取 admin 用户的密钥，如果使用其他用户，可以把 admin 替换为要使用的用户名即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ceph auth get-key client.admin | base64QVFEMDFWVmFWdnp6TFJBQWFUVVJ5VVp3STlBZDN1WVlGUkwrVkE9PQ==<span class="hljs-built_in">cat</span> ceph-secret.yaml apiVersion: v1kind: Secretmetadata:  name: ceph-secretdata:  key: QVFEMDFWVmFWdnp6TFJBQWFUVVJ5VVp3STlBZDN1WVlGUkwrVkE9PQ==1.2.3.4.5.6.7.8.9.10.<br></code></pre></td></tr></table></figure><p>接下来创建 PV：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> cephfs-pv.yamlapiVersion: v1kind: PersistentVolumemetadata:  name: cephfs-pvspec:  capacity:    storage: 10Gi  accessModes:    - ReadWriteMany  cephfs:    monitors:      - &lt;monitor1-id&gt;:6789      - &lt;monitor2-id&gt;:6789    user: admin    secretRef:      name: ceph-secret    readOnly: <span class="hljs-literal">false</span>  persistentVolumeReclaimPolicy: Recycle1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.<br></code></pre></td></tr></table></figure><p>最后创建 PVC：</p><p>登录后复制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> cephfs-pvc.yamlkind: PersistentVolumeClaimapiVersion: v1metadata:  name: cephfs-pvcspec:  accessModes:    - ReadWriteMany  resources:    requests:      storage: 10Gi<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Ceph pool 管理（基础操作）</title>
    <link href="/2022/07/12/Ceph%20pool%20%E7%AE%A1%E7%90%86%EF%BC%88%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%89/"/>
    <url>/2022/07/12/Ceph%20pool%20%E7%AE%A1%E7%90%86%EF%BC%88%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="Ceph-pool-管理（基础操作）"><a href="#Ceph-pool-管理（基础操作）" class="headerlink" title="Ceph pool 管理（基础操作）"></a><a href="http://www.cnweed.com/archives/4310/">Ceph pool 管理（基础操作）</a></h1><h1 id="显示-x2F-查询-pool"><a href="#显示-x2F-查询-pool" class="headerlink" title="显示&#x2F;查询 pool"></a>显示&#x2F;查询 pool</h1><p>1 显示所有pool</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ceph osd pool <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>2 查询 pool 当前状态</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">ceph osd pool stats </span><span class="hljs-template-variable">&#123;pool_name&#125;</span><br></code></pre></td></tr></table></figure><p>3 查询 pool 的使用状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ceph <span class="hljs-built_in">df</span><br></code></pre></td></tr></table></figure><h1 id="创建-pool"><a href="#创建-pool" class="headerlink" title="创建 pool"></a>创建 pool</h1><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">ceph osd pool create </span><span class="hljs-template-variable">&#123;pool-name&#125;</span><span class="language-xml"> </span><span class="hljs-template-variable">&#123;pg-num&#125;</span><span class="language-xml"> [</span><span class="hljs-template-variable">&#123;pgp-num&#125;</span><span class="language-xml">]</span><br></code></pre></td></tr></table></figure><blockquote><p>pg-num 与 pgp-num 只可以扩大不可以缩小</p></blockquote><h1 id="删除-pool"><a href="#删除-pool" class="headerlink" title="删除 pool"></a>删除 pool</h1><p>1 需要修改 pool 删除属性，允许 删除 pool 操作，需要 修改 mon 参数配置</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ceph daemon mon.&#123;mon实例名&#125;<span class="hljs-built_in"> config </span><span class="hljs-built_in">set</span> mon_allow_pool_delete <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>2 删除</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">ceph osd pool rm </span><span class="hljs-template-variable">&#123;pool_name&#125;</span><span class="language-xml"> </span><span class="hljs-template-variable">&#123;pool_name&#125;</span><span class="language-xml"> --yes-i-really-really-mean-it</span><br></code></pre></td></tr></table></figure><h1 id="pool-属性"><a href="#pool-属性" class="headerlink" title="pool 属性"></a>pool 属性</h1><p>1 获取 pool 属性</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ceph osd<span class="hljs-built_in"> pool </span><span class="hljs-built_in">get</span> &#123;pool-name&#125; &#123;key&#125;<br></code></pre></td></tr></table></figure><p>2 设置 pool 属性</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">ceph osd pool set </span><span class="hljs-template-variable">&#123;pool-name&#125;</span><span class="language-xml"> </span><span class="hljs-template-variable">&#123;key&#125;</span><span class="language-xml"> </span><span class="hljs-template-variable">&#123;value&#125;</span><br></code></pre></td></tr></table></figure><p>3 重命名 pool</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">ceph osd pool <span class="hljs-keyword">rename</span> &#123;<span class="hljs-keyword">current</span>-pool-<span class="hljs-type">name</span>&#125; &#123;<span class="hljs-built_in">new</span>-pool-<span class="hljs-type">name</span>&#125;<br></code></pre></td></tr></table></figure><h1 id="设置配额"><a href="#设置配额" class="headerlink" title="设置配额"></a>设置配额</h1><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">ceph</span> <span class="hljs-string">osd</span> <span class="hljs-string">pool</span> <span class="hljs-built_in">set-quota</span> &#123;<span class="hljs-string">pool-name</span>&#125; [<span class="hljs-string">max_objects</span> &#123;<span class="hljs-string">obj-count</span>&#125;] [<span class="hljs-string">max_bytes</span> &#123;<span class="hljs-string">bytes</span>&#125;]<br></code></pre></td></tr></table></figure><h1 id="修改pool的存储规则"><a href="#修改pool的存储规则" class="headerlink" title="修改pool的存储规则"></a>修改pool的存储规则</h1><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">ceph osd pool <span class="hljs-keyword">set</span> &#123;pool-<span class="hljs-type">name</span>&#125; crush_rule &#123;<span class="hljs-keyword">rule</span>-<span class="hljs-type">name</span>&#125;<br></code></pre></td></tr></table></figure><p>参考学习自：<br><a href="https://blog.csdn.net/weixin_34191845/article/details/92226213">https://blog.csdn.net/weixin_34191845/article/details/92226213</a><br><a href="https://www.codenong.com/cs106256258/">https://www.codenong.com/cs106256258/</a></p><p>标签: <a href="http://www.cnweed.com/tag/Ceph/">Ceph</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ceph ansible部署ceph集群</title>
    <link href="/2022/07/12/ceph%20ansible%E9%83%A8%E7%BD%B2ceph%E9%9B%86%E7%BE%A4/"/>
    <url>/2022/07/12/ceph%20ansible%E9%83%A8%E7%BD%B2ceph%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="ceph-ansible部署ceph集群"><a href="#ceph-ansible部署ceph集群" class="headerlink" title="ceph ansible部署ceph集群"></a>ceph ansible部署ceph集群</h1><p>参考：<a href="https://docs.ceph.com/ceph-ansible/master/">https://docs.ceph.com/ceph-ansible/master/</a></p><p>项目地址：<a href="https://github.com/ceph/ceph-ansible">https://github.com/ceph/ceph-ansible</a></p><p>节点规划：</p><p>主机名public-ip磁盘角色<br>node1192.168.93.20系统盘: sda<br>osd盘: sdbceph-ansible,monitor,mgr,mds,osd<br>node2192.168.93.21系统盘: sda<br>osd盘: sdbmonitor,mgr,mds,osd<br>node3192.168.93.22系统盘: sda<br>osd盘: sdbmonitor,mgr,mds,osd<br>基本配置<br>所有节点配置主机名</p><p>hostnamectl set-hostname node1<br>hostnamectl set-hostname node2<br>hostnamectl set-hostname node3<br>1<br>2<br>3<br>配置hosts解析</p><p>cat &gt;&gt; &#x2F;etc&#x2F;hosts &lt;&lt;EOF<br>192.168.93.20 node1<br>192.168.93.21 node2<br>192.168.93.22 node3<br>EOF<br>1<br>2<br>3<br>4<br>5<br>配置防火墙和时间同步</p><p>#关闭防火墙和selinux<br>systemctl disable –now firewalld<br>setenforce 0<br>sed -i ‘s&#x2F;^SELINUX&#x3D;.*&#x2F;SELINUX&#x3D;disabled&#x2F;‘ &#x2F;etc&#x2F;selinux&#x2F;config</p><p>#配置时间同步<br>yum install -y chrony<br>systemctl enable –now chronyd<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>添加节点SSH互信</p><p>ssh-keygen -t rsa<br>ssh-copy-id root@node1<br>ssh-copy-id root@node2<br>ssh-copy-id root@node3<br>1<br>2<br>3<br>4<br>由于ceph ansible安装docker版本较低，这里提前手动安装docker</p><p>#安装docker依赖<br>yum install -y yum-utils device-mapper-persistent-data lvm2</p><p>#阿里云源<br>yum-config-manager –add-repo <a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></p><p>#安装docker-ce<br>yum install -y docker-ce</p><p>#修改docker配置<br>mkdir -p &#x2F;etc&#x2F;docker<br>cat &gt; &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;EOF<br>{<br>  “registry-mirrors”: [“<a href="https://uyah70su.mirror.aliyuncs.com&quot;]">https://uyah70su.mirror.aliyuncs.com&quot;]</a><br>}<br>EOF</p><p>#启动docker服务<br>systemctl enable –now docker<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>安装ceph集群<br>克隆存储库：</p><p>yum install -y git<br>git clone <a href="https://github.com/ceph/ceph-ansible.git">https://github.com/ceph/ceph-ansible.git</a></p><p>#网络较慢时其他克隆方式<br>git clone <a href="https://github.com.cnpmjs.org/ceph/ceph-ansible.git">https://github.com.cnpmjs.org/ceph/ceph-ansible.git</a><br>1<br>2<br>3<br>4<br>5<br>接下来，必须确定ceph-ansible要使用哪个分支。有稳定的分支可供选择，或者可以使用master分支，这里安装nautilus版本。</p><p>cd ceph-ansible<br>git tag<br>git checkout v4.0.9<br>1<br>2<br>3<br>配置阿里云pip源</p><p>mkdir ~&#x2F;.pip<br>cat &gt; ~&#x2F;.pip&#x2F;pip.conf &lt;&lt; EOF<br>[global]<br>trusted-host&#x3D;mirrors.aliyun.com<br>index-url&#x3D;<a href="https://mirrors.aliyun.com/pypi/simple/">https://mirrors.aliyun.com/pypi/simple/</a><br>EOF<br>1<br>2<br>3<br>4<br>5<br>6<br>使用pip和提供的requirements.txt安装Ansible和其他所需的Python库：</p><p>yum install -y python-pip<br>pip install -U pip<br>pip install -r requirements.txt<br>1<br>2<br>3<br>release版本<br>根据需求选择以下分支，其中stable-*分支已经过QE测试，master分支应视为实验性分支，请谨慎使用。</p><p>stable-3.0支持Ceph版本jewel和luminous。该分支需要Ansible版本2.4。<br>stable-3.1支持Ceph版本luminous和mimic。该分支需要Ansible版本2.4。<br>stable-3.2支持Ceph版本luminous和mimic。该分支需要Ansible版本2.6。<br>stable-4.0支持Ceph版本nautilus。该分支需要Ansible版本2.8。<br>stable-5.0支持Ceph版本octopus。该分支需要Ansible版本2.9。<br>master支持Ceph的master分支。该分支需要Ansible版本2.9。<br>配置和使用<br>为Ceph集群创建inventory文件，playbook和配置文件。</p><p>配置inventory</p><p>Ansible inventory文件定义了集群中的主机以及每个主机在Ceph群集中扮演的角色。inventory文件的默认位置是&#x2F;etc&#x2F;ansible&#x2F;hosts但是可以将该文件放置在任何位置并与ansible-playbook -i 参数一起使用。</p><p>inventory文件示例如下所示：</p><p>mkdir -p &#x2F;etc&#x2F;ansible<br>cat &gt; &#x2F;etc&#x2F;ansible&#x2F;hosts &lt;&lt; EOF<br>[mons]<br>node1<br>node2<br>node3</p><p>[osds]<br>node1<br>node2<br>node3</p><p>[mdss]<br>node1<br>node2<br>node3</p><p>[mgrs]<br>node1<br>node2<br>node3<br>EOF<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>配置playbook</p><p>该ceph-ansible项目的根目录有一个示例playbook，名为site.yml.sample。该playbook在大多数情况下都可以正常工作，但默认情况下，它包括了可能不适用于集群设置的每个daemon group 。执行以下步骤来准备剧本。</p><p>重命名示例playbook，根据集群的需要对playbook进行修改：</p><p>cp site.yml.sample site.yml<br>1<br>配置变量<br>Ceph集群的配置将通过使用ceph-ansible提供的ansible变量进行设置。所有这些选项及其默认值都在ceph-ansible项目group_vars&#x2F;目录中定义。在group_vars&#x2F;目录下，有许多示例Ansible配置文件，它们通过文件名与每个Ceph守护程序组相关。例如，osds.yml.sample包含OSD守护程序的所有默认配置。该all.yml.sample文件是一个特殊group_vars文件，适用于群集中的所有主机。</p><p>在最基本的级别上，必须告诉ceph-ansible要安装的Ceph版本，安装方法，集群网络设置以及如何配置OSD。要开始配置，请重命名group_vars&#x2F;您要使用的每个文件，以使其在文件名的末尾不包含.sample，请取消要更改选项的注释并提供你自己的值。</p><p>使用lvm batch方法部署Ceph上游版本octopus的示例配置如下所示group_vars&#x2F;all.yml：</p><p>[root@node1 ceph-ansible]# cd group_vars&#x2F;</p><p>cp all.yml.sample all.yml</p><p>cat &gt;&gt; all.yml &lt;&lt;EOF<br>configure_firewall: False<br>ceph_origin: repository<br>ceph_repository: community<br>ceph_stable_release: nautilus<br>ceph_mirror: <a href="http://mirrors.aliyun.com/ceph">http://mirrors.aliyun.com/ceph</a><br>ceph_stable_key: <a href="http://mirrors.aliyun.com/ceph/keys/release.asc">http://mirrors.aliyun.com/ceph/keys/release.asc</a><br>ceph_stable_repo: “&#x2F;rpm-“<br>public_network: “192.168.93.0&#x2F;24”<br>cluster_network: “192.168.93.0&#x2F;24”<br>monitor_interface: ens33<br>cephx: true</p><p>devices:</p><ul><li>‘&#x2F;dev&#x2F;sdb’<br>ceph_conf_overrides:<br>  mon:<br> mon_allow_pool_delete: true<br>EOF<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>执行部署</li></ul><p>ansible-playbook -i &#x2F;etc&#x2F;ansible&#x2F;hosts site.yml<br>1<br>维护集群<br>ceph-ansible在infrastructure-playbooks目录中提供了一组playbook，以便执行一些基本的操作。</p><p>添加osd</p><p>$ cat hosts<br>[mons]<br>mon-node-1<br>mon-node-2<br>mon-node-3</p><p>[mgrs]<br>mon-node-1<br>mon-node-2<br>mon-node-3</p><p>[osds]<br>osd-node-1<br>osd-node-2<br>osd-node-3<br>osd-node-99</p><p>$ ansible-playbook -vv -i hosts site-container.yml –limit osd-node-99<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>缩小osd</p><p>$ ansible-playbook -vv -i hosts infrastructure-playbooks&#x2F;shrink-osds.yml -e osd_to_kill&#x3D;1,2,3<br>1<br>清理集群</p><p>ansible-playbook -vv infrastructure-playbooks&#x2F;purge-container-cluster.yml</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Centos离线搭建Ceph集群</title>
    <link href="/2022/07/12/Centos%E7%A6%BB%E7%BA%BF%E6%90%AD%E5%BB%BACeph%E9%9B%86%E7%BE%A4/"/>
    <url>/2022/07/12/Centos%E7%A6%BB%E7%BA%BF%E6%90%AD%E5%BB%BACeph%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<hr><h3 id="Centos离线搭建Ceph集群"><a href="#Centos离线搭建Ceph集群" class="headerlink" title="Centos离线搭建Ceph集群"></a>Centos离线搭建Ceph集群</h3><h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><p>需要去客户现场部署centos7.6三节点newben和ceph，这里把整个部署方案都介绍了</p><table><thead><tr><th>主机名</th><th>配置</th><th>ip</th><th>操作系统</th><th>说明</th></tr></thead><tbody><tr><td>node-5-40</td><td>4核8G</td><td>192.168.5.40</td><td>Centos7.6</td><td>newben主节点</td></tr><tr><td>node-5-41</td><td>4核8G</td><td>192.168.5.41</td><td>Centos7.6</td><td></td></tr><tr><td>node-5-42</td><td>4核8G</td><td>192.168.5.42</td><td>Centos7.6</td><td>ceph引导节点</td></tr></tbody></table><h3 id="newben安装"><a href="#newben安装" class="headerlink" title="newben安装"></a>newben安装</h3><h4 id="离线安装包"><a href="#离线安装包" class="headerlink" title="离线安装包"></a>离线安装包</h4><p>[root@node-5-40 newben]# ll</p><p>total 4794132</p><p>drwxr-xr-x. 2 root root    140 Dec 13 21:26 Centos_offline_install #docker离线安装包</p><p>-rw-r–r–. 1 root root 4033014784 Sep 29 23:20 newben.tar</p><p>-rw-r–r–. 1 root root 401772144 Dec 13 21:19 bootstrap.tgz # 替换的newben镜像</p><p>-rw-r–r–. 1 root root 474402280 Sep 30 03:04 offline.tgz</p><h4 id="离线装docker"><a href="#离线装docker" class="headerlink" title="离线装docker"></a>离线装docker</h4><p>注意：离线安装docker需要在所有主机上执行</p><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><p>rpm -Uvh *.rpm –nodeps –force</p><h4 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h4><p>#启动docker</p><p>systemctl start docker</p><p>#开机自启</p><p>systemctl enable docker</p><h4 id="检查docker"><a href="#检查docker" class="headerlink" title="检查docker"></a>检查docker</h4><p>[root@node-5-40 Centos_offline_install]# docker ps -a</p><p>CONTAINER ID  IMAGE   COMMAND  CREATED  STATUS  PORTS   NAMES</p><p>[root@node-5-40 Centos_offline_install]# docker -v</p><p>Docker version 20.10.7, build f0df350</p><p>[root@node-5-40 Centos_offline_install]#</p><h4 id="离线安装newben"><a href="#离线安装newben" class="headerlink" title="离线安装newben"></a>离线安装newben</h4><h4 id="解压offline-tgz文件"><a href="#解压offline-tgz文件" class="headerlink" title="解压offline.tgz文件"></a>解压offline.tgz文件</h4><p>解压offline.tgz文件后多了一个install目录</p><p>tar -zxvf offline.tgz</p><h4 id="移动newben-tar文件进入install目录"><a href="#移动newben-tar文件进入install目录" class="headerlink" title="移动newben.tar文件进入install目录"></a>移动newben.tar文件进入install目录</h4><p>mv newben.tar install&#x2F;</p><h4 id="修改config文件"><a href="#修改config文件" class="headerlink" title="修改config文件"></a>修改config文件</h4><p>进入install目录修改config文件，由于需要newben高可用，部署3个etcd节点和web节点</p><p>imagePath: newben.tar #离线安装需要</p><p>localIp: 192.168.5.40 #安装节点ip</p><p>nodes:</p><p> - address: 192.168.5.40 #节点ip</p><p>  modules: #节点组件</p><p>   - data</p><p>   - log</p><p>   - web</p><p>   - etcd</p><p>   - newben</p><p>  password: password</p><p>  port: “22”</p><p>  user: root</p><p> - address: 192.168.5.41 #节点ip</p><p>  modules: #节点组件</p><p>   - newben</p><p>   - etcd</p><p>   - web</p><p>  password: password</p><p>  port: “22”</p><p>  user: root</p><p> - address: 192.168.5.42 #节点ip</p><p>  modules: #节点组件</p><p>   - newben</p><p>   - etcd</p><p>   - web</p><p>  password: password</p><p>  port: “22”</p><p>  user: root</p><p>registryDomain: registry.cluster.local # registry使用的域名</p><p>vmregistryDomain: vmregistry.cluster # vm registry使用的域名</p><p>…</p><h4 id="复制nbd文件到install目录"><a href="#复制nbd文件到install目录" class="headerlink" title="复制nbd文件到install目录"></a>复制nbd文件到install目录</h4><p>install目录执行以下命令复制安装二进制文件</p><p>cp bin&#x2F;linux-amd64&#x2F;nbd .</p><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><p># 关闭防火墙 且 禁止防火墙开机自起</p><p>systemctl stop firewalld &amp;&amp; systemctl disable firewalld</p><h4 id="执行安装命令"><a href="#执行安装命令" class="headerlink" title="执行安装命令"></a>执行安装命令</h4><p>.&#x2F;nbd -c config.yaml install</p><h4 id="修改daemon-json文件"><a href="#修改daemon-json文件" class="headerlink" title="修改daemon.json文件"></a>修改daemon.json文件</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">echo</span> &lt;<span class="hljs-symbol">&lt;EOF&gt;</span>/etc/docker/daemon.json<br>&#123;<span class="hljs-string">&quot;cluster-store&quot;</span>:<span class="hljs-comment">&quot;etcd://192.168.5.40:2379,</span><br><span class="hljs-number">192.168</span>.<span class="hljs-number">5.41</span>:<span class="hljs-number">2379</span>,<br><span class="hljs-number">192.168</span>.<span class="hljs-number">5.41</span>:<span class="hljs-number">2379</span><span class="hljs-comment">&quot;,</span><br><span class="hljs-string">&quot;log-driver&quot;</span>:<span class="hljs-string">&quot;json-file&quot;</span>,<br><span class="hljs-string">&quot;log-opts&quot;</span>:&#123;<br><span class="hljs-string">&quot;max-file&quot;</span>:<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;max-size&quot;</span>:<span class="hljs-string">&quot;10m&quot;</span><br>&#125;<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">echo</span> &gt;/etc/docker/daemon.json&lt;&lt;EOF<br>&#123;<br><span class="hljs-string">&quot;cluster-store&quot;</span>:<br><span class="hljs-comment">&quot;etcd://192.168.5.50:2379,</span><br><span class="hljs-number">192.168</span>.<span class="hljs-number">5.51</span>:<span class="hljs-number">2379</span>,<br><span class="hljs-number">192.168</span>.<span class="hljs-number">5.52</span>:<span class="hljs-number">2379</span><span class="hljs-comment">&quot;,</span><br><span class="hljs-string">&quot;log-driver&quot;</span>:<span class="hljs-string">&quot;json-file&quot;</span>,<br><span class="hljs-string">&quot;log-opts&quot;</span>:&#123;<br><span class="hljs-string">&quot;max-file&quot;</span>:<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;max-size&quot;</span>:<span class="hljs-string">&quot;10m&quot;</span><br>&#125;<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><h4 id="重启docker服务"><a href="#重启docker服务" class="headerlink" title="重启docker服务"></a>重启docker服务</h4><p>systemctl restart docker</p><h4 id="替换newben镜像"><a href="#替换newben镜像" class="headerlink" title="替换newben镜像"></a>替换newben镜像</h4><p>load镜像</p><p>docker load -i bootstrap.tgz</p><p>push到newben镜像仓库</p><p>docker push registry.cluster.local&#x2F;newben&#x2F;newben:cbc0f1e5</p><h4 id="更新config文件"><a href="#更新config文件" class="headerlink" title="更新config文件"></a>更新config文件</h4><p>moduleImages: #各个组件使用到的镜像</p><p> chrony: registry.cluster.local&#x2F;newben&#x2F;chrony:v3.5-local</p><p> etcd: registry.cluster.local&#x2F;newben&#x2F;etcd:v3.4.12</p><p> log: registry.cluster.local&#x2F;newben&#x2F;log:v0.0.2</p><p> newben: registry.cluster.local&#x2F;newben&#x2F;newben:cbc0f1e5  # 更新为导入的newben的镜像</p><p> ui: registry.cluster.local&#x2F;newben&#x2F;newben-ui:v3.3.9.3</p><p> registry: registry.cluster.local&#x2F;newben&#x2F;registry:2.7.1</p><p> rqlite: registry.cluster.local&#x2F;newben&#x2F;rqlite:5.4.0</p><p> web: registry.cluster.local&#x2F;newben&#x2F;newben-web:v3.3.9.3</p><p> webBinfmt: registry.cluster.local&#x2F;newben&#x2F;binfmt:latest</p><p> webBuildkit: registry.cluster.local&#x2F;newben&#x2F;buildkit:buildx-stable-1</p><h4 id="更新newben组件"><a href="#更新newben组件" class="headerlink" title="更新newben组件"></a>更新newben组件</h4><p>进入install目录执行更新newben命令</p><p>.&#x2F;nbd -c config.yaml update newben</p><p>newben检查</p><p>创建一个nginx应用，能正常调度和访问即可</p><h3 id="ceph安装"><a href="#ceph安装" class="headerlink" title="ceph安装"></a>ceph安装</h3><h4 id="离线安装包-1"><a href="#离线安装包-1" class="headerlink" title="离线安装包"></a>离线安装包</h4><p>[root@node-5-40 ceph]# ll</p><p>total 2009832</p><p>-rw-r–r–. 1 root root   313987 Dec 13 21:26 cephadm（修改后的）</p><p>-rw-r–r–. 1 root root 1817395712 Dec 13 21:29 ceph.tgz</p><p>-rw-r–r–. 1 root root 240351292 Dec 13 21:27 local-repo.tgz</p><p>[root@node-5-40 ceph]#</p><p>cephadm从官网下载后由于需要离线安装，进行了代码修改：</p><p>1、把默认镜像和版本修改准备的离线安装包镜像和版本</p><p>DEFAULT_IMAGE &#x3D; ‘quay.io&#x2F;ceph&#x2F;ceph:v15’</p><p>DEFAULT_IMAGE_RELEASE &#x3D; ‘octopus’</p><p>2、注释掉部分拉镜像的代码，避免去官网拉去镜像</p><p>def _pull_image(ctx, image, insecure&#x3D;False)不要全部屏蔽了，屏蔽部分即可</p><p>def _pull_image(ctx, image, insecure&#x3D;False):</p><p>  # type: (CephadmContext, str, bool) -&gt; None</p><p>  logger.info(‘Pulling container image %s…’ % image)</p><p>  ignorelist &#x3D; [</p><p>​    ‘error creating read-write layer with ID’,</p><p>​    ‘net&#x2F;http: TLS handshake timeout’,</p><p>​    ‘Digest did not match, expected’,</p><p>  ]</p><p>#  cmd &#x3D; [ctx.container_engine.path, ‘images’, image]</p><p>#  if isinstance(ctx.container_engine, Podman):</p><p>#    if insecure:</p><p>#      cmd.append(‘–tls-verify&#x3D;false’)</p><p>#    if os.path.exists(‘&#x2F;etc&#x2F;ceph&#x2F;podman-auth.json’):</p><p>#      cmd.append(‘–authfile&#x3D;&#x2F;etc&#x2F;ceph&#x2F;podman-auth.json’)</p><p>#  cmd_str &#x3D; ‘ ‘.join(cmd)</p><p>#  for sleep_secs in [1, 4, 25]:</p><p>#    out, err, ret &#x3D; call(ctx, cmd)</p><p>#    if not ret:</p><p>#      return</p><p>#    if not any(pattern in err for pattern in ignorelist):</p><p>#      raise Error(‘Failed command: %s’ % cmd_str)</p><p>#    logger.info(‘<code>%s</code> failed transiently. Retrying. waiting %s seconds…’ % (cmd_str, sleep_secs))</p><p>#    time.sleep(sleep_secs)</p><p>#  raise Error(‘Failed command: %s: maximum retries reached’ % cmd_str)</p><p>ceph.tgz是离线镜像包，镜像列表如下：</p><p>quay.io&#x2F;ceph&#x2F;ceph:v15</p><p>quay.io&#x2F;ceph&#x2F;ceph-grafana:6.7.4</p><p>quay.io&#x2F;prometheus&#x2F;prometheus:v2.18.1</p><p>quay.io&#x2F;prometheus&#x2F;alertmanager:v0.20.0</p><p>quay.io&#x2F;prometheus&#x2F;node-exporter:v0.18.1</p><p>local-repo.tgz为离线镜像源，主要有python3和ceph-common的离线镜像</p><h4 id="配置域名解析"><a href="#配置域名解析" class="headerlink" title="配置域名解析"></a>配置域名解析</h4><p>先在三台机器上，修改 &#x2F;etc&#x2F;hosts 文件，添加下面内容：</p><p># ceph 集群节点主机名对应的 ip，每个节点都需要添加</p><p>192.168.5.40 node-5-40</p><p>192.168.5.41 node-5-41</p><p>192.168.5.42 node-5-42</p><h4 id="关闭防火墙-1"><a href="#关闭防火墙-1" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><p># 关闭防火墙 且 禁止防火墙开机自起</p><p>systemctl stop firewalld &amp;&amp; systemctl disable firewalld</p><h4 id="安装导入镜像"><a href="#安装导入镜像" class="headerlink" title="安装导入镜像"></a>安装导入镜像</h4><p>说明：所有节点需要执行</p><p>docker load -i ceph.tgz</p><h4 id="安装python3和ceph-common"><a href="#安装python3和ceph-common" class="headerlink" title="安装python3和ceph-common"></a>安装python3和ceph-common</h4><p>说明：所有节点需要执行</p><h4 id="解压local-repo-tgz文件"><a href="#解压local-repo-tgz文件" class="headerlink" title="解压local-repo.tgz文件"></a>解压local-repo.tgz文件</h4><p>tar -zxvf local-repo.tgz</p><h4 id="配置本地离线源"><a href="#配置本地离线源" class="headerlink" title="配置本地离线源"></a>配置本地离线源</h4><p># 备份源</p><p>mv &#x2F;etc&#x2F;yum.repos.d &#x2F;etc&#x2F;yum.repos.d.bk</p><p>mkdir -p &#x2F;etc&#x2F;yum.repos.d</p><p># 新建源</p><p>touch &#x2F;etc&#x2F;yum.repos.d&#x2F;local.repo</p><p># 编辑local.repo内容为:</p><p>[local]</p><p>name&#x3D;CentOS-$releasever-local</p><p>baseurl&#x3D;file:&#x2F;&#x2F;&#x2F;chj&#x2F;ceph&#x2F;7</p><p>#baseurl&#x3D;<a href="http://mirror.centos.org/centos/">http://mirror.centos.org/centos/</a>$releasever&#x2F;os&#x2F;$basearch&#x2F;</p><p>gpgcheck&#x3D;0</p><p>gpgkey&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-CentOS-7</p><p># 更新源</p><p>yum clean all &amp;&amp; yum makecache</p><h4 id="安装python3和ceph-common-1"><a href="#安装python3和ceph-common-1" class="headerlink" title="安装python3和ceph-common"></a>安装python3和ceph-common</h4><p>yum install -y python3 ceph-common</p><h4 id="开机加载rbd和ceph命令"><a href="#开机加载rbd和ceph命令" class="headerlink" title="开机加载rbd和ceph命令"></a>开机加载rbd和ceph命令</h4><p>在&#x2F;etc&#x2F;profile.d&#x2F;目录下新建modprobe.sh文件，文件内容为：</p><p>#!&#x2F;bin&#x2F;sh</p><p>modprobe rbd</p><p>modprobe ceph</p><h4 id="安装cephadm"><a href="#安装cephadm" class="headerlink" title="安装cephadm"></a>安装cephadm</h4><p>说明：只需要在引导节点执行</p><p>cp cephadm &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</p><p>chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;cephadm</p><h4 id="引导集群"><a href="#引导集群" class="headerlink" title="引导集群"></a>引导集群</h4><p>cephadm bootstrap –mon-ip 192.168.5.40</p><p># UI登录密码</p><p>Creating initial admin user…</p><p>Fetching dashboard port number…</p><p>Ceph Dashboard is now available at:</p><p>​       URL: <a href="https://node-5-42:8443/">https://node-5-42:8443/</a></p><p>​      User: admin</p><p>​    Password: nhvep2vucg</p><h4 id="登录到UI管理界面"><a href="#登录到UI管理界面" class="headerlink" title="登录到UI管理界面"></a>登录到UI管理界面</h4><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image002.gif" alt="img"></p><h4 id="配置节点免密"><a href="#配置节点免密" class="headerlink" title="配置节点免密"></a>配置节点免密</h4><p>说明：只需要在引导节点执行</p><p>ssh-copy-id -f -i &#x2F;etc&#x2F;ceph&#x2F;ceph.pub root@node-5-41</p><p>ssh-copy-id -f -i &#x2F;etc&#x2F;ceph&#x2F;ceph.pub root@node-5-40</p><h4 id="加入节点"><a href="#加入节点" class="headerlink" title="加入节点"></a>加入节点</h4><p>说明：只需要在引导节点执行</p><p>添加成功后需要等待一段时间，待其它主机上的容器起来</p><p>[root@node-5-42 &#x2F;]# ceph orch host add node-5-41 192.168.5.41</p><p>Added host ‘node-5-41’</p><p>[root@node-5-42 &#x2F;]# ceph orch host add node-5-40 192.168.5.40</p><p>Added host ‘node-5-40’</p><p>[root@node-5-42 &#x2F;]#</p><h4 id="部署OSD"><a href="#部署OSD" class="headerlink" title="部署OSD"></a>部署OSD</h4><p>说明：在引导节点执行</p><p>ceph-volume 会不时扫描集群中的每个主机，以确定存在哪些设备以及这些设备是否可用做 OSD。要查看 cephadm 发现的设备列表，可运行以下命令：</p><p># ceph orch device ls [–hostname&#x3D;…] [–wide] [–refresh]</p><p>ceph orch device ls</p><p>输出类似如下：</p><p>[root@node-5-50 ~]# ceph orch device ls</p><p>Hostname  Path   Type Serial Size  Health  Ident Fault Available</p><p>node-5-50 &#x2F;dev&#x2F;sdb hdd      214G Unknown N&#x2F;A  N&#x2F;A  Yes</p><p>node-5-51 &#x2F;dev&#x2F;sdb hdd      214G Unknown N&#x2F;A  N&#x2F;A  Yes</p><p>node-5-52 &#x2F;dev&#x2F;sdb hdd      214G Unknown N&#x2F;A  N&#x2F;A  Yes</p><p>说明：使用 –wide 选项提供与设备相关的所有详细信息，包括设备可能不适合用作 OSD 的任何原因</p><p>如果满足以下所有条件，则认为存储设备可用：</p><p>1）设备必须没有分区</p><p>2）设备不得具有任何 LVM 状态</p><p>3）设备必须没有被挂载</p><p>4）设备必须没有包含任何文件系统</p><p>5）设备不得包含 Ceph BlueStore OSD</p><p>6）设备必须大于 5GB</p><p>注意：Ceph的数据盘必须满足以上的6个条件才能在ceph orch device ls执行后显示出来，虚拟机可以直接使用vcenter给各个节点加一块磁盘即可，加盘后需要一定时间才能识别</p><p>指定主机指定设备创建OSD</p><p># ceph orch daemon add osd <em><host></em>:<em><device-path></em></p><p>ceph orch daemon add osd node-5-50:&#x2F;dev&#x2F;sdb</p><p>ceph orch daemon add osd node-5-51:&#x2F;dev&#x2F;sdb</p><p>ceph orch daemon add osd node-5-52:&#x2F;dev&#x2F;sdb</p><p>检查OSD的状态，up即为正常</p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\1640250091654.png" alt="1640250091654"></p><h2 id="使用Ceph提供对象存储"><a href="#使用Ceph提供对象存储" class="headerlink" title="使用Ceph提供对象存储"></a>使用Ceph提供对象存储</h2><h4 id="创建pool"><a href="#创建pool" class="headerlink" title="创建pool"></a>创建pool</h4><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\1640250370024.png" alt="1640250370024"></p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\1640250117462.png" alt="1640250117462"></p><p>备注：建议使用命令创建，上面页面创建会存在告警</p><p># ceph osd pool create <poolname> <pg_num> <pgp_num></p><p>ceph osd pool create chj-new 32 32</p><p># ceph osd pool application enable <poolname> <appname></p><p># <app-name> is ‘cephfs’, ‘rbd’, ‘rgw’, or freeform for custom applications</p><p>ceph osd pool application enable chj-new rbd</p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\1640250209231.png" alt="1640250209231"></p><h3 id="newben使用CephRBD"><a href="#newben使用CephRBD" class="headerlink" title="newben使用CephRBD"></a>newben使用CephRBD</h3><p>1、创建CephRBD存储池</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image008.gif" alt="img"></p><p>参数填写信息可以在ceph集群后台通过命令查看</p><p>[root@node-5-50 ceph]# pwd</p><p>&#x2F;etc&#x2F;ceph</p><p>[root@node-5-50 ceph]# ll</p><p>total 16</p><p>-rw——- 1 root root 63 Dec 7 15:53 ceph.client.admin.keyring</p><p>-rw-r–r– 1 root root 175 Dec 7 15:53 ceph.conf</p><p>-rw-r–r– 1 root root 595 Dec 7 15:53 ceph.pub</p><p>-rw-r–r– 1 root root 92 Oct 20 22:50 rbdmap</p><p>[root@node-5-50 ceph]# cat ceph.client.admin.keyring</p><p>[client.admin]</p><p>​    key &#x3D; AQDhEq9hgPHtARAAZTCsINCYiqBdFD4E5HnPQA&#x3D;&#x3D;</p><p>[root@node-5-50 ceph]# cat ceph.conf</p><p># minimal ceph.conf for 7b9103f0-5732-11ec-8377-0050568823ff</p><p>[global]</p><p>​    fsid &#x3D; 7b9103f0-5732-11ec-8377-0050568823ff</p><p>​    mon_host &#x3D; [v2:192.168.5.50:3300&#x2F;0,v1:192.168.5.50:6789&#x2F;0]</p><p>[root@node-5-50 ceph]#</p><p>2、创建CephRBD存储卷</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image010.gif" alt="img"></p><p>3、newben集群节点安装和Ceph集群同版本的ceph-common</p><p>使用yum install ceph-commom安装的版本为10版本，和实际不匹配，可以直接使用cephadm进行安装</p><p>具体参考安装“安装Cephadm”和“添加Ceph命令”章节，安装出来如下或者为16版本即可：</p><p>ceph version 15.2.15 (2dfb18841cfecc2f7eb7eb2afd65986ca4d95985) octopus (stable)</p><p>4、节点加载ceph和rbd模块：modprobe ceph和modprobe rbd</p><p>[root@node-5-50 ~]# lsmod | grep ceph</p><p>[root@node-5-50 ~]# lsmod | grep rbd</p><p>[root@node-5-50 ~]# modprobe ceph</p><p>[root@node-5-50 ~]# lsmod | grep ceph</p><p>ceph         358802 0</p><p>libceph        306625 1 ceph</p><p>dns_resolver      13140 1 libceph</p><p>libcrc32c       12644 2 xfs,libceph</p><p>[root@node-5-50 ~]# modprobe rbd</p><p>[root@node-5-50 ~]# lsmod | grep rbd</p><p>rbd          83640 0</p><p>libceph        306625 2 rbd,ceph</p><p>5、创建应用使用Cephrbd存储卷</p><h3 id="使用Ceph提供文件存储"><a href="#使用Ceph提供文件存储" class="headerlink" title="使用Ceph提供文件存储"></a>使用Ceph提供文件存储</h3><p>说明：操作在引导节点执行</p><h4 id="创建文件系统"><a href="#创建文件系统" class="headerlink" title="创建文件系统"></a>创建文件系统</h4><p>1、使用 CEPHFS 文件系统需要一个或多个 MDS 守护进程</p><p>2、创建两个存储池，cephfs_metadata 用于存文件系统元数据，cephfs_data 用于存文件系统数据</p><p># ceph osd pool create <poolname> <pg_num> <pgp_num></p><p>ceph osd pool create cephfs_metadata 32 32</p><p>ceph osd pool create cephfs_data 32 32</p><p># ceph osd pool application enable <poolname> <appname></p><p># <app-name> is ‘cephfs’, ‘rbd’, ‘rgw’, or freeform for custom applications</p><p>ceph osd pool application enable cephfs_metadata cephfs</p><p>ceph osd pool application enable cephfs_data cephfs</p><p>3、创建文件系统</p><p>ceph fs new chjfs cephfs_metadata cephfs_data</p><p>4、部署MDS</p><p>ceph orch apply mds chjfs –placement&#x3D;”3 node-5-50 node-5-51 node-5-52”</p><p>5、查看文件系统和MDS状态</p><p>[root@node-5-50 ceph]# ceph fs ls</p><p>name: koenlifs, metadata pool: cephfs_metadata, data pools: [cephfs_data ]</p><p>[root@node-5-50 ceph]# ceph mds stat</p><p>koenlifs:1 {0&#x3D;koenlifs.node-5-51.pmmwla&#x3D;up:active} 2 up:standby</p><p>[root@node-5-50 ceph]#</p><h4 id="newben使用CephFS"><a href="#newben使用CephFS" class="headerlink" title="newben使用CephFS"></a>newben使用CephFS</h4><p>1、创建CephFS存储池</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image012.gif" alt="img"></p><p>2、创建cephFS存储卷</p><p><img src="file:///C:/Users/liyupi/AppData/Local/Temp/msohtmlclip1/01/clip_image014.gif" alt="img"></p><p>3、其它步骤CephRBD的使用差不多，这里不再介绍。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>centos7 安装docker</title>
    <link href="/2022/07/12/centos7%20%E5%AE%89%E8%A3%85docker/"/>
    <url>/2022/07/12/centos7%20%E5%AE%89%E8%A3%85docker/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="centos7-安装docker"><a href="#centos7-安装docker" class="headerlink" title="centos7 安装docker"></a>centos7 安装docker</h1><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-built_in">mv</span>  /etc/yum.repos.d/  /etc/yum.repos.d.bk/<br><span class="hljs-built_in">mkdir</span> -p /etc/yum.repos.d/<br>curl -o  /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<br>curl -o  /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo<br>yum repolist<br><br></code></pre></td></tr></table></figure><ol><li>下载 docker 一键安装脚本</li></ol>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL get.docker.com -o get-docker.sh<br></code></pre></td></tr></table></figure><ol start="2"><li>执行 docker 一键安装 (使用阿里云的 docker 镜像源)</li></ol>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh get-docker.sh --mirror Aliyun<br></code></pre></td></tr></table></figure><ol start="3"><li>修改 dockerd 配置</li></ol>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">  <span class="hljs-built_in">mkdir</span> /etc/docker<br> <span class="hljs-built_in">tee</span> /etc/docker/daemon.json&lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>  &#123;<br>    <span class="hljs-string">&quot;exec-opts&quot;</span>: [<span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span>],<br>    <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://f49zmr5h.mirror.aliyuncs.com&quot;</span>],<br>    <span class="hljs-string">&quot;log-driver&quot;</span>: <span class="hljs-string">&quot;json-file&quot;</span>,<br>    <span class="hljs-string">&quot;log-opts&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;max-size&quot;</span>: <span class="hljs-string">&quot;100m&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;storage-driver&quot;</span>: <span class="hljs-string">&quot;overlay2&quot;</span><br>  &#125;<br>EOF<br></code></pre></td></tr></table></figure><ol start="4"><li><p>部署docker 的应用建议在docker自定义配置目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl stop docker<br>systemctl status docker<br><span class="hljs-built_in">mv</span> /var/lib/docker /home/data<br>sed -i <span class="hljs-string">&#x27;s#ExecStart=/usr/bin/dockerd#ExecStart=/usr/bin/dockerd --graph /home/data#&#x27;</span> /usr/lib/systemd/system/docker.service<br>systemctl daemon-reload <br>systemctl start docker      <br>systemctl <span class="hljs-built_in">enable</span> docker.service <br></code></pre></td></tr></table></figure></li><li><p>启动 docker 并添加到自启动服务</p></li></ol>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl --now <span class="hljs-built_in">enable</span> docker<br>systemctl start docker<br><br></code></pre></td></tr></table></figure><h2 id="部署节点准备"><a href="#部署节点准备" class="headerlink" title="部署节点准备"></a>部署节点准备</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>在 centos 7 上搭建 nfs</title>
    <link href="/2022/07/12/centos7%20NFS%20%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/07/12/centos7%20NFS%20%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="NFS-搭建"><a href="#NFS-搭建" class="headerlink" title="NFS 搭建"></a>NFS 搭建</h1><h1 id="NFS-搭建-1"><a href="#NFS-搭建-1" class="headerlink" title="NFS 搭建"></a><a href="#nfs-%E6%90%AD%E5%BB%BA">NFS 搭建</a></h1><h2 id="在-centos-7-上搭建-nfs"><a href="#在-centos-7-上搭建-nfs" class="headerlink" title="在 centos 7 上搭建 nfs"></a><a href="#%E5%9C%A8-centos-7-%E4%B8%8A%E6%90%AD%E5%BB%BA-nfs">在 centos 7 上搭建 nfs</a></h2><ol><li>安装     nfs-utils</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y nfs-utils<br></code></pre></td></tr></table></figure><ol><li>关闭防火墙</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sed -i <span class="hljs-string">&#x27;s/SELINUX=enforcing/SELINUX=permissive/&#x27;</span> /etc/selinux<span class="hljs-built_in">/config</span><br><span class="hljs-built_in"></span>setenforce 0<br> <br>systemctl stop firewalld<br>systemctl <span class="hljs-built_in">disable</span> firewalld<br></code></pre></td></tr></table></figure><ol><li>配置 nfs 的 exports</li></ol><p>导出一个 &#x2F;nfs 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /nfs<br> <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/nfs *(rw,sync,insecure,no_subtree_check,no_root_squash)&quot;</span> &gt;&gt; /etc/exports<br></code></pre></td></tr></table></figure><ol><li>重启服务</li></ol><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl restart nfs<br><span class="hljs-params">system</span>ctl --now enable nfs<br></code></pre></td></tr></table></figure><ol><li>测试</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">mount -t nfs your_nfs_ip:<span class="hljs-regexp">/nfs /m</span>nt<br></code></pre></td></tr></table></figure><h2 id="在-Debian-上搭建-NFS"><a href="#在-Debian-上搭建-NFS" class="headerlink" title="在 Debian 上搭建 NFS"></a><a href="#%E5%9C%A8-debian-%E4%B8%8A%E6%90%AD%E5%BB%BA-nfs">在 Debian 上搭建 NFS</a></h2><p>\1. 安装 nfs-common, nfs-kernel-server</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-number">2.</span>  apt-<span class="hljs-built_in">get</span> install <span class="hljs-built_in">nfs</span>-common <span class="hljs-built_in">nfs</span>-kernel-server<br></code></pre></td></tr></table></figure><p>\3. 配置 NFS 的 exports</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /nfs<br> <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/nfs *(rw,sync,insecure,no_subtree_check,no_root_squash)&quot;</span> &gt;&gt; /etc/exports<br></code></pre></td></tr></table></figure><p>\3. 重启服务</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">4.</span>  systemctl restart nfs-kernel-server<br><span class="hljs-bullet">5.</span>  # 查看导出<br><span class="hljs-bullet">6.</span>  showmount -e localhost<br></code></pre></td></tr></table></figure><p>\7. 测试</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">mount -t nfs localhost:<span class="hljs-regexp">/nfs /m</span>nt/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>centos7安装Anaconda</title>
    <link href="/2022/07/12/centos7%E5%AE%89%E8%A3%85Anaconda/"/>
    <url>/2022/07/12/centos7%E5%AE%89%E8%A3%85Anaconda/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="centos7安装Anaconda"><a href="#centos7安装Anaconda" class="headerlink" title="centos7安装Anaconda"></a>centos7安装Anaconda</h1><p>！！！不要在root下创建anaconda环境</p><ol><li><p>获取Anaconda<br>wget <a href="https://repo.anaconda.com/archive/Anaconda3-2020.07-Linux-x86_64.sh">https://repo.anaconda.com/archive/Anaconda3-2020.07-Linux-x86_64.sh</a><br>1</p></li><li><p>执行<br>bash Anaconda3-2020.07-Linux-x86_64.sh<br>1</p></li><li><p>根据提示按ENTER<br>该yes的yes</p></li><li><p>输入python验证环境</p></li><li><p>一些基本命令</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 假如上面输入python没用，那么就需要把Anaconda重新加入环境<br><br><span class="hljs-keyword">export</span> PATH=/home/(your_user_name)/anaconda3/bin:$PATH<br>source .bashrc<br><br>### 配置源<br><br>pip install pip -U<br>pip config set global.index-url https:<span class="hljs-comment">//pypi.tuna.tsinghua.edu.cn/simple</span><br><br>### 测试是否安装成功<br><br>conda --version<br><br>### 查看当前存在哪些环境<br><br>conda env list<br><br>### 创建新的虚拟环境<br><br>conda create -n your_env_name python=X.X（<span class="hljs-number">2.7</span>、<span class="hljs-number">3.6</span>等）<br><br>### 激活虚拟环境<br><br>source activate your_env_name<br><br>### 安装conda没有的包<br><br>pip install pckage_name<br><br>### 关闭虚拟环境<br><br>source deactivate<br><br>### 删除虚拟环境<br><br>conda remove -n your_env_name -all<br><br>#载入别人共享的环境<br>conda env update -f=/path/文件名.yml<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CentOS 7环境 LVM逻辑卷创建与管理</title>
    <link href="/2022/07/12/CentOS%207%E7%8E%AF%E5%A2%83%20LVM%E9%80%BB%E8%BE%91%E5%8D%B7%E5%88%9B%E5%BB%BA%E4%B8%8E%E7%AE%A1%E7%90%86/"/>
    <url>/2022/07/12/CentOS%207%E7%8E%AF%E5%A2%83%20LVM%E9%80%BB%E8%BE%91%E5%8D%B7%E5%88%9B%E5%BB%BA%E4%B8%8E%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="CentOS-7环境-LVM逻辑卷创建与管理"><a href="#CentOS-7环境-LVM逻辑卷创建与管理" class="headerlink" title="CentOS 7环境 LVM逻辑卷创建与管理"></a>CentOS 7环境 LVM逻辑卷创建与管理</h1><p>一、逻辑卷管理器（LVM）</p><p>允许对卷进行方便操作的抽象层，包括重新设定文件系统的大小</p><p>允许在多个物理设备间重新组织文件系统</p><ul><li>将设备指定为物理卷</li><li>用一个或者多个物理卷来创建一个卷组</li><li>物理卷是用固定大小的物理区域（Physical Extent，PE）来定义的</li><li>在物理卷上创建的逻辑卷是由物理区域（PE）组成</li><li>可以在逻辑卷上创建文件系统</li></ul><p> <img src="https://www.linuxidc.com/upload/2018_08/180824200256731.png" alt="img"></p><p>二、LVM更改文件系统的容量</p><p>LVM可以弹性的更改LVM的容量</p><p>通过交换PE来进行资料的转换，将原来LV内的PE转移到其他的设备中以降低LV的容量，或将其他设备中的PE加到LV中以加大容量</p><p><img src="https://www.linuxidc.com/upload/2018_08/180824200256732.png" alt="img"></p><p>三、实验环境：</p><p><a href="https://www.linuxidc.com/topicnews.aspx?tid=14">CentOS</a> 7  linux系统</p><p>vmware workstation 14 虚拟机</p><p>四、操作步骤：</p><p>1.将已经安装好centos7的虚拟机添加多块硬盘。</p><p><img src="https://www.linuxidc.com/upload/2018_08/180824200256733.png" alt="img"></p><p>2.用xshell连入系统内，lsblk查看新插入硬盘情况，如果未显示新添加的磁盘，需用 echo “- - -“ &gt; &#x2F;sys&#x2F;class&#x2F;scsi_host&#x2F;host0&#x2F;scan，此命令进行激活，激活后即可查看到新加的磁盘。</p><p><img src="https://www.linuxidc.com/upload/2018_08/180824200256734.png" alt="img"></p><p>3.创建PV物理卷，将新添加的磁盘进行整盘PV创建，也可以根据需要将磁盘分区后，选择性进行pv创建。本次实验将对整盘进行pv创建。命令为：pvcreate &#x2F;dev&#x2F;sdb,pvcreate &#x2F;dev&#x2F;sdc ,pvcreate &#x2F;dev&#x2F;sdd,创建成功后会显示successfully created,可以用pvs或者pvdisplay查看创建的pv状态。</p><p><img src="https://www.linuxidc.com/upload/2018_08/180824200256735.png" alt="img"></p><p>4.创建vg卷组，卷组是用来管理物理卷的集合，用命令：vgcreate -s 16M vg0 &#x2F;dev&#x2F;sd{b,c,d}，其中-s 指定PE块的大小，有4M,8M,16M,32M几种选择，vg0为卷组名称，&#x2F;dev&#x2F;sd{b,c,d} 同时将sdb,sdc,sdd加入到卷组。通过vgs或vgdisplay查看已创建好的卷组。</p><p><img src="https://www.linuxidc.com/upload/2018_08/180824200256736.png" alt="img"></p><p>5.创建LV逻辑卷，命令为：lvcreate -L 20G -n lv0 vg0,-L 20G 为指定逻辑卷大小为20G，-n lv0为指定逻辑卷名字lv0 最后跟卷组名称vg0。</p><p>创建成功后，通过lvs或者lvdisplay命令查看lv逻辑卷信息。</p><p><img src="https://www.linuxidc.com/upload/2018_08/180824200256737.png" alt="img"></p><p>6.创建lv逻辑卷的文件系统：mkfs.xfs &#x2F;dev&#x2F;vg0&#x2F;lv0,创建lv0逻辑卷的文件系统为xfs格式（注：如使用cenos6,则需创建为ext4格式），创建挂载点文件夹，并将lv0逻辑卷挂载到挂载点。</p><p><img src="https://www.linuxidc.com/upload/2018_08/180824200256738.png" alt="img"></p><p>7.查看lv0逻辑卷的UUID，命令：blkid ,查看uuid后记录好，用vim &#x2F;etc&#x2F;fstable 工具打开文件，将lv0逻辑卷的相关信息填入到文件内，保存退出后，用mount -a命令重新加载&#x2F;etc&#x2F;fstable ，这样就可以实现lv逻辑卷的永久挂载，重启或者关机就不会丢失挂载信息了。</p><p><img src="https://www.linuxidc.com/upload/2018_08/180824200256739.png" alt="img"></p><p>8.扩展逻辑卷：如果vg卷组内有剩余空间，可以将剩余空间扩展到逻辑卷内，命令：lvextend -r -L +3G &#x2F;dev&#x2F;vg0&#x2F;lv0,-r 选项一定要加，这样可以将逻辑卷和文件系统一起扩容。</p><p><img src="https://www.linuxidc.com/upload/2018_08/1808242002567310.png" alt="img"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ansible 命令</title>
    <link href="/2022/07/12/ansible%20%20%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/07/12/ansible%20%20%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="ansible-命令"><a href="#ansible-命令" class="headerlink" title="ansible  命令"></a>ansible  命令</h1><h2 id="关闭seliux"><a href="#关闭seliux" class="headerlink" title="关闭seliux"></a>关闭seliux</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible node -m selinux -a <span class="hljs-string">&quot;state=disabled&quot;</span> <br><br><br></code></pre></td></tr></table></figure><h2 id="开启yum缓存"><a href="#开启yum缓存" class="headerlink" title="开启yum缓存"></a>开启yum缓存</h2><figure class="highlight csp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csp">ansible mysql -m lineinfile -a &quot;path=/etc/yum.conf regexp=<span class="hljs-string">&#x27;^keepcache&#x27;</span> line=<span class="hljs-string">&#x27;keepcache=1&#x27;</span>&quot; <br></code></pre></td></tr></table></figure><h2 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a>设置主机名</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> no <span class="hljs-keyword">in</span> node-&#123;101..105&#125;;<span class="hljs-keyword">do</span> ansible <span class="hljs-variable">$no</span> -m hostname -a <span class="hljs-string">&quot;name=<span class="hljs-variable">$no</span>&quot;</span> -i hosts;<span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h2 id="关闭ssh服务dns解析"><a href="#关闭ssh服务dns解析" class="headerlink" title="关闭ssh服务dns解析"></a>关闭ssh服务dns解析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible node -m lineinfile -a <span class="hljs-string">&quot;path=/etc/ssh/sshd_config regexp=&#x27;^#UseDNS&#x27; line=&#x27;UseDNS no&#x27;&quot;</span> <br>ansible node -m systemd -a <span class="hljs-string">&quot;name=ssh state=restarted&quot;</span><br></code></pre></td></tr></table></figure><h2 id="linefile"><a href="#linefile" class="headerlink" title="linefile"></a>linefile</h2><p>EXAMPLES:</p><p>NOTE: Before 2.3, option ‘dest’, ‘destfile’ or ‘name’ was used instead of ‘path’</p><ul><li>&#96;&#96;&#96;<ul><li><p>name: Ensure SELinux is set to enforcing mode<br>lineinfile:<br>  path: &#x2F;etc&#x2F;selinux&#x2F;config<br>  regexp: ‘^SELINUX&#x3D;’<br>line: SELINUX&#x3D;enforcing</p></li><li><p>name: Make sure group wheel is not in the sudoers configuration<br>lineinfile:<br>  path: &#x2F;etc&#x2F;sudoers<br>  state: absent<br>  regexp: ‘^%wheel’</p></li><li><p>name: Replace a localhost entry with our own<br>lineinfile:<br>  path: &#x2F;etc&#x2F;hosts<br>  regexp: ‘^127.0.0.1’<br>  line: 127.0.0.1 localhost<br>  owner: root<br>  group: root<br>  mode: ‘0644’</p></li><li><p>name: Ensure the default Apache port is 8080<br>lineinfile:<br>  path: &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf<br>  regexp: ‘^Listen ‘<br>  insertafter: ‘^#Listen ‘<br>  line: Listen 8080</p></li><li><p>name: Ensure we have our own comment added to &#x2F;etc&#x2F;services<br>lineinfile:<br>  path: &#x2F;etc&#x2F;services<br>  regexp: ‘^# port for http’<br>  insertbefore: ‘^www.*80&#x2F;tcp’<br>  line: ‘# port for http by default’</p></li><li><p>name: Add a line to a file if the file does not exist, without passing regexp<br>lineinfile:<br>  path: &#x2F;tmp&#x2F;testfile<br>  line: 192.168.1.99 foo.lab.net foo<br>  create: yes</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">  </span><br><span class="hljs-code">  </span><br><br><span class="hljs-symbol">NOTE: </span>Yaml requires escaping backslashes in double quotes but not in single quotes<br><br><span class="hljs-bullet">- </span><span class="hljs-code">```</span><br><span class="hljs-code">  name: Ensure the JBoss memory settings are exactly as needed</span><br><span class="hljs-code">  lineinfile:</span><br><span class="hljs-code">    path: /opt/jboss-as/bin/standalone.conf</span><br><span class="hljs-code">    regexp: &#x27;^(.*)Xms(\\d+)m(.*)$&#x27;</span><br><span class="hljs-code">    line: &#x27;\1Xms$&#123;xms&#125;m\3&#x27;</span><br><span class="hljs-code">    backrefs: yes</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><p>NOTE: Fully quoted because of the ‘: ‘ on the line. See the Gotchas in the YAML docs.</p><ul><li><pre><code class="hljs">- name: Validate the sudoers file before saving  lineinfile:    path: /etc/sudoers    state: present    regexp: &#39;^%ADMIN ALL=&#39;    line: &#39;%ADMIN ALL=(ALL) NOPASSWD: ALL&#39;    validate: /usr/sbin/visudo -cf %s</code></pre></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>centos7安装与配置DNS服务器</title>
    <link href="/2022/07/12/centos7%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEDNS%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2022/07/12/centos7%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEDNS%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="centos7安装与配置DNS服务器"><a href="#centos7安装与配置DNS服务器" class="headerlink" title="centos7安装与配置DNS服务器"></a>centos7安装与配置DNS服务器</h1><p>上安装DNS服务器可以实现域名与IP的双向解析，即通过域名可以找到主机IP，也可以通过IP找到域名。在postfix搭建邮件服务器中，需要用到DNS正向解析与反向解析，因此DNS服务器大有可为。笔者以前几次试图搭建DNS服务器，均以失败告终，其实再回过头来想一想，就差那么一丢丢就可以了。下面给出一个完整的搭建DNS服务器的过程，以及需要注意的事项。</p><p>  首先需要安装bind，他是named服务的依赖，我们搭建DNS服务器就是要使用named服务，无需像有些文章所说的安装bind-chroot，另外我们需要通过一些命令比如nslookup,dig来检验我们的DNS服务是否正常，我们需要安装bind-utils，因此，整个DNS服务器的安装，就只需要安装bind,bind-utils，剩下的就是配置正向解析与反向解析。</p><p>  centos7虚拟机的相关环境，主要是hosts信息和ip信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@server named]<span class="hljs-comment"># cat /etc/hosts</span><br>127.0.0.1localhost<br>192.168.56.201server<br></code></pre></td></tr></table></figure><p>  ip信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@server named]<span class="hljs-comment"># cat /etc/sysconfig/network-scripts/ifcfg-eth0 </span><br><br><br><br>TYPE=Ethernet<br><br><br><br>BOOTPROTO=static<br><br><br><br>DEFROUTE=<span class="hljs-built_in">yes</span><br><br><br><br>IPV4_FAILURE_FATAL=<span class="hljs-built_in">yes</span><br><br><br><br>IPV6INIT=no<br><br><br><br>IPV6_AUTOCONF=<span class="hljs-built_in">yes</span><br><br><br><br>IPV6_DEFROUTE=<span class="hljs-built_in">yes</span><br><br><br><br>IPV6_PEERDNS=<span class="hljs-built_in">yes</span><br><br><br><br>IPV6_PEERROUTES=<span class="hljs-built_in">yes</span><br><br><br><br>IPV6_FAILURE_FATAL=no<br><br><br><br>NAME=eth0<br><br><br><br>UUID=aef066f9-05ef-4eed-b8b7-2bdab7687eb3<br><br><br><br>DEVICE=eth0<br><br><br><br>ONBOOT=<span class="hljs-built_in">yes</span><br><br><br><br>IPADDR=192.168.56.201<br><br><br><br>PREFIX=24<br><br><br><br>GATEWAY=192.168.56.2<br><br><br><br>DNS1=192.168.56.201<br></code></pre></td></tr></table></figure><p>  本次实验的目的是通过nslookup命令查找<a href="http://www.server.com会找到对应的ip为192.168.56.201,反向查找192.168.56.201的域名是www.server.com./">www.server.com会找到对应的ip为192.168.56.201，反向查找192.168.56.201的域名是www.server.com。</a></p><p>  1、安装bind,bind-utils</p><p>  <img src="https://img-blog.csdnimg.cn/20191023230005760.png" alt="img"></p><p>  安装成功，可以查看named服务。</p><p>  <img src="https://img-blog.csdnimg.cn/20191023231413220.png" alt="img"> </p><p>  2、配置&#x2F;etc&#x2F;named.conf，主要修改两个127.0.0.1为any</p><p>  <img src="https://img-blog.csdnimg.cn/20191023230047640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZlaW5pZmk=,size_16,color_FFFFFF,t_70" alt="img"></p><p>  3、配置&#x2F;etc&#x2F;named.rfc1912.zones，增加一个正向解析与一个反向解析的配置，可以拷贝其他的zone 配置，如下所示server.com和56.168.192.in-addr.arpa两个zone是新增的：</p><p>  <img src="https://img-blog.csdnimg.cn/20191023230206792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZlaW5pZmk=,size_16,color_FFFFFF,t_70" alt="img"></p><p>  4、拷贝&#x2F;var&#x2F;named&#x2F;目录下named.localhost和named.loopback分别为我们在named.rfc1912.zones中设置的正向解析文件server.com.zone和反向解析文件server.com.local，注意文件名的对应。</p><p>  <img src="https://img-blog.csdnimg.cn/20191023230435545.png" alt="img"></p><p>  5、有了两个文件，我们需要做修改，这里非常重要，先给出截图的设置，因为文件格式在拷贝过程中可能会发生变化。</p><p>  <img src="https://img-blog.csdnimg.cn/20191023230811265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZlaW5pZmk=,size_16,color_FFFFFF,t_70" alt="img"></p><p>  粘贴一下代码：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-meta">$TTL</span> <span class="hljs-number">1</span>D<br><br><br><br>@<span class="hljs-keyword">IN</span> <span class="hljs-keyword">SOA</span>server.com. rname.invalid. (<br><br><br><br><span class="hljs-number">0</span><span class="hljs-comment">; serial</span><br><br><br><br><span class="hljs-number">1</span>D<span class="hljs-comment">; refresh</span><br><br><br><br><span class="hljs-number">1</span>H<span class="hljs-comment">; retry</span><br><br><br><br><span class="hljs-number">1</span>W<span class="hljs-comment">; expire</span><br><br><br><br><span class="hljs-number">3</span>H )<span class="hljs-comment">; minimum</span><br><br><br><br><span class="hljs-keyword">NS</span>@<br><br><br><br><span class="hljs-keyword">A</span><span class="hljs-number">127.0.0.1</span><br><br><br><br><span class="hljs-keyword">AAAA</span><span class="hljs-number">::1</span><br><br><br><br><span class="hljs-keyword">NS</span>ns.server.com.<br><br><br><br>ns<span class="hljs-keyword">IN</span> <span class="hljs-keyword">A</span><span class="hljs-number">192.168.56.201</span><br><br><br><br>www<span class="hljs-keyword">IN</span> <span class="hljs-keyword">A</span><span class="hljs-number">192.168.56.201</span><br><br><br><br>email<span class="hljs-keyword">IN</span> <span class="hljs-keyword">A</span><span class="hljs-number">192.168.56.201</span><br></code></pre></td></tr></table></figure><p>   反向解析文件内容截图：</p><p>  <img src="https://img-blog.csdnimg.cn/20191023230843661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZlaW5pZmk=,size_16,color_FFFFFF,t_70" alt="img"> </p><p>  反向解析文件内容代码： </p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-meta">$TTL</span> <span class="hljs-number">1</span>D<br><br><br><br>@<span class="hljs-keyword">IN</span> <span class="hljs-keyword">SOA</span>server.com. rname.invalid. (<br><br><br><br><span class="hljs-number">0</span><span class="hljs-comment">; serial</span><br><br><br><br><span class="hljs-number">1</span>D<span class="hljs-comment">; refresh</span><br><br><br><br><span class="hljs-number">1</span>H<span class="hljs-comment">; retry</span><br><br><br><br><span class="hljs-number">1</span>W<span class="hljs-comment">; expire</span><br><br><br><br><span class="hljs-number">3</span>H )<span class="hljs-comment">; minimum</span><br><br><br><br><span class="hljs-keyword">NS</span>@<br><br><br><br><span class="hljs-keyword">A</span><span class="hljs-number">127.0.0.1</span><br><br><br><br><span class="hljs-keyword">AAAA</span><span class="hljs-number">::1</span><br><br><br><br><span class="hljs-keyword">PTR</span>localhost.<br><br><br><br><span class="hljs-keyword">NS</span>ns.server.com.<br><br><br><br>ns<span class="hljs-keyword">A</span><span class="hljs-number">192.168.56.201</span><br><br><br><br><span class="hljs-number">201</span><span class="hljs-keyword">PTR</span>www.server.com.<br><br><br><br><span class="hljs-number">201</span><span class="hljs-keyword">PTR</span>email.server.com.<br></code></pre></td></tr></table></figure><p>  这里named配置文件在&#x2F;etc目录下，而正向解析与反向解析文件均在&#x2F;var&#x2F;named文件夹下，需要注意一下。 </p><p>  6、这一步可选，如果反向解析文件server.com.local的所属组不是named，那么将其修改为named。</p><p>  <img src="https://img-blog.csdnimg.cn/20191023230537747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZlaW5pZmk=,size_16,color_FFFFFF,t_70" alt="img"></p><p>  7、配置本机DNS1，修改&#x2F;etc&#x2F;sysconfig&#x2F;network-script&#x2F;ifcfg-en0，设置DNS1为本机ip地址。</p><p>  <img src="https://img-blog.csdnimg.cn/20191023231153756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZlaW5pZmk=,size_16,color_FFFFFF,t_70" alt="img"></p><p>  8、重启网络，启动named服务。</p><p>  9、验证：nslookup <a href="http://www.server.com/">www.server.com</a>  &#x2F; nslookup 192.168.56.201    </p><p>  <img src="https://img-blog.csdnimg.cn/2019102323124854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZlaW5pZmk=,size_16,color_FFFFFF,t_70" alt="img">  </p><p>  如果我们停止named服务，那么nslookup查找会提示失败：</p><p>  <img src="https://img-blog.csdnimg.cn/20191023231516800.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZlaW5pZmk=,size_16,color_FFFFFF,t_70" alt="img"></p><p>  综合启动named服务时查询正确，我们可以得出结论，DNS服务配置成功了。</p><p>  以上步骤虽然很多，但是真正配置的地方就几个，一个是named.conf，再一个就是named.rfc1912.zones，然后就是两个正向解析和反向解析文件，其他的设置都是次要的，但是也很关键，比如本机DNS1的设置，server.com.local文件的所属组。 </p><p>  总结安装与配置可能出现的问题：</p><p>  一、dns设置为本机ip ， 修改文件 &#x2F;etc&#x2F;sysconfig&#x2F;network-script&#x2F;ifcfg-eth0 ，找到 DNS1&#x3D;192.168.56.201</p><p>  二、反向解析文件server.com.local文件需要正确的组，否则会因为permission denied，而导致反向解析失败。</p><p>  三、named服务正常启动，配置文件语法正确，不会出错，如果启动报错，可以通过systemctl status named查看启动状态，一般会带出启动失败的错误原因。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CentOS 7之Systemd详解之服务单元设置system.service</title>
    <link href="/2022/07/12/CentOS%207%E4%B9%8BSystemd%E8%AF%A6%E8%A7%A3%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%8D%95%E5%85%83%E8%AE%BE%E7%BD%AEsystem.service/"/>
    <url>/2022/07/12/CentOS%207%E4%B9%8BSystemd%E8%AF%A6%E8%A7%A3%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%8D%95%E5%85%83%E8%AE%BE%E7%BD%AEsystem.service/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="CentOS-7之Systemd详解之服务单元设置system-service"><a href="#CentOS-7之Systemd详解之服务单元设置system-service" class="headerlink" title="CentOS 7之Systemd详解之服务单元设置system.service"></a>CentOS 7之Systemd详解之服务单元设置system.service</h1><h3 id="名称"><a href="#名称" class="headerlink" title="名称"></a>名称</h3><p>systemd.service - 服务单元配置</p><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p><em>service</em>.service</p><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>以 .service 结尾的单元文件，用于封装一个被 systemd 监视与控制的进程。</p><p>本手册只列出专用于此种单元的选项，它们全部位于”[Service]”小节之中(通用于所有单元的选项参见 systemd.unit(5) 手册)。</p><p>其他可用的选项位于 systemd.exec(5) 手册(定义了命令的执行环境)， 以及 systemd.kill(5) 手册(定义了如何结束进程)， 以及 systemd.resource-control(5) 手册(定义了进程的资源控制)。</p><p>如果要求启动或停止的某个单元文件不存在，systemd 将会寻找同名的SysV初始化脚本(去掉 .service 后缀)， 并根据那个同名脚本动态的创建一个 service 单元。这主要用于与传统的SysV兼容(不能保证100%兼容)。 更多与SysV的兼容性可参见 Incompatibilities with SysV 文档。</p><h3 id="自动依赖"><a href="#自动依赖" class="headerlink" title="自动依赖"></a>自动依赖</h3><ul><li>设置了 Type&#x3D;dbus 的服务会自动添加 Requires&#x3D;dbus.socket 与 After&#x3D;dbus.socket 依赖</li><li>基于套接字激活的服务会自动添加对与其相关的 .socket 单元的 After&#x3D; 依赖。</li></ul><p>除非明确设置了 DefaultDependencies&#x3D;false，否则 service 单元都自动隐含如下依赖：</p><ul><li>Requires&#x3D;sysinit.target After&#x3D;sysinit.target After&#x3D;basic.target Conflicts&#x3D;shutdown.target Before&#x3D;shutdown.target 这样可以确保普通的服务单元：（1）、在基础系统启动完毕之后才开始启动，（2）、在关闭系统之前先被干净的停止。 只有那些需要在系统启动的早期就必须启动的服务，以及那些必须在关机动作的结尾才能停止的服务才需要设置 DefaultDependencies&#x3D;false 。 systemd.exec(5) 与 systemd.resource-control(5) 中的某些资源限制选项也会自动隐含的添加一些其他的依赖关系。</li><li>从同一个模版实例化出来的所有服务单元(单元名称中带有 “<code>@</code>“ 字符)， 默认全部属于与模版同名的同一个 slice 单元。 该同名 slice 一般在系统关机时，与所有模版实例一起停止。 如果你不希望像上面这样，那么可以在模版单元中明确设置 <code>DefaultDependencies=no</code> ， 并且：要么在该模版文件中明确定义特定的 slice 单元(同样也要明确设置 <code>DefaultDependencies=no</code>)、 要么在该模版文件中明确设置 <code>Slice=system.slice</code> (或其他合适的 slice)。</li></ul><h3 id="Service-小节选项"><a href="#Service-小节选项" class="headerlink" title="[Service]小节选项"></a>[Service]小节选项</h3><p>每个服务单元文件都必须包含一个”[Service]”小节。由于此小节中的许多选项也同时适用于其他类型的单元， 所以本手册仅记录了专用于服务单元的选项。其他共享的选项参见 systemd.exec(5) 与 systemd.kill(5) 手册。</p><h3 id="Type-x3D"><a href="#Type-x3D" class="headerlink" title="Type&#x3D;"></a>Type&#x3D;</h3><ul><li>设置进程的启动类型，必须是下列值之一：simple, forking, oneshot, dbus, notify, idle 之一。</li><li>如果设为”simple”(设置了 ExecStart&#x3D; 但未设置 BusName&#x3D; 时的默认值)，那么表示 ExecStart&#x3D; 所设定的进程就是该服务的主进程。 如果此进程需要为其他进程提供服务，那么必须在该进程启动之前先建立好通信渠道(例如套接字)，以加快后继单元的启动速度。</li><li>“dbus”(设置了 ExecStart&#x3D; 与 BusName&#x3D; 时的默认值)与”simple”类似，不同之处在于该进程需要在 D-Bus 上获得一个由 BusName&#x3D; 指定的名称。 systemd 将会在启动后继单元之前，首先确保该进程已经成功的获取了指定的 D-Bus 名称。设置为此类型相当于隐含的依赖于 dbus.socket 单元。</li><li>“oneshot”(未设置 ExecStart&#x3D; 时的默认值)与”simple”类似，不同之处在于该进程必须在 systemd 启动后继单元之前退出。 此种类型通常需要设置 RemainAfterExit&#x3D; 选项。</li><li>如果设为”forking”，那么表示 ExecStart&#x3D; 所设定的进程将会在启动过程中使用 fork() 系统调用。这是传统UNIX守护进程的经典做法。 也就是当所有的通信渠道都已建好、启动亦已成功之后，父进程将会退出，而子进程将作为该服务的主进程继续运行。 对于此种进程，建议同时设置 PIDFile&#x3D; 选项，以帮助 systemd 准确定位该服务的主进程，进而加快后继单元的启动速度。</li><li>“notify”与”simple”类似，不同之处在于该进程将会在启动完成之后通过 sd_notify(3) 之类的接口发送一个通知消息。 systemd 将会在启动后继单元之前，首先确保该进程已经成功的发送了这个消息。 如果设置为此类型，那么 NotifyAccess&#x3D; 将只能设置为”all”或者”main”(默认)。 注意，目前 Type&#x3D;notify 尚不能在 PrivateNetwork&#x3D;yes 的情况下正常工作。</li><li>“idle”与”simple”类似，不同之处在于该进程将会被延迟到所有的操作都完成之后再执行。 这样可以避免控制台上的状态信息与 shell 脚本的输出混杂在一起。</li></ul><h3 id="RemainAfterExit-x3D"><a href="#RemainAfterExit-x3D" class="headerlink" title="RemainAfterExit&#x3D;"></a>RemainAfterExit&#x3D;</h3><ul><li>可设为”yes”或”no”(默认值)，表示当该服务的所有进程全部退出之后，是否依然将此服务视为活动(active)状态。</li></ul><h3 id="GuessMainPID-x3D"><a href="#GuessMainPID-x3D" class="headerlink" title="GuessMainPID&#x3D;"></a>GuessMainPID&#x3D;</h3><ul><li>可设为”yes”(默认值)或”no”，表示在无法明确定位该服务的主进程的情况下，systemd 是否应该猜测主进程的PID(可能不正确)。 该选项仅在设置了 Type&#x3D;forking 但未设置 PIDFile&#x3D; 的情况下有意义。如果PID猜测错误，那么该服务的失败检测与自动重启功能将失效。</li></ul><h3 id="PIDFile-x3D"><a href="#PIDFile-x3D" class="headerlink" title="PIDFile&#x3D;"></a>PIDFile&#x3D;</h3><ul><li>守护进程的PID文件，必须是绝对路径。强烈建议在 Type&#x3D;forking 的情况下明确设置此选项。 systemd 将会在此服务启动后从此文件中读取主守护进程的PID 。systemd 不会写入此文件，但会在此服务停止后删除它(若存在)。</li></ul><h3 id="BusName-x3D"><a href="#BusName-x3D" class="headerlink" title="BusName&#x3D;"></a>BusName&#x3D;</h3><ul><li>设置与此服务通信所使用的 D-Bus 名称。在 Type&#x3D;dbus 的情况下必须明确设置此选项。</li></ul><h3 id="BusPolicy-x3D"><a href="#BusPolicy-x3D" class="headerlink" title="BusPolicy&#x3D;"></a>BusPolicy&#x3D;</h3><ul><li>如果设置了此项，那么 systemd 将会创建一个自定义的kdbus端点(endpoint)，并将其安装为该服务默认的总线节点(bus node)。 这个自定义的端点可以拥有它自己的策略规则。端点的名称就是其所服务的单元的名称。 端点的节点(node)将被绑定挂载到默认的总线节点的位置，这样该服务就只能通过它自己的端点访问总线。 注意，自定义端点的默认策略是’拒绝所有’，因此，你必须在 BusPolicy&#x3D; 中明确的添加必要的允许策略。 这个选项的值由两部分组成：总线名+访问级别，中间以空格分隔。 访问级别必须是 see, talk, own 之一，并且 talk 隐含了 see ，而 own 隐含了 talk 与 see 。 如果对同一个总线名称多次指定了访问级别，那么将以拥有最大权限的那个为准。 例如： BusPolicy&#x3D;org.freedesktop.systemd1 talk BusPolicy&#x3D;org.foo.bar see 该选项仅在内核开启了kdbus(即将并入官方内核)支持的情况下有意义。</li></ul><h3 id="ExecStart-x3D"><a href="#ExecStart-x3D" class="headerlink" title="ExecStart&#x3D;"></a>ExecStart&#x3D;</h3><ul><li>在启动该服务时需要执行的命令行(命令+参数)。有关命令行的更多细节可参见后文的”命令行”小节。 仅在设置了 Type&#x3D;oneshot 的情况下，才可以设置任意个命令行(包括零个)，否则必须且只能设置一个命令行。 多个命令行既可以在同一个 ExecStart&#x3D; 中设置，也可以通过设置多个 ExecStart&#x3D; 来达到相同的效果。 如果设为一个空字符串，那么先前设置的所有命令行都将被清空。 如果不设置任何 ExecStart&#x3D; 指令，那么必须确保设置了 RemainAfterExit&#x3D;yes 指令。 命令行必须以一个绝对路径表示的可执行文件开始，并且其后的那些参数将依次作为”argv[1] argv[2] …”传递给被执行的进程。 如果在绝对路径前加上可选的”@”前缀，那么其后的那些参数将依次作为”argv[0] argv[1] argv[2] …”传递给被执行的进程。 如果在绝对路径前加上可选的”-“前缀，那么即使该进程以失败状态(例如非零的返回值或者出现异常)退出，也会被视为成功退出。 可以同时使用”-“与”@”前缀，且顺序任意。 如果设置了多个命令行，那么这些命令行将以其在单元文件中出现的顺序依次执行。 如果某个无”-“前缀的命令行执行失败，那么剩余的命令行将不会被执行，同时该单元将变为失败(failed)状态。 当未设置 Type&#x3D;forking 时，这里设置的命令行所启动的进程将被视为该服务的主守护进程。</li></ul><h3 id="ExecStartPre-x3D-ExecStartPost-x3D"><a href="#ExecStartPre-x3D-ExecStartPost-x3D" class="headerlink" title="ExecStartPre&#x3D;, ExecStartPost&#x3D;"></a>ExecStartPre&#x3D;, ExecStartPost&#x3D;</h3><ul><li>设置在执行 ExecStart&#x3D; 之前&#x2F;后执行的命令行。语法规则与 ExecStart&#x3D; 完全相同。 如果设置了多个命令行，那么这些命令行将以其在单元文件中出现的顺序依次执行。 如果某个无”-“前缀的命令行执行失败，那么剩余的命令行将不会被执行，同时该单元将变为失败(failed)状态。 仅在所有无”-“前缀的 ExecStartPre&#x3D; 命令全部执行成功的前提下，才会继续执行 ExecStart&#x3D; 命令。 ExecStartPost&#x3D; 命令仅在服务已经被成功启动之后才会运行，判断的标准基于 Type&#x3D; 选项。 具体说来，对于 Type&#x3D;simple 或 Type&#x3D;idle 就是主进程已经成功启动；对于 Type&#x3D;oneshot 来说就是主进程已经成功退出； 对于 Type&#x3D;forking 来说就是初始进程已经成功退出；对于 Type&#x3D;notify 来说就是已经发送了”READY&#x3D;1”； 对于 Type&#x3D;dbus 来说就是已经取得了 BusName&#x3D; 中设置的总线名称。 注意，不可将 ExecStartPre&#x3D; 用于需要长时间执行的进程。 因为所有由 ExecStartPre&#x3D; 派生的子进程都会在启动 ExecStart&#x3D; 服务进程之前被杀死。</li></ul><h3 id="ExecReload-x3D"><a href="#ExecReload-x3D" class="headerlink" title="ExecReload&#x3D;"></a>ExecReload&#x3D;</h3><ul><li>这是一个可选的指令，用于设置当该服务被要求重新载入配置时所执行的命令行。语法规则与 ExecStart&#x3D; 完全相同。 另外，还有一个特殊的环境变量 $MAINPID 可以用于表示主进程的PID，例如可以这样使用： &#x2F;bin&#x2F;kill -HUP $MAINPID 注意，像上例那样，通过向守护进程发送复位信号，强制其重新加载配置文件，并不是一个好习惯。 因为这是一个异步操作，所以不适用于需要按照特定顺序重新加载配置文件的服务。 我们强烈建议将 ExecReload&#x3D; 设置为一个能够确保重新加载配置文件的操作同步完成的命令行。</li></ul><h3 id="ExecStop-x3D"><a href="#ExecStop-x3D" class="headerlink" title="ExecStop&#x3D;"></a>ExecStop&#x3D;</h3><ul><li>这是一个可选的指令，用于设置当该服务被要求停止时所执行的命令行。语法规则与 ExecStart&#x3D; 完全相同。 执行完此处设置的命令行之后，该服务所有剩余的进程将会根据 KillMode&#x3D; 的设置被杀死(参见 systemd.kill(5) 手册)。 如果未设置此选项，那么当此服务被停止时，该服务的所有进程都将会根据 KillMode&#x3D; 的设置被立即全部杀死。 与 ExecReload&#x3D; 一样，也有一个特殊的环境变量 $MAINPID 可以用于表示主进程的PID 一般来说，仅仅设置一个结束服务的命令，而不等待其完成，是不够的。 因为当此处设置的命令执行完之后，剩余的进程会被 SIGKILL 信号立即杀死，这可能会导致数据丢失。 因此，这里设置的命令必须是同步操作，而不能是异步操作。</li></ul><h3 id="ExecStopPost-x3D"><a href="#ExecStopPost-x3D" class="headerlink" title="ExecStopPost&#x3D;"></a>ExecStopPost&#x3D;</h3><ul><li>这是一个可选的指令，用于设置该服务停止之后所执行的命令行。语法规则与 ExecStart&#x3D; 完全相同。 无论此服务是正常停止，还是异常退出，此处的设置都适用。 RestartSec&#x3D; 设定在重启服务(Restart&#x3D;)前暂停多长时间。默认值是100毫秒(100ms)。 如果未指定时间单位，那么将视为以秒为单位。例如设为”20”等价于设为”20s”。</li></ul><h3 id="TimeoutStartSec-x3D"><a href="#TimeoutStartSec-x3D" class="headerlink" title="TimeoutStartSec&#x3D;"></a>TimeoutStartSec&#x3D;</h3><ul><li>设定该服务允许的最大启动时长。如果守护进程未能在限定的时长内发出”启动完毕”的信号，那么该服务将被视为启动失败，并会被关闭。 如果未指定时间单位，那么将视为以秒为单位。例如设为”20”等价于设为”20s”。设为”0”则表示永不超时。 当 Type&#x3D;oneshot 时，默认值为”0”，否则默认值等于 DefaultTimeoutStartSec&#x3D; 的值(参见 systemd-system.conf(5) 手册)。</li></ul><h3 id="TimeoutStopSec-x3D"><a href="#TimeoutStopSec-x3D" class="headerlink" title="TimeoutStopSec&#x3D;"></a>TimeoutStopSec&#x3D;</h3><ul><li>设定该服务允许的最大停止时长。如果该服务未能在限定的时长内成功停止，那么将会被强制使用 SIGTERM 信号关闭， 如果依然未能在相同的时长内成功停止，那么将会被强制使用 SIGKILL 信号关闭(参见 systemd.kill(5) 手册中的 KillMode&#x3D; 选项)。 如果未指定时间单位，那么将视为以秒为单位。例如设为”20”等价于设为”20s”。设为”0”则表示永不超时。 默认值等于 DefaultTimeoutStartSec&#x3D; 的值(参见 systemd-system.conf(5) 手册)。</li></ul><h3 id="TimeoutSec-x3D"><a href="#TimeoutSec-x3D" class="headerlink" title="TimeoutSec&#x3D;"></a>TimeoutSec&#x3D;</h3><ul><li>一个同时设置 TimeoutStartSec&#x3D; 与 TimeoutStopSec&#x3D; 的快捷方式。</li></ul><h3 id="WatchdogSec-x3D"><a href="#WatchdogSec-x3D" class="headerlink" title="WatchdogSec&#x3D;"></a>WatchdogSec&#x3D;</h3><p>设置该服务的看门狗(watchdog)的超时时长。看门狗将在服务成功启动之后被激活。 该服务在运行过程中必须周期性的以”WATCHDOG&#x3D;1”(“keep-alive ping”)调用 sd_notify(3) 函数。 如果在两次调用之间的时间间隔大于这里设定的值，那么该服务将被视为失败(failed)状态，并会被强制使用 SIGABRT 信号关闭。 通过将 Restart&#x3D; 设为”on-failure”或”always”可以实现在失败状态下的自动重启该服务。 这里设置的值将会通过 WATCHDOG_USEC 环境变量传递给守护进程，这样就允许那些支持看门狗的服务自动启用”keep-alive ping”。 如果设置了此选项，那么必须将 NotifyAccess&#x3D; 设为”main”(此种情况下的隐含默认值)或”all”。 如果未指定时间单位，那么将视为以秒为单位。例如设为”20”等价于设为”20s”。默认值”0”表示禁用看门狗功能。</p><h3 id="Restart-x3D"><a href="#Restart-x3D" class="headerlink" title="Restart&#x3D;"></a>Restart&#x3D;</h3><ul><li>当服务进程正常退出、异常退出、被杀死、超时的时候，是否重新启动该服务。 “服务进程”是指 ExecStart&#x3D;, ExecStartPre&#x3D;, ExecStartPost&#x3D;, ExecStop&#x3D;, ExecStopPost&#x3D;, ExecReload&#x3D; 中设置的进程。 当进程是由于 systemd 的正常操作(例如 systemctl stop|restart)而被停止时，该服务不会被重新启动。 “超时”可以是看门狗的”keep-alive ping”超时，也可以是 systemctl start|reload|stop 操作超时。</li><li>该选项可以取下列值之一：no, on-success, on-failure, on-abnormal, on-watchdog, on-abort, always “no”(默认值)表示不会被重启。”always”表示会被无条件的重启。 “on-success”表示仅在服务进程正常退出时重启，所谓”正常退出”是指： 退出码为”0”，或者进程收到 SIGHUP, SIGINT, SIGTERM, SIGPIPE 信号并且退出码符合 SuccessExitStatus&#x3D; 的设置。 “on-failure”表示仅在服务进程异常退出时重启，所谓”异常退出”是指： 退出码不为”0”，或者进程被强制杀死(包括”core dump”以及收到 SIGHUP, SIGINT, SIGTERM, SIGPIPE 之外的其他信号)， 或者进程由于看门狗或者 systemd 的操作超时而被杀死。 对于 on-failure, on-abnormal, on-abort, on-watchdog 的分别适用于哪种异常退出，见下表：</li></ul><p>​    <img src="https://img-blog.csdn.net/2018072116074438?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1ZXNpY2hpdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><ul><li>注意如下两个例外情况： (1) RestartPreventExitStatus&#x3D; 中列出的退出码或者信号永远不会导致该服务被重启。 (2) RestartForceExitStatus&#x3D; 中列出的退出码或者信号将会无条件的导致该服务被重启。 对于需要长期持续运行的守护进程，推荐设为”on-failure”以增强可用性。 对于自身可以自主选择何时退出的服务，推荐设为”on-abnormal”。</li></ul><h3 id="SuccessExitStatus-x3D"><a href="#SuccessExitStatus-x3D" class="headerlink" title="SuccessExitStatus&#x3D;"></a>SuccessExitStatus&#x3D;</h3><ul><li>额外定义附加的进程”正常退出”状态。可以设为一系列以空格分隔的数字退出码或者信号名称，例如： SuccessExitStatus&#x3D;1 2 8 SIGKILL 表示当进程的退出码是 1, 2, 8 或被 SIGKILL 信号终止时，都可以视为”正常退出”。 注意，退出码”0”以及 SIGHUP, SIGINT, SIGTERM, SIGPIPE 信号是标准的”正常退出”，不需要在此特别定义。 注意，如果进程拥有自定义的信号处理器，并且在收到信号后通过调用 _exit(2) 退出，那么有关信号的信息就会丢失。 在这种情况下，进程必须自己完成清理工作并使用相同的信号自杀。参见 Proper handling of SIGINT&#x2F;SIGQUIT — How to be a proper program 如果多次使用此选项，那么最终的结果将是多个列表的合集。如果将此项设为空，那么先前设置的列表将被清空。</li></ul><h3 id="RestartPreventExitStatus-x3D"><a href="#RestartPreventExitStatus-x3D" class="headerlink" title="RestartPreventExitStatus&#x3D;"></a>RestartPreventExitStatus&#x3D;</h3><ul><li>可以设为一系列以空格分隔的数字退出码或者信号名称，当进程的退出码或收到的信号与此处的设置匹配时， 该服务将无条件的禁止重新启动(无视 Restart&#x3D; 的设置)。例如： RestartPreventExitStatus&#x3D;1 6 SIGABRT 表示退出码 1, 2, 8 与 SIGKILL 信号将不会导致该服务被重启。 默认值为空，表示完全遵守 Restart&#x3D; 的设置。</li><li>如果多次使用此选项，那么最终的结果将是多个列表的合集。如果将此项设为空，那么先前设置的列表将被清空。 RestartForceExitStatus&#x3D; 可以设为一系列以空格分隔的数字退出码或者信号名称，当进程的退出码或收到的信号与此处的设置匹配时， 该服务将无条件的被重新启动(无视 Restart&#x3D; 的设置)。 默认值为空，表示完全遵守 Restart&#x3D; 的设置。 如果多次使用此选项，那么最终的结果将是多个列表的合集。如果将此项设为空，那么先前设置的列表将被清空。</li></ul><h3 id="PermissionsStartOnly-x3D"><a href="#PermissionsStartOnly-x3D" class="headerlink" title="PermissionsStartOnly&#x3D;"></a>PermissionsStartOnly&#x3D;</h3><ul><li>设为 true 表示所有与权限相关的执行选项(例如 User&#x3D; 之类的选项，参见 systemd.exec(5) 手册)仅对 ExecStart&#x3D; 中的程序有效， 而对 ExecStartPre&#x3D;, ExecStartPost&#x3D;, ExecReload&#x3D;, ExecStop&#x3D;, ExecStopPost&#x3D; 中的程序无效。 默认值 false 表示所有与权限相关的执行选项对所有 Exec*&#x3D; 系列选项中的程序都有效。</li></ul><h3 id="RootDirectoryStartOnly-x3D"><a href="#RootDirectoryStartOnly-x3D" class="headerlink" title="RootDirectoryStartOnly&#x3D;"></a>RootDirectoryStartOnly&#x3D;</h3><ul><li>设为 true 表示根目录(参见 systemd.exec(5) 中的 RootDirectory&#x3D; 选项)仅对 ExecStart&#x3D; 中的程序有效， 而对 ExecStartPre&#x3D;, ExecStartPost&#x3D;, ExecReload&#x3D;, ExecStop&#x3D;, ExecStopPost&#x3D; 中的程序无效。 默认值 false 表示根目录对所有 Exec*&#x3D; 系列选项中的程序都有效。</li></ul><h3 id="NonBlocking-x3D"><a href="#NonBlocking-x3D" class="headerlink" title="NonBlocking&#x3D;"></a>NonBlocking&#x3D;</h3><ul><li>是否为所有通过socket激活传递的文件描述符设置非阻塞标记(O_NONBLOCK)。默认值为 false 设为 true 表示所有大于2的文件描述符(也就是 stdin, stdout, stderr 之外的文件描述符)都将被设置为非阻塞模式。 该选项仅在与 socket 单元(systemd.socket(5))联用的时候才有意义。</li></ul><h3 id="NotifyAccess-x3D"><a href="#NotifyAccess-x3D" class="headerlink" title="NotifyAccess&#x3D;"></a>NotifyAccess&#x3D;</h3><ul><li>设置通过sd_notify(3)访问服务状态通知socket的访问模式。 可以设为：none(默认值), main, all 之一。 “none”表示不更新任何守护进程的状态，忽略所有的状态更新消息。 “main”表示仅接受主进程的状态更新消息。 “all”表示接受该服务cgroup内的所有进程的状态更新消息。 当设置了 Type&#x3D;notify 或 WatchdogSec&#x3D; 的时候，此选项应该被设为”main”或”all”，如果未设置，那么隐含为”main”。</li></ul><h3 id="Sockets-x3D"><a href="#Sockets-x3D" class="headerlink" title="Sockets&#x3D;"></a>Sockets&#x3D;</h3><ul><li>设置一个socket单元的名称，表示该服务在启动时应当从它继承socket文件描述符。通常并不需要明确设置此选项， 因为所有与该服务同名(不算后缀)的socket单元的socket文件描述符，都会被自动的传递给派生进程。 注意：(1)同一个socket文件描述符可以被传递给多个不同的进程(服务)。 (2)当socket上有流量进入时，被启动的可能是另一个不同于该服务的其他服务。 换句话说就是：socket单元中的 Service&#x3D; 所指向的服务单元中的 Sockets&#x3D; 设置未必要反向指回去。</li><li>如果多次使用此选项，那么最终的结果将是多个socket单元的合集。如果将此项设为空，那么先前设置的socket单元的列表将被清空。</li></ul><h3 id="StartLimitInterval-x3D-StartLimitBurst-x3D"><a href="#StartLimitInterval-x3D-StartLimitBurst-x3D" class="headerlink" title="StartLimitInterval&#x3D;, StartLimitBurst&#x3D;"></a>StartLimitInterval&#x3D;, StartLimitBurst&#x3D;</h3><ul><li>限制该服务的启动频率。默认值是每10秒内不得超过5次(StartLimitInterval&#x3D;10s StartLimitBurst&#x3D;5)。</li><li>StartLimitInterval&#x3D; 的默认值等于systemd配置文件中 DefaultStartLimitInterval&#x3D; 的值，”0”表示取消启动频率限制。</li><li>StartLimitBurst&#x3D; 的默认值等于systemd配置文件中 DefaultStartLimitBurst&#x3D; 的值。</li><li>虽然这两个选项经常与 Restart&#x3D; 一起使用，但是它们不只限制 Restart&#x3D; 罗辑所导致的重启，而是限制所有类型的启动(包括手动启动)。 注意，当 Restart&#x3D;逻辑所导致的重启超出了启动频率限制之后，Restart&#x3D; 逻辑将会被禁用(也就是不会在下一个时间段内再次尝试重启)， 然而，如果该单元随后又被手动重启，那么 Restart&#x3D; 罗辑将被再次激活。 注意，”systemctl reset-failed …”命令会清除该服务的重启次数计数器，这通常用于在手动启动之前清除启动限制。</li></ul><h3 id="StartLimitAction-x3D"><a href="#StartLimitAction-x3D" class="headerlink" title="StartLimitAction&#x3D;"></a>StartLimitAction&#x3D;</h3><ul><li>设置到达启动频率限制后触发什么动作。 可设为 none(默认值), reboot, reboot-force, reboot-immediate, poweroff, poweroff-force, poweroff-immediate 之一。</li><li>“none”表示除了禁止再次启动之外，不触发任何动作。</li><li>“reboot”表示触发常规的系统重启的动作，相当于执行”systemctl reboot”命令。</li><li>“reboot-force”表示触发系统的强制重启动作(强制杀死所有进程但不会造成文件系统不一致)，相当于执行”systemctl reboot -f”命令。</li><li>“reboot-immediate”表示立即调用内核的reboot(2)函数，可能会造成文件系统的数据丢失。</li><li>poweroff, poweroff-force, poweroff-immediate 与对应的”reboot*”项含义类似，不同之处仅仅在于是关机而不是重启。</li></ul><h3 id="FailureAction-x3D"><a href="#FailureAction-x3D" class="headerlink" title="FailureAction&#x3D;"></a>FailureAction&#x3D;</h3><ul><li>设置当该服务进入失败(failed)状态时所触发的动作。取值范围与默认值都与 StartLimitAction&#x3D; 完全相同。</li></ul><h3 id="RebootArgument-x3D"><a href="#RebootArgument-x3D" class="headerlink" title="RebootArgument&#x3D;"></a>RebootArgument&#x3D;</h3><ul><li>设置reboot(2)系统调用的可选参数，仅用于 StartLimitAction&#x3D; 与 FailureAction&#x3D; 的重启动作。 其作用与”systemctl reboot [arg]”命令中的可选参数[arg]完全相同。</li></ul><h3 id="FileDescriptorStoreMax-x3D"><a href="#FileDescriptorStoreMax-x3D" class="headerlink" title="FileDescriptorStoreMax&#x3D;"></a>FileDescriptorStoreMax&#x3D;</h3><ul><li>允许在 systemd 中最多为该服务存储多少个使用sd_pid_notify_with_fds(3)的”FDSTORE&#x3D;1”消息的文件描述符，默认值为”0”(不存储)。 用于实现重启该服务而不会丢失其状态(前提是该服务将各种状态序列化之后保存在 &#x2F;run 中，同时将文件描述符交给 systemd 暂存)。 所有被 systemd 暂存的文件描述符都将在该服务重启之后交还给该服务的主进程。 所有被 systemd 暂存的文件描述符都将在遇到如下两种情况时被自动关闭： (1)收到 POLLHUP 或 POLLERR 信号；(2)该服务被彻底停止，并且没有任何剩余的任务队列</li></ul><h3 id="USBFunctionDescriptors-x3D"><a href="#USBFunctionDescriptors-x3D" class="headerlink" title="USBFunctionDescriptors&#x3D;"></a>USBFunctionDescriptors&#x3D;</h3><ul><li>设为一个包含 USB FunctionFS 描述符的文件路径，以实现 USB gadget 支持。 仅与配置了 ListenUSBFunction&#x3D; 的 socket 单元一起使用。该文件的内容将被写入 ep0 文件。 USBFunctionStrings&#x3D; 设为一个包含 USB FunctionFS 字符串的文件路径。 其行为与上面的 USBFunctionDescriptors&#x3D; 类似。 参见 systemd.exec(5) 与 systemd.kill(5) 手册页，以获取更多其他选项。</li></ul><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><p>本小节讲解 ExecStart&#x3D;, ExecStartPre&#x3D;, ExecStartPost&#x3D;, ExecReload&#x3D;, ExecStop&#x3D;, ExecStopPost&#x3D; 选项的命令行解析规则。</p><p>仅在设置了 Type&#x3D;oneshot 的前提下，才可以设置多个命令行，且必须用分号(;)将每个命令行隔开(分号自身用”;“表示)。</p><p>例如： ExecStart&#x3D;&#x2F;bin&#x2F;echo one ; &#x2F;bin&#x2F;echo “two two” 每个命令行的内部以空格分隔，每一项的边界都可以用单引号或者双引号进行界定。 第一项是要运行的命令，随后的各项则是命令的参数。 行尾的反斜杠()将被视作续行符，这和bash的续行语法类似。例如： ExecStart&#x3D;&#x2F;bin&#x2F;echo &#x2F; &gt;&#x2F;dev&#x2F;null &amp; ; \ &#x2F;bin&#x2F;ls 的含义是向 &#x2F;bin&#x2F;echo 命令传递五个参数：”&#x2F;“, “&gt;&#x2F;dev&#x2F;null”, “&amp;”, “;”, “&#x2F;bin&#x2F;ls”. 命令行的语法刻意保持了与shell的相似性，但并不相同。 特别的，重定向(&lt;, &lt;&lt;, &gt;, &gt;)、管道(|)、后台运行(&amp;)，以及其他下文未明确提及的符号都不被支持。 第一项，要运行的命令，必须使用绝对路径。可以在其中包含空格，但是不可以包含控制字符。 可以在随后的各项命令参数中使用 systemd.unit(5) 中描述的”%”系列特殊符号，但不可用于命令自身(第一项)。 此外，还可以使用C语言风格的转义序列(含义也相同)，但只能识别如下符号：\a \b \f \n \r \t \v \ &quot; &#39; \s \x<em>xx</em> *nnn* 此外，还支持两种不同的环境变量替换方式(“${FOO}”与”$FOO”)。</p><p>下面的两个例子，将能清除的体现两者的差别：</p><p>例(1)：</p><p>Environment&#x3D;”ONE&#x3D;one” ‘TWO&#x3D;two two’ ExecStart&#x3D;&#x2F;bin&#x2F;echo $ONE $TWO ${TWO}</p><p>这将给 &#x2F;bin&#x2F;echo 依次传递如下四个参数: “one”, “two”, “two”, “two two”</p><p>例(2)：</p><p>Environment&#x3D;ONE&#x3D;’one’ “TWO&#x3D;’two two’ too” THREE&#x3D;</p><p>ExecStart&#x3D;&#x2F;bin&#x2F;echo ${ONE} ${TWO} ${THREE}</p><p>ExecStart&#x3D;&#x2F;bin&#x2F;echo $ONE $TWO $THREE</p><p>这将给第一个 &#x2F;bin&#x2F;echo 依次传递如下三个参数: “‘one’”, “‘two two’ too”, “” 同时给第二个 &#x2F;bin&#x2F;echo 依次传递如下三个参数: “one”, “two two”, “too” 具体说来就是： “${FOO}”的内容将原封不动的转化为一个单独的命令行参数，无论其中是否包含空格与引号，也无论它是否为空。 “$FOO”的内容将将原封不动的插入命令行中，但对插入内容的解释却遵守一般的命令行解析规则。 此外，如果想要传递美元符号($)自身，则必须使用”$$”。而那些无法在替换时确定内容的变量将被当做空字符串。 注意，不可以在第一项(也就是命令的绝对路径)中使用变量替换。 这里使用的变量必须首先在 Environment&#x3D; 或 EnvironmentFile&#x3D; 中定义。 此外，在systemd.exec(5)手册的”派生进程中的环境变量”小节中列出的”静态变量”也可以使用。 例如，$USER 就是一个”静态变量”，但是，$TERM 则不是”静态变量”。 注意，这里的命令行并不直接支持shell命令，但是可以通过模仿下面这个变通的方法来实现： ExecStart&#x3D;&#x2F;bin&#x2F;sh -c ‘dmesg | tac’</p><h3 id="例1-简单服务"><a href="#例1-简单服务" class="headerlink" title="例1. 简单服务"></a>例1. 简单服务</h3><p>下面的单元文件创建了一个运行 &#x2F;usr&#x2F;sbin&#x2F;foo-daemon 守护进程的服务。未设置的 Type&#x3D; 等价于默认的 Type&#x3D;simple 执行 &#x2F;usr&#x2F;sbin&#x2F;foo-daemon 进程之后，systemd 即认为该单元已经启动成功。</p><p>[Unit]</p><p>Description&#x3D;Foo</p><p>[Service]</p><p>ExecStart&#x3D;&#x2F;usr&#x2F;sbin&#x2F;foo-daemon</p><p>[Install]</p><p>WantedBy&#x3D;multi-user.target</p><p>注意，&#x2F;usr&#x2F;sbin&#x2F;foo-daemon 必须在启动后持续运行直到服务被停止。 如果该进程只是为了派生守护进程，那么应该使用 Type&#x3D;forking 因为没有设置 ExecStop&#x3D; ，所以在停止服务时，systemd 将会直接向该服务启动的所有进程发送 SIGTERM 信号， 若超过指定时间依然存在未被杀死的进程，那么将会继续发送 SIGKILL 信号。详见 systemd.kill(5) 手册。</p><p>默认的 Type&#x3D;simple 并不包含任何通知机制(例如通知”服务已完成初始化”)。要想使用通知机制，应该将 Type&#x3D; 设为其他非默认值。 例如：Type&#x3D;<a href="https://so.csdn.net/so/search?q=notify&spm=1001.2101.3001.7020">notify</a> 可用于能够理解 systemd 通知协议的服务； Type&#x3D;forking 可用于能将自身切换到后台的服务； Type&#x3D;dbus 可用于能够在完成初始化之后获得一个 D-Bus 名称的单元</p><h3 id="例2-一次性服务"><a href="#例2-一次性服务" class="headerlink" title="例2. 一次性服务"></a>例2. 一次性服务</h3><p>Type&#x3D;oneshot 用于那些只需要执行一次性动作而不需要持久运行的单元，例如文件系统检查或者清理临时文件。 此类单元，将会在启动后一直等待指定的动作完成，然后再回到停止状态。下面是一个执行清理动作的单元：</p><p>[Unit]</p><p>Description&#x3D;Cleanup old Foo data</p><p>[Service]</p><p>Type&#x3D;oneshot ExecStart&#x3D;&#x2F;usr&#x2F;sbin&#x2F;foo-cleanup</p><p>[Install]</p><p>WantedBy&#x3D;multi-user.target</p><p>注意，在 &#x2F;usr&#x2F;sbin&#x2F;foo-cleanup 执行结束前，该服务一直处于’正在启动中’的状态，而一旦执行结束， 该服务又立即变为’停止’状态，也就是说，对于 Type&#x3D;oneshot 类型的服务，不存在’活动’状态。 这意味着，如果再一次启动该服务，将会再一次执行该服务定义的动作。 注意，在时间顺序上晚于该服务的单元，将会一直等到该服务变成’停止’状态后，才会开始启动。</p><p>Type&#x3D;oneshot 是唯一可以设置多个 ExecStart&#x3D; 的服务类型。多个 ExecStart&#x3D; 指令将按照它们出现的顺序依次执行， 一旦遇到错误，就会立即停止，不再继续执行，同时该服务也将进入’失败’状态。</p><h3 id="例3-可停止的一次性服务"><a href="#例3-可停止的一次性服务" class="headerlink" title="例3. 可停止的一次性服务"></a>例3. 可停止的一次性服务</h3><p>有时候，单元需要执行一个程序以完成某个设置(启动)，然后又需要再执行另一个程序以撤消先前的设置(停止)， 而在设置持续有效的时段中，该单元应该视为处于’活动’状态，但实际上并无任何程序在持续运行。 网络配置服务就是一个典型的例子。此外，只能启动一次(不可多次启动)的一次性服务，也是一个例子。</p><p>可以通过设置 RemainAfterExit&#x3D;yes 来满足这种需求。 在这种情况下，systemd 将会在启动成功后将该单元视为处于’活动’状态(而不是’停止’状态)。 RemainAfterExit&#x3D;yes 虽然可以用于所有 Type&#x3D; 类型，但是主要用于 Type&#x3D;oneshot 和 Type&#x3D;simple 类型。 对于 Type&#x3D;oneshot 类型，systemd 一直等到服务启动成功之后，才会将该服务置于’活动’状态。 所以，依赖于该服务的其他单元必须等待该服务启动成功之后，才能启动。 但是对于 Type&#x3D;simple 类型，依赖于该服务的其他单元无需等待，将会和该服务同时并行启动。</p><p>下面的类似展示了一个简单的静态防火墙服务(simple-firewall.service)：</p><p>[Unit]</p><p>Description&#x3D;Simple firewall</p><p>[Service]</p><p>Type&#x3D;oneshot</p><p>RemainAfterExit&#x3D;yes</p><p>ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin&#x2F;simple-firewall-start</p><p>ExecStop&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin&#x2F;simple-firewall-stop</p><p>[Install]</p><p>WantedBy&#x3D;multi-user.target</p><p>因为服务启动成功后一直处于’活动’状态，所以再次执行”systemctl start simple-firewall.service”命令不会有任何效果。</p><h3 id="例4-传统的服务"><a href="#例4-传统的服务" class="headerlink" title="例4. 传统的服务"></a>例4. 传统的服务</h3><p>多数传统的守护进程(服务)在启动时会转入后台运行。systemd 通过 Type&#x3D;forking 来支持这种工作方式。 对于 Type&#x3D;forking 类型的服务，如果最初启动的进程尚未退出，那么该单元将依然处于’正在初始化中’状态。 当最初的进程成功退出，并且至少有一个进程仍然在运行(并且 RemainAfterExit&#x3D;no)，该服务才被视为处于’活动’状态。</p><p>对于单进程的传统服务，当最初的进程成功退出后，将会只剩单独一个进程仍然在持续运行， systemd 将会把这个唯一剩余的进程视为该服务的主进程。 仅在这种情况下，才将可以在 ExecReload&#x3D;, ExecStop&#x3D; … 之类的选项中使用 $MAINPID 变量。 对于多进程的传统服务，当最初的进程成功退出后，将会剩余多个进程在持续运行， 因此，systemd 无法确定哪一个进程才是该服务的主进程。在这种情况下，不可以使用 $MAINPID 变量。</p><p>然而，如果主进程会创建传统的PID文件，那么应该将 PIDFile&#x3D; 设为此PID文件的绝对路径， 以帮助 systemd 从该PID文件中读取主进程的PID，从而帮助确定该服务的主进程。 注意，守护进程必须在完成初始化之前写入PID文件，否则可能会导致 systemd 读取失败(读取时文件不存在)。</p><p>下面是一个单进程传统服务的示例：</p><p>[Unit]</p><p>Description&#x3D;Some simple daemon</p><p>[Service]</p><p>Type&#x3D;forking</p><p>ExecStart&#x3D;&#x2F;usr&#x2F;sbin&#x2F;my-simple-daemon -d</p><p>[Install]</p><p>WantedBy&#x3D;multi-user.target</p><p>参见 systemd.kill(5) 以了解如何结束服务进程。</p><h3 id="例5-D-Bus-服务"><a href="#例5-D-Bus-服务" class="headerlink" title="例5. D-Bus 服务"></a>例5. D-Bus 服务</h3><p>对于需要在 D-Bus 系统总线上注册一个名字的服务，应该使用 Type&#x3D;dbus 并且设置相应的 BusName&#x3D; 值。 该服务不可以派生任何子进程。一旦从 D-Bus 系统总线成功获取所需的名字，该服务即被视为初始化成功。</p><p>下面是一个典型的 D-Bus 服务：</p><p>[Unit]</p><p>Description&#x3D;Simple DBus service</p><p>[Service]</p><p>Type&#x3D;dbus</p><p>BusName&#x3D;org.example.simple-dbus-service</p><p>ExecStart&#x3D;&#x2F;usr&#x2F;sbin&#x2F;simple-dbus-service</p><p>[Install]</p><p>WantedBy&#x3D;multi-user.target</p><p>对于用于 D-Bus 激活的服务来说，不可以包含”[Install]”小节， 而是应该在对应的 D-Bus service 文件中设置 SystemdService&#x3D; 选项， 例如(&#x2F;usr&#x2F;share&#x2F;dbus-1&#x2F;system-services&#x2F;org.example.simple-dbus-service.service)：</p><p>[D-BUS Service]</p><p>Name&#x3D;org.example.simple-dbus-service</p><p>Exec&#x3D;&#x2F;usr&#x2F;sbin&#x2F;simple-dbus-service</p><p>User&#x3D;root</p><p>SystemdService&#x3D;simple-dbus-service.service</p><p>参见system-kill手册以了解如何结束服务。</p><h3 id="例6-能够通知初始化已完成的服务"><a href="#例6-能够通知初始化已完成的服务" class="headerlink" title="例6. 能够通知初始化已完成的服务"></a>例6. 能够通知初始化已完成的服务</h3><p>Type&#x3D;simple 类型的服务非常容易编写，但是无法将’初始化已完成’的消息及时通知给 systemd 是一个重大缺陷。 Type&#x3D;notify 可以弥补该缺陷，它支持将’初始化已完成’的消息及时通知给 systemd。</p><p>下面是一个典型的例子：</p><p>[Unit]</p><p>Description&#x3D;Simple notifying service</p><p>[Service]</p><p>Type&#x3D;notify</p><p>ExecStart&#x3D;&#x2F;usr&#x2F;sbin&#x2F;simple-notifying-service</p><p>[Install]</p><p>WantedBy&#x3D;multi-user.target</p><p>注意，该守护进程必须支持 systemd 通知协议，否则 systemd 将会认为该服务一直处于’正在启动中’，并在超时后将其杀死。 关于如何支持该通知协议，参见 sd_notify(3) 手册页。 参见 systemd.kill(5) 手册以了解如何结束服务。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker如何优雅地编译proto文件</title>
    <link href="/2022/07/12/docker%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E7%BC%96%E8%AF%91proto%E6%96%87%E4%BB%B6/"/>
    <url>/2022/07/12/docker%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E7%BC%96%E8%AF%91proto%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="docker如何优雅地编译proto文件"><a href="#docker如何优雅地编译proto文件" class="headerlink" title="docker如何优雅地编译proto文件"></a>docker如何优雅地编译proto文件</h1><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>grpc协议需要用到protobuf，和微服务开发人员约定好proto之后，需要自行编译，但是又不想装那么多扩展啊插件啊，可以装但是没必要，因为能用docker搞的尽量用docker搞，毕竟用完即走多爽。</p><h3 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">myItem<br>    - protos<br>        - demo<span class="hljs-selector-class">.proto</span><br>    - php<br></code></pre></td></tr></table></figure><p>demo.proto文件内容参考</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><br><span class="hljs-keyword">package</span> protobuf;<br><br>service Demo &#123;<br>    rpc Multi (MultiRequest) returns (MultiReply) &#123;&#125;<br>&#125;<br><br>message MultiRequest &#123;<br>    <span class="hljs-type">int64</span> args1 = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int64</span> args2 = <span class="hljs-number">2</span>;<br>&#125;<br><br>message MultiReply &#123;<br>    <span class="hljs-type">int64</span> result = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">string</span> address = <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="先拉取镜像"><a href="#先拉取镜像" class="headerlink" title="先拉取镜像"></a>先拉取镜像</h4><p>（当然不拉也没关系，执行下一步的命令也会自动拉的）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull znly/protoc<br></code></pre></td></tr></table></figure><h4 id="编译PHP文件出来"><a href="#编译PHP文件出来" class="headerlink" title="编译PHP文件出来"></a>编译PHP文件出来</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">docker run --rm -v $(<span class="hljs-variable constant_">PWD</span>):$(<span class="hljs-variable constant_">PWD</span>) -w $(<span class="hljs-variable constant_">PWD</span>) znly/protoc -<span class="hljs-title class_">Iprotos</span> --php_out=./php ./protos<span class="hljs-comment">/*.proto</span><br></code></pre></td></tr></table></figure><p>也可以引用插件编译等功能，具体的可以查看该镜像帮助</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --<span class="hljs-built_in">rm</span> znly/protoc --<span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><h3 id="正确编译完成之后的目录结构"><a href="#正确编译完成之后的目录结构" class="headerlink" title="正确编译完成之后的目录结构"></a>正确编译完成之后的目录结构</h3><p>php目录下面多了两个文件夹</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">myItem<br>    - protos<br>        -demo<span class="hljs-selector-class">.proto</span><br>    - php<br>        - GPBMetadata<br>              - ...<br>        - Protobuf<br>              - ...<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker-heketi</title>
    <link href="/2022/07/12/docker-heketi/"/>
    <url>/2022/07/12/docker-heketi/</url>
    
    <content type="html"><![CDATA[<p>0 wordsPreview  2022&#x2F;07&#x2F;12&#x2F;docker-heketi&#x2F;<br>docker-heketi</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>gluster-heketi centos7 安装</title>
    <link href="/2022/07/12/heketi/"/>
    <url>/2022/07/12/heketi/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="gluster-heketi-centos7-安装"><a href="#gluster-heketi-centos7-安装" class="headerlink" title="gluster-heketi centos7 安装"></a>gluster-heketi centos7 安装</h1><h2 id="centos环境下gluste安装"><a href="#centos环境下gluste安装" class="headerlink" title="centos环境下gluste安装"></a>centos环境下gluste安装</h2><h3 id="安装gluster源"><a href="#安装gluster源" class="headerlink" title="安装gluster源"></a>安装gluster源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y centos-release-gluster<br></code></pre></td></tr></table></figure><h3 id="glusterfs-server的依赖"><a href="#glusterfs-server的依赖" class="headerlink" title="glusterfs-server的依赖"></a>glusterfs-server的依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y epel-release<br></code></pre></td></tr></table></figure><h3 id="安装glusterfs-server"><a href="#安装glusterfs-server" class="headerlink" title="安装glusterfs-server"></a>安装glusterfs-server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>yum install -y glusterfs-server<br><br></code></pre></td></tr></table></figure><h3 id="设置glusterfs启动可开机自启"><a href="#设置glusterfs启动可开机自启" class="headerlink" title="设置glusterfs启动可开机自启"></a>设置glusterfs启动可开机自启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start glusterd<br>systemctl <span class="hljs-built_in">enable</span> glusterd<br></code></pre></td></tr></table></figure><h2 id="Heketi安装"><a href="#Heketi安装" class="headerlink" title="Heketi安装"></a>Heketi安装</h2><p>heketi是一个glusterfs的管理工具,提供了REST API管理接口,安装于任意一台与集群网络互通的主机,也可安装与任意一个数据节点上</p><h3 id="下载heketi"><a href="#下载heketi" class="headerlink" title="下载heketi"></a>下载heketi</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/heketi/heketi/releases/download/v9.0.0/heketi-v9.0.0.linux.amd64.tar.gz<br></code></pre></td></tr></table></figure><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar zxvf heketi-v9.0.0.linux.amd64.tar.gz<br> <br><span class="hljs-comment">#拷贝heketi主程序和heketi-cli到/usr/bin目录下</span><br><span class="hljs-built_in">cp</span> heketi /usr/bin/heketi<br><span class="hljs-built_in">cp</span> heketi-cli /usr/bin/heketi-cli<br> <br><span class="hljs-comment">#增加执行权限</span><br><span class="hljs-built_in">chmod</span> +x /usr/bin/heketi<br><span class="hljs-built_in">chmod</span> +x /usr/bin/heketi-cli<br> <br><span class="hljs-comment">#创建heketi配置目录和工作目录</span><br><br><span class="hljs-built_in">mkdir</span> /etc/heketi<br><span class="hljs-built_in">mkdir</span> /var/lib/heketi<br><span class="hljs-built_in">mkdir</span> -p /etc/heketi/config<br><span class="hljs-built_in">mkdir</span> -p /etc/heketi/db<br><span class="hljs-built_in">cd</span> /etc/heketi/<br><br><span class="hljs-built_in">cd</span> heketi/config<br>sh -c <span class="hljs-string">&quot;cat &gt; heketi.json&quot;</span> &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;port&quot;: &quot;18080&quot;,</span><br><span class="hljs-string">  &quot;use_auth&quot;: false,</span><br><span class="hljs-string">  &quot;jwt&quot;: &#123;</span><br><span class="hljs-string">    &quot;admin&quot;: &#123;</span><br><span class="hljs-string">      &quot;key&quot;: &quot;My Secret&quot;</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &quot;user&quot;: &#123;</span><br><span class="hljs-string">      &quot;key&quot;: &quot;My Secret&quot;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;,</span><br><span class="hljs-string">  &quot;glusterfs&quot;: &#123;</span><br><span class="hljs-string">    &quot;executor&quot;: &quot;ssh&quot;,</span><br><span class="hljs-string">    &quot;sshexec&quot;: &#123;</span><br><span class="hljs-string">      &quot;keyfile&quot;: &quot;/etc/heketi/heketi_key&quot;,</span><br><span class="hljs-string">      &quot;user&quot;: &quot;root&quot;,</span><br><span class="hljs-string">      &quot;port&quot;: &quot;22&quot;,</span><br><span class="hljs-string">      &quot;fstab&quot;: &quot;/etc/fstab&quot;</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &quot;db&quot;: &quot;/var/lib/heketi/heketi.db&quot;,</span><br><span class="hljs-string">    &quot;loglevel&quot; : &quot;info&quot;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><br><br>sh -c <span class="hljs-string">&quot;cat &gt; /etc/heketi/topology.json&quot;</span> &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;clusters&quot;: [</span><br><span class="hljs-string">        &#123;</span><br><span class="hljs-string">            &quot;nodes&quot;: [</span><br><span class="hljs-string">                &#123;</span><br><span class="hljs-string">                    &quot;node&quot;: &#123;</span><br><span class="hljs-string">                        &quot;hostnames&quot;: &#123;</span><br><span class="hljs-string">                            &quot;manage&quot;: [</span><br><span class="hljs-string">                                &quot;192.168.0.3&quot;</span><br><span class="hljs-string">                            ],</span><br><span class="hljs-string">                            &quot;storage&quot;: [</span><br><span class="hljs-string">                                &quot;192.168.0.3&quot;</span><br><span class="hljs-string">                            ]</span><br><span class="hljs-string">                        &#125;,</span><br><span class="hljs-string">                        &quot;zone&quot;: 1</span><br><span class="hljs-string">                    &#125;,</span><br><span class="hljs-string">                    &quot;devices&quot;: [</span><br><span class="hljs-string">                        &quot;/dev/sdb&quot;</span><br><span class="hljs-string">                    ]</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">            ]</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    ]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><br><br>ssh-keygen -f /etc/heketi/heketi_key -t rsa -N <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-built_in">chmod</span> 600 /etc/heketi/heketi_key<br><br>ssh-copy-id -i /etc/heketi/heketi_key.pub 192.168.0.2<br>ssh-copy-id -i /etc/heketi/heketi_key.pub 192.168.0.3<br>ssh-copy-id -i /etc/heketi/heketi_key.pub 192.168.0.8<br><br>heketi_server_url=192.168.0.2:18080<br><span class="hljs-built_in">export</span> HEKETI_CLI_SERVER=http://<span class="hljs-variable">$heketi_server_url</span><br>heketi_cli_cmd=<span class="hljs-string">&quot;heketi-cli   --user admin --secret admin123&quot;</span><br><br><br><br><br>  <span class="hljs-variable">$heketi_cli_cmd</span> topology load --json=topology-sample.json<br>Found node 192.168.0.2 on cluster 24a3268260d0d619131b83ddd67b3e34<br>Adding device /dev/sdb ... OK<br><br><br>        <span class="hljs-variable">$heketi_cli_cmd</span>         node add \<br>        --zone=2 \<br>        --cluster=d9d7c005876b504cdef88df9d434296e \<br>        --management-host-name=192.168.0.2 \<br>        --storage-host-name=192.168.0.2<br>        <span class="hljs-variable">$heketi_cli_cmd</span>         node add \<br>        --zone=3 \<br>        --cluster=d9d7c005876b504cdef88df9d434296e \<br>        --management-host-name=192.168.0.8 \<br>        --storage-host-name=192.168.0.8<br><span class="hljs-variable">$heketi_cli_cmd</span> device add \<br>--name=/dev/sdb \<br>--node=b168bd3e3076eaca6ff8393a176e016b <br><br><span class="hljs-variable">$heketi_cli_cmd</span> device add \<br>--name=/dev/sdb \<br>--node=37b43f382eaf4eef5ef753a0266cb03f <br><br><br><br><span class="hljs-variable">$heketi_cli_cmd</span> volume create --size=10 --name=test_vol<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>centos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录历史</title>
    <link href="/2022/07/12/%E8%AE%B0%E5%BD%95%E5%8E%86%E5%8F%B2/"/>
    <url>/2022/07/12/%E8%AE%B0%E5%BD%95%E5%8E%86%E5%8F%B2/</url>
    
    <content type="html"><![CDATA[<p>2022.07.12<br>天气炎热</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql8 MGR搭建</title>
    <link href="/2022/07/11/mysql8-MGR%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/07/11/mysql8-MGR%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="mysql8-MGR搭建"><a href="#mysql8-MGR搭建" class="headerlink" title="mysql8 MGR搭建"></a>mysql8 MGR搭建</h1><p>见<a href="https://dev.mysql.com/doc/refman/8.0/en/group-replication-getting-started.html">18.2 Getting Started</a></p><h4 id="1、环境准备"><a href="#1、环境准备" class="headerlink" title="1、环境准备"></a>1、环境准备</h4><table><thead><tr><th>IP</th><th>主机名</th><th>数据库</th><th>端口</th><th>server-id</th><th>操作系统</th><th>备注</th></tr></thead><tbody><tr><td>192.168.0.22</td><td>master1</td><td>mysql-8.0.17</td><td>3306</td><td>1</td><td>centos7.6-1810</td><td>master</td></tr><tr><td>192.168.0.23</td><td>master2</td><td>mysql-8.0.17</td><td>3306</td><td>2</td><td>centos7.6-1810</td><td>slave</td></tr><tr><td>192.168.0.24</td><td>master3</td><td>mysql-8.0.17</td><td>3306</td><td>3</td><td>centos7.6-1810</td><td>slave</td></tr></tbody></table><p>在3台服务器的&#x2F;etc&#x2F;hosts中加入以下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markup">192.168.0.22 master1<br>192.168.0.23 master2<br>192.168.0.24 master3<br></code></pre></td></tr></table></figure><h4 id="2、安装MYSQL"><a href="#2、安装MYSQL" class="headerlink" title="2、安装MYSQL"></a>2、安装MYSQL</h4><p>安装方法见<a href="http://wiki.ghostcloud.cn/pages/viewpage.action?pageId=21333870">http://wiki.ghostcloud.cn/pages/viewpage.action?pageId=21333870</a></p><h4 id="3、安装MGR插件"><a href="#3、安装MGR插件" class="headerlink" title="3、安装MGR插件"></a>3、安装MGR插件</h4><p>三台服务器都要装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 登录mysql</span><br>mysql -uroot -p<br><br><span class="hljs-comment"># 安装插件</span><br>install PLUGIN group_replication SONAME <span class="hljs-string">&#x27;group_replication.so&#x27;</span>;<br><br><span class="hljs-comment"># 查看group replication插件</span><br>show plugins;<br><br></code></pre></td></tr></table></figure><p>安装完后如下图所示<br><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20201112114408736.png" alt="image-20201112114408736"></p><h4 id="4、配置复制环境，见官方文档18-2-1-2-Configuring-an-Instance-for-Group-Replication"><a href="#4、配置复制环境，见官方文档18-2-1-2-Configuring-an-Instance-for-Group-Replication" class="headerlink" title="4、配置复制环境，见官方文档18.2.1.2 Configuring an Instance for Group Replication"></a>4、配置复制环境，见官方文档<a href="https://dev.mysql.com/doc/refman/8.0/en/group-replication-configuring-instances.html">18.2.1.2 Configuring an Instance for Group Replication</a></h4><h6 id="4-1、配置192-168-0-22（master1）"><a href="#4-1、配置192-168-0-22（master1）" class="headerlink" title="4.1、配置192.168.0.22（master1）"></a>4.1、配置192.168.0.22（master1）</h6><p>打开&#x2F;etc&#x2F;mysql&#x2F;my.cnf，添加以下配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs bash">[mysqld]<br><span class="hljs-comment"># Group Replication</span><br>server-id=5<br>slow_query_log=1<br>log_queries_not_using_indexes=1<br>slow_query_log_file=/var/log/mysql/slow-query.log<br>log-bin=/var/log/mysql/mgr-bin<br>relay-log=/var/log/mysql/mgr-relay<br>character_set_server=utf8mb4<br><br><span class="hljs-comment"># MGR使用乐观锁，所以官网建议隔离级别是RC，减少锁粒度</span><br>transaction_isolation=READ-COMMITTED<br>gtid_mode=on<br>enforce_gtid_consistency=1 <span class="hljs-comment"># 强制GTID一致性</span><br>binlog_format=row<br><br><span class="hljs-comment"># 因为集群会在故障恢复时互相检查binlog的数据,所以需要记录下集群内其他服务器发过来已经执行过的binlog,按GTID来区分是否执行过.</span><br>log-slave-updates=1<br><br><span class="hljs-comment"># binlog校验规则，5.6之后的高版本是CRC32，低版本都是NONE，但是MGR要求使用NONE</span><br>binlog_checksum=NONE<br><br><span class="hljs-comment"># 基于安全的考虑，MGR集群要求复制模式要改成slave记录记录到表中，不然就报错</span><br>master_info_repository=TABLE<br>relay_log_info_repository=TABLE<br><br><span class="hljs-comment"># 记录事务的算法,官网建议设置该参数使用 XXHASH64 算法</span><br>transaction_write_set_extraction = XXHASH64<br><br><span class="hljs-comment"># 加载group_replication插件</span><br>plugin_load_add=<span class="hljs-string">&#x27;group_replication.so&#x27;</span><br><br><span class="hljs-comment"># 相当于此GROUP的名字，是UUID值，可以使用select uuid()生成</span><br>group_replication_group_name = <span class="hljs-string">&#x27;558edd3c-02ec-11ea-9bb3-080027e39bd2&#x27;</span><br><br><span class="hljs-comment"># 是否随服务器启动而自动启动组复制，不建议直接启动，怕故障恢复时有扰乱数据准确性的特殊情况</span><br>group_replication_start_on_boot = OFF<br><br><span class="hljs-comment"># 本地MGR的IP地址和端口，host:port,是MGR的端口,不是数据库的端口</span><br>group_replication_local_address = <span class="hljs-string">&#x27;master1:33061&#x27;</span><br><br><span class="hljs-comment"># 需要接受本MGR实例控制的服务器IP地址和端口，是MGR的端口，不是数据库的端口</span><br>group_replication_group_seeds = <span class="hljs-string">&#x27;master1:33061,master2:33061,master3:33061&#x27;</span><br><br><span class="hljs-comment"># 开启引导模式，添加组成员，用于第一次搭建MGR或重建MGR的时候使用，只需要在集群内的其中一台开启</span><br>group_replication_bootstrap_group = OFF<br></code></pre></td></tr></table></figure><p>重启mysql，命令<code>service mysql restart</code></p><p>建立复制账号并启动group replication</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 登录mysql</span><br>mysql -uroot -p<br><span class="hljs-built_in">export</span> MYSQL_PWD=aL3ec1LW@2<br><span class="hljs-comment"># 关闭日志记录</span><br>mysql -e <span class="hljs-string">&quot;set SQL_LOG_BIN=0;&quot;</span><br><br><br><span class="hljs-comment"># 创建用户（远程可以访问）</span><br>mysql -e <span class="hljs-string">&quot;create user &#x27;MGR&#x27;@&#x27;%&#x27; identified by &#x27;4fYTvCU%92&#x27;;&quot;</span><br><br><span class="hljs-comment"># 授权</span><br>mysql -e <span class="hljs-string">&quot;grant replication slave on *.* to MGR@&#x27;%&#x27; ;&quot;</span><br><span class="hljs-comment"># 修改加密规则</span><br>ALTER USER <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;password&#x27;</span> PASSWORD EXPIRE NEVER; <br><br>mysql -e <span class="hljs-string">&quot;ALTER USER &#x27;MGR&#x27;@&#x27;%&#x27; identified by &#x27;4fYTvCU%92&#x27; PASSWORD EXPIRE NEVER;&quot;</span><br><span class="hljs-comment"># 更新一下用户的密码 </span><br>mysql -e <span class="hljs-string">&quot;ALTER USER &#x27;MGR&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;4fYTvCU%92&#x27;;&quot;</span><br><span class="hljs-comment"># 刷新权限</span><br>mysql -e <span class="hljs-string">&quot;flush privileges;&quot;</span><br><br><br><span class="hljs-comment"># 开启日志</span><br>mysql -e <span class="hljs-string">&quot;set SQL_LOG_BIN=1;&quot;</span><br><br><span class="hljs-comment"># 构建group replication集群</span><br>mysql -e <span class="hljs-string">&quot;change master to master_user=&#x27;MGR&#x27;,master_password=&#x27;4fYTvCU%92&#x27; for channel &#x27;group_replication_recovery&#x27;;&quot;</span><br><br><br><span class="hljs-comment"># 设置group_replication_bootstrap_group为ON是为了标示以后加入集群的服务器以这台服务器为基准，以后加入的就不需要设置</span><br>mysql -e  <span class="hljs-string">&quot;set global group_replication_bootstrap_group=ON;&quot;</span><br><br><span class="hljs-comment"># 作为首个节点启动MGR集群</span><br>mysql -e  <span class="hljs-string">&quot;start group_replication;&quot;</span><br><br><span class="hljs-comment"># 关闭group_replication_bootstrap_group</span><br>mysql -e  <span class="hljs-string">&quot;set global group_replication_bootstrap_group=OFF;&quot;</span><br><br><span class="hljs-comment"># 查看mgr的状态，查询表performance_schema.replication_group_members</span><br> mysql -e <span class="hljs-string">&quot;select * from performance_schema.replication_group_members;&quot;</span><br><br><span class="hljs-comment"># group相关参数查看</span><br>mysql -e <span class="hljs-string">&quot;show variables like &#x27;group%&#x27;;&quot;</span><br></code></pre></td></tr></table></figure><h6 id="4-2、配置192-168-0-23（master2）"><a href="#4-2、配置192-168-0-23（master2）" class="headerlink" title="4.2、配置192.168.0.23（master2）"></a>4.2、配置192.168.0.23（master2）</h6><p>复制master1的配置文件&#x2F;etc&#x2F;mysql&#x2F;my.cnf，修改server_id，loose-group_replication_local_address即可，如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs bash">[mysqld]<br><span class="hljs-comment"># Group Replication</span><br>server-id=2<br>slow_query_log=1<br>log_queries_not_using_indexes=1<br>slow_query_log_file=/var/log/mysql/slow-query.log<br>log-bin=/var/log/mysql/mgr-bin<br>relay-log=/var/log/mysql/mgr-relay<br>character_set_server=utf8mb4<br><br><span class="hljs-comment"># MGR使用乐观锁，所以官网建议隔离级别是RC，减少锁粒度</span><br>transaction_isolation=READ-COMMITTED<br>gtid_mode=on<br>enforce_gtid_consistency=1 <span class="hljs-comment"># 强制GTID一致性</span><br>binlog_format=row<br><br><span class="hljs-comment"># 因为集群会在故障恢复时互相检查binlog的数据,所以需要记录下集群内其他服务器发过来已经执行过的binlog,按GTID来区分是否执行过.</span><br>log-slave-updates=1<br><br><span class="hljs-comment"># binlog校验规则，5.6之后的高版本是CRC32，低版本都是NONE，但是MGR要求使用NONE</span><br>binlog_checksum=NONE<br><br><span class="hljs-comment"># 基于安全的考虑，MGR集群要求复制模式要改成slave记录记录到表中，不然就报错</span><br>master_info_repository=TABLE<br>relay_log_info_repository=TABLE<br><br><span class="hljs-comment"># 记录事务的算法,官网建议设置该参数使用 XXHASH64 算法</span><br>transaction_write_set_extraction = XXHASH64<br><br><span class="hljs-comment"># 启动时加载group_replication插件</span><br>plugin_load_add=<span class="hljs-string">&#x27;group_replication.so&#x27;</span><br><br><span class="hljs-comment"># 相当于此GROUP的名字，是UUID值，可以使用select uuid()生成</span><br>group_replication_group_name = <span class="hljs-string">&#x27;558edd3c-02ec-11ea-9bb3-080027e39bd2&#x27;</span><br><br><span class="hljs-comment"># 是否随服务器启动而自动启动组复制，不建议直接启动，怕故障恢复时有扰乱数据准确性的特殊情况</span><br>group_replication_start_on_boot = OFF<br><br><span class="hljs-comment"># 本地MGR的IP地址和端口，host:port,是MGR的端口,不是数据库的端口</span><br>group_replication_local_address = <span class="hljs-string">&#x27;master2:33061&#x27;</span><br><br><span class="hljs-comment"># 需要接受本MGR实例控制的服务器IP地址和端口，是MGR的端口，不是数据库的端口</span><br>group_replication_group_seeds = <span class="hljs-string">&#x27;master1:33061,master2:33061,master3:33061&#x27;</span><br><br><span class="hljs-comment"># 开启引导模式，添加组成员，用于第一次搭建MGR或重建MGR的时候使用，只需要在集群内的其中一台开启</span><br>group_replication_bootstrap_group = OFF<br></code></pre></td></tr></table></figure><p>重启mysql，命令<code>service mysql restart</code></p><p>建立复制账号并启动group replication</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 配置 MYSQL_PWD<br>export MYSQL_PWD<span class="hljs-operator">=</span>aL3ec1LW<span class="hljs-variable">@2</span><br><br># 关闭日志记录<br>mysql <span class="hljs-operator">-</span>e &quot;set SQL_LOG_BIN=0;&quot;<br><br># 创建用户（网段<span class="hljs-number">192.168</span><span class="hljs-number">.50</span>的可以访问）<br>mysql <span class="hljs-operator">-</span>e &quot;create user &#x27;MGR&#x27;@&#x27;%&#x27; identified by &#x27;4fYTvCU%92&#x27;;&quot;<br># 授权<br>mysql <span class="hljs-operator">-</span>e &quot;grant replication slave on *.* to MGR@&#x27;%&#x27; ;&quot;<br># 刷新权限<br>mysql <span class="hljs-operator">-</span>e &quot;flush privileges;&quot;<br># 开启日志<br>mysql <span class="hljs-operator">-</span>e &quot;set SQL_LOG_BIN=1;&quot;<br><br># 构建<span class="hljs-keyword">group</span> replication集群<br>mysql <span class="hljs-operator">-</span>e &quot;change master to master_user=&#x27;MGR&#x27;,master_password=&#x27;4fYTvCU%92&#x27; for channel &#x27;group_replication_recovery&#x27;;&quot;<br><br># 加入MGR集群<br>mysql <span class="hljs-operator">-</span>e &quot;set global group_replication_allow_local_disjoint_gtids_join=ON;&quot;<br>mysql <span class="hljs-operator">-</span>e &quot;start group_replication;&quot;<br><br># 查看mgr的状态，查询表performance_schema.replication_group_members，发现已加入MGR群<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> performance_schema.replication_group_members;<br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+</span><br><span class="hljs-operator">|</span> CHANNEL_NAME              <span class="hljs-operator">|</span> MEMBER_ID                            <span class="hljs-operator">|</span> MEMBER_HOST <span class="hljs-operator">|</span> MEMBER_PORT <span class="hljs-operator">|</span> MEMBER_STATE <span class="hljs-operator">|</span> MEMBER_ROLE <span class="hljs-operator">|</span> MEMBER_VERSION <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+</span><br><span class="hljs-operator">|</span> group_replication_applier <span class="hljs-operator">|</span> <span class="hljs-number">4</span>c668095<span class="hljs-operator">-</span>dd20<span class="hljs-number">-11e9</span><span class="hljs-number">-95</span>ba<span class="hljs-number">-080027e39</span>bc3 <span class="hljs-operator">|</span> master2    <span class="hljs-operator">|</span>        <span class="hljs-number">3306</span> <span class="hljs-operator">|</span> RECOVERING   <span class="hljs-operator">|</span> SECONDARY   <span class="hljs-operator">|</span> <span class="hljs-number">8.0</span><span class="hljs-number">.17</span>         <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> group_replication_applier <span class="hljs-operator">|</span> <span class="hljs-number">4</span>c668095<span class="hljs-operator">-</span>dd20<span class="hljs-number">-11e9</span><span class="hljs-number">-95</span>ba<span class="hljs-number">-080027e39</span>bd2 <span class="hljs-operator">|</span> master1    <span class="hljs-operator">|</span>        <span class="hljs-number">3306</span> <span class="hljs-operator">|</span> ONLINE       <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>     <span class="hljs-operator">|</span> <span class="hljs-number">8.0</span><span class="hljs-number">.17</span>         <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+</span><br><span class="hljs-number">1234567891011121314151617181920212223242526272829303132</span><br></code></pre></td></tr></table></figure><p>节点长时间处于RECOVERING状态，见下面第6.1节，有解决方法</p><h6 id="4-3、配置192-168-0-24（master3）"><a href="#4-3、配置192-168-0-24（master3）" class="headerlink" title="4.3、配置192.168.0.24（master3）"></a>4.3、配置192.168.0.24（master3）</h6><p>复制master1的配置文件&#x2F;etc&#x2F;mysql&#x2F;my.cnf，修改server_id，loose-group_replication_local_address即可，如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs bash">[mysqld]<br><span class="hljs-comment"># Group Replication</span><br>server-id=7<br>slow_query_log=1<br>log_queries_not_using_indexes=1<br>slow_query_log_file=/var/log/mysql/slow-query.log<br>log-bin=/var/log/mysql/mgr-bin<br>relay-log=/var/log/mysql/mgr-relay<br>character_set_server=utf8mb4<br><br><span class="hljs-comment"># MGR使用乐观锁，所以官网建议隔离级别是RC，减少锁粒度</span><br>transaction_isolation=READ-COMMITTED<br>gtid_mode=on<br>enforce_gtid_consistency=1 <span class="hljs-comment"># 强制GTID一致性</span><br>binlog_format=row<br><br><span class="hljs-comment"># 因为集群会在故障恢复时互相检查binlog的数据,所以需要记录下集群内其他服务器发过来已经执行过的binlog,按GTID来区分是否执行过.</span><br>log-slave-updates=1<br><br><span class="hljs-comment"># binlog校验规则，5.6之后的高版本是CRC32，低版本都是NONE，但是MGR要求使用NONE</span><br>binlog_checksum=NONE<br><br><span class="hljs-comment"># 基于安全的考虑，MGR集群要求复制模式要改成slave记录记录到表中，不然就报错</span><br>master_info_repository=TABLE<br>relay_log_info_repository=TABLE<br><br><span class="hljs-comment"># 记录事务的算法,官网建议设置该参数使用 XXHASH64 算法</span><br>transaction_write_set_extraction = XXHASH64<br><br><span class="hljs-comment"># 启动时加载group_replication插件</span><br>plugin_load_add=<span class="hljs-string">&#x27;group_replication.so&#x27;</span><br><br><span class="hljs-comment"># 相当于此GROUP的名字，是UUID值，可以使用select uuid()生成</span><br>group_replication_group_name = <span class="hljs-string">&#x27;558edd3c-02ec-11ea-9bb3-080027e39bd2&#x27;</span><br><br><span class="hljs-comment"># 是否随服务器启动而自动启动组复制，不建议直接启动，怕故障恢复时有扰乱数据准确性的特殊情况</span><br>group_replication_start_on_boot = OFF<br><br><span class="hljs-comment"># 本地MGR的IP地址和端口，host:port,是MGR的端口,不是数据库的端口</span><br>group_replication_local_address = <span class="hljs-string">&#x27;master3:33061&#x27;</span><br><br><span class="hljs-comment"># 需要接受本MGR实例控制的服务器IP地址和端口，是MGR的端口，不是数据库的端口</span><br>group_replication_group_seeds = <span class="hljs-string">&#x27;master1:33061,master2:33061,master3:33061&#x27;</span><br><br><span class="hljs-comment"># 开启引导模式，添加组成员，用于第一次搭建MGR或重建MGR的时候使用，只需要在集群内的其中一台开启</span><br>group_replication_bootstrap_group = OFF<br>12345678910111213141516171819202122232425262728293031323334353637383940414243444546<br></code></pre></td></tr></table></figure><p>重启mysql，命令<code>service mysql restart</code></p><p>建立复制账号并启动group replication</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 登录mysql<br>mysql <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p<br><br># 关闭日志记录<br><span class="hljs-keyword">set</span> SQL_LOG_BIN<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br><br># 创建用户（网段<span class="hljs-number">192.168</span><span class="hljs-number">.50</span>的可以访问）<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;mgr_repl&#x27;</span>@<span class="hljs-string">&#x27;192.168.50.%&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> sha256_password <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br><br># 授权<br><span class="hljs-keyword">GRANT</span> REPLICATION SLAVE <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;mgr_repl&#x27;</span>@<span class="hljs-string">&#x27;192.168.50.%&#x27;</span>;<br><br># 刷新权限<br>flush privileges;<br><br># 开启日志<br><span class="hljs-keyword">set</span> SQL_LOG_BIN<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><br># 构建<span class="hljs-keyword">group</span> replication集群<br>change master <span class="hljs-keyword">to</span> master_user<span class="hljs-operator">=</span><span class="hljs-string">&#x27;mgr_repl&#x27;</span>,master_password<span class="hljs-operator">=</span><span class="hljs-string">&#x27;123456&#x27;</span> <span class="hljs-keyword">for</span> channel <span class="hljs-string">&#x27;group_replication_recovery&#x27;</span>;<br><br># 加入MGR集群<br><span class="hljs-keyword">start</span> group_replication;<br><br># 查看mgr的状态，查询表performance_schema.replication_group_members，发现已加入MGR群<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> performance_schema.replication_group_members;<br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+</span><br><span class="hljs-operator">|</span> CHANNEL_NAME              <span class="hljs-operator">|</span> MEMBER_ID                            <span class="hljs-operator">|</span> MEMBER_HOST <span class="hljs-operator">|</span> MEMBER_PORT <span class="hljs-operator">|</span> MEMBER_STATE <span class="hljs-operator">|</span> MEMBER_ROLE <span class="hljs-operator">|</span> MEMBER_VERSION <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+</span><br><span class="hljs-operator">|</span> group_replication_applier <span class="hljs-operator">|</span> <span class="hljs-number">4</span>c668095<span class="hljs-operator">-</span>dd20<span class="hljs-number">-11e9</span><span class="hljs-number">-95</span>ba<span class="hljs-number">-080027e39</span>bc3 <span class="hljs-operator">|</span> master2    <span class="hljs-operator">|</span>        <span class="hljs-number">3306</span> <span class="hljs-operator">|</span> ONLINE       <span class="hljs-operator">|</span> SECONDARY   <span class="hljs-operator">|</span> <span class="hljs-number">8.0</span><span class="hljs-number">.17</span>         <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> group_replication_applier <span class="hljs-operator">|</span> <span class="hljs-number">4</span>c668095<span class="hljs-operator">-</span>dd20<span class="hljs-number">-11e9</span><span class="hljs-number">-95</span>ba<span class="hljs-number">-080027e39</span>bd2 <span class="hljs-operator">|</span> master1    <span class="hljs-operator">|</span>        <span class="hljs-number">3306</span> <span class="hljs-operator">|</span> ONLINE       <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>     <span class="hljs-operator">|</span> <span class="hljs-number">8.0</span><span class="hljs-number">.17</span>         <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> group_replication_applier <span class="hljs-operator">|</span> c90e9166<span class="hljs-operator">-</span>de11<span class="hljs-number">-11e9</span><span class="hljs-number">-9</span>ee0<span class="hljs-number">-080027</span>d8da86 <span class="hljs-operator">|</span> master3    <span class="hljs-operator">|</span>        <span class="hljs-number">3306</span> <span class="hljs-operator">|</span> ONLINE       <span class="hljs-operator">|</span> SECONDARY   <span class="hljs-operator">|</span> <span class="hljs-number">8.0</span><span class="hljs-number">.17</span>         <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+</span><br><br></code></pre></td></tr></table></figure><h4 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h4><p>在master1（192.168.0.22）上执行以下sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 测试master1上的mysql<br><span class="hljs-keyword">create</span> database repl;<br>use repl;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test (id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key, name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>));  #注意创建主键<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;测试&#x27;</span>);<br><br># 查看binlog<br><span class="hljs-keyword">SHOW</span> BINLOG EVENTS;<br><br><br></code></pre></td></tr></table></figure><p>查看master1的结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+--------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> name   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+--------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 测试   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+--------+</span><br><br><br></code></pre></td></tr></table></figure><p>查看master2的结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"># repl数据库已同步过来了<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> databases;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br><span class="hljs-operator">|</span> Database           <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br><span class="hljs-operator">|</span> information_schema <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mybatis            <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mysql              <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> performance_schema <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> repl               <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> sys                <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br>mysql<span class="hljs-operator">&gt;</span> use repl;<br>Reading <span class="hljs-keyword">table</span> information <span class="hljs-keyword">for</span> completion <span class="hljs-keyword">of</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">column</span> names<br>You can turn off this feature <span class="hljs-keyword">to</span> <span class="hljs-keyword">get</span> a quicker startup <span class="hljs-keyword">with</span> <span class="hljs-operator">-</span>A<br><br>Database changed<br><br><span class="hljs-comment">-- 数据也同步过来了</span><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+--------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> name   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+--------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 测试   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+--------+</span><br><br></code></pre></td></tr></table></figure><p>查看master3的结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"># repl数据库已同步过来了<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> databases;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br><span class="hljs-operator">|</span> Database           <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br><span class="hljs-operator">|</span> information_schema <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mybatis            <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> mysql              <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> performance_schema <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> repl               <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> sys                <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+</span><br>mysql<span class="hljs-operator">&gt;</span> use repl;<br>Reading <span class="hljs-keyword">table</span> information <span class="hljs-keyword">for</span> completion <span class="hljs-keyword">of</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">column</span> names<br>You can turn off this feature <span class="hljs-keyword">to</span> <span class="hljs-keyword">get</span> a quicker startup <span class="hljs-keyword">with</span> <span class="hljs-operator">-</span>A<br><br>Database changed<br><br><span class="hljs-comment">-- 数据也同步过来了</span><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+--------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> name   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+--------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 测试   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+--------+</span><br><br></code></pre></td></tr></table></figure><h6 id="因为是单主模式，master1为主（PRIMARY），支持读写，master2和master3为从（SECONDARY），只支持读，如果执行写会失败，如下"><a href="#因为是单主模式，master1为主（PRIMARY），支持读写，master2和master3为从（SECONDARY），只支持读，如果执行写会失败，如下" class="headerlink" title="因为是单主模式，master1为主（PRIMARY），支持读写，master2和master3为从（SECONDARY），只支持读，如果执行写会失败，如下"></a>因为是单主模式，master1为主（PRIMARY），支持读写，master2和master3为从（SECONDARY），只支持读，如果执行写会失败，如下</h6><p>在master2和master3中执行<code>insert into test values (2,&#39;写入测试&#39;);</code>，都会报以下错误</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test <span class="hljs-keyword">values</span> (<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;写入测试&#x27;</span>);<br>ERROR <span class="hljs-number">1290</span> (HY000): The MySQL server <span class="hljs-keyword">is</span> <span class="hljs-keyword">running</span> <span class="hljs-keyword">with</span> the <span class="hljs-comment">--super-read-only option so it cannot execute this statement</span><br><span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>在master1执行则成功</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test <span class="hljs-keyword">values</span> (<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;写入测试&#x27;</span>);<br>Query OK, <span class="hljs-number">1</span> <span class="hljs-type">row</span> affected (<span class="hljs-number">0.11</span> sec)<br><span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><h4 id="6、常见的错误"><a href="#6、常见的错误" class="headerlink" title="6、常见的错误"></a>6、常见的错误</h4><h5 id="6-1-节点长期处于RECOVERING状态的解决方法"><a href="#6-1-节点长期处于RECOVERING状态的解决方法" class="headerlink" title="6.1 节点长期处于RECOVERING状态的解决方法"></a><code>6.1 节点长期处于RECOVERING状态的解决方法</code></h5><p>查看日志，发现是用户密码加密插件问题<code>Authentication plugin &#39;caching_sha2_password&#39; reported error: Authentication requires secure connection.</code>，也就是创建复制用户时，密码默认是mysql 8的加密方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">2019-11-09T14:59:18.932184Z 28 [ERROR] [MY-011583] [Repl] Plugin group_replication reported: <span class="hljs-string">&#x27;For details please check performance_schema.replication_connection_status table and error log messages of Slave I/O for channel group_replication_recovery.&#x27;</span><br>2019-11-09T15:00:19.061955Z 28 [System] [MY-010597] [Repl] <span class="hljs-string">&#x27;CHANGE MASTER TO FOR CHANNEL &#x27;</span>group_replication_recovery<span class="hljs-string">&#x27; executed&#x27;</span>. Previous state master_host=<span class="hljs-string">&#x27;master1&#x27;</span>, master_port= 3306, master_log_file=<span class="hljs-string">&#x27;&#x27;</span>, master_log_pos= 4, master_bind=<span class="hljs-string">&#x27;&#x27;</span>. New state master_host=<span class="hljs-string">&#x27;master1&#x27;</span>, master_port= 3306, master_log_file=<span class="hljs-string">&#x27;&#x27;</span>, master_log_pos= 4, master_bind=<span class="hljs-string">&#x27;&#x27;</span>.<br>2019-11-09T15:00:19.144499Z 37 [Warning] [MY-010897] [Repl] Storing MySQL user name or password information <span class="hljs-keyword">in</span> the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options <span class="hljs-keyword">for</span> START SLAVE; see the <span class="hljs-string">&#x27;START SLAVE Syntax&#x27;</span> <span class="hljs-keyword">in</span> the MySQL Manual <span class="hljs-keyword">for</span> more information.<br>2019-11-09T15:00:19.154364Z 37 [ERROR] [MY-010584] [Repl] Slave I/O <span class="hljs-keyword">for</span> channel <span class="hljs-string">&#x27;group_replication_recovery&#x27;</span>: error connecting to master <span class="hljs-string">&#x27;mgr_repl@master1:3306&#x27;</span> - retry-time: 60 retries: 1 message: Authentication plugin <span class="hljs-string">&#x27;caching_sha2_password&#x27;</span> reported error: Authentication requires secure connection. Error_code: MY-002061<br>2019-11-09T15:00:19.196600Z 28 [ERROR] [MY-011582] [Repl] Plugin group_replication reported: <span class="hljs-string">&#x27;There was an error when connecting to the donor server. Please check that group_replication_recovery channel credentials and all MEMBER_HOST column values of performance_schema.replication_group_members table are correct and DNS resolvable.&#x27;</span><br>2019-11-09T15:00:19.196632Z 28 [ERROR] [MY-011583] [Repl] Plugin group_replication reported: <span class="hljs-string">&#x27;For details please check performance_schema.replication_connection_status table and error log messages of Slave I/O for channel group_replication_recovery.&#x27;</span><br>123456<br></code></pre></td></tr></table></figure><p>解决方法，更改密码加密方式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> SQL_LOG_BIN<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;mgr_repl&#x27;</span>@<span class="hljs-string">&#x27;192.168.50.%&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> sha256_password <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br><span class="hljs-keyword">GRANT</span> REPLICATION SLAVE <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;mgr_repl&#x27;</span>@<span class="hljs-string">&#x27;192.168.50.%&#x27;</span>;<br><span class="hljs-keyword">SET</span> SQL_LOG_BIN<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><p>再启动MGR就可以正常了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> performance_schema.replication_group_members;<br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+</span><br><span class="hljs-operator">|</span> CHANNEL_NAME              <span class="hljs-operator">|</span> MEMBER_ID                            <span class="hljs-operator">|</span> MEMBER_HOST <span class="hljs-operator">|</span> MEMBER_PORT <span class="hljs-operator">|</span> MEMBER_STATE <span class="hljs-operator">|</span> MEMBER_ROLE <span class="hljs-operator">|</span> MEMBER_VERSION <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+</span><br><span class="hljs-operator">|</span> group_replication_applier <span class="hljs-operator">|</span> <span class="hljs-number">4</span>c668095<span class="hljs-operator">-</span>dd20<span class="hljs-number">-11e9</span><span class="hljs-number">-95</span>ba<span class="hljs-number">-080027e39</span>bc3 <span class="hljs-operator">|</span> master2    <span class="hljs-operator">|</span>        <span class="hljs-number">3306</span> <span class="hljs-operator">|</span> ONLINE       <span class="hljs-operator">|</span> SECONDARY   <span class="hljs-operator">|</span> <span class="hljs-number">8.0</span><span class="hljs-number">.17</span>         <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> group_replication_applier <span class="hljs-operator">|</span> <span class="hljs-number">4</span>c668095<span class="hljs-operator">-</span>dd20<span class="hljs-number">-11e9</span><span class="hljs-number">-95</span>ba<span class="hljs-number">-080027e39</span>bd2 <span class="hljs-operator">|</span> master1    <span class="hljs-operator">|</span>        <span class="hljs-number">3306</span> <span class="hljs-operator">|</span> ONLINE       <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>     <span class="hljs-operator">|</span> <span class="hljs-number">8.0</span><span class="hljs-number">.17</span>         <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+</span><br><span class="hljs-number">1234567</span><br></code></pre></td></tr></table></figure><p>6.2 其他节点执行start group_replication报错，查看日志如下</p><p><img src="C:\Users\liyupi\AppData\Roaming\Typora\typora-user-images\image-20201112161047218.png" alt="image-20201112161047218"></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[ERROR] [MY<span class="hljs-string">-011526</span>] [Repl] Plugin group_replication reported: &#x27;This member has more executed transactions than those present in the group. Local transactions: cd6c626d<span class="hljs-string">-248</span>e<span class="hljs-string">-11</span>eb<span class="hljs-string">-8</span>f23<span class="hljs-string">-00155</span>d020983:1<span class="hljs-string">-2</span> &gt; Group transactions: 558edd3c<span class="hljs-string">-02</span>ec<span class="hljs-string">-11</span>ea<span class="hljs-string">-9</span>bb3<span class="hljs-string">-080027</span>e39bd2:1<span class="hljs-string">-16</span>, dfee2d85<span class="hljs-string">-2497</span><span class="hljs-string">-11</span>eb-ab7e<span class="hljs-string">-00155</span>d020982:1<span class="hljs-string">-3</span>&#x27;<br></code></pre></td></tr></table></figure><p>原因是在这个节点有操作了之前创建了用户因为是初始化安装所以可以 reset master 清空Executed_Gtid_Set</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">mysql</span> -e  <span class="hljs-string">&quot; reset master;&quot;</span><br>mysql -e  <span class="hljs-string">&quot;start group_replication;&quot;</span><br><br><br></code></pre></td></tr></table></figure><h4 id="7、管理维护"><a href="#7、管理维护" class="headerlink" title="7、管理维护"></a>7、管理维护</h4><h5 id="7-1-单主切换到多主"><a href="#7-1-单主切换到多主" class="headerlink" title="7.1 单主切换到多主"></a>7.1 单主切换到多主</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># MGR切换模式需要重新启动组复制，因此需要在所有节点上先关闭组复制，</span><br><span class="hljs-comment"># 设置 group_replication_single_primary_mode=OFF 等参数，再启动组复制。</span><br><span class="hljs-comment"># 停止组复制(在所有MGR节点上执行)：</span><br>stop group_replication;<br><br><span class="hljs-comment"># 单主模式关闭</span><br><span class="hljs-built_in">set</span> global group_replication_single_primary_mode=OFF;<br><br><span class="hljs-comment"># 如果是单主模式,因为不存在多主同时操作的可能,这个强制检查是可以关闭,因为已经不存在这样的操作,多主是必须要开的,不开的话数据就可能出现错乱了</span><br><span class="hljs-built_in">set</span> global group_replication_enforce_update_everywhere_checks=ON;<br><br><span class="hljs-comment"># 随便选择某个MGR节点执行 (比如这里选择在master1节点):</span><br><span class="hljs-built_in">set</span> global group_replication_recovery_get_public_key=1;<br>SET GLOBAL group_replication_bootstrap_group=ON;<br>START GROUP_REPLICATION;<br>SET GLOBAL group_replication_bootstrap_group=OFF;<br><br><span class="hljs-comment"># 然后在其他的MGR节点执行 (这里指master2和master3节点上执行):</span><br><span class="hljs-built_in">set</span> global group_replication_recovery_get_public_key=1;<br>START GROUP_REPLICATION;<br><br><span class="hljs-comment"># 查看MGR组信息 (在任意一个MGR节点上都可以查看)</span><br>SELECT * FROM performance_schema.replication_group_members;<br>1234567891011121314151617181920212223<br><br></code></pre></td></tr></table></figure><h5 id="7-2-多主切换回单主"><a href="#7-2-多主切换回单主" class="headerlink" title="7.2 多主切换回单主"></a>7.2 多主切换回单主</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 停止组复制(在所有MGR节点上执行)：</span><br>stop group_replication;<br><br><span class="hljs-comment"># 如果是单主模式,因为不存在多主同时操作的可能,这个强制检查是可以关闭,因为已经不存在这样的操作,多主是必须要开的,不开的话数据就可能出现错乱了</span><br><span class="hljs-built_in">set</span> global group_replication_enforce_update_everywhere_checks=OFF;<br><br><span class="hljs-comment"># 打开单主模式</span><br><span class="hljs-built_in">set</span> global group_replication_single_primary_mode=ON;<br><br><span class="hljs-comment"># 选择一个节点作为主节点, 在主节点上执行 (这里选择master1节点作为主节点)</span><br>SET GLOBAL group_replication_bootstrap_group=ON;<br>START GROUP_REPLICATION;<br>SET GLOBAL group_replication_bootstrap_group=OFF;<br> <br><span class="hljs-comment"># 在其他剩余的节点, 也就是从库节点上执行 (这里从库节点指的就是master2和master3):</span><br>START GROUP_REPLICATION;<br><br><span class="hljs-comment"># 查看MGR组信息 (在任意一个MGR节点上都可以查看)</span><br>SELECT * FROM performance_schema.replication_group_members;<br>12345678910111213141516171819<br><br></code></pre></td></tr></table></figure><h5 id="7-3-常用命令及语句"><a href="#7-3-常用命令及语句" class="headerlink" title="7.3 常用命令及语句"></a>7.3 常用命令及语句</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查一下GTID，是否为之前设的那个group的uuid（558edd3c-02ec-11ea-9bb3-080027e39bd2）</span><br>mysql&gt; show master status;<br>+----------------+----------+--------------+------------------+------------------------------------------+<br>| File           | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                        |<br>+----------------+----------+--------------+------------------+------------------------------------------+<br>| mgr-bin.000004 |     2208 |              |                  | 558edd3c-02ec-11ea-9bb3-080027e39bd2:1-9 |<br>+----------------+----------+--------------+------------------+------------------------------------------+<br><br><span class="hljs-comment"># 查看group内所有成员的节点信息</span><br>mysql&gt; SELECT * FROM performance_schema.replication_group_members;<br>+---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+<br>| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE | MEMBER_ROLE | MEMBER_VERSION |<br>+---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+<br>| group_replication_applier | 4c668095-dd20-11e9-95ba-080027e39bc3 | master2    |        3306 | ONLINE       | SECONDARY   | 8.0.17         |<br>| group_replication_applier | 4c668095-dd20-11e9-95ba-080027e39bd2 | master1    |        3306 | ONLINE       | PRIMARY     | 8.0.17         |<br>| group_replication_applier | c90e9166-de11-11e9-9ee0-080027d8da86 | master3    |        3306 | ONLINE       | SECONDARY   | 8.0.17         |<br>+---------------------------+--------------------------------------+-------------+-------------+--------------+-------------+----------------+<br><br><span class="hljs-comment"># 查看GROUP中的同步情况,当前复制状态</span><br>mysql&gt; select * from performance_schema.replication_group_member_stats\G;<br>* 1. row *<br>                              CHANNEL_NAME: group_replication_applier<br>                                   VIEW_ID: 15733926047947018:3<br>                                 MEMBER_ID: 4c668095-dd20-11e9-95ba-080027e39bc3<br>               COUNT_TRANSACTIONS_IN_QUEUE: 0<br>                COUNT_TRANSACTIONS_CHECKED: 4<br>                  COUNT_CONFLICTS_DETECTED: 0<br>        COUNT_TRANSACTIONS_ROWS_VALIDATING: 1<br>        TRANSACTIONS_COMMITTED_ALL_MEMBERS: 558edd3c-02ec-11ea-9bb3-080027e39bd2:1-9<br>            LAST_CONFLICT_FREE_TRANSACTION: 558edd3c-02ec-11ea-9bb3-080027e39bd2:9<br>COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE: 0<br>         COUNT_TRANSACTIONS_REMOTE_APPLIED: 5<br>         COUNT_TRANSACTIONS_LOCAL_PROPOSED: 0<br>         COUNT_TRANSACTIONS_LOCAL_ROLLBACK: 0<br>* 2. row *<br>                              CHANNEL_NAME: group_replication_applier<br>                                   VIEW_ID: 15733926047947018:3<br>                                 MEMBER_ID: 4c668095-dd20-11e9-95ba-080027e39bd2<br>               COUNT_TRANSACTIONS_IN_QUEUE: 0<br>                COUNT_TRANSACTIONS_CHECKED: 4<br>                  COUNT_CONFLICTS_DETECTED: 0<br>        COUNT_TRANSACTIONS_ROWS_VALIDATING: 1<br>        TRANSACTIONS_COMMITTED_ALL_MEMBERS: 558edd3c-02ec-11ea-9bb3-080027e39bd2:1-9<br>            LAST_CONFLICT_FREE_TRANSACTION: 558edd3c-02ec-11ea-9bb3-080027e39bd2:9<br>COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE: 0<br>         COUNT_TRANSACTIONS_REMOTE_APPLIED: 2<br>         COUNT_TRANSACTIONS_LOCAL_PROPOSED: 4<br>         COUNT_TRANSACTIONS_LOCAL_ROLLBACK: 0<br>* 3. row *<br>                              CHANNEL_NAME: group_replication_applier<br>                                   VIEW_ID: 15733926047947018:3<br>                                 MEMBER_ID: c90e9166-de11-11e9-9ee0-080027d8da86<br>               COUNT_TRANSACTIONS_IN_QUEUE: 0<br>                COUNT_TRANSACTIONS_CHECKED: 4<br>                  COUNT_CONFLICTS_DETECTED: 0<br>        COUNT_TRANSACTIONS_ROWS_VALIDATING: 1<br>        TRANSACTIONS_COMMITTED_ALL_MEMBERS: 558edd3c-02ec-11ea-9bb3-080027e39bd2:1-9<br>            LAST_CONFLICT_FREE_TRANSACTION: 558edd3c-02ec-11ea-9bb3-080027e39bd2:9<br>COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE: 0<br>         COUNT_TRANSACTIONS_REMOTE_APPLIED: 4<br>         COUNT_TRANSACTIONS_LOCAL_PROPOSED: 0<br>         COUNT_TRANSACTIONS_LOCAL_ROLLBACK: 0<br><br><span class="hljs-comment"># 当前server中各个通道的使用情况</span><br>mysql&gt; select * from performance_schema.replication_connection_status\G;<br>* 1. row *<br>                                      CHANNEL_NAME: group_replication_applier<br>                                        GROUP_NAME: 558edd3c-02ec-11ea-9bb3-080027e39bd2<br>                                       SOURCE_UUID: 558edd3c-02ec-11ea-9bb3-080027e39bd2<br>                                         THREAD_ID: NULL<br>                                     SERVICE_STATE: ON<br>                         COUNT_RECEIVED_HEARTBEATS: 0<br>                          LAST_HEARTBEAT_TIMESTAMP: 0000-00-00 00:00:00.000000<br>                          RECEIVED_TRANSACTION_SET: 558edd3c-02ec-11ea-9bb3-080027e39bd2:1-9<br>                                 LAST_ERROR_NUMBER: 0<br>                                LAST_ERROR_MESSAGE: <br>                              LAST_ERROR_TIMESTAMP: 0000-00-00 00:00:00.000000<br>                           LAST_QUEUED_TRANSACTION: 558edd3c-02ec-11ea-9bb3-080027e39bd2:5<br> LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP: 0000-00-00 00:00:00.000000<br>LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP: 0000-00-00 00:00:00.000000<br>     LAST_QUEUED_TRANSACTION_START_QUEUE_TIMESTAMP: 2019-11-10 21:35:36.917108<br>       LAST_QUEUED_TRANSACTION_END_QUEUE_TIMESTAMP: 2019-11-10 21:35:36.917146<br>                              QUEUEING_TRANSACTION: <br>    QUEUEING_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP: 0000-00-00 00:00:00.000000<br>   QUEUEING_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP: 0000-00-00 00:00:00.000000<br>        QUEUEING_TRANSACTION_START_QUEUE_TIMESTAMP: 0000-00-00 00:00:00.000000<br><br><span class="hljs-comment"># 当前server中各个通道是否启用,on是启用</span><br>mysql&gt; select * from performance_schema.replication_applier_status;<br>+---------------------------+---------------+-----------------+----------------------------+<br>| CHANNEL_NAME              | SERVICE_STATE | REMAINING_DELAY | COUNT_TRANSACTIONS_RETRIES |<br>+---------------------------+---------------+-----------------+----------------------------+<br>| group_replication_applier | ON            |            NULL |                          0 |<br>+---------------------------+---------------+-----------------+----------------------------+<br>12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394<br><br></code></pre></td></tr></table></figure><h4 id="8、故障注意事项"><a href="#8、故障注意事项" class="headerlink" title="8、故障注意事项"></a>8、故障注意事项</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 单主模式，恢复MGR-node1节点, 恢复后, 需要手动激活下该节点的组复制功能</span><br><span class="hljs-comment"># 如果节点发生故障, 在恢复后需要重新加入到MGR集群里, 正确的做法是:</span><br>STOP GROUP_REPLICATION;<br>START GROUP_REPLICATION;<br><br><span class="hljs-comment"># 如果某个节点挂了, 则其他的节点继续进行同步。当故障节点恢复后, 只需要手动激活下该节点的组复制功能, 即可正常加入到MGR组复制集群内并自动同步其他节点数据。</span><br>START GROUP_REPLICATION;<br><br><span class="hljs-comment"># 如果是i/o复制出现异常，确定数据无误后</span><br><span class="hljs-comment"># 查找主库的gtid情况</span><br>mysql&gt; show global variables like <span class="hljs-string">&#x27;%gtid%&#x27;</span>;<br>+----------------------------------------------+------------------------------------------+<br>| Variable_name                                | Value                                    |<br>+----------------------------------------------+------------------------------------------+<br>| binlog_gtid_simple_recovery                  | ON                                       |<br>| enforce_gtid_consistency                     | ON                                       |<br>| group_replication_gtid_assignment_block_size | 1000000                                  |<br>| gtid_executed                                | 558edd3c-02ec-11ea-9bb3-080027e39bd2:1-9 |<br>| gtid_executed_compression_period             | 1000                                     |<br>| gtid_mode                                    | ON                                       |<br>| gtid_owned                                   |                                          |<br>| gtid_purged                                  |                                          |<br>| session_track_gtids                          | OFF                                      |<br>+----------------------------------------------+------------------------------------------+<br><br><span class="hljs-comment"># 在有故障的从库中操作</span><br>stop GROUP_REPLICATION;<br>reset master;<br><span class="hljs-built_in">set</span> global gtid_purged=<span class="hljs-string">&#x27;58f6e65e-9309-11e9-9d88-525400184a0a:1-946055:1000003&#x27;</span>;<br>START GROUP_REPLICATION;<br><br><span class="hljs-comment"># 添加白名单网段，一定要注意: 先关闭 Group Replication</span><br>stop group_replication;<br><span class="hljs-built_in">set</span> global group_replication_ip_whitelist=<span class="hljs-string">&quot;127.0.0.1/32,172.16.60.0/24,172.16.50.0/24,172.16.51.0/24&quot;</span>;<br>start group_replication;<br>show variables like <span class="hljs-string">&quot;group_replication_ip_whitelist&quot;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git代理配置</title>
    <link href="/2022/07/11/git%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/07/11/git%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="git代理配置"><a href="#git代理配置" class="headerlink" title="git代理配置"></a><a href="https://www.cnblogs.com/z45281625/p/10694664.html">git代理配置</a></h2><h1 id="命令行模式下配置"><a href="#命令行模式下配置" class="headerlink" title="命令行模式下配置"></a>命令行模式下配置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>git config --global https.proxy http://192.168.25.40:8118<br><br>git config --global http.proxy http://192.168.25.40:8118<br></code></pre></td></tr></table></figure><p>示例：</p><p>假设某人在百度工作，公司代理服务器是(proxy.baidu.com)，端口是(8080)，代理配置如下</p><h4 id="1、代理服务器需要鉴权配置"><a href="#1、代理服务器需要鉴权配置" class="headerlink" title="1、代理服务器需要鉴权配置"></a>1、代理服务器需要鉴权配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global https.proxy https://username:password@proxy.baidu.com:8080<br></code></pre></td></tr></table></figure><h4 id="2、代理服务器不需要鉴权配置"><a href="#2、代理服务器不需要鉴权配置" class="headerlink" title="2、代理服务器不需要鉴权配置"></a>2、代理服务器不需要鉴权配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global https.proxy https://proxy.baidu.com:8080<br></code></pre></td></tr></table></figure><h1 id="密码中特殊字符处理"><a href="#密码中特殊字符处理" class="headerlink" title="密码中特殊字符处理"></a>密码中特殊字符处理</h1><p>如果密码中有@等特殊字符，会出错，比如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global http.proxy http://username:abc@123@proxy.baidu.com:8080<br></code></pre></td></tr></table></figure><p>解析时会从第一个@解析，提示@<a href="mailto:&#49;&#50;&#51;&#x40;&#112;&#x72;&#x6f;&#x78;&#121;&#104;&#107;&#x2e;&#x68;&#x75;&#x61;&#119;&#x65;&#x69;&#46;&#99;&#x6f;&#109;">&#49;&#50;&#51;&#x40;&#112;&#x72;&#x6f;&#x78;&#121;&#104;&#107;&#x2e;&#x68;&#x75;&#x61;&#119;&#x65;&#x69;&#46;&#99;&#x6f;&#109;</a>找不到，此时要对其中的特殊符号进行处理，使用百分比编码(Percent-encoding)对特殊字符进行转换，转换列表如下：</p><blockquote><p>! –&gt; %21  # –&gt; %23  $ –&gt; %24  &amp; –&gt; %26  ‘ –&gt; %27</p><p>( –&gt; %28  ) –&gt; %29  * –&gt; %2A  + –&gt; %2B  , –&gt; %2C</p><p>&#x2F; –&gt; %2F  : –&gt; %3A  ; –&gt; %3B  &#x3D; –&gt; %3D  ? –&gt; %3F</p><p>@ –&gt; %40  [ –&gt; %5B  ] –&gt; %5D</p></blockquote><p>参考资料：<a href="http://stackoverflow.com/questions/6172719/escape-character-in-git-proxy-password">http://stackoverflow.com/questions/6172719/escape-character-in-git-proxy-password</a></p><p>如以上示例中的配置，可以替换为：</p><p>git config –global http.proxy <a href="http://username:abc%40123@proxy.baidu.com:8080/">http://username:abc%40123@proxy.baidu.com:8080</a></p><p>配置成功后，主要的功能就打通了，接下来就可以克隆github的代码了。</p><h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h4 id="1、克隆失败，提示：server-certificate-verification-failed-CAfile-x2F-etc-x2F-ssl-x2F-certs-x2F-ca-certificates-crt-CRLfile-none"><a href="#1、克隆失败，提示：server-certificate-verification-failed-CAfile-x2F-etc-x2F-ssl-x2F-certs-x2F-ca-certificates-crt-CRLfile-none" class="headerlink" title="1、克隆失败，提示：server certificate verification failed. CAfile: &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;ca-certificates.crt CRLfile: none"></a>1、克隆失败，提示：server certificate verification failed. CAfile: &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;ca-certificates.crt CRLfile: none</h4><p>解决方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-built_in">export</span> GIT_SSL_NO_VERIFY=1<br><br>git config --global http.sslverify <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h4 id="2、提示：GnuTLS-recv-error-9-A-TLS-packet-with-unexpected-length-was-received"><a href="#2、提示：GnuTLS-recv-error-9-A-TLS-packet-with-unexpected-length-was-received" class="headerlink" title="2、提示：GnuTLS recv error (-9): A TLS packet with unexpected length was received"></a>2、提示：GnuTLS recv error (-9): A TLS packet with unexpected length was received</h4><p>error: RPC failed; result&#x3D;56</p><p>解决方法：</p><p>配置以下三条命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> GIT_TRACE_PACKET=1<br><br><span class="hljs-built_in">export</span> GIT_TRACE=1<br><br><span class="hljs-built_in">export</span> GIT_CURL_VERBOSE=1<br></code></pre></td></tr></table></figure><h4 id="3、以上命令还不生效，则祭出大杀器"><a href="#3、以上命令还不生效，则祭出大杀器" class="headerlink" title="3、以上命令还不生效，则祭出大杀器"></a>3、以上命令还不生效，则祭出大杀器</h4><p>此问题为git中依赖gnutls的bug，需要对将git中的gnutls强制替换为openssl，重新编译即可</p><p>解决方案：<a href="http://askubuntu.com/questions/186847/error-gnutls-handshake-failed-when-connecting-to-https-servers/187199#187199">http://askubuntu.com/questions/186847/error-gnutls-handshake-failed-when-connecting-to-https-servers/187199#187199</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>运维必会的 Linux 压缩管理、进程管理、网络管理命令总结</title>
    <link href="/2022/07/11/%E8%BF%90%E7%BB%B4%E5%BF%85%E4%BC%9A%E7%9A%84-Linux-%E5%8E%8B%E7%BC%A9%E7%AE%A1%E7%90%86%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E3%80%81%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <url>/2022/07/11/%E8%BF%90%E7%BB%B4%E5%BF%85%E4%BC%9A%E7%9A%84-Linux-%E5%8E%8B%E7%BC%A9%E7%AE%A1%E7%90%86%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E3%80%81%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="一、压缩管理"><a href="#一、压缩管理" class="headerlink" title="一、压缩管理"></a>一、压缩管理</h1><h2 id="1-bunzip2"><a href="#1-bunzip2" class="headerlink" title="1 bunzip2"></a>1 bunzip2</h2><h3 id="1-1-功能说明"><a href="#1-1-功能说明" class="headerlink" title="1.1 功能说明"></a>1.1 功能说明</h3><p>.bz2 文件的解压缩程序。</p><h3 id="1-2-语法"><a href="#1-2-语法" class="headerlink" title="1.2 语法"></a>1.2 语法</h3><p>bunzip2 [-fkLsvV][.bz2 压缩文件]</p><h3 id="1-3-补充说明"><a href="#1-3-补充说明" class="headerlink" title="1.3 补充说明"></a>1.3 补充说明</h3><p>bunzip2 可解压缩.bz2 格式的压缩文件。bunzip2 实际上是 bzip2 的符号连接，执行 bunzip2 与 bzip2 -d 的效果相同。</p><h3 id="1-4-参数"><a href="#1-4-参数" class="headerlink" title="1.4 参数"></a>1.4 参数</h3><p>-f 或–force 解压缩时，若输出的文件与现有文件同名时，预设不会覆盖现有的文件。若要覆盖，请使用此参数。</p><p>-k 或–keep 在解压缩后，预设会删除原来的压缩文件。若要保留压缩文件，请使用此参数。</p><p>-s 或–small 降低程序执行时，内存的使用量。</p><p>-v 或–verbose 解压缩文件时，显示详细的信息。</p><p>-l,–license,-V 或–version 显示版本信息。</p><h2 id="2-bzip2"><a href="#2-bzip2" class="headerlink" title="2 bzip2"></a>2 bzip2</h2><h3 id="2-1-功能说明"><a href="#2-1-功能说明" class="headerlink" title="2.1 功能说明"></a>2.1 功能说明</h3><p>.bz2 文件的压缩程序。</p><h3 id="2-2-语法"><a href="#2-2-语法" class="headerlink" title="2.2 语法"></a>2.2 语法</h3><p>bzip2 [-cdfhkLstvVz][–repetitive-best][–repetitive-fast][- 压缩等级][要压缩的文件]</p><h3 id="2-3-补充说明"><a href="#2-3-补充说明" class="headerlink" title="2.3 补充说明"></a>2.3 补充说明</h3><p>bzip2 采用新的压缩演算法，压缩效果比传统的 LZ77&#x2F;LZ78 压缩演算法来得好。若没有加上任何参数，bzip2 压缩完文件后会产生.bz2 的压缩文件，并删除原始的文件。</p><h3 id="2-4-参数"><a href="#2-4-参数" class="headerlink" title="2.4 参数"></a>2.4 参数</h3><p>-c 或–stdout 将压缩与解压缩的结果送到标准输出。</p><p>-d 或–decompress 执行解压缩。</p><p>-f 或–force bzip2 在压缩或解压缩时，若输出文件与现有文件同名，预设不会覆盖现有文件。若要覆盖，请使用此参数。</p><p>-h 或–help 显示帮助。</p><p>-k 或–keep bzip2 在压缩或解压缩后，会删除原始的文件。若要保留原始文件，请使用此参数。</p><p>-s 或–small 降低程序执行时内存的使用量。</p><p>-t 或–test 测试.bz2 压缩文件的完整性。</p><p>-v 或–verbose 压缩或解压缩文件时，显示详细的信息。</p><p>-z 或–compress 强制执行压缩。</p><p>-L,–license,</p><p>-V 或–version 显示版本信息。</p><p>–repetitive-best 若文件中有重复出现的资料时，可利用此参数提高压缩效果。</p><p>–repetitive-fast 若文件中有重复出现的资料时，可利用此参数加快执行速度。</p><p>-压缩等级 压缩时的区块大小。</p><h2 id="3-cpio"><a href="#3-cpio" class="headerlink" title="3 cpio"></a>3 cpio</h2><h3 id="3-1-功能说明"><a href="#3-1-功能说明" class="headerlink" title="3.1 功能说明"></a>3.1 功能说明</h3><p>备份文件。</p><h3 id="3-2-语法"><a href="#3-2-语法" class="headerlink" title="3.2 语法"></a>3.2 语法</h3><p>cpio [-0aABckLovV][-C &lt;输入&#x2F;输出大小&gt;][-F &lt;备份档&gt;][-H &lt;备份格式&gt;][-O &lt;备份档&gt;][–block-size&#x3D;&lt;区块大小&gt;][–force-local][–help][–quiet][–version]</p><p>或 cpio [-bBcdfikmnrsStuvV][-C &lt;输入&#x2F;输出大小&gt;][-E &lt;范本文件&gt;][-F &lt;备份档&gt;][-H &lt;备份格式&gt;][-I &lt;备份档 &gt;][-M &lt; 回传信息 &gt;][-R &lt; 拥有者 &gt;&lt;:&#x2F;.&gt;&lt; 所属群组 &gt;][–block-size&#x3D;&lt; 区块大小 &gt;][–force-local][–help][–no-absolute-filenames][–no-preserve-owner][–only-verify-crc][–quiet][–sparse][–version][范本样式…]</p><p>或 cpio [-0adkiLmpuvV][-R &lt; 拥有者 &gt;&lt;:&#x2F;.&gt;&lt; 所属群组 &gt;][–help][–no-preserve-owner][–quiet][–sparse][–version][目的目]</p><h3 id="3-3-补充说明"><a href="#3-3-补充说明" class="headerlink" title="3.3 补充说明"></a>3.3 补充说明</h3><p>cpio 是用来建立，还原备份档的工具程序，它可以加入，解开 cpio 或 tra 备份档内的文件。</p><h3 id="3-4-参数"><a href="#3-4-参数" class="headerlink" title="3.4 参数"></a>3.4 参数</h3><p>-0 或–null 接受新增列控制字符，通常配合 find 指令的”-print0”参数使用。</p><p>-a 或–reset-access-time 重新设置文件的存取时间。</p><p>-A 或–append 附加到已存在的备份档中，且这个备份档必须存放在磁盘上，而不能放置于磁带机里。</p><p>-b 或–swap 此参数的效果和同时指定”-sS”参数相同。</p><p>-B 将输入&#x2F;输出的区块大小改成 5210 Bytes。</p><p>-c 使用旧 ASCII 备份格式。</p><p>-C&lt;区块大小&gt;或–io-size&#x3D;&lt;区块大小&gt; 设置输入&#x2F;输出的区块大小，单位是 Byte。</p><p>-d 或–make-directories 如有需要 cpio 会自行建立目录。</p><p>-E&lt;范本文件&gt;或–pattern-file&#x3D;&lt;范本文件&gt; 指定范本文件，其内含有一个或多个范本样式，让 cpio 解开符合范本条件的文件，格式为每列一个范本样式。</p><p>-f 或–nonmatching 让 cpio 解开所有不符合范本条件的文件。</p><p>-F&lt;备份档&gt;或–file&#x3D;&lt;备份档&gt; 指定备份档的名称，用来取代标准输入或输出，也能借此通过网络使用另一台主机的保存设备存取备份档。</p><p>-H&lt;备份格式&gt; 指定备份时欲使用的文件格式。</p><p>-i 或–extract 执行 copy-in 模式，还原备份档。</p><p>-l&lt;备份档&gt; 指定备份档的名称，用来取代标准输入，也能借此通过网络使用另一台主机的保存设备读取备份档。</p><p>-k 此参数将忽略不予处理，仅负责解决 cpio 不同版本间的兼容性问题。</p><p>-l 或–link 以硬连接的方式取代复制文件，可在 copy-pass 模式下运用。</p><p>-L 或–dereference 不建立符号连接，直接复制该连接所指向的原始文件。</p><p>-m 或 preserve-modification-time 不去更换文件的更改时间。</p><p>-M&lt;回传信息&gt;或–message&#x3D;&lt;回传信息&gt; 设置更换保存媒体的信息。</p><p>-n 或–numeric-uid-gid 使用”-tv”参数列出备份档的内容时，若再加上参数”-n”，则会以用户识别码和群组识别码替代拥有者和群组名称列出文件清单。</p><p>-o 或–create 执行 copy-out 模式，建立备份档。</p><p>-O&lt;备份档&gt; 指定备份档的名称，用来取代标准输出，也能借此通过网络 使用另一台主机的保存设备存放备份档。</p><p>-p 或–pass-through 执行 copy-pass 模式，略过备份步骤，直接将文件复制到目的目录。</p><p>-r 或–rename 当有文件名称需要更动时，采用互动模式。</p><p>-R&lt;拥有者&gt;&lt;:&#x2F;.&gt;&lt;所属群组&gt;或</p><p>—-owner&lt;拥有者&gt;&lt;:&#x2F;.&gt;&lt;所属群组&gt; 在 copy-in 模式还原备份档，或 copy-pass 模式复制文件时，可指定这些备份，复制的文件的拥有者与所属群组。</p><p>-s 或–swap-bytes 交换每对字节的内容。</p><p>-S 或–swap-halfwords 交换每半个字节的内容。</p><p>-t 或–list 将输入的内容呈现出来。</p><p>-u 或–unconditional 置换所有文件，不论日期时间的新旧与否，皆不予询问而直接覆盖。</p><p>-v 或–verbose 详细显示指令的执行过程。</p><p>-V 或–dot 执行指令时，在每个文件的执行程序前面加上”.“号</p><p>–block-size&#x3D;&lt;区块大小&gt; 设置输入&#x2F;输出的区块大小，假如设置数值为 5，则区块大小为 2500，若设置成 10，则区块大小为 5120，依次类推。</p><p>–force-local 强制将备份档存放在本地主机。</p><p>–help 在线帮助。</p><p>–no-absolute-filenames 使用相对路径建立文件名称。</p><p>–no-preserve-owner 不保留文件的拥有者，谁解开了备份档，那些文件就归谁所有。</p><p>-only-verify-crc 当备份档采用 CRC 备份格式时，可使用这项参数检查备份档内的每个文件是否正确无误。</p><p>–quiet 不显示复制了多少区块。</p><p>–sparse 倘若一个文件内含大量的连续 0 字节，则将此文件存成稀疏文件。</p><p>–version 显示版本信息。</p><h2 id="4-gunzip"><a href="#4-gunzip" class="headerlink" title="4 gunzip"></a>4 gunzip</h2><h3 id="4-1-功能说明"><a href="#4-1-功能说明" class="headerlink" title="4.1 功能说明"></a>4.1 功能说明</h3><p>解压文件。</p><h3 id="4-2-语法"><a href="#4-2-语法" class="headerlink" title="4.2 语法"></a>4.2 语法</h3><p>gunzip [-acfhlLnNqrtvV][-s &lt;压缩字尾字符串&gt;][文件…] 或 gunzip [-acfhlLnNqrtvV][-s &lt;压缩字尾字符串&gt;][目录]</p><h3 id="4-3-补充说明"><a href="#4-3-补充说明" class="headerlink" title="4.3 补充说明"></a>4.3 补充说明</h3><p>gunzip 是个使用广泛的解压缩程序，它用于解开被 gzip 压缩过的文件，这些压缩文件预设最后的扩展名为“.gz”。事实上 gunzip 就是 gzip 的硬连接，因此不论是压缩或解压缩，都可通过 gzip 指令单独完成。</p><h3 id="4-4-参数"><a href="#4-4-参数" class="headerlink" title="4.4 参数"></a>4.4 参数</h3><p>-a 或–ascii 使用 ASCII 文字模式。</p><p>-c 或–stdout 或–to-stdout 把解压后的文件输出到标准输出设备。</p><p>-f 或-force 强行解开压缩文件，不理会文件名称或硬连接是否存在以及该文件是否为符号连接。</p><p>-h 或–help 在线帮助。</p><p>-l 或–list 列出压缩文件的相关信息。</p><p>-L 或–license 显示版本与版权信息。</p><p>-n 或–no-name 解压缩时，若压缩文件内含有远来的文件名称及时间戳记，则将其忽略不予处理。</p><p>-N 或–name 解压缩时，若压缩文件内含有原来的文件名称及时间戳记，则将其回存到解开的文件上。</p><p>-q 或–quiet 不显示警告信息。</p><p>-r 或–recursive 递归处理，将指定目录下的所有文件及子目录一并处理。</p><p>-S&lt;压缩字尾字符串&gt;或–suffix&lt;压缩字尾字符串&gt; 更改压缩字尾字符串。</p><p>-t 或–test 测试压缩文件是否正确无误。</p><p>-v 或–verbose 显示指令执行过程。</p><p>-V 或–version 显示版本信息。</p><h2 id="5-gzip"><a href="#5-gzip" class="headerlink" title="5 gzip"></a>5 gzip</h2><h3 id="5-1-功能说明"><a href="#5-1-功能说明" class="headerlink" title="5.1 功能说明"></a>5.1 功能说明</h3><p>压缩文件。</p><h3 id="5-2-语法"><a href="#5-2-语法" class="headerlink" title="5.2 语法"></a>5.2 语法</h3><p>gzip [-acdfhlLnNqrtvV][-S &lt;压缩字尾字符串&gt;][-&lt;压缩效率&gt;][–best&#x2F;fast][文件…] 或 gzip [-acdfhlLnNqrtvV][-S &lt;压缩字尾字符串&gt;][-&lt;压缩效率&gt;][–best&#x2F;fast][目录]</p><h3 id="5-3-补充说明"><a href="#5-3-补充说明" class="headerlink" title="5.3 补充说明"></a>5.3 补充说明</h3><p>gzip 是个使用广泛的压缩程序，文件经它压缩过后，其名称后面会多出”.gz”的扩展名。</p><h3 id="5-4-参数"><a href="#5-4-参数" class="headerlink" title="5.4 参数"></a>5.4 参数</h3><p>-a 或–ascii 使用 ASCII 文字模式。</p><p>-c 或–stdout 或–to-stdout 把压缩后的文件输出到标准输出设备，不去更动原始文件。</p><p>-d 或–decompress 或—-uncompress 解开压缩文件。</p><p>-f 或–force 强行压缩文件。不理会文件名称或硬连接是否存在以及该文件是否为符号连接。</p><p>-h 或–help 在线帮助。</p><p>-l 或–list 列出压缩文件的相关信息。</p><p>-L 或–license 显示版本与版权信息。</p><p>-n 或–no-name 压缩文件时，不保存原来的文件名称及时间戳记。</p><p>-N 或–name 压缩文件时，保存原来的文件名称及时间戳记。</p><p>-q 或–quiet 不显示警告信息。</p><p>-r 或–recursive 递归处理，将指定目录下的所有文件及子目录一并处理。</p><p>-S&lt;压缩字尾字符串&gt;或—-suffix&lt;压缩字尾字符串&gt; 更改压缩字尾字符串。</p><p>-t 或–test 测试压缩文件是否正确无误。</p><p>-v 或–verbose 显示指令执行过程。</p><p>-V 或–version 显示版本信息。</p><p>-&lt;压缩效率&gt; 压缩效率是一个介于 1－9 的数值，预设值为”6”，指定愈大的数值，压缩效率就会愈高。</p><p>–best 此参数的效果和指定”-9”参数相同。</p><p>–fast 此参数的效果和指定”-1”参数相同。</p><h2 id="6-split"><a href="#6-split" class="headerlink" title="6 split"></a>6 split</h2><h3 id="6-1-功能说明"><a href="#6-1-功能说明" class="headerlink" title="6.1 功能说明"></a>6.1 功能说明</h3><p>切割文件。</p><h3 id="6-2-语法"><a href="#6-2-语法" class="headerlink" title="6.2 语法"></a>6.2 语法</h3><p>split [–help][–version][-&lt;行数&gt;][-b &lt;字节&gt;][-C &lt;字节&gt;][-l &lt;行数&gt;][要切割的文件][输出文件名]</p><h3 id="6-3-补充说明"><a href="#6-3-补充说明" class="headerlink" title="6.3 补充说明"></a>6.3 补充说明</h3><p>split 可将文件切成较小的文件，预设每 1000 行会切成一个小文件。</p><h3 id="6-4-参数"><a href="#6-4-参数" class="headerlink" title="6.4 参数"></a>6.4 参数</h3><p>-&lt;行数&gt;或-l&lt;行数&gt; 指定每多少行就要切成一个小文件。</p><p>-b&lt;字节&gt; 指定每多少字就要切成一个小文件。</p><p>-C&lt;字节&gt; 与-b 参数类似，但切割时尽量维持每行的完整性。</p><p>–help 显示帮助。</p><p>–version 显示版本信息。</p><p>[输出文件名] 设置切割后文件的前置文件名，split 会自动在前置文件名后再加上编号。</p><h2 id="7-tar"><a href="#7-tar" class="headerlink" title="7 tar"></a>7 tar</h2><h3 id="7-1-功能说明"><a href="#7-1-功能说明" class="headerlink" title="7.1 功能说明"></a>7.1 功能说明</h3><p>备份文件。</p><h3 id="7-2-语法"><a href="#7-2-语法" class="headerlink" title="7.2 语法"></a>7.2 语法</h3><p>tar [-ABcdgGhiklmMoOpPrRsStuUvwWxzZ][-b &lt;区块数目&gt;][-C &lt;目的目录&gt;][-f &lt;备份文件&gt;][-F &lt;Script 文件&gt;][-K &lt;文件&gt;][-L &lt;媒体容量&gt;][-N &lt;日期时间&gt;][-T &lt;范本文件&gt;][-V &lt;卷册名称&gt;][-X &lt;范本文件&gt;]</p><p>[-&lt;设备编号&gt;&lt;存储密度&gt;][–after-date&#x3D;&lt;日期时间&gt;] [–atime-preserve]</p><p>[–backuup&#x3D;&lt;备份方式&gt;] [–checkpoint][–concatenate][–confirmation][–delete]</p><p>[–exclude&#x3D;&lt;范本样式&gt;] [–force-local][–group&#x3D;&lt;群组名称&gt;]</p><p>[–help][–ignore-failed-read][–new-volume-script&#x3D;&lt;Script 文件&gt;]</p><p>[–newer-mtime][–no-recursion][–null][–numeric-owner][–owner&#x3D;&lt;用户名称&gt;]</p><p>[–posix][–erve][–preserve-order][–preserve-permissions][–record-size&#x3D;&lt;区块数目&gt;]</p><p>[–recursive-unlink][–remove-files][–rsh-command&#x3D;&lt;执行指令&gt;]</p><p>[–same-owner][–suffix&#x3D;&lt;备份字尾字符串&gt;][–totals][–use-compress-program&#x3D;&lt;执行指令&gt;]</p><p>[–version][–volno-file&#x3D;&lt;编号文件&gt;][文件或目录…]</p><h3 id="7-3-补充说明"><a href="#7-3-补充说明" class="headerlink" title="7.3 补充说明"></a>7.3 补充说明</h3><p>tar 是用来建立，还原备份文件的工具程序，它可以加入，解开备份文件内的文件。</p><h3 id="7-4-参数"><a href="#7-4-参数" class="headerlink" title="7.4 参数"></a>7.4 参数</h3><p>-A 或–catenate 新增温暖件到已存在的备份文件。</p><p>-b&lt;区块数目&gt;或–blocking-factor&#x3D;&lt;区块数目&gt; 设置每笔记录的区块数目，每个区块大小为 12Bytes。</p><p>-B 或–read-full-records 读取数据时重设区块大小。</p><p>-c 或–create 建立新的备份文件。</p><p>-C&lt;目的目录&gt;或–directory&#x3D;&lt;目的目录&gt; 切换到指定的目录。</p><p>-d 或–diff 或–compare 对比备份文件内和文件系统上的文件的差异。</p><p>-f&lt;备份文件&gt;或–file&#x3D;&lt;备份文件&gt; 指定备份文件。</p><p>-F&lt;Script 文件&gt;或–info-script&#x3D;&lt;Script 文件&gt; 每次更换磁带时，就执行指定的 Script 文件。</p><p>-g 或–listed-incremental 处理 GNU 格式的大量备份。</p><p>-G 或–incremental 处理旧的 GNU 格式的大量备份。</p><p>-h 或–dereference 不建立符号连接，直接复制该连接所指向的原始文件。</p><p>-i 或–ignore-zeros 忽略备份文件中的 0 Byte 区块，也就是 EOF。</p><p>-k 或–keep-old-files 解开备份文件时，不覆盖已有的文件。</p><p>-K&lt;文件&gt;或–starting-file&#x3D;&lt;文件&gt; 从指定的文件开始还原。</p><p>-l 或–one-file-system 复制的文件或目录存放的文件系统，必须与 tar 指令执行时所处的文件系统相同，否则不予复制。</p><p>-L&lt;媒体容量&gt;或-tape-length&#x3D;&lt;媒体容量&gt; 设置存放每体的容量，单位以 1024 Bytes 计算。</p><p>-m 或–modification-time 还原文件时，不变更文件的更改时间。</p><p>-M 或–multi-volume 在建立，还原备份文件或列出其中的内容时，采用多卷册模式。</p><p>-N&lt;日期格式&gt;或–newer&#x3D;&lt;日期时间&gt; 只将较指定日期更新的文件保存到备份文件里。</p><p>-o 或–old-archive 或–portability 将资料写入备份文件时使用 V7 格式。</p><p>-O 或–stdout 把从备份文件里还原的文件输出到标准输出设备。</p><p>-p 或–same-permissions 用原来的文件权限还原文件。</p><p>-P 或–absolute-names 文件名使用绝对名称，不移除文件名称前的”&#x2F;“号。</p><p>-r 或–append 新增文件到已存在的备份文件的结尾部分。</p><p>-R 或–block-number 列出每个信息在备份文件中的区块编号。</p><p>-s 或–same-order 还原文件的顺序和备份文件内的存放顺序相同。</p><p>-S 或–sparse 倘若一个文件内含大量的连续 0 字节，则将此文件存成稀疏文件。</p><p>-t 或–list 列出备份文件的内容。</p><p>-T&lt;范本文件&gt;或–files-from&#x3D;&lt;范本文件&gt; 指定范本文件，其内含有一个或多个范本样式，让 tar 解开或建立符合设置条件的文件。</p><p>-u 或–update 仅置换较备份文件内的文件更新的文件。</p><p>-U 或–unlink-first 解开压缩文件还原文件之前，先解除文件的连接。</p><p>-v 或–verbose 显示指令执行过程。</p><p>-V&lt;卷册名称&gt;或–label&#x3D;&lt;卷册名称&gt; 建立使用指定的卷册名称的备份文件。</p><p>-w 或–interactive 遭遇问题时先询问用户。</p><p>-W 或–verify 写入备份文件后，确认文件正确无误。</p><p>-x 或–extract 或–get 从备份文件中还原文件。</p><p>-X&lt;范本文件&gt;或–exclude-from&#x3D;&lt;范本文件&gt; 指定范本文件，其内含有一个或多个范本样式，让 ar 排除符合设置条件的文件。</p><p>-z 或–gzip 或–ungzip 通过 gzip 指令处理备份文件。</p><p>-Z 或–compress 或–uncompress 通过 compress 指令处理备份文件。</p><p>-&lt;设备编号&gt;&lt;存储密度&gt; 设置备份用的外围设备编号及存放数据的密度。</p><p>–after-date&#x3D;&lt;日期时间&gt; 此参数的效果和指定”-N”参数相同。</p><p>–atime-preserve 不变更文件的存取时间。</p><p>–backup&#x3D;&lt;备份方式&gt;或–backup 移除文件前先进行备份。</p><p>–checkpoint 读取备份文件时列出目录名称。</p><p>–concatenate 此参数的效果和指定”-A”参数相同。</p><p>–confirmation 此参数的效果和指定”-w”参数相同。</p><p>–delete 从备份文件中删除指定的文件。</p><p>–exclude&#x3D;&lt;范本样式&gt; 排除符合范本样式的问家。</p><p>–group&#x3D;&lt;群组名称&gt; 把加入设备文件中的文件的所属群组设成指定的群组。</p><p>–help 在线帮助。</p><p>–ignore-failed-read 忽略数据读取错误，不中断程序的执行。</p><p>–new-volume-script&#x3D;&lt;Script 文件&gt; 此参数的效果和指定”-F”参数相同。</p><p>–newer-mtime 只保存更改过的文件。</p><p>–no-recursion 不做递归处理，也就是指定目录下的所有文件及子目录不予处理。</p><p>–null 从 null 设备读取文件名称。</p><p>–numeric-owner 以用户识别码及群组识别码取代用户名称和群组名称。</p><p>–owner&#x3D;&lt;用户名称&gt; 把加入备份文件中的文件的拥有者设成指定的用户。</p><p>–posix 将数据写入备份文件时使用 POSIX 格式。</p><p>–preserve 此参数的效果和指定”-ps”参数相同。</p><p>–preserve-order 此参数的效果和指定”-A”参数相同。</p><p>–preserve-permissions 此参数的效果和指定”-p”参数相同。</p><p>–record-size&#x3D;&lt;区块数目&gt; 此参数的效果和指定”-b”参数相同。</p><p>–recursive-unlink 解开压缩文件还原目录之前，先解除整个目录下所有文件的连接。</p><p>–remove-files 文件加入备份文件后，就将其删除。</p><p>–rsh-command&#x3D;&lt;执行指令&gt; 设置要在远端主机上执行的指令，以取代 rsh 指令。</p><p>–same-owner 尝试以相同的文件拥有者还原问家你。</p><p>–suffix&#x3D;&lt;备份字尾字符串&gt; 移除文件前先行备份。</p><p>–totals 备份文件建立后，列出文件大小。</p><p>–use-compress-program&#x3D;&lt;执行指令&gt; 通过指定的指令处理备份文件。</p><p>–version 显示版本信息。</p><p>–volno-file&#x3D;&lt;编号文件&gt; 使用指定文件内的编号取代预设的卷册编号。</p><h2 id="8-unzip"><a href="#8-unzip" class="headerlink" title="8 unzip"></a>8 unzip</h2><h3 id="8-1-功能说明"><a href="#8-1-功能说明" class="headerlink" title="8.1 功能说明"></a>8.1 功能说明</h3><p>解压缩 zip 文件</p><h3 id="8-2-语法"><a href="#8-2-语法" class="headerlink" title="8.2 语法"></a>8.2 语法</h3><p>unzip [-cflptuvz][-agCjLMnoqsVX][-P &lt;密码&gt;][.zip 文件][文件][-d &lt;目录&gt;][-x &lt;文件&gt;] 或 unzip [-Z]</p><h3 id="8-3-补充说明"><a href="#8-3-补充说明" class="headerlink" title="8.3 补充说明"></a>8.3 补充说明</h3><p>unzip 为.zip 压缩文件的解压缩程序。</p><h3 id="8-4-参数"><a href="#8-4-参数" class="headerlink" title="8.4 参数"></a>8.4 参数</h3><p>-c 将解压缩的结果显示到屏幕上，并对字符做适当的转换。</p><p>-f 更新现有的文件。</p><p>-l 显示压缩文件内所包含的文件。</p><p>-p 与-c 参数类似，会将解压缩的结果显示到屏幕上，但不会执行任何的转换。</p><p>-t 检查压缩文件是否正确。</p><p>-u 与-f 参数类似，但是除了更新现有的文件外，也会将压缩文件中的其他文件解压缩到目录中。</p><p>-v 执行是时显示详细的信息。</p><p>-z 仅显示压缩文件的备注文字。</p><p>-a 对文本文件进行必要的字符转换。</p><p>-b 不要对文本文件进行字符转换。</p><p>-C 压缩文件中的文件名称区分大小写。</p><p>-j 不处理压缩文件中原有的目录路径。</p><p>-L 将压缩文件中的全部文件名改为小写。</p><p>-M 将输出结果送到 more 程序处理。</p><p>-n 解压缩时不要覆盖原有的文件。</p><p>-o 不必先询问用户，unzip 执行后覆盖原有文件。</p><p>-P&lt;密码&gt; 使用 zip 的密码选项。</p><p>-q 执行时不显示任何信息。</p><p>-s 将文件名中的空白字符转换为底线字符。</p><p>-V 保留 VMS 的文件版本信息。</p><p>-X 解压缩时同时回存文件原来的 UID&#x2F;GID。</p><p>[.zip 文件] 指定.zip 压缩文件。</p><p>[文件] 指定要处理.zip 压缩文件中的哪些文件。</p><p>-d&lt;目录&gt; 指定文件解压缩后所要存储的目录。</p><p>-x&lt;文件&gt; 指定不要处理.zip 压缩文件中的哪些文件。</p><p>-Z unzip -Z 等于执行 zipinfo 指令。</p><h2 id="9-zgrep"><a href="#9-zgrep" class="headerlink" title="9 zgrep"></a>9 zgrep</h2><h3 id="9-1-功能说明"><a href="#9-1-功能说明" class="headerlink" title="9.1 功能说明"></a>9.1 功能说明</h3><p>这个命令的功能是在压缩文件中寻找匹配的正则表达式，用法和 grep 命令相同，只不过操作的对象是压缩文件。如果用户想看看在某个压缩文件中有没有某一句话，便可用 zgrep 命令。</p><h3 id="9-2-语法"><a href="#9-2-语法" class="headerlink" title="9.2 语法"></a>9.2 语法</h3><p>zgrep [options] [files]</p><p>[options]同 grep 对应选项。</p><h2 id="10-zip"><a href="#10-zip" class="headerlink" title="10 zip"></a>10 zip</h2><h3 id="10-1-功能说明"><a href="#10-1-功能说明" class="headerlink" title="10.1 功能说明"></a>10.1 功能说明</h3><p>压缩文件。</p><h3 id="10-2-语法"><a href="#10-2-语法" class="headerlink" title="10.2 语法"></a>10.2 语法</h3><p>zip [-options][-b &lt;工作目录&gt;][-ll][-n &lt;字尾字符串&gt;][-t &lt;日期时间&gt;][-&lt;压缩效率&gt;][压缩文件][文件…][-i &lt;范本样式&gt;][-x &lt;范本样式&gt;]</p><h3 id="10-3-补充说明"><a href="#10-3-补充说明" class="headerlink" title="10.3 补充说明"></a>10.3 补充说明</h3><p>zip 是个使用广泛的压缩程序，文件经它压缩后会另外产生具有”.zip”扩展名的压缩文件。</p><h3 id="10-4-参数"><a href="#10-4-参数" class="headerlink" title="10.4 参数"></a>10.4 参数</h3><p>-A 调整可执行的自动解压缩文件。</p><p>-b&lt;工作目录&gt; 指定暂时存放文件的目录。</p><p>-c 替每个被压缩的文件加上注释。</p><p>-d 从压缩文件内删除指定的文件。</p><p>-D 压缩文件内不建立目录名称。</p><p>-f 此参数的效果和指定”-u”参数类似，但不仅更新既有文件，如果某些文件原本不存在于压缩文件内，使用本参数会一并将其加入压缩文件中。</p><p>-F 尝试修复已损坏的压缩文件。</p><p>-g 将文件压缩后附加在既有的压缩文件之后，而非另行建立新的压缩文件。</p><p>-h 在线帮助。</p><p>-i&lt;范本样式&gt; 只压缩符合条件的文件。</p><p>-j 只保存文件名称及其内容，而不存放任何目录名称。</p><p>-J 删除压缩文件前面不必要的数据。</p><p>-k 使用 MS-DOS 兼容格式的文件名称。</p><p>-l 压缩文件时，把 LF 字符置换成 LF+CR 字符。</p><p>-ll 压缩文件时，把 LF+CR 字符置换成 LF 字符。</p><p>-L 显示版权信息。</p><p>-m 将文件压缩并加入压缩文件后，删除原始文件，即把文件移到压缩文件中。</p><p>-n&lt;字尾字符串&gt; 不压缩具有特定字尾字符串的文件。</p><p>-o 以压缩文件内拥有最新更改时间的文件为准，将压缩文件的更改时间设成和该文件相同。</p><p>-q 不显示指令执行过程。</p><p>-r 递归处理，将指定目录下的所有文件和子目录一并处理。</p><p>-S 包含系统和隐藏文件。</p><p>-t&lt;日期时间&gt; 把压缩文件的日期设成指定的日期。</p><p>-T 检查备份文件内的每个文件是否正确无误。</p><p>-u 更换较新的文件到压缩文件内。</p><p>-v 显示指令执行过程或显示版本信息。</p><p>-V 保存 VMS 操作系统的文件属性。</p><p>-w 在文件名称里假如版本编号，本参数仅在 VMS 操作系统下有效。</p><p>-x&lt;范本样式&gt; 压缩时排除符合条件的文件。</p><p>-X 不保存额外的文件属性。</p><p>-y 直接保存符号连接，而非该连接所指向的文件，本参数仅在 UNIX 之类的系统下有效。</p><p>-z 替压缩文件加上注释。</p><p>-$ 保存第一个被压缩文件所在磁盘的卷册名称。</p><p>-&lt;压缩效率&gt; 压缩效率是一个介于 1-9 的数值。</p><h1 id="二、进程管理"><a href="#二、进程管理" class="headerlink" title="二、进程管理"></a>二、进程管理</h1><h2 id="1-crontab"><a href="#1-crontab" class="headerlink" title="1 crontab"></a>1 crontab</h2><h3 id="1-1-功能说明-1"><a href="#1-1-功能说明-1" class="headerlink" title="1.1 功能说明"></a>1.1 功能说明</h3><p>设置计时器。</p><h3 id="1-2-语法-1"><a href="#1-2-语法-1" class="headerlink" title="1.2 语法"></a>1.2 语法</h3><p>crontab [-u &lt;用户名称&gt;][配置文件] 或 crontab [-u &lt;用户名称&gt;][-elr]</p><h3 id="1-3-补充说明-1"><a href="#1-3-补充说明-1" class="headerlink" title="1.3 补充说明"></a>1.3 补充说明</h3><p>cron 是一个常驻服务，它提供计时器的功能，让用户在特定的时间得以执行预设的指令或程序。只要用户会编辑计时器的配置文件，就可以使用计时器的功能。其配置文件格式如下：</p><p>Minute Hour Day Month DayOFWeek Command</p><h3 id="1-4-参数-1"><a href="#1-4-参数-1" class="headerlink" title="1.4 参数"></a>1.4 参数</h3><p>-e 编辑该用户的计时器设置。</p><p>-l 列出该用户的计时器设置。</p><p>-r 删除该用户的计时器设置。</p><p>-u&lt;用户名称&gt; 指定要设定计时器的用户名称。</p><h2 id="2-kill"><a href="#2-kill" class="headerlink" title="2 kill"></a>2 kill</h2><h3 id="2-1-功能说明-1"><a href="#2-1-功能说明-1" class="headerlink" title="2.1 功能说明"></a>2.1 功能说明</h3><p>删除执行中的程序或工作。</p><h3 id="2-2-语法-1"><a href="#2-2-语法-1" class="headerlink" title="2.2 语法"></a>2.2 语法</h3><p>kill [-s &lt;信息名称或编号&gt;][程序] 或 kill [-l &lt;信息编号&gt;]</p><h3 id="2-3-补充说明-1"><a href="#2-3-补充说明-1" class="headerlink" title="2.3 补充说明"></a>2.3 补充说明</h3><p>kill 可将指定的信息送至程序。预设的信息为 SIGTERM(15)，可将指定程序终止。若仍无法终止该程序，可使用 SIGKILL(9)信息尝试强制删除程序。程序或工作的编号可利用 ps 指令或 jobs 指令查看。</p><h3 id="2-4-参数-1"><a href="#2-4-参数-1" class="headerlink" title="2.4 参数"></a>2.4 参数</h3><p>-l &lt;信息编号&gt; 若不加&lt;信息编号&gt;选项，则-l 参数会列出全部的信息名称。</p><p>-s &lt;信息名称或编号&gt; 指定要送出的信息。</p><p>[程序] [程序]可以是程序的 PID 或是 PGID，也可以是工作编号。</p><h2 id="3-nohup"><a href="#3-nohup" class="headerlink" title="3 nohup"></a>3 nohup</h2><h3 id="3-1-功能说明-1"><a href="#3-1-功能说明-1" class="headerlink" title="3.1 功能说明"></a>3.1 功能说明</h3><p>不挂断地运行命令。该命令可以在你退出帐户&#x2F;关闭终端之后继续运行相应的进程。</p><h3 id="3-2-语法-1"><a href="#3-2-语法-1" class="headerlink" title="3.2 语法"></a>3.2 语法</h3><p>nohup Command [ Arg … ] [ &amp; ]</p><p>nohup 命令运行由 Command 参数和任何相关的 Arg 参数指定的命令，忽略所有挂断（SIGHUP）信号。在注销后使用 nohup 命令运行后台中的程序。要运行后台中的 nohup 命令，添加&amp;（ 表示“and”的符号）到命令的尾部。</p><p>无论是否将 nohup 命令的输出复位向到终端，输出都将附加到当前目录的 nohup.out 文件中。如果当前目录的 nohup.out 文件不可写，输出复位向到 $HOME&#x2F;nohup.out 文件中。如果没有文件能创建或打开以用于追加，那么 Command 参数指定的命令不可调用。如果标准错误是一个终端，那么把指定的命令写给标准错误的所有输出作为标准输出复位向到相同的文件描述符。</p><p>退出状态：该命令返回下列出口值：</p><p>126 可以查找但不能调用 Command 参数指定的命令。</p><p>127 nohup 命令发生错误或不能查找由 Command 参数指定的命令。</p><p>否则，nohup 命令的退出状态是 Command 参数指定命令的退出状态。</p><p>如果使用nohup命令提交作业，那么在缺省情况下该作业的所有输出都被复位向到一个名为nohup.out的文件中，除非另外指定了输出文件：</p><p>nohup command &gt; myout.file 2&gt;&amp;1 &amp;在上面的例子中，输出被复位向到myout.file 文件中。</p><h3 id="3-3-例子"><a href="#3-3-例子" class="headerlink" title="3.3 例子"></a>3.3 例子</h3><p>我们有个 test.php 需要在后台运行，并且希望在后台能够定期运行，那么就使用 nohup：</p><p>nohup &#x2F;root&#x2F;test.php &amp;</p><p>(nohup sh make.sh &amp;)</p><h2 id="4-ps"><a href="#4-ps" class="headerlink" title="4 ps"></a>4 ps</h2><h3 id="4-1-功能说明-1"><a href="#4-1-功能说明-1" class="headerlink" title="4.1 功能说明"></a>4.1 功能说明</h3><p>报告程序状况。</p><h3 id="4-2-语法-1"><a href="#4-2-语法-1" class="headerlink" title="4.2 语法"></a>4.2 语法</h3><p>ps [-aAcdefHjlmNVwy][acefghLnrsSTuvxX][-C &lt;指令名称&gt;][-g &lt;群组名称&gt;][-G &lt;群组识别码&gt;][-p &lt;程序识别码&gt;][p &lt;程序识别码&gt;][-s &lt;阶段作业&gt;][-t &lt;终端机编号&gt;][t &lt;终端机编号&gt;][-u &lt;用户识别码&gt;][-U &lt;用户识别码 &gt;][U &lt; 用户名称 &gt;][-&lt; 程序识别码&gt;][–cols &lt; 每列字符数 &gt;][–columns &lt; 每列字符数&gt;][–cumulative][–deselect][–forest][–headers][–help][–info][–lines &lt;显示列数&gt;][–no-headers][–group &lt;群组名称&gt;][-Group &lt;群组识别码&gt;][–pid &lt;程序识别码&gt;][–rows &lt;显示列数&gt;][–sid &lt;阶段作业&gt;][–tty &lt;终端机编号&gt;][–user &lt;用户名称&gt;][–User &lt;用户识别码&gt;][–version][–width &lt;每列字符数&gt;]</p><h3 id="4-3-补充说明-1"><a href="#4-3-补充说明-1" class="headerlink" title="4.3 补充说明"></a>4.3 补充说明</h3><p>ps 是用来报告程序执行状况的指令，您可以搭配 kill 指令随时中断，删除不必要的程序。</p><h3 id="4-4-参数-1"><a href="#4-4-参数-1" class="headerlink" title="4.4 参数"></a>4.4 参数</h3><p>-a 显示所有终端机下执行的程序，除了阶段作业领导者之外。</p><p>a 显示现行终端机下的所有程序，包括其他用户的程序。</p><p>-A 显示所有程序。</p><p>-c 显示 CLS 和 PRI 栏位。</p><p>c 列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或常驻服务的标示。</p><p>-C&lt;指令名称&gt; 指定执行指令的名称，并列出该指令的程序的状况。</p><p>-d 显示所有程序，但不包括阶段作业领导者的程序。</p><p>-e 此参数的效果和指定”A”参数相同。</p><p>e 列出程序时，显示每个程序所使用的环境变量。</p><p>-f 显示 UID,PPIP,C 与 STIME 栏位。</p><p>f 用 ASCII 字符显示树状结构，表达程序间的相互关系。</p><p>-g&lt;群组名称&gt; 此参数的效果和指定”-G”参数相同，当亦能使用阶段作业领导者的名称来指定。</p><p>g 显示现行终端机下的所有程序，包括群组领导者的程序。</p><p>-G&lt;群组识别码&gt; 列出属于该群组的程序的状况，也可使用群组名称来指定。</p><p>h 不显示标题列。</p><p>-H 显示树状结构，表示程序间的相互关系。</p><p>-j 或 j 采用工作控制的格式显示程序状况。</p><p>-l 或 l 采用详细的格式来显示程序状况。</p><p>L 列出栏位的相关信息。</p><p>-m 或 m 显示所有的执行绪。</p><p>n 以数字来表示 USER 和 WCHAN 栏位。</p><p>-N 显示所有的程序，除了执行 ps 指令终端机下的程序之外。</p><p>-p&lt;程序识别码&gt; 指定程序识别码，并列出该程序的状况。</p><p>p&lt;程序识别码&gt; 此参数的效果和指定”-p”参数相同，只在列表格式方面稍有差异。</p><p>r 只列出现行终端机正在执行中的程序。</p><p>-s&lt;阶段作业&gt; 指定阶段作业的程序识别码，并列出隶属该阶段作业的程序的状况。</p><p>s 采用程序信号的格式显示程序状况。</p><p>S 列出程序时，包括已中断的子程序资料。</p><p>-t&lt;终端机编号&gt; 指定终端机编号，并列出属于该终端机的程序的状况。</p><p>t&lt;终端机编号&gt; 此参数的效果和指定”-t”参数相同，只在列表格式方面稍有差异。</p><p>-T 显示现行终端机下的所有程序。</p><p>-u&lt;用户识别码&gt; 此参数的效果和指定”-U”参数相同。</p><p>u 以用户为主的格式来显示程序状况。</p><p>-U&lt;用户识别码&gt; 列出属于该用户的程序的状况，也可使用用户名称来指定。</p><p>U&lt;用户名称&gt; 列出属于该用户的程序的状况。</p><p>v 采用虚拟内存的格式显示程序状况。</p><p>-V 或 V 显示版本信息。</p><p>-w 或 w 采用宽阔的格式来显示程序状况。</p><p>x 显示所有程序，不以终端机来区分。</p><p>X 采用旧式的 Linux i386 登陆格式显示程序状况。</p><p>-y 配合参数”-l”使用时，不显示 F(flag)栏位，并以 RSS 栏位取代 ADDR 栏位 。</p><p>-&lt;程序识别码&gt; 此参数的效果和指定”p”参数相同。</p><p>–cols&lt;每列字符数&gt; 设置每列的最大字符数。</p><p>–columns&lt;每列字符数&gt; 此参数的效果和指定”–cols”参数相同。</p><p>–cumulative 此参数的效果和指定”S”参数相同。</p><p>–deselect 此参数的效果和指定”-N”参数相同。</p><p>–forest 此参数的效果和指定”f”参数相同。</p><p>–headers 重复显示标题列。</p><p>–help 在线帮助。</p><p>–info 显示排错信息。</p><p>–lines&lt;显示列数&gt; 设置显示画面的列数。</p><p>–no-headers 此参数的效果和指定”h”参数相同，只在列表格式方面稍有差异。</p><p>–group&lt;群组名称&gt; 此参数的效果和指定”-G”参数相同。</p><p>–Group&lt;群组识别码&gt; 此参数的效果和指定”-G”参数相同。</p><p>–pid&lt;程序识别码&gt; 此参数的效果和指定”-p”参数相同。</p><p>–rows&lt;显示列数&gt; 此参数的效果和指定”–lines”参数相同。</p><p>–sid&lt;阶段作业&gt; 此参数的效果和指定”-s”参数相同。</p><p>–tty&lt;终端机编号&gt; 此参数的效果和指定”-t”参数相同。</p><p>–user&lt;用户名称&gt; 此参数的效果和指定”-U”参数相同。</p><p>–User&lt;用户识别码&gt; 此参数的效果和指定”-U”参数相同。</p><p>–version 此参数的效果和指定”-V”参数相同。</p><p>–widty&lt;每列字符数&gt; 此参数的效果和指定”-cols”参数相同。</p><h2 id="5-renice"><a href="#5-renice" class="headerlink" title="5 renice"></a>5 renice</h2><h3 id="5-1-功能说明-1"><a href="#5-1-功能说明-1" class="headerlink" title="5.1 功能说明"></a>5.1 功能说明</h3><p>调整优先权。</p><h3 id="5-2-语法-1"><a href="#5-2-语法-1" class="headerlink" title="5.2 语法"></a>5.2 语法</h3><p>renice [优先等级][-g &lt;程序群组名称&gt;…][-p &lt;程序识别码&gt;…][-u &lt;用户名称&gt;…]</p><h3 id="5-3-补充说明-1"><a href="#5-3-补充说明-1" class="headerlink" title="5.3 补充说明"></a>5.3 补充说明</h3><p>renice 指令可重新调整程序执行的优先权等级。预设是以程序识别码指定程序调整其优先权，您亦可以指定程序群组或用户名称调整优先权等级，并修改所有隶属于该程序群组或用户的程序的优先权。等级范围从-20–19，只有系统管理者可以改变其他用户程序的优先权，也仅有系统管理者可以设置负数等级。</p><h3 id="5-4-参数-1"><a href="#5-4-参数-1" class="headerlink" title="5.4 参数"></a>5.4 参数</h3><p>-g &lt;程序群组名称&gt; 使用程序群组名称，修改所有隶属于该程序群组的程序的优先权。</p><p>-p &lt;程序识别码&gt; 改变该程序的优先权等级，此参数为预设值。</p><p>-u &lt;用户名称&gt; 指定用户名称，修改所有隶属于该用户的程序的优先权。</p><h2 id="6-top"><a href="#6-top" class="headerlink" title="6 top"></a>6 top</h2><h3 id="6-1-功能说明-1"><a href="#6-1-功能说明-1" class="headerlink" title="6.1 功能说明"></a>6.1 功能说明</h3><p>显示，管理执行中的程序。</p><h3 id="6-2-语法-1"><a href="#6-2-语法-1" class="headerlink" title="6.2 语法"></a>6.2 语法</h3><p>top [bciqsS][d &lt;间隔秒数&gt;][n &lt;执行次数&gt;]</p><h3 id="6-3-补充说明-1"><a href="#6-3-补充说明-1" class="headerlink" title="6.3 补充说明"></a>6.3 补充说明</h3><p>执行 top 指令可显示目前正在系统中执行的程序，并通过它所提供的互动式界面，用热键加以管理。</p><h3 id="6-4-参数-1"><a href="#6-4-参数-1" class="headerlink" title="6.4 参数"></a>6.4 参数</h3><p>b 使用批处理模式。</p><p>c 列出程序时，显示每个程序的完整指令，包括指令名称，路径和参数等相关信息。</p><p>d&lt;间隔秒数&gt; 设置 top 监控程序执行状况的间隔时间，单位以秒计算。</p><p>i 执行 top 指令时，忽略闲置或是已成为 Zombie 的程序。</p><p>n&lt;执行次数&gt; 设置监控信息的更新次数。</p><p>q 持续监控程序执行的状况。</p><p>s 使用保密模式，消除互动模式下的潜在危机。</p><p>S 使用累计模式，其效果类似 ps 指令的”-S”参数。</p><h2 id="7-who"><a href="#7-who" class="headerlink" title="7 who"></a>7 who</h2><h3 id="7-1-功能说明-1"><a href="#7-1-功能说明-1" class="headerlink" title="7.1 功能说明"></a>7.1 功能说明</h3><p>显示目前登入系统的用户信息。</p><h3 id="7-2-语法-1"><a href="#7-2-语法-1" class="headerlink" title="7.2 语法"></a>7.2 语法</h3><p>who [-Himqsw][–help][–version][am i][记录文件]</p><h3 id="7-3-补充说明-1"><a href="#7-3-补充说明-1" class="headerlink" title="7.3 补充说明"></a>7.3 补充说明</h3><p>执行这项指令可得知目前有那些用户登入系统，单独执行 who 指令会列出登入帐号，使用的终端机，登入时间以及从何处登入或正在使用哪个 X 显示器。</p><h3 id="7-4-参数-1"><a href="#7-4-参数-1" class="headerlink" title="7.4 参数"></a>7.4 参数</h3><p>-H 或–heading 显示各栏位的标题信息列。</p><p>-i 或-u 或–idle 显示闲置时间，若该用户在前一分钟之内有进行任何动作，将标示成”.”号，如果该用户已超过 24 小时没有任何动作，则标示出”old”字符串。</p><p>-m 此参数的效果和指定”am i”字符串相同。</p><p>-q 或–count 只显示登入系统的帐号名称和总人数。</p><p>-s 此参数将忽略不予处理，仅负责解决 who 指令其他版本的兼容性问题。</p><p>-w 或-T 或–mesg 或–message 或–writable 显示用户的信息状态栏。</p><p>–help 在线帮助。</p><p>–version 显示版本信息。</p><h1 id="三、网络管理"><a href="#三、网络管理" class="headerlink" title="三、网络管理"></a>三、网络管理</h1><h2 id="1-Curl"><a href="#1-Curl" class="headerlink" title="1 Curl"></a>1 Curl</h2><p>Curl 是 Linux 下一个很强大的 http 命令行工具，其功能十分强大。</p><h3 id="1-1-读取网页"><a href="#1-1-读取网页" class="headerlink" title="1.1 读取网页"></a>1.1 读取网页</h3><p>$ curl  <a href="http://www.linuxidc.com/">http://www.linuxidc.com</a></p><h3 id="1-2-保存网页"><a href="#1-2-保存网页" class="headerlink" title="1.2 保存网页"></a>1.2 保存网页</h3><p>$ curl  <a href="http://www.linuxidc.com/">http://www.linuxidc.com</a> &gt; page.html</p><p>$ curl -o page.html  <a href="http://www.linuxidc.com/">http://www.linuxidc.com</a></p><h3 id="1-3-使用的-proxy-服务器及其端口：-x"><a href="#1-3-使用的-proxy-服务器及其端口：-x" class="headerlink" title="1.3 使用的 proxy 服务器及其端口：-x"></a>1.3 使用的 proxy 服务器及其端口：-x</h3><p>$ curl -x 123.45.67.89:1080 -o page.html  <a href="http://www.linuxidc.com/">http://www.linuxidc.com</a></p><h3 id="1-4-使用-cookie-来记录-session-信息"><a href="#1-4-使用-cookie-来记录-session-信息" class="headerlink" title="1.4 使用 cookie 来记录 session 信息"></a>1.4 使用 cookie 来记录 session 信息</h3><p>$ curl -x 123.45.67.89:1080 -o page.html -D cookie0001.txt  <a href="http://www.linuxidc.com/">http://www.linuxidc.com</a></p><p>这个 option: -D 是把 http 的 response 里面的 cookie 信息存到一个特别的文件中去，这样，当页面被存到 page.html 的同时，cookie 信息也被存到了 cookie0001.txt 里面了。</p><h3 id="1-5-下一次访问的时候，继续使用上次留下的-cookie-信息"><a href="#1-5-下一次访问的时候，继续使用上次留下的-cookie-信息" class="headerlink" title="1.5 下一次访问的时候，继续使用上次留下的 cookie 信息"></a>1.5 下一次访问的时候，继续使用上次留下的 cookie 信息</h3><p>使用 option 来把上次的 cookie 信息追加到 http request 里面去：-b</p><p>$ curl -x 123.45.67.89:1080 -o page1.html -D cookie0002.txt -b cookie0001.txt  <a href="http://www.linuxidc.com/">http://www.linuxidc.com</a></p><h3 id="1-6-浏览器信息"><a href="#1-6-浏览器信息" class="headerlink" title="1.6 浏览器信息"></a>1.6 浏览器信息</h3><p>$ curl -A “Mozilla&#x2F;4.0 (compatible; MSIE 6.0; Windows NT 5.0)” -x 123.45.67.89:1080 -o page.html -D cookie0001.txt  <a href="http://www.linuxidc.com/">http://www.linuxidc.com</a></p><p>76</p><h3 id="1-7-referer"><a href="#1-7-referer" class="headerlink" title="1.7 referer"></a>1.7 referer</h3><p>$ curl -A “Mozilla&#x2F;4.0 (compatible; MSIE 6.0; Windows NT 5.0)” -x 123.45.67.89:1080 -e “mail.linuxidc.com” -o page.html -D cookie0001.txt  <a href="http://www.linuxidc.com/">http://www.linuxidc.com</a></p><p>这样就可以骗对方的服务器，你是从 mail.linuxidc.com 点击某个链接过来的</p><h3 id="1-8-下载文件"><a href="#1-8-下载文件" class="headerlink" title="1.8 下载文件"></a>1.8 下载文件</h3><p>$ curl -o 1.jpg  <a href="http://cgi2.tky.3web.ne.jp/~zzh/screen1.JPG">http://cgi2.tky.3web.ne.jp/~zzh/screen1.JPG</a></p><p>$ curl -O  <a href="http://cgi2.tky.3web.ne.jp/~zzh/screen1.JPG">http://cgi2.tky.3web.ne.jp/~zzh/screen1.JPG</a></p><p>-O 可以按照服务器上的文件名，自动存在本地</p><p>$ curl -O  <a href="http://cgi2.tky.3web.ne.jp/~zzh/screen[1-10].JPG">http://cgi2.tky.3web.ne.jp/~zzh/screen[1-10].JPG</a></p><h3 id="1-9-批量下载"><a href="#1-9-批量下载" class="headerlink" title="1.9 批量下载"></a>1.9 批量下载</h3><p>$ curl -O  <a href="http://cgi2.tky.3web.ne.jp/~%7Bzzh,nick%7D/[001-201].JPG">http://cgi2.tky.3web.ne.jp/~{zzh,nick}/[001-201].JPG</a></p><p>这样产生的下载，就是</p><p>~zzh&#x2F;001.JPG</p><p>~zzh&#x2F;002.JPG</p><p>…</p><p>~zzh&#x2F;201.JPG</p><p>~nick&#x2F;001.JPG</p><p>~nick&#x2F;002.JPG</p><p>…</p><p>~nick&#x2F;201.JPG</p><h3 id="1-10-自定义文件名的下载"><a href="#1-10-自定义文件名的下载" class="headerlink" title="1.10 自定义文件名的下载"></a>1.10 自定义文件名的下载</h3><p>curl -o #2_#1.jpg  <a href="http://cgi2.tky.3web.ne.jp/~%7Bzzh,nick%7D/[001-201].JPG">http://cgi2.tky.3web.ne.jp/~{zzh,nick}/[001-201].JPG</a></p><p>这样，自定义出来下载下来的文件名，就变成了这样：</p><p>原来：<del>zzh&#x2F;001.JPG —-&gt; 下载后：001-zzh.JPG 原来：</del>nick&#x2F;001.JPG —-&gt; 下载后：001-nick.JPG</p><p>这样一来就不怕文件重名啦</p><h3 id="1-11-断点续传"><a href="#1-11-断点续传" class="headerlink" title="1.11 断点续传"></a>1.11 断点续传</h3><p>$ curl -c -O  <a href="http://cgi2.tky.3wb.ne.jp/~zzh/screen1.JPG">http://cgi2.tky.3wb.ne.jp/~zzh/screen1.JPG</a></p><p>分块下载，我们使用这个 option 就可以了：-r</p><p>举例说明</p><p>比如我们有一个  <a href="http://cgi2.tky.3web.ne.jp/~zzh/zhao1.MP3">http://cgi2.tky.3web.ne.jp/~zzh/zhao1.MP3</a> 要下载，我们就可以用这样的命令：</p><p>$ curl -r 0-10240 -o “zhao.part1” http:&#x2F;cgi2.tky.3web.ne.jp&#x2F;~zzh&#x2F;zhao1.MP3 &amp;</p><p>$ curl -r 10241-20480 -o “zhao.part1” http:&#x2F;cgi2.tky.3web.ne.jp&#x2F;~zzh&#x2F;zhao1.MP3 &amp;</p><p>$ curl -r 20481-40960 -o “zhao.part1” http:&#x2F;cgi2.tky.3web.ne.jp&#x2F;~zzh&#x2F;zhao1.MP3 &amp;</p><p>$ curl -r 40961- -o “zhao.part1” http:&#x2F;cgi2.tky.3web.ne.jp&#x2F;~zzh&#x2F;zhao1.MP3</p><p>这样就可以分块下载啦。不过你需要自己把这些破碎的文件合并起来如果你用 UNIX 或苹果，用 cat zhao.part* &gt; zhao.MP3 就可以如果用的是 Windows，用 copy &#x2F;b 来解决吧，呵呵</p><h3 id="1-12-浏览-FTP"><a href="#1-12-浏览-FTP" class="headerlink" title="1.12 浏览 FTP"></a>1.12 浏览 FTP</h3><p>$ curl -u name:passwd  <a href="ftp://ip:port/path/file">ftp://ip:port/path/file</a></p><p>或者大家熟悉的</p><p>$ curl  <a href="ftp://name:passwd@ip:port/path/file">ftp://name:passwd@ip:port/path/file</a></p><h3 id="1-13-FTP-上传"><a href="#1-13-FTP-上传" class="headerlink" title="1.13 FTP 上传"></a>1.13 FTP 上传</h3><p>上传的 option 是 -T</p><p>比如我们向 ftp 传一个文件：</p><p>$ curl -T localfile -u name:passwd <a href="ftp://upload_site:port/path/">ftp://upload_site:port/path/</a></p><h3 id="1-14-HTTP-上传"><a href="#1-14-HTTP-上传" class="headerlink" title="1.14 HTTP 上传"></a>1.14 HTTP 上传</h3><p>$ curl -T localfile  <a href="http://cgi2.tky.3web.ne.jp/~zzh/abc.cgi">http://cgi2.tky.3web.ne.jp/~zzh/abc.cgi</a></p><p>注意，这时候，使用的协议是 HTTP 的 PUT method</p><h3 id="1-15-POST-模式读取网页"><a href="#1-15-POST-模式读取网页" class="headerlink" title="1.15 POST 模式读取网页"></a>1.15 POST 模式读取网页</h3><p>POST 模式的 option 则是 -d</p><p>比如，</p><p>$ curl -d “user&#x3D;nickwolfe&amp;password&#x3D;12345”  <a href="http://www.linuxidc.com/login.cgi">http://www.linuxidc.com/login.cgi</a></p><h3 id="1-16-POST-模式下的文件上传"><a href="#1-16-POST-模式下的文件上传" class="headerlink" title="1.16 POST 模式下的文件上传"></a>1.16 POST 模式下的文件上传</h3><p>比如</p><form method=“POST” enctype=“multipar/form-data” action=“ http://cgi2.tky.3web.ne.jp/~zzh/up_file.cgi”><input type=file name=upload><input type=submit name=nick value=“go”></form><p>这样一个 HTTP 表单，我们要用 curl 进行模拟，就该是这样的语法：</p><p>$ curl -F upload&#x3D;@localfile -F nick&#x3D;go  <a href="http://cgi2.tky.3web.ne.jp/~zzh/up_file.cgi">http://cgi2.tky.3web.ne.jp/~zzh/up_file.cgi</a></p><h2 id="2-finger"><a href="#2-finger" class="headerlink" title="2 finger"></a>2 finger</h2><h3 id="2-1-功能说明-2"><a href="#2-1-功能说明-2" class="headerlink" title="2.1 功能说明"></a>2.1 功能说明</h3><p>查找并显示用户信息。</p><h3 id="2-2-语法-2"><a href="#2-2-语法-2" class="headerlink" title="2.2 语法"></a>2.2 语法</h3><p>finger [-lmsp][帐号名称…]</p><h3 id="2-3-补充说明-2"><a href="#2-3-补充说明-2" class="headerlink" title="2.3 补充说明"></a>2.3 补充说明</h3><p>finger 指令会去查找，并显示指定帐号的用户相关信息，包括本地与远端主机的用户皆可，帐号名称没有大小写的差别。单独执行 finger 指令，它会显示本地主机现在所有的用户的登陆信息，包括帐号名称，真实姓名，登入终端机，闲置时间，登入时间以及地址和电话。</p><h3 id="2-4-参数-2"><a href="#2-4-参数-2" class="headerlink" title="2.4 参数"></a>2.4 参数</h3><p>-l 列出该用户的帐号名称，真实姓名，用户专属目录，登入所用的 Shell，登入时间，转信地址，电子邮件状态，还有计划文件和方案文件内容。</p><p>-m 排除查找用户的真实姓名。</p><p>-s 列出该用户的帐号名称，真实姓名，登入终端机，闲置时间，登入时间以及地址和电话。</p><p>-p 列出该用户的帐号名称，真实姓名，用户专属目录，登入所用的 Shell，登入时间，转信地址，电子邮件状态，但不显示该用户的计划文件和方案文件内容。</p><h2 id="3-ftp"><a href="#3-ftp" class="headerlink" title="3 ftp"></a>3 ftp</h2><h3 id="3-1-功能说明-2"><a href="#3-1-功能说明-2" class="headerlink" title="3.1 功能说明"></a>3.1 功能说明</h3><p>设置文件系统相关功能。</p><h3 id="3-2-语法-2"><a href="#3-2-语法-2" class="headerlink" title="3.2 语法"></a>3.2 语法</h3><p>ftp [-dignv][主机名称或 IP 地址]</p><h3 id="3-3-补充说明-1"><a href="#3-3-补充说明-1" class="headerlink" title="3.3 补充说明"></a>3.3 补充说明</h3><p>FTP 是 ARPANet 的标准文件传输协议，该网络就是现今 Internet 的前身。</p><h3 id="3-4-参数-1"><a href="#3-4-参数-1" class="headerlink" title="3.4 参数"></a>3.4 参数</h3><p>-d 详细显示指令执行过程，便于排错或分析程序执行的情形。</p><p>-i 关闭互动模式，不询问任何问题。</p><p>-g 关闭本地主机文件名称支持特殊字符的扩充特性。</p><p>-n 不使用自动登陆。</p><p>-v 显示指令执行过程。</p><h2 id="4-ifconfig"><a href="#4-ifconfig" class="headerlink" title="4 ifconfig"></a>4 ifconfig</h2><h3 id="4-1-功能说明-2"><a href="#4-1-功能说明-2" class="headerlink" title="4.1 功能说明"></a>4.1 功能说明</h3><p>显示或设置网络设备。</p><h3 id="4-2-语法-2"><a href="#4-2-语法-2" class="headerlink" title="4.2 语法"></a>4.2 语法</h3><p>ifconfig [网络设备][down up -allmulti -arp -promisc][add&lt;地址&gt;][del&lt;地址&gt;][&lt;hw&lt;网络设备类型&gt;&lt;硬件地址&gt;][io_addr&lt;I&#x2F;O地址&gt;][irq&lt;IRQ地址&gt;][media&lt;网络媒介类型&gt;][mem_start&lt;内存地址&gt;][metric&lt;数目&gt;][mtu&lt;字节&gt;][netmask&lt;子网掩码&gt;][tunnel&lt;地址&gt;][-broadcast&lt;地址&gt;][-pointopoint&lt;地址&gt;][IP 地址]</p><h3 id="4-3-补充说明-2"><a href="#4-3-补充说明-2" class="headerlink" title="4.3 补充说明"></a>4.3 补充说明</h3><p>ifconfig 可设置网络设备的状态，或是显示目前的设置。</p><p>如果提示找不到命令，可用&#x2F;sbin&#x2F;ifconfig。</p><h3 id="4-4-参数-2"><a href="#4-4-参数-2" class="headerlink" title="4.4 参数"></a>4.4 参数</h3><p>add&lt;地址&gt; 设置网络设备 IPv6 的 IP 地址。</p><p>del&lt;地址&gt; 删除网络设备 IPv6 的 IP 地址。</p><p>down 关闭指定的网络设备。</p><p>&lt;hw&lt;网络设备类型&gt;&lt;硬件地址&gt; 设置网络设备的类型与硬件地址。</p><p>io_addr&lt;I&#x2F;O 地址&gt; 设置网络设备的 I&#x2F;O 地址。</p><p>irq&lt;IRQ 地址&gt; 设置网络设备的 IRQ。</p><p>media&lt;网络媒介类型&gt; 设置网络设备的媒介类型。</p><p>mem_start&lt;内存地址&gt; 设置网络设备在主内存所占用的起始地址。</p><p>metric&lt;数目&gt; 指定在计算数据包的转送次数时，所要加上的数目。</p><p>mtu&lt;字节&gt; 设置网络设备的 MTU。</p><p>netmask&lt;子网掩码&gt; 设置网络设备的子网掩码。</p><p>tunnel&lt;地址&gt; 建立 IPv4 与 IPv6 之间的隧道通信地址。</p><p>up 启动指定的网络设备。</p><p>-broadcast&lt;地址&gt; 将要送往指定地址的数据包当成广播数据包来处理。</p><p>-pointopoint&lt;地址&gt; 与指定地址的网络设备建立直接连线，此模式具有保密功能。</p><p>-promisc 关闭或启动指定网络设备的 promiscuous 模式。</p><p>[IP 地址] 指定网络设备的 IP 地址。</p><p>[网络设备] 指定网络设备的名称。</p><h2 id="5-ip"><a href="#5-ip" class="headerlink" title="5 ip"></a>5 ip</h2><h3 id="5-1-功能说明-2"><a href="#5-1-功能说明-2" class="headerlink" title="5.1 功能说明"></a>5.1 功能说明</h3><p>ip 是 iproute2 软件包里面的一个强大的网络配置工具，它能够替代一些传统的网络管理工具。例如：ifconfig、</p><p>route 等。</p><h3 id="5-2-语法-2"><a href="#5-2-语法-2" class="headerlink" title="5.2 语法"></a>5.2 语法</h3><p>ip [选项] [动作] [指令]</p><h3 id="5-3-参数"><a href="#5-3-参数" class="headerlink" title="5.3 参数"></a>5.3 参数</h3><p>动作 :&#x3D; { link | addr | route | rule | neigh | tunnel | maddr | mroute | monitor }</p><p>选项 :&#x3D; { -V[ersion] | -s[tatistics] | -r[esolve] |-f[amily] { inet | inet6 | ipx | dnet | link } | -o[neline] }</p><h3 id="5-4-装置介面-device-的相关设定：ip-link"><a href="#5-4-装置介面-device-的相关设定：ip-link" class="headerlink" title="5.4 装置介面 (device) 的相关设定：ip link"></a>5.4 装置介面 (device) 的相关设定：ip link</h3><p>ip link 可以设定与装置 (device) 有关的相关设定，包括 MTU 以及该网路介面的 MAC 等等， 当然也可以启动 (up) 或关闭 (down) 某个网路介面啦！整个语法是这样的：</p><p>[root@linux ~]# ip [-s] link show &lt;&#x3D;&#x3D; 单纯的查阅该装置相关的资讯</p><p>[root@linux ~]# ip link set [device] [动作与参数]</p><p>参数：</p><p>show：仅显示出这个装置的相关内容，如果加上 -s 会显示更多统计数据；</p><p>set ：可以开始设定项目， device 指的是 eth0, eth1 等等介面代号；</p><p>动作与参数：包括有底下的这些动作：</p><p>up|down ：启动 (up) 或关闭 (down) 某个介面，其他参数使用预设的乙太网路；</p><p>address ：如果这个装置可以更改 MAC 的话，用这个参数修改！</p><p>name ：给予这个装置一个特殊的名字；</p><p>mtu ：就是最大传输单元啊！</p><p>范例一：显示出所有的介面资讯</p><p>[root@linux ~]# ip link show</p><p>1: lo: &lt;LOOPBACK,UP,10000&gt; mtu 16436 qdisc noqueue</p><p>link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</p><p>2: eth0: &lt;BROADCAST,MULTICAST,UP,10000&gt; mtu 1500 qdisc pfifo_fast qlen 1000</p><p>link&#x2F;ether 00:50:fc:22:9a:cb brd ff:ff:ff:ff:ff:ff</p><p>3: sit0: <NOARP> mtu 1480 qdisc noop</p><p>link&#x2F;sit 0.0.0.0 brd 0.0.0.0</p><p>[root@linux ~]# ip -s link show eth0</p><p>2: eth0: &lt;BROADCAST,MULTICAST,UP,10000&gt; mtu 1500 qdisc pfifo_fast qlen 1000</p><p>link&#x2F;ether 00:50:fc:22:9a:cb brd ff:ff:ff:ff:ff:ff</p><p>RX: bytes packets errors dropped overrun mcast</p><p>484011792 2247372 0 0 0 0</p><p>TX: bytes packets errors dropped carrier collsns</p><p>2914104290 2867753 0 0 0 0</p><p>使用 ip link show 可以显示出整个装置介面的硬体相关资讯，如上所示，包括网卡位址(MAC)、MTU 等等，比较有趣的应该是那个 sit0 的介面了，那个 sit0 的介面是用在 IPv4 及 IPv6 的封包转换上的， 对于我们仅使用 IPv4 的网路是没有作用的。lo 及 sit0 都是主机内部所自行设定的。而如果加上 -s 的参数后，则这个网路卡的相关统计资讯就会被列出来， 包括接收 (RX) 及传送 (TX) 的封包数量等等，详细的内容与 ifconfig 所输出的结果相同的。</p><p>范例二：启动、关闭与设定装置的相关资讯</p><p>[root@linux ~]# ip link set eth0 up</p><p>启动 eth0 这个装置介面；</p><p>[root@linux ~]# ip link set eth0 down</p><p>阿就关闭啊！简单的要命～</p><p>[root@linux ~]# ip link set eth0 mtu 1000</p><p>更改 MTU 的值，达到 1000 bytes，单位就是 bytes 啊！</p><p>更新网路卡的 MTU 使用 ifconfig 也可以达成啊！没啥了不起，不过，如果是要更改『网路卡代号、 MAC位址的资讯』的话，那可就得使用 ip 罗～不过，设定前得要先关闭该网路卡，否则会不成功。如下所示：</p><p>范例三：修改网路卡代号、MAC 等参数</p><p>[root@linux ~]# ip link set eth0 name vbird</p><p>SIOCSIFNAME: Device or resource busy</p><p>因为该装置目前是启动的，所以不能这样做设定。你应该要这样做：</p><p>[root@linux ~]# ip link set eth0 down &lt;&#x3D;&#x3D;关闭介面</p><p>[root@linux ~]# ip link set eth0 name vbird &lt;&#x3D;&#x3D;重新设定</p><p>[root@linux ~]# ip link show &lt;&#x3D;&#x3D;观察一下</p><ol start="2"><li>vbird: &lt;BROADCAST,MILTICASE&gt; mtu 900 qdisc pfifo_fast qlen 1000</li></ol><p>link&#x2F;ehter 00:40:d0:13:c3:46 brd ff:ff:ff:ff:ff:ff</p><p>怕了吧！连网路卡代号都可以改变！不过，玩玩後记得改回来啊！</p><p>因为我们的 ifcfg-eth0 还是使用原本的装置代号！避免有问题，要改回来</p><p>[root@linux ~]# ip link set vbird name eth0 &lt;&#x3D;&#x3D;介面改回来</p><p>[root@linux ~]# ip link set eth0 address aa:aa:aa:aa:aa:aa</p><p>[root@linux ~]# ip link show eth0</p><p>如果你的网路卡支援硬体位址 (MAC) 可以更改的话，那么上面这个动作就可以更改你的网路卡位址了！厉害吧！不过，还是那句老话，测试完之后请立刻改回来啊！</p><p>在这个装置的硬体相关资讯设定上面，包括 MTU, MAC 以及传输的模式等等，都可以在这里设定。有趣的是那个 address 的项目，那个项目後面接的可是硬体位址 (MAC) 而不是 IP 喔！很容易搞错啊！切记切记！更多的硬体参数可以使用 man ip 查阅一下与 ip link 有关的设定。</p><h3 id="5-5-关于额外的-IP-相关设定：ip-address"><a href="#5-5-关于额外的-IP-相关设定：ip-address" class="headerlink" title="5.5 关于额外的 IP 相关设定：ip address"></a>5.5 关于额外的 IP 相关设定：ip address</h3><p>如果说 ip link 是与 OSI 七层协定 的第二层资料连阶层有关的话，那么 ip address (ip addr) 就是与第三层网路层有关的参数啦！主要是在设定与 IP 有关的各项参数，包括 netmask, broadcast 等等。</p><p>[root@linux ~]# ip address show &lt;&#x3D;&#x3D;就是查阅 IP 参数啊！</p><p>[root@linux ~]# ip address [add|del] [IP 参数] [dev 装置名] [相关参数]</p><p>参数：</p><p>show ：单纯的显示出介面的 IP 资讯啊；</p><p>add|del ：进行相关参数的增加 (add) 或删除 (del) 设定，主要有：</p><p>IP 参数：主要就是网域的设定，例如 192.168.100.100&#x2F;24 之类的设定喔；</p><p>dev ：这个 IP 参数所要设定的介面，例如 eth0, eth1 等等；</p><p>相关参数：主要有底下这些：</p><p>broadcast：设定广播位址，如果设定值是 + 表示『让系统自动计算』</p><p>label ：亦即是这个装置的别名，例如 eth0:0 就是了！</p><p>scope ：这个介面的领域，通常是这几个大类：</p><p>global ：允许来自所有来源的连线；</p><p>site ：仅支援 IPv6 ，仅允许本主机的连线；</p><p>link ：仅允许本装置自我连线；</p><p>host ：仅允许本主机内部的连线；</p><p>所以当然是使用 global 罗！预设也是 global 啦！</p><p>范例一：显示出所有的介面之 IP 参数：</p><p>[root@linux ~]# ip address show</p><p>1: lo: &lt;LOOPBACK,UP,10000&gt; mtu 16436 qdisc noqueue</p><p>link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</p><p>inet 127.0.0.1&#x2F;8 scope host lo</p><p>inet6 ::1&#x2F;128 scope host</p><p>valid_lft forever preferred_lft forever</p><p>2: eth0: &lt;BROADCAST,MULTICAST,UP,10000&gt; mtu 1500 qdisc pfifo_fast qlen 1000</p><p>link&#x2F;ether 00:50:fc:22:9a:cb brd ff:ff:ff:ff:ff:ff</p><p>inet 192.168.1.2&#x2F;24 brd 192.168.1.255 scope global eth0</p><p>inet6 fe80::250:fcff:fe22:9acb&#x2F;64 scope link</p><p>valid_lft forever preferred_lft forever</p><p>3: sit0: <NOARP> mtu 1480 qdisc noop</p><p>link&#x2F;sit 0.0.0.0 brd 0.0.0.0</p><p>看到上面那个特殊的字体吗？没错！那就是 IP 参数啦！也是 ip address 最主要的功能。底下我们进一步来新增虚拟的网路介面试看看：</p><p>范例二：新增一个介面，名称假设为 eth0:vbird</p><p>[root@linux ~]# ip address add 192.168.50.50&#x2F;24 broadcast + \</p><p>dev eth0 label eth0:vbird</p><p>[root@linux ~]# ip address show eth0</p><p>2: eth0: mtu 1500 qdisc pfifo_fast qlen 1000</p><p>link&#x2F;ether 00:40:d0:13:c3:46 brd ff:ff:ff:ff:ff:ff</p><p>inet 192.168.1.100&#x2F;24 brd 192.168.1.255 scope global eth0</p><p>inet 192.168.50.50&#x2F;24 brd 192.168.50.255 scope global eth0:vbird</p><p>inet6 fe80::240:d0ff:fe13:c346&#x2F;64 scope link</p><p>valid_lft forever preferred_lft forever</p><p>看到上面的特殊字体了吧？多出了一行新的介面，且名称是 eth0:vbird</p><p>至於那个 broadcast + 也可以写成 broadcast 192.168.50.255 啦！</p><p>[root@linux ~]# ifconfig</p><p>eth0:vbir Link encap:Ethernet HWaddr 00:40:D0:13:C3:46</p><p>inet addr:192.168.50.50 Bcast:192.168.50.255 Mask:255.255.255.0</p><p>UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1</p><p>Interrupt:5 Base address:0x3e00</p><p>如果使用 ifconfig 就能够看到这个怪东西了！</p><p>范例三：将刚刚的界面删除</p><p>[root@linux ~]# ip address del 192.168.50.50&#x2F;24 dev eth0</p><h3 id="5-6-关于路由的相关设定：ip-route"><a href="#5-6-关于路由的相关设定：ip-route" class="headerlink" title="5.6 关于路由的相关设定：ip route"></a>5.6 关于路由的相关设定：ip route</h3><p>ip route 的功能几乎与 route 这个指令差不多，但是，他还可以进行额外的参数设计，例如 MTU 的规划等等，相当的强悍啊！</p><p>[root@linux ~]# ip route show &lt;&#x3D;&#x3D;单纯的显示出路由的设定而已</p><p>[root@linux ~]# ip route [add|del] [IP 或网域] [via gateway] [dev 装置]</p><p>参数：</p><p>show ：单纯的显示出路由表，也可以使用 list ；</p><p>add|del ：增加 (add) 或删除 (del) 路由的意思。</p><p>IP 或网域：可使用 192.168.50.0&#x2F;24 之类的网域或者是单纯的 IP ；</p><p>via ：从那个 gateway 出去，不一定需要；</p><p>dev ：由那个装置连出去，这就需要了！</p><p>mtu ：可以额外的设定 MTU 的数值喔！</p><p>范例一：显示出目前的路由资料</p><p>[root@linux ~]# ip route show</p><p>192.168.1.0&#x2F;24 dev eth0 proto kernel scope link src 192.168.1.2</p><p>169.254.0.0&#x2F;16 dev eth1 scope link</p><p>default via 192.168.1.254 dev eth1</p><p>如上表所示，最简单的功能就是显示出目前的路由资讯，其实跟 route 这个指令相同啦！指示必须要注意几个小东西：</p><p>proto：此路由的路由协定，主要有 redirect, kernel, boot, static, ra 等， 其中 kernel 指的是直接由核心判断自动设定。</p><p>scope：路由的范围，主要是 link ，亦即是与本装置有关的直接连线。</p><p>再来看一下如何进行路由的增加与删除吧！</p><p>范例二：增加路由，主要是本机直接可沟通的网域</p><p>[root@linux ~]# ip route add 192.168.5.0&#x2F;24 dev eth0</p><p>针对本机直接沟通的网域设定好路由，不需要透过外部的路由器</p><p>[root@linux ~]# ip route show</p><p>192.168.5.0&#x2F;24 dev eth0 scope link</p><p>…以下省略…</p><p>范例三：增加可以通往外部的路由，需透过 router 喔！</p><p>[root@linux ~]# ip route add 192.168.10.0&#x2F;24 via 192.168.5.100 dev eth0</p><p>[root@linux ~]# ip route show</p><p>192.168.5.0&#x2F;24 dev eth0 scope link</p><p>…其他省略…</p><p>192.168.10.0&#x2F;24 via 192.168.5.100 dev eth0</p><p>仔细看喔，因为我有 192.168.5.0&#x2F;24 的路由存在 (我的网卡直接联系)，</p><p>所以才可以将 192.168.10.0&#x2F;24 的路由丢给 192.168.5.100</p><p>那部主机来帮忙传递喔！与之前提到的 route 指令是一样的限制！</p><p>范例四：增加预设路由</p><p>[root@linux ~]# ip route add default via 192.168.1.2 dev eth0</p><p>那个 192.168.1.2 就是我的预设路由器 (gateway) 的意思啊！_</p><p>真的记得，只要一个预设路由就 OK ！</p><p>范例五：删除路由</p><p>[root@linux ~]# ip route del 192.168.10.0&#x2F;24</p><p>[root@linux ~]# ip route del 192.168.5.0&#x2F;24</p><h2 id="6-netstat"><a href="#6-netstat" class="headerlink" title="6 netstat"></a>6 netstat</h2><h3 id="6-1-功能说明-2"><a href="#6-1-功能说明-2" class="headerlink" title="6.1 功能说明"></a>6.1 功能说明</h3><p>显示网络状态。</p><h3 id="6-2-语法-2"><a href="#6-2-语法-2" class="headerlink" title="6.2 语法"></a>6.2 语法</h3><p>netstat [-acCeFghilMnNoprstuvVwx][-A&lt;网络类型&gt;][–ip]</p><h3 id="6-3-补充说明-2"><a href="#6-3-补充说明-2" class="headerlink" title="6.3 补充说明"></a>6.3 补充说明</h3><p>利用 netstat 指令可让你得知整个 Linux 系统的网络情况。</p><h3 id="6-4-参数-2"><a href="#6-4-参数-2" class="headerlink" title="6.4 参数"></a>6.4 参数</h3><p>-a 或–all 显示所有连线中的 Socket。</p><p>-A&lt;网络类型&gt;或–&lt;网络类型&gt; 列出该网络类型连线中的相关地址。</p><p>-c 或–continuous 持续列出网络状态。</p><p>-C 或–cache 显示路由器配置的快取信息。</p><p>-e 或–extend 显示网络其他相关信息。</p><p>-F 或–fib 显示 FIB。</p><p>-g 或–groups 显示多重广播功能群组组员名单。</p><p>-h 或–help 在线帮助。</p><p>-i 或–interfaces 显示网络界面信息表单。</p><p>-l 或–listening 显示监控中的服务器的 Socket。</p><p>-M 或–masquerade 显示伪装的网络连线。</p><p>-n 或–numeric 直接使用 IP 地址，而不通过域名服务器。</p><p>-N 或–netlink 或–symbolic 显示网络硬件外围设备的符号连接名称。</p><p>-o 或–timers 显示计时器。</p><p>-p 或–programs 显示正在使用 Socket 的程序识别码和程序名称。</p><p>-r 或–route 显示 Routing Table。</p><p>-s 或–statistice 显示网络工作信息统计表。</p><p>-t 或–tcp 显示 TCP 传输协议的连线状况。</p><p>-u 或–udp 显示 UDP 传输协议的连线状况。</p><p>-v 或–verbose 显示指令执行过程。</p><p>-V 或–version 显示版本信息。</p><p>-w 或–raw 显示 RAW 传输协议的连线状况。</p><p>-x 或–unix 此参数的效果和指定”-A unix”参数相同。</p><p>–ip 或–inet 此参数的效果和指定”-A inet”参数相同。</p><h2 id="7-nslookup"><a href="#7-nslookup" class="headerlink" title="7 nslookup"></a>7 nslookup</h2><h3 id="7-1-功能说明-2"><a href="#7-1-功能说明-2" class="headerlink" title="7.1 功能说明"></a>7.1 功能说明</h3><p>nslookup 命令的功能是查询一台机器的 IP 地址和其对应的域名。使用权限所有用户。它通常需要一台域名服务器来提供域名服务。如果用户已经设置好域名服务器，就可以用这个命令查看不同主机的 IP 地址对应的域名。</p><h3 id="7-2-语法-2"><a href="#7-2-语法-2" class="headerlink" title="7.2 语法"></a>7.2 语法</h3><p>nslookup ［IP 地址&#x2F;域名］</p><h3 id="7-3-例子"><a href="#7-3-例子" class="headerlink" title="7.3 例子"></a>7.3 例子</h3><p>（1）在本地计算机上使用 nslookup 命令</p><p>$ nslookup</p><p>Default Server: name.cao.com.cn</p><p>Address: 192.168.1.9</p><p>在符号“&gt;”后面输入要查询的 IP 地址域名，并回车即可。如果要退出该命令，输入“exit”，并回车即可。</p><p>（2）使用 nslookup 命令测试 named</p><p>输入下面命令：</p><p>nslookup</p><p>然后就进入交换式 nslookup 环境。如果 named 正常启动，则 nslookup 会显示当前 DNS 服务器的地址和域名，否则表示 named 没能正常启动。</p><p>下面简单介绍一些基本的 DNS 诊断。</p><p>检查正向 DNS 解析，在 nslookup 提示符下输入带域名的主机名，如 hp712.my.com，nslookup 应能显示该主机名对应的 IP 地址。如果只输入 hp712，nslookup 会根据&#x2F;etc&#x2F;resolv.conf 的定义，自动添加 my.com 域名，并回答对应的 IP 地址。</p><p>检查反向 DNS 解析，在 nslookup 提示符下输入某个 IP 地址，如 192.22.33.20，nslookup 应能回答该 IP 地址所对应的主机名。</p><p>检查 MX 邮件地址记录在 nslookup 提示符下输入：</p><p>set q&#x3D;mx</p><p>然后输入某个域名，输入 my.com 和 mail.my.com，nslookup 应能够回答对应的邮件服务器地址，即</p><p>support.my.com 和 support2.my.com。</p><p>检查 TXT 记录：</p><p>set type&#x3D;txt</p><p>然后输入某个域名，nslookup 会显示对应的记录。</p><h2 id="8-ping"><a href="#8-ping" class="headerlink" title="8 ping"></a>8 ping</h2><h3 id="8-1-功能说明-1"><a href="#8-1-功能说明-1" class="headerlink" title="8.1 功能说明"></a>8.1 功能说明</h3><p>检测主机。</p><h3 id="8-2-语法-1"><a href="#8-2-语法-1" class="headerlink" title="8.2 语法"></a>8.2 语法</h3><p>ping [-dfnqrRv][-c&lt;完成次数&gt;][-i&lt;间隔秒数&gt;][-I&lt;网络界面&gt;][-l&lt;前置载入&gt;][-p&lt;范本样式&gt;][-s&lt;数据包大小&gt;][-t&lt;存活数值&gt;][主机名称或 IP 地址]</p><h3 id="8-3-补充说明-1"><a href="#8-3-补充说明-1" class="headerlink" title="8.3 补充说明"></a>8.3 补充说明</h3><p>执行 ping 指令会使用 ICMP 传输协议，发出要求回应的信息，若远端主机的网络功能没有问题，就会回应该信息，因而得知该主机运作正常。</p><h3 id="8-4-参数-1"><a href="#8-4-参数-1" class="headerlink" title="8.4 参数"></a>8.4 参数</h3><p>-d 使用 Socket 的 SO_DEBUG 功能。</p><p>-c&lt;完成次数&gt; 设置完成要求回应的次数。</p><p>-f 极限检测。</p><p>-i&lt;间隔秒数&gt; 指定收发信息的间隔时间。</p><p>-I&lt;网络界面&gt; 使用指定的网络界面送出数据包。</p><p>-l&lt;前置载入&gt; 设置在送出要求信息之前，先行发出的数据包。</p><p>-n 只输出数值。</p><p>-p&lt;范本样式&gt; 设置填满数据包的范本样式。</p><p>-q 不显示指令执行过程，开头和结尾的相关信息除外。</p><p>-r 忽略普通的 Routing Table，直接将数据包送到远端主机上。</p><p>-R 记录路由过程。</p><p>-s&lt;数据包大小&gt; 设置数据包的大小。</p><p>-t&lt;存活数值&gt; 设置存活数值 TTL 的大小。</p><p>-v 详细显示指令的执行过程。</p><h2 id="9-rcp"><a href="#9-rcp" class="headerlink" title="9 rcp"></a>9 rcp</h2><h3 id="9-1-功能说明-1"><a href="#9-1-功能说明-1" class="headerlink" title="9.1 功能说明"></a>9.1 功能说明</h3><p>远端复制文件或目录。</p><h3 id="9-2-语法-1"><a href="#9-2-语法-1" class="headerlink" title="9.2 语法"></a>9.2 语法</h3><p>rcp [-pr][源文件或目录][目标文件或目录] 或 rcp [-pr][源文件或目录…][目标文件]</p><h3 id="9-3-补充说明"><a href="#9-3-补充说明" class="headerlink" title="9.3 补充说明"></a>9.3 补充说明</h3><p>rcp 指令用在远端复制文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则它灰把前面指定的所有文件或目录复制到该目录中。</p><h3 id="9-4-参数"><a href="#9-4-参数" class="headerlink" title="9.4 参数"></a>9.4 参数</h3><p>-p 保留源文件或目录的属性，包括拥有者，所属群组，权限与时间。</p><p>-r 递归处理，将指定目录下的文件与子目录一并处理。</p><h2 id="10-route"><a href="#10-route" class="headerlink" title="10 route"></a>10 route</h2><h3 id="10-1-功能说明-1"><a href="#10-1-功能说明-1" class="headerlink" title="10.1 功能说明"></a>10.1 功能说明</h3><p>route 表示手工产生、修改和查看路由表。</p><h3 id="10-2-语法-1"><a href="#10-2-语法-1" class="headerlink" title="10.2 语法"></a>10.2 语法</h3><p>route [-add][-net|-host] targetaddress [-netmask Nm][dev]If]</p><p>route [－delete][-net|-host] targetaddress [gw Gw] [-netmask Nm] [dev]If]</p><h3 id="10-3-参数"><a href="#10-3-参数" class="headerlink" title="10.3 参数"></a>10.3 参数</h3><p>-add：增加路由。</p><p>-delete：删除路由。</p><p>-net：路由到达的是一个网络，而不是一台主机。</p><p>-host：路由到达的是一台主机。</p><p>-netmask Nm：指定路由的子网掩码。</p><p>gw：指定路由的网关。</p><p>[dev]If：强迫路由链指定接口。</p><h3 id="10-4-例子"><a href="#10-4-例子" class="headerlink" title="10.4 例子"></a>10.4 例子</h3><p>route add -net 202.96.96.0 -netmask 255.255.255.0 gw 192.168.1.10 dev eth0</p><p>表示到 202.96.96.0&#x2F;255.255.255.0 这个网络的信息通过你的第一块网卡发送 , 默认网关的地址是192.168.1.10</p><h2 id="11-tcpdump"><a href="#11-tcpdump" class="headerlink" title="11 tcpdump"></a>11 tcpdump</h2><h3 id="11-1-功能说明"><a href="#11-1-功能说明" class="headerlink" title="11.1 功能说明"></a>11.1 功能说明</h3><p>倾倒网络传输数据。</p><h3 id="11-2-语法"><a href="#11-2-语法" class="headerlink" title="11.2 语法"></a>11.2 语法</h3><p>tcpdump [-adeflnNOpqStvx][-c&lt;数据包数目&gt;][-dd][-ddd][-F&lt;表达文件&gt;][-i&lt;网络界面&gt;][-r&lt;数据包文件&gt;][-s&lt;数据包大小&gt;][-tt][-T&lt;数据包类型&gt;][-vv][-w&lt;数据包文件&gt;][输出数据栏位]</p><h3 id="11-3-补充说明"><a href="#11-3-补充说明" class="headerlink" title="11.3 补充说明"></a>11.3 补充说明</h3><p>执行 tcpdump 指令可列出经过指定网络界面的数据包文件头，在 Linux 操作系统中，你必须是系统管理员。</p><h3 id="11-4-参数"><a href="#11-4-参数" class="headerlink" title="11.4 参数"></a>11.4 参数</h3><p>-a 尝试将网络和广播地址转换成名称。</p><p>-c&lt;数据包数目&gt; 收到指定的数据包数目后，就停止进行倾倒操作。</p><p>-d 把编译过的数据包编码转换成可阅读的格式，并倾倒到标准输出。</p><p>-dd 把编译过的数据包编码转换成 C 语言的格式，并倾倒到标准输出。</p><p>-ddd 把编译过的数据包编码转换成十进制数字的格式，并倾倒到标准输出。</p><p>-e 在每列倾倒资料上显示连接层级的文件头。</p><p>-f 用数字显示网际网络地址。</p><p>-F&lt;表达文件&gt; 指定内含表达方式的文件。</p><p>-i&lt;网络界面&gt; 使用指定的网络截面送出数据包。</p><p>-l 使用标准输出列的缓冲区。</p><p>-n 不把主机的网络地址转换成名字。</p><p>-N 不列出域名。</p><p>-O 不将数据包编码最佳化。</p><p>-p 不让网络界面进入混杂模式。</p><p>-q 快速输出，仅列出少数的传输协议信息。</p><p>-r&lt;数据包文件&gt; 从指定的文件读取数据包数据。</p><p>-s&lt;数据包大小&gt; 设置每个数据包的大小。</p><p>-S 用绝对而非相对数值列出 TCP 关联数。</p><p>-t 在每列倾倒资料上不显示时间戳记。</p><p>-tt 在每列倾倒资料上显示未经格式化的时间戳记。</p><p>-T&lt;数据包类型&gt; 强制将表达方式所指定的数据包转译成设置的数据包类型。</p><p>-v 详细显示指令执行过程。</p><p>-vv 更详细显示指令执行过程。</p><p>-x 用十六进制字码列出数据包资料。</p><p>-w&lt;数据包文件&gt; 把数据包数据写入指定的文件。</p><h2 id="12-telnet"><a href="#12-telnet" class="headerlink" title="12 telnet"></a>12 telnet</h2><h3 id="12-1-功能说明"><a href="#12-1-功能说明" class="headerlink" title="12.1 功能说明"></a>12.1 功能说明</h3><p>远端登入。</p><h3 id="12-2-语法"><a href="#12-2-语法" class="headerlink" title="12.2 语法"></a>12.2 语法</h3><p>telnet [-8acdEfFKLrx][-b&lt;主机别名&gt;][-e&lt;脱离字符&gt;][-k&lt;域名&gt;][-l&lt;用户名称&gt;][-n&lt;记录文件&gt;][-S&lt;服务类型&gt;][-X&lt;认证形态&gt;][主机名称或 IP 地址&lt;通信端口&gt;]</p><h3 id="12-3-补充说明"><a href="#12-3-补充说明" class="headerlink" title="12.3 补充说明"></a>12.3 补充说明</h3><p>执行 telnet 指令开启终端机阶段作业，并登入远端主机。</p><h3 id="12-4-参数"><a href="#12-4-参数" class="headerlink" title="12.4 参数"></a>12.4 参数</h3><p>-8 允许使用 8 位字符资料，包括输入与输出。</p><p>-a 尝试自动登入远端系统。</p><p>-b&lt;主机别名&gt; 使用别名指定远端主机名称。</p><p>-c 不读取用户专属目录里的.telnetrc 文件。</p><p>-d 启动排错模式。</p><p>-e&lt;脱离字符&gt; 设置脱离字符。</p><p>-E 滤除脱离字符。</p><p>-f 此参数的效果和指定”-F”参数相同。</p><p>-F 使用 Kerberos V5 认证时，加上此参数可把本地主机的认证数据上传到远端主机。</p><p>-k&lt;域名&gt; 使用 Kerberos 认证时，加上此参数让远端主机采用指定的领域名，而非该主机的域名。</p><p>-K 不自动登入远端主机。</p><p>-l&lt;用户名称&gt; 指定要登入远端主机的用户名称。</p><p>-L 允许输出 8 位字符资料。</p><p>-n&lt;记录文件&gt; 指定文件记录相关信息。</p><p>-r 使用类似 rlogin 指令的用户界面。</p><p>-S&lt;服务类型&gt; 设置 telnet 连线所需的 IP TOS 信息。</p><p>-x 假设主机有支持数据加密的功能，就使用它。</p><p>-X&lt;认证形态&gt; 关闭指定的认证形态。</p><h2 id="13-traceroute"><a href="#13-traceroute" class="headerlink" title="13 traceroute"></a>13 traceroute</h2><h3 id="13-1-功能说明"><a href="#13-1-功能说明" class="headerlink" title="13.1 功能说明"></a>13.1 功能说明</h3><p>显示数据包到主机间的路径。</p><h3 id="13-2-语法"><a href="#13-2-语法" class="headerlink" title="13.2 语法"></a>13.2 语法</h3><p>traceroute [-dFlnrvx][-f&lt;存活数值&gt;][-g&lt;网关&gt;…][-i&lt;网络界面&gt;][-m&lt;存活数 值&gt;][-p&lt;通信端口&gt;][-s&lt;来源地址&gt;][-t&lt;服务类型&gt;][-w&lt;超时秒数&gt;][主 机名称或 IP 地址][数据包大小]</p><h3 id="13-3-补充说明"><a href="#13-3-补充说明" class="headerlink" title="13.3 补充说明"></a>13.3 补充说明</h3><p>traceroute 指令让你追踪网络数据包的路由途径，预设数据包大小是 40Bytes，用户可另行设置。</p><h3 id="13-4-参数"><a href="#13-4-参数" class="headerlink" title="13.4 参数"></a>13.4 参数</h3><p>-d 使用 Socket 层级的排错功能。</p><p>-f&lt;存活数值&gt; 设置第一个检测数据包的存活数值 TTL 的大小。</p><p>-F 设置勿离断位。</p><p>-g&lt;网关&gt; 设置来源路由网关，最多可设置 8 个。</p><p>-i&lt;网络界面&gt; 使用指定的网络界面送出数据包。</p><p>-I 使用 ICMP 回应取代 UDP 资料信息。</p><p>-m&lt;存活数值&gt; 设置检测数据包的最大存活数值 TTL 的大小。</p><p>-n 直接使用 IP 地址而非主机名称。</p><p>-p&lt;通信端口&gt; 设置 UDP 传输协议的通信端口。</p><p>-r 忽略普通的 Routing Table，直接将数据包送到远端主机上。</p><p>-s&lt;来源地址&gt; 设置本地主机送出数据包的 IP 地址。</p><p>-t&lt;服务类型&gt; 设置检测数据包的 TOS 数值。</p><p>-v 详细显示指令的执行过程。</p><p>-w&lt;超时秒数&gt; 设置等待远端主机回报的时间。</p><p>-x 开启或关闭数据包的正确性检验。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>8511外协部署部署信息</title>
    <link href="/2022/07/11/8511%E5%A4%96%E5%8D%8F%E9%83%A8%E7%BD%B2%E9%83%A8%E7%BD%B2%E4%BF%A1%E6%81%AF/"/>
    <url>/2022/07/11/8511%E5%A4%96%E5%8D%8F%E9%83%A8%E7%BD%B2%E9%83%A8%E7%BD%B2%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="出差计划"><a href="#出差计划" class="headerlink" title="出差计划"></a>出差计划</h2><h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><pre><code class="hljs">20220707-0709</code></pre><h3 id="行程"><a href="#行程" class="headerlink" title="行程"></a>行程</h3><pre><code class="hljs">成都至北京北京至成都</code></pre><h2 id="工作计划"><a href="#工作计划" class="headerlink" title="工作计划"></a>工作计划</h2><pre><code class="hljs">1、ecos试用环境部署  2、授权3个月试用期限3、简单操作培训</code></pre><h2 id="工作内容"><a href="#工作内容" class="headerlink" title="工作内容"></a>工作内容</h2><pre><code class="hljs">1、协调用户服务器资源2、服务器配置检查3、用户服务器数据备份4、操作系统部署5、ecos部署6、license授权7、操作培训8、资料整理</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>ecos-pro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>批量修改系统时间</title>
    <link href="/2022/07/10/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4/"/>
    <url>/2022/07/10/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="批量修改系统时间"><a href="#批量修改系统时间" class="headerlink" title="批量修改系统时间"></a>批量修改系统时间</h1><h2 id="获取当前系统时间"><a href="#获取当前系统时间" class="headerlink" title="获取当前系统时间"></a>获取当前系统时间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">now_time=$(<span class="hljs-built_in">date</span> +%F<span class="hljs-string">&quot; &quot;</span>%H<span class="hljs-string">&quot;:&quot;</span>%M<span class="hljs-string">&quot;:&quot;</span>%S)<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$now_time</span> <br>2022-07-11 00:12:54<br></code></pre></td></tr></table></figure><h2 id="修改节点当前系统时间"><a href="#修改节点当前系统时间" class="headerlink" title="修改节点当前系统时间"></a>修改节点当前系统时间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible all -m shell -a <span class="hljs-string">&quot;date -s <span class="hljs-variable">$now_time</span>&quot;</span><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云Go Module代理仓库服务</title>
    <link href="/2022/07/08/%E9%98%BF%E9%87%8C%E4%BA%91Go%20Module%E4%BB%A3%E7%90%86%E4%BB%93%E5%BA%93%E6%9C%8D%E5%8A%A1/"/>
    <url>/2022/07/08/%E9%98%BF%E9%87%8C%E4%BA%91Go%20Module%E4%BB%A3%E7%90%86%E4%BB%93%E5%BA%93%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<hr><hr><h2 id="title-阿里云Go-Module代理仓库服务"><a href="#title-阿里云Go-Module代理仓库服务" class="headerlink" title="title: 阿里云Go Module代理仓库服务"></a>title: 阿里云Go Module代理仓库服务</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>go module公共代理仓库，代理并缓存go模块。你可以利用该代理来避免DNS污染导致的模块拉取缓慢或失败的问题，加速你的构建</p><h4 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h4><p><a href="https://mirrors.aliyun.com/goproxy/">https://mirrors.aliyun.com/goproxy/</a></p><h4 id="使用帮助"><a href="#使用帮助" class="headerlink" title="使用帮助"></a>使用帮助</h4><p>1.使用go1.11以上版本并开启go module机制</p><p>2.导出GOPROXY环境变量</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">export GOPROXY=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/goproxy/</span><br></code></pre></td></tr></table></figure><p>gopkgs</p><p> go-outline</p><p> gotests</p><p> gomodifytags</p><p> impl</p><p> goplay</p><p> dlv</p><p> dlv-dap</p><p> staticcheck</p><p> gopls</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>go install -v github.com<span class="hljs-regexp">/ramya-rao-a/g</span>o-outline@latest;<br>go install -v github.com<span class="hljs-regexp">/ramya-rao-a/g</span>o-outline@latest;<br>go install -v github.com<span class="hljs-regexp">/cweill/g</span>otests/gotests@latest;<br>go install -v github.com<span class="hljs-regexp">/cweill/g</span>otests/gotests@latest;<br>go install -v github.com<span class="hljs-regexp">/fatih/g</span>omodifytags@latest;<br>go install -v github.com<span class="hljs-regexp">/fatih/g</span>omodifytags@latest;<br>go install -v github.com<span class="hljs-regexp">/josharian/im</span>pl@latest;<br>go install -v github.com<span class="hljs-regexp">/josharian/im</span>pl@latest;<br>go install -v github.com<span class="hljs-regexp">/haya14busa/g</span>oplay<span class="hljs-regexp">/cmd/g</span>oplay@latest;<br>go install -v github.com<span class="hljs-regexp">/haya14busa/g</span>oplay<span class="hljs-regexp">/cmd/g</span>oplay@latest;<br>go install -v github.com<span class="hljs-regexp">/go-delve/</span>delve<span class="hljs-regexp">/cmd/</span>dlv@latest;<br>go install -v github.com<span class="hljs-regexp">/go-delve/</span>delve<span class="hljs-regexp">/cmd/</span>dlv@latest;<br>go get -x -d github.com<span class="hljs-regexp">/go-delve/</span>delve<span class="hljs-regexp">/cmd/</span>dlv@master;<br>go get -x -d github.com<span class="hljs-regexp">/go-delve/</span>delve<span class="hljs-regexp">/cmd/</span>dlv@master;<br>go install -v honnef.co<span class="hljs-regexp">/go/</span>tools<span class="hljs-regexp">/cmd/</span>staticcheck@latest;<br>go install -v honnef.co<span class="hljs-regexp">/go/</span>tools<span class="hljs-regexp">/cmd/</span>staticcheck@latest;<br>go install -v golang.org<span class="hljs-regexp">/x/</span>tools<span class="hljs-regexp">/cmd/g</span>oimports@latest  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>kompose使用教程</title>
    <link href="/2022/07/08/kompose%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2022/07/08/kompose%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="kompose使用教程"><a href="#kompose使用教程" class="headerlink" title="kompose使用教程"></a>kompose使用教程</h1><p><code>kompose</code>是一个可以帮助用户把<code>docker-compose</code>的转移到<code>Kubernetes</code>上的工具。把<code>Docker Compose</code>文件并将其转换为<code>Kubernetes</code>资源。</p><p>kompose是个非常便利工具，可以从本地Docker开发到使用<code>Kubernetes</code>管理您的应用程序。将<code>Docker Compose</code>格式转换为Kubernetes资源可能并不准确，但在首次在Kubernetes上部署应用程序时，它会有很大帮助。</p><h2 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h2><p>使用一个简单的命令将<code>docker-compose.yaml</code>转换为<code>Kubernetes</code>部署和服务：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kompose convert -f docker-compose.yaml<br><span class="hljs-built_in">INFO</span> Kubernetes file <span class="hljs-string">&quot;frontend-service.yaml&quot;</span> created         <br><span class="hljs-built_in">INFO</span> Kubernetes file <span class="hljs-string">&quot;redis-master-service.yaml&quot;</span> created     <br><span class="hljs-built_in">INFO</span> Kubernetes file <span class="hljs-string">&quot;redis-slave-service.yaml&quot;</span> created      <br><span class="hljs-built_in">INFO</span> Kubernetes file <span class="hljs-string">&quot;frontend-deployment.yaml&quot;</span> created      <br><span class="hljs-built_in">INFO</span> Kubernetes file <span class="hljs-string">&quot;redis-master-deployment.yaml&quot;</span> created  <br><span class="hljs-built_in">INFO</span> Kubernetes file <span class="hljs-string">&quot;redis-slave-deployment.yaml&quot;</span> created <br></code></pre></td></tr></table></figure><p>Copy</p><p>如果不想转换，也可以直接运行</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">kompose up</span><br></code></pre></td></tr></table></figure><p>Copy</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>有多种方式来安装Kompose，我们推荐从GitHub下载最新二进制的方式安装。</p><p>安装方式:</p><ul><li>Binary (推荐)</li><li>Go</li><li>CentOS</li><li>Fedora</li><li>openSUSE&#x2F;SLE</li><li>macOS (Homebrew)</li><li>Windows</li><li>Binary installation</li></ul><h2 id="Linux-and-macOS"><a href="#Linux-and-macOS" class="headerlink" title="Linux and macOS:"></a>Linux and macOS:</h2><p>可以去这里找最新版本：<a href="https://www.orchome.com/fwd?link=https://github.com/docker/compose/releases">https://github.com/docker/compose/releases</a></p><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -L https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/kubernetes/</span>kompose<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v1.17.0/</span>kompose-linux-amd64 -o kompose<br><br><span class="hljs-comment"># macOS</span><br>curl -L https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/kubernetes/</span>kompose<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v1.17.0/</span>kompose-darwin-amd64 -o kompose<br><br>chmod +x kompose<br>sudo mv .<span class="hljs-regexp">/kompose /u</span>sr<span class="hljs-regexp">/local/</span>bin/kompose<br></code></pre></td></tr></table></figure><p>Copy</p><p>Windows:</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">下载二进制文件到你的<span class="hljs-built_in">PATH</span>中。<br></code></pre></td></tr></table></figure><p>Copy</p><h2 id="Shell-autocompletion"><a href="#Shell-autocompletion" class="headerlink" title="Shell autocompletion"></a>Shell autocompletion</h2><p>我们支持Bash和Zsh自动完成功能。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim"># Bash (<span class="hljs-built_in">add</span> <span class="hljs-keyword">to</span> .bashrc <span class="hljs-keyword">for</span> persistence)<br><span class="hljs-keyword">source</span> &lt;(kompose completion bash)<br><br># Zsh (<span class="hljs-built_in">add</span> <span class="hljs-keyword">to</span> .zshrc <span class="hljs-keyword">for</span> persistence)<br><span class="hljs-keyword">source</span> &lt;(kompose completion zsh)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>newben存储池创建</title>
    <link href="/2022/07/08/newben%E5%AD%98%E5%82%A8%E6%B1%A0%E5%88%9B%E5%BB%BA/"/>
    <url>/2022/07/08/newben%E5%AD%98%E5%82%A8%E6%B1%A0%E5%88%9B%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="newben存储池创建"><a href="#newben存储池创建" class="headerlink" title="newben存储池创建"></a>newben存储池创建</h1><p>创建cephfs系统存储卷</p><p>获取ceph用户secret</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"> cephadm shell<br><br>root@ceph-1:/<span class="hljs-comment"># ceph auth ls|grep admin -A3</span><br>installed auth entries:<br><br>client.admin<br>key: AQAe4PhgVjKXJBAAPUA8iUxmuMPKxrs1OVfEHw==<br>caps: [mds] allow *<br>caps: [mgr] allow *<br>root@ceph-1:/<span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>newben</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ISO转换QCOW2格式</title>
    <link href="/2022/07/07/ISO%E8%BD%AC%E6%8D%A2QCOW2%E6%A0%BC%E5%BC%8F/"/>
    <url>/2022/07/07/ISO%E8%BD%AC%E6%8D%A2QCOW2%E6%A0%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="ISO转换QCOW2格式"><a href="#ISO转换QCOW2格式" class="headerlink" title="ISO转换QCOW2格式"></a>ISO转换QCOW2格式</h1><p>首选创建虚拟磁盘</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-img create -f qcow2 ovirt-node-sys.qcow2 100G<br>qemu-img create -f qcow2 ovirt-node-data.qcow2 100G<br></code></pre></td></tr></table></figure><p>其次从iso启动镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">virt-install  --name ovirt-node-ng-installer-4.3.2 --ram 8192  --cdrom=ovirt-node-ng-installer-4.3.2-2019031908.el7.iso --disk ovirt-node-sys.qcow2,format=qcow2 --disk ovirt-node-data.qcow2,format=qcow2 --graphics vnc,listen=0.0.0.0 --noautoconsole --os-type=linux --os-variant=centos7.0 --check all=off<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">virt-install  --name Windows2008_x64 --ram 2048 --cdrom=win2008_x64fre_server_eval_zh-cn-GRMSXEVAL_CN_DVD.iso --disk Windows2008_x64.qcow2,format=qcow2 --graphics vnc,listen=0.0.0.0 --noautoconsole --os-type=windows --os-variant=win2k8 --check all=off<br></code></pre></td></tr></table></figure><p>查看vnc端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">virsh vncdisplay ovirt-node-ng-installer-4.3.2<br></code></pre></td></tr></table></figure><p>使用vnc去连接安装系统</p><p>最后关闭系统后就可以使用QCOW2的镜像了</p>]]></content>
    
    
    
    <tags>
      
      <tag>kvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rsync</title>
    <link href="/2022/07/07/nohup%20rsync%20-avz%20varlibdocker%20data%20&amp;/"/>
    <url>/2022/07/07/nohup%20rsync%20-avz%20varlibdocker%20data%20&amp;/</url>
    
    <content type="html"><![CDATA[<h1 id="docker-数据-同步"><a href="#docker-数据-同步" class="headerlink" title="docker 数据 同步"></a>docker 数据 同步</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> rsync -avz /var/lib/docker /data/ &amp;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Newben3.0 一键部署详细安装文档</title>
    <link href="/2022/07/07/Newben3.0%20%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E8%AF%A6%E7%BB%86%E5%AE%89%E8%A3%85%E6%96%87%E6%A1%A3/"/>
    <url>/2022/07/07/Newben3.0%20%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E8%AF%A6%E7%BB%86%E5%AE%89%E8%A3%85%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Newben3-0-一键部署详细安装文档"><a href="#Newben3-0-一键部署详细安装文档" class="headerlink" title="Newben3.0 一键部署详细安装文档"></a>Newben3.0 一键部署详细安装文档</h1><p>本文档主要用于帮助用户在虚拟机或物理机上安装<code>newben3.0</code>的核心组件与安装<code>web</code>客户端。</p><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>[TOC]</p><h2 id="术语解释"><a href="#术语解释" class="headerlink" title="术语解释"></a>术语解释</h2><table><thead><tr><th align="left">术语</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>newben</code></td><td align="left"><code>newben</code>的核心组件之一，负责整个集群数据流转</td></tr><tr><td align="left"><code>NAI</code></td><td align="left"><code>NAI</code>为<code>newben</code>的核心组件之一，负责提供接口，供于<code>agent</code>调用，有多种不同类型的<code>NAI</code>实现。</td></tr><tr><td align="left"><code>LocalNAI</code></td><td align="left"><code>agent</code>所在节点上的<code>NAI</code>，一般为对<code>Docker</code>操作的<code>NAI</code>封装</td></tr><tr><td align="left"><code>WorkerSet</code></td><td align="left">系统中一种资源，每一个<code>WorkerSet</code>应当对应一个实际运行的<code>agent</code></td></tr></tbody></table><h2 id="配置要求"><a href="#配置要求" class="headerlink" title="配置要求"></a>配置要求</h2><ul><li><p>硬件需求</p><p>主机：</p><p>| 组件 | 最小CPU | 最小内存 | 作用 | | ————– | ——- | ——– | —————————- | | 数据节点 data | 4 Core | 8 Gi | 主要用于存储系统数据 | | coreserver节点 coreserver节点 | 1 Core | 1 Gi | 主要用于运行<code>coreserver节点</code>程序 | | bootstrap节点 bootstrap节点 | 1 Core | 1 Gi | 主要用于运行<code>bootstrap节点</code>程序 | | hub节点 hub | 1 Core | 1 Gi | 主要用于运行<code>hub</code>程序 | | web节点 web | 1 Core | 1 Gi | 主要用于运行<code>web</code>程序 | | log节点 log | 1 Core | 1 Gi | 主要用于运行<code>log</code>程序 | | etcd节点 etcd | 1 Core | 1 Gi | 主要用于运行<code>etcd</code>程序 | | proxy节点 proxy | 1 Core | 1 Gi | 主要用于运行<code>proxy</code>程序 | | seam节点 seam | 1 Core | 1 Gi | 主要用于运行<code>seam</code>程序 | | agent节点 agent | 1 Core | 1 Gi | 主要用于运行<code>agent</code>程序 |</p><p>注：</p><ul><li>至少需要两台Linux主机，其中一台作为数据存储与镜像仓库共用节点，一台作为<code>newben</code>节点。</li></ul></li><li><p>软件需求</p><p>| 软件 | 版本 | | —— | —————————– | | docker | 不跨大版本的情况下，&gt;&#x3D;19.03.8 | | etcd | 不跨大版本的情况下，&gt;&#x3D;3.3.10 | | rqlite | 不跨大版本的情况下，&gt;&#x3D;5.1.0 | | nginx | 不跨大版本的情况下，&gt;&#x3D;1.16.1 |</p></li><li><p>系统兼容性</p><p>| 架构 | 系统 | | —– | ———- | | amd64 + arm64 | Ubuntu 18.04 LTS |</p></li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>所有主机应当为全新环境。</li><li>本文档中所有命令示例，都是在安装包中<code>install</code>目录下执行的。</li><li>所有bash命令中，不同开头含义如下：<ul><li><code>$</code>：其后是需要执行的命令</li><li><code>#</code>：其后是注释</li><li>无：其后是上一命令输出或交互式命令的内容</li></ul></li><li>数据节点与日志节点只能有一个</li><li>所有命令需以root权限运行</li><li>集群内所有节点，除文档中的各程序外，尽量不以任何方式，启动其他程序</li><li>可以将各主机<code>DNS</code>换成对于自身较快的<code>DNS</code>服务器，加快下载速度</li><li>由于网络原因，脚本执行可能出现错误，此时重新执行该脚本即可</li><li>由于<code>pdf</code>格式限制，请不要直接复制代码执行，若想直接复制，可以查看<code>md</code>格式文档</li><li>由于需要为局域网内提供自动加入集群功能，需确保<code>UDP</code>协议的8873端口未被占用</li></ul><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><h3 id="设置固定IP"><a href="#设置固定IP" class="headerlink" title="设置固定IP"></a>设置固定<code>IP</code></h3><p>由于动态分配的<code>IP</code>可能发生变化，需要将集群中的所有主机的<code>IP</code>设置为固定<code>IP</code>。具体设置可参考<a href="http://192.168.12.244/newben/releases/preview/docs/static_ip.pdf">此文档</a>。</p><p>注：</p><ul><li>需要在集群中所有主机上配置</li></ul><h3 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h3><p>为了使各主机间可以正常通信，需要配置防火墙。此处仅介绍直接关闭防火墙方式，用户也可以自行以其他方式配置。</p><p>注：</p><ul><li>需要在集群中所有主机上配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 关闭防火墙 且 禁止防火墙开机自起</span><br>$  systemctl stop ufw &amp;&amp; systemctl <span class="hljs-built_in">disable</span> ufw &amp;&amp; systemctl status ufw<br></code></pre></td></tr></table></figure><h3 id="配置ssh服务"><a href="#配置ssh服务" class="headerlink" title="配置ssh服务"></a>配置ssh服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo sed -i <span class="hljs-string">&quot;s/^#PermitRootLogin.*$/PermitRootLogin yes/g&quot;</span> /etc/ssh/sshd_config<br>sudo systemctl restart sshd<br></code></pre></td></tr></table></figure><h3 id="配置seliux"><a href="#配置seliux" class="headerlink" title="配置seliux"></a>配置seliux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -i <span class="hljs-string">&#x27;s/SELINUX=enforcing/ELINUX=disabled/g&#x27;</span> /etc/selinux/config<br>setenforce 0<br></code></pre></td></tr></table></figure><h2 id="核心组件安装"><a href="#核心组件安装" class="headerlink" title="核心组件安装"></a>核心组件安装</h2><p>当前系统安装包分为在线与离线两个版本。若想使用在线安装包（即与此文档同级目录中的<code>online.tgz</code>文件），则必须可以连接到公司的镜像仓库（<code>registry.ghostcloud.cn</code> ），否则，请使用离线安装包（即与此文档同级目录中的<code>offline.tgz</code>文件）。</p><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>下载地址:</p><ul><li>公司内网可通过此<a href="http://192.168.2.243/newben3.0/install/releases">地址</a>, 选择对应版本进行下载</li></ul><p>请根据实际需要, 选择对应的安装包以及所需的资源文件进行下载。</p><table><thead><tr><th align="left">架构</th><th align="left">在线安装包</th><th align="left">离线安装包</th><th align="left">离线安装包所需系统资源</th><th align="left">私有仓库基础镜像</th></tr></thead><tbody><tr><td align="left"><code>arm64</code> + <code>amd64</code></td><td align="left"><code>online.tgz</code></td><td align="left"><code>offline.tgz</code></td><td align="left"><code>newben.tar</code></td><td align="left"><code>base.tar</code></td></tr></tbody></table><p>根据需要下载完安装包后，解压安装包文件（<code>online.tgz</code>或<code>offline.tgz</code>文件），得到一个名为<code>install</code>目录，通过执行此目录下安装程序，即可完成安装。</p><p>注意：</p><ul><li>若使用离线安装包，请同时下载此文档同级目录中的<code>newben.tar</code>，并将其拷贝到解压后的<code>install</code>目录下</li></ul><h3 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h3><p>编辑install目录下的config.yaml文件.</p><h4 id="日志等级"><a href="#日志等级" class="headerlink" title="日志等级"></a>日志等级</h4><p>编辑config.yaml中的logLevel字段,默认 info,设置此字段后，newben、web、hub、组件中的日志等级将会被设置成相应的日志等级。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">logLevel:</span> <span class="hljs-string">info</span>    <span class="hljs-comment"># 可选info/warning/debug/trace/panic/fatal       </span><br></code></pre></td></tr></table></figure><h4 id="启动节点ip"><a href="#启动节点ip" class="headerlink" title="启动节点ip"></a>启动节点ip</h4><p>编辑config.yaml中的localIp,设置为启动节点的ip,此ip需要集群中的所有节点均可访问.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">localIp:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.1</span><span class="hljs-number">.112</span>     <span class="hljs-comment"># 启动安装程序节点的ip</span><br></code></pre></td></tr></table></figure><h4 id="集群中的镜像仓库"><a href="#集群中的镜像仓库" class="headerlink" title="集群中的镜像仓库"></a>集群中的镜像仓库</h4><p>如果有必要，请修改集群中启动的registry domain.</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">registryDomain: registry.<span class="hljs-keyword">cluster</span>.<span class="hljs-keyword">local</span> # docker仓库节点的域名 默认为registry.<span class="hljs-keyword">cluster</span>.<span class="hljs-keyword">local</span><br></code></pre></td></tr></table></figure><h4 id="镜像设置"><a href="#镜像设置" class="headerlink" title="镜像设置"></a>镜像设置</h4><p>如果使用公司内网仓库,或者仓库中有全量的安装镜像,请设置existRegistryInfo.</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">exsitRegistryInfo:</span><br><span class="hljs-symbol">  domain:</span> registry.ghostcloud.cn<br><span class="hljs-symbol">  userName:</span> xxxx<br><span class="hljs-symbol">  password:</span> xxxxx<br></code></pre></td></tr></table></figure><p>如果是使用的镜像仓库中的镜像,请更改为对应的镜像仓库名称,如图所示是使用镜像仓库中的镜像安装.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">moduleImages:</span> <span class="hljs-comment"># 此次安装指定的镜像,必填</span><br>  <span class="hljs-attr">etcd:</span> <span class="hljs-string">&quot;registry.ghostcloud.cn/newben/etcd:v3.4.12&quot;</span><br>  <span class="hljs-attr">registry:</span> <span class="hljs-string">&quot;registry.ghostcloud.cn/newben/registry:2.7.1&quot;</span><br>  <span class="hljs-attr">rqlite:</span> <span class="hljs-string">&quot;registry.ghostcloud.cn/newben/rqlite:5.4.0&quot;</span><br>  <span class="hljs-attr">web:</span> <span class="hljs-string">&quot;registry.ghostcloud.cn/newben/newben-web:develop&quot;</span><br>  <span class="hljs-attr">newben:</span> <span class="hljs-string">&quot;registry.ghostcloud.cn/newben/newben:develop&quot;</span><br>  <span class="hljs-attr">calico:</span> <span class="hljs-string">&quot;registry.ghostcloud.cn/newben/calico-node:v3.15.0&quot;</span><br>  <span class="hljs-attr">calicoCtl:</span> <span class="hljs-string">&quot;registry.ghostcloud.cn/newben/calico-ctl:v3.15.0&quot;</span><br>  <span class="hljs-attr">calicoLibnetwork:</span> <span class="hljs-string">&quot;registry.ghostcloud.cn/newben/libnetwork-plugin:v2.6&quot;</span><br>  <span class="hljs-attr">log:</span> <span class="hljs-string">&quot;registry.ghostcloud.cn/newben/log:master&quot;</span><br>  <span class="hljs-attr">chrony:</span> <span class="hljs-string">&quot;registry.ghostcloud.cn/newben/chrony:v3.5&quot;</span><br>  <span class="hljs-attr">webBinfmt:</span> <span class="hljs-string">registry.ghostcloud.cn/newben/binfmt:latest</span><br>  <span class="hljs-attr">webBuildkit:</span> <span class="hljs-string">registry.ghostcloud.cn/newben/buildkit:buildx-stable-1</span><br>  <span class="hljs-attr">proxy:</span> <span class="hljs-string">registry.ghostcloud.cn/newben/proxy:develop</span><br>  <span class="hljs-attr">seam:</span> <span class="hljs-string">registry.ghostcloud.cn/newben/seam:develop</span><br>  <span class="hljs-attr">agent:</span> <span class="hljs-string">registry.ghostcloud.cn/newben/agent:develop</span><br>  <span class="hljs-attr">docker-nai:</span> <span class="hljs-string">registry.ghostcloud.cn/newben/docker-nai:develop</span><br></code></pre></td></tr></table></figure><p>若使用完全离线安装的方式，请将各镜像中的地址，替换为设置的<code>registryDomain</code>。</p><h4 id="节点设置"><a href="#节点设置" class="headerlink" title="节点设置"></a>节点设置</h4><p>需要在配置文件中填入节点的信息,用于安装程序使用.除了基本的节点账号信息,还需要填入节点的组件信息,目前集群由一下组件组成:</p><table><thead><tr><th align="left">组件</th><th align="left">组件说明</th></tr></thead><tbody><tr><td align="left">data</td><td align="left">安装程序会在这个节点上启动集群的数据服务,包含etcd,rqlite和镜像仓库,节点要求见配置要求</td></tr><tr><td align="left">coreserver</td><td align="left">这是集群的核心组件,提供资源操作api,节点要求见配置要求</td></tr><tr><td align="left">bootstrap</td><td align="left">这是集群的核心组件,提供资源控制,节点要求见配置要求</td></tr><tr><td align="left">web</td><td align="left">提供页面访问的组件,节点要求见配置要求</td></tr><tr><td align="left">proxy</td><td align="left">这是对外暴露集群服务的组件,装有此组件的节点可对外暴露服务,节点要求见配置要求</td></tr><tr><td align="left">seam</td><td align="left">这是docker跨节点网络插件,节点要求见配置要求</td></tr><tr><td align="left">log</td><td align="left">这是集群中的日志收集组件,所有组件产生的日志会由此组件收集,节点要求见配置要求</td></tr><tr><td align="left">etcd</td><td align="left">这是集群数据库节点,节点要求见配置要求</td></tr></tbody></table><p>所以data节点的配置尽量可以高一点达到4C8G(cpu4 核,内存8G),其他组件的要求在1C1G即可.</p><h3 id="启动安装程序"><a href="#启动安装程序" class="headerlink" title="启动安装程序"></a>启动安装程序</h3><p>配置完<code>config.yaml</code>文件后，复制和安装机架构相同的可执行文件至安装包根目录(<code>install</code>目录)，各架构对应命令如下：</p><ul><li><p><code>amd64</code>架构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cp</span> bin/linux-amd64/nbd .<br></code></pre></td></tr></table></figure></li><li><p><code>arm64</code>架构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cp</span> bin/linux-arm64/nbd .<br></code></pre></td></tr></table></figure></li></ul><p>最后完整的目录结构应该是:</p><ul><li>install<ul><li>bin</li><li>config.yaml</li><li>nbd</li><li>push_base.sh</li><li>start_http.sh</li><li>ubuntu-repo</li><li>newben.tar(离线安装时存在)</li></ul></li></ul><p>如果需要配置workerset的信息，请填写字段bootstrap.agents实例如下。</p><ul><li>虚拟机节点(vm)和容器节点(container)不能同时出现在一个节点上。</li><li>安装时默认是容器节点，如果是虚拟机节点请配置这个节点的workerset配置文件，worker的naiType设置为vm，如下：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">agents:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">ip:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.5</span><span class="hljs-number">.199</span><br>    <span class="hljs-attr">workerSet:</span><br>      <span class="hljs-attr">meta:</span><br>        <span class="hljs-attr">domain:</span> <span class="hljs-string">apps</span><br>        <span class="hljs-attr">kind:</span> <span class="hljs-string">workerset</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">node-5-199</span><br>      <span class="hljs-attr">spec:</span><br>        <span class="hljs-attr">config:</span><br>          <span class="hljs-attr">appMonitorInterval:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">boxGCInterval:</span> <span class="hljs-number">30</span><br>          <span class="hljs-attr">forceSyncInterval:</span> <span class="hljs-number">2</span><br>          <span class="hljs-attr">heartTimeInterval:</span> <span class="hljs-number">5000</span><br>          <span class="hljs-attr">heartTimeout:</span> <span class="hljs-number">15000</span><br>          <span class="hljs-attr">workerMonitorInterval:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">workers:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">availableBox:</span> <span class="hljs-number">20</span><br>            <span class="hljs-attr">heartTimeInterval:</span> <span class="hljs-number">5000</span><br>            <span class="hljs-attr">heartTimeOut:</span> <span class="hljs-number">15000</span><br>            <span class="hljs-attr">naiHardware:</span> <span class="hljs-string">local</span><br>            <span class="hljs-attr">naiType:</span> <span class="hljs-string">container</span>    <span class="hljs-comment">#可选的选项有container,vm</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">node-5-199</span><br></code></pre></td></tr></table></figure><p>执行安装前,请确保每一个节点的apt-get install是正常使用的,未被其他程序占用</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">ps</span> <span class="hljs-literal">-ef</span> |grep apt<br></code></pre></td></tr></table></figure><p>如果存在占用的程序,请手动kill掉,或者等待其完成安装. 然后执行命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">./nbd -c config.yaml install</span><br></code></pre></td></tr></table></figure><h3 id="安装完成后启动http服务"><a href="#安装完成后启动http服务" class="headerlink" title="安装完成后启动http服务"></a>安装完成后启动http服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ bash start_http.sh<br><span class="hljs-comment"># 查看状态</span><br><span class="hljs-variable">$systemctl</span> status nbd-http <span class="hljs-comment">#状态为running即为正常</span><br></code></pre></td></tr></table></figure><h3 id="基础镜像准备"><a href="#基础镜像准备" class="headerlink" title="基础镜像准备"></a>基础镜像准备</h3><p>由于部分功能，集群内镜像仓库需要包含一些基础镜像，将<code>base.tar</code>拷贝到设置的<code>data</code>节点上，并拷贝<code>install</code>目录下的<code>push_bash.sh</code>脚本到该节点的，与<code>base.tar</code> 同级的目录中，然后在该节点上，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ bash push_base.sh [domain] base.tar<br></code></pre></td></tr></table></figure><p>domain是在config.yaml中设置的镜像仓库domain,如果是默认的registry.cluster.local就不用填入， base.tar 是基础镜像的压缩包，默认为base.tar，两个参数只能都填或者都不填入使用默认</p><h2 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h2><h3 id="用户主动添加节点"><a href="#用户主动添加节点" class="headerlink" title="用户主动添加节点"></a>用户主动添加节点</h3><p>必须保证配置文件 <code>install</code> 目录下的文件结构完整,即安装时的目录结构不能缺失和被更改. 把需要添加的节点信息填入<code>config.yaml</code>中的nodes中,如果需要配置<code>workerset</code> 的信息，请填写字段<code>bootstrap.agents</code>。保存. 执行命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ./nbd add ip1 ip2<br></code></pre></td></tr></table></figure><p><code>ip1</code> <code>ip2</code>是需要添加的节点的<code>ip</code>,目前只能加入<code>newben</code>节点。</p><h3 id="自动加入局域网内已有集群"><a href="#自动加入局域网内已有集群" class="headerlink" title="自动加入局域网内已有集群"></a>自动加入局域网内已有集群</h3><ol><li><p>将与已有集群相同版本的安装包，拷贝到需要加入集群的主机，解压安装包，获得<code>install</code>目录</p></li><li><p>关闭该节点防火墙若需要完全离线安装，需要将newben.tar也移入install目录中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 关闭防火墙 且 禁止防火墙开机自起</span><br>$ systemctl stop ufw &amp;&amp; systemctl <span class="hljs-built_in">disable</span> ufw &amp;&amp; systemctl status ufw<br></code></pre></td></tr></table></figure></li><li><p>进入 <code>install</code> 目录，根据对应架构，执行如下命令</p><ul><li><p><code>amd64</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ./bin/linux-amd64/nbd-agent search<br></code></pre></td></tr></table></figure></li><li><p><code>arm64</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ./bin/linux-arm64/nbd-agent search<br></code></pre></td></tr></table></figure></li></ul></li></ol><p>注意事项：</p><ul><li>当前仅支持加入<code>newben</code>节点</li><li>当前加入节点仅支持<code>container</code>类型，不支持<code>vm</code>类型节点的自动加入</li></ul><h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><p>必须保证配置文件 install 目录下的文件结构完整,即安装时的目录结构不能缺失和被更改,目前只允许删除agent节点,如果删除导致集群不可用,请重新执行安装程序,不更换数据节点数据不会丢失. 执行命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">./nbd delete ip1 ip2</span><br></code></pre></td></tr></table></figure><p>ip1、ip2是需要从集群中删除的节点ip,可以有多个,每个ip间以空格隔开. 删除完成后需要手动更新配置文件删除将其中需要删除的节点信息删除.</p><h2 id="更新组件"><a href="#更新组件" class="headerlink" title="更新组件"></a>更新组件</h2><p>必须保证配置文件 install 目录下的文件结构完整,即安装时的目录结构不能缺失和被更改.此功能是提供给开发测试人员更新集群使用. 执行命令:</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">$ ./nbd update <span class="hljs-keyword">module</span><span class="hljs-number">1</span> <span class="hljs-keyword">module</span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>module1 module2是组件名称,以空格分隔,目前支持的组件有[newben、web、hub].</p>]]></content>
    
    
    <categories>
      
      <category>ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>newben</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
